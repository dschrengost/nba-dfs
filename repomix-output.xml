This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.claude/
  agents/
    frontend-ui-builder.md
  commands/
    code-review.md
    end-prp.md
    end.md
    execute-prp.md
    generate-prp.md
  settings.local.json
.codex/
  config.toml
.github/
  workflows/
    ci.yml
.serena/
  memories/
    project_overview.md
    style_and_conventions.md
    suggested_commands.md
    task_completion.md
  .gitignore
  project.yml
app/
  (studio)/
    field/
      page.tsx
    optimizer/
      page.tsx
    simulator/
      page.tsx
    variants/
      page.tsx
  api/
    optimize/
      route.ts
    runs/
      [slate]/
        [module]/
          [run_id]/
            route.ts
      route.ts
  icon.svg
  layout.tsx
  page.tsx
  README.md
artifacts/
  audit_fs.md
  field_base.jsonl
  field_merged.jsonl
  metrics.json
components/
  aceternity/
    SpotlightWrapper.tsx
  lineups/
    LineupTable.tsx
    LineupToolbar.tsx
    LineupViews.tsx
  metrics/
    IngestSummary.tsx
    RunSummary.tsx
  runs/
    LoadRunModal.tsx
  theme/
    ThemeProvider.tsx
    ThemeToggle.tsx
  ui/
    badge.tsx
    button.tsx
    card.tsx
    collapsible.tsx
    ControlsBar.tsx
    dropdown-menu.tsx
    dropzone.tsx
    input.tsx
    LineupGrid.tsx
    LineupGridPlaceholder.tsx
    MetricsDrawer.tsx
    PageContainer.tsx
    scroll-area.tsx
    separator.tsx
    sheet.tsx
    skeleton.tsx
    slider.tsx
    sonner.tsx
    table.tsx
    tabs.tsx
    toggle.tsx
    tooltip.tsx
    TopStatusBar.tsx
    TopTabs.tsx
    UploadDropzone.tsx
  README.md
configs/
  field.yaml
  optimizer.yaml
  README.md
  sim.yaml
  variants.yaml
  yamllint.yml
docs/
  legacy/
    LEGACY-OPTIMIZER.md
    SYMBOLS-TO-KEEP.md
  PRPs/
    AGENT-Frontend-Shadcn.md
    PRP-0_pipeline_schema_pack
    PRP-1-Ingest-Normalization.md
    PRP-10-API-Endoints-Pydantic.md
    PRP-11-Expanded-API-Endpoints.md
    PRP-12-API-Endpoints-Followup.md
    PRP-1a-Ingest-Enum.md
    PRP-1b-Runtime-Validation.md
    PRP-1c-Ingest-Docs.md
    PRP-2-Optimizer-Adapter-TAILORED.md
    PRP-2L-Legacy-Docs-and-DeUI-Plan.md
    PRP-3-Variant-Adapter.md
    PRP-3a-Variants-Adapter-Polish.md
    PRP-4-Field-Sampler-Adapter.md
    PRP-5-GPP-Sim-Adapter.md
    PRP-6-Orchestrator-and-E2E.md
    PRP-7-DK-Export-from-Sim.md
    PRP-8-Metrics-Framework.md
    PRP-9-API-Layer.md
    PRP-FS-01-Field-Sampler-Injection-Model-20250909-003232.md
    PRP-FS-02-Field-Sampler.md
    PRP-FS-04-FIELD_SAMPLER_DUPLICATION_AUDIT.md
    PRP-FS-05-Field-Sampler-Unification.md
    PRP-FS-07-Lint-Test-Stabilization-Agent.md
    PRP-GPP-01-Minimal-Contest-Simulator-20250909-041953.md
    PRP-INGEST-03.md
    PRP-INGEST-03B.md
    PRP-OPT-04.md
    PRP-OPT-04A.md
    PRP-OPT-05.md
    PRP-OPT-06.md
    PRP-OPT-06A.md
    PRP-OPT-06B.md
    PRP-OPT-06C-update.md
    PRP-OPT-06C-UX-RunSummary-UI-Polish.md
    PRP-OPT-06C.md
    PRP-PIPE-00-Pipeline-Overview-20250909-003232.md
    PRP-RUNS-01-Load-And-Retention.md
    PRP-RUNS-02-Run-Registry.md
    PRP-UX-SHELL-01.md
    PRP-UX-STATES-02.md
    PRP-VAL-01-Shared-Validator.md
    PRP-VB-01-v2-Variant-Builder-Contract-20250909-003735.md
  runs/
    README.md
  FS-04-Field-Sampler-Duplication-Report.md
  Optimizer_page_audit.md
  README.md
  USAGE-field-sampler.md
e2e/
  dark-mode.spec.ts
  lineup-table.spec.ts
  optimizer-settings.spec.ts
field_sampler/
  __init__.py
  engine.py
fixtures/
  dk/
    2024-01-15/
      mergedPlayers.json
      mergedPlayers.with_own.json
      mergedPlayers.with_own.test.json
  player_ids.csv
  projections.csv
hooks/
  useRosterMap.ts
lib/
  csv/
    exportLineups.ts
  domain/
    types.ts
  ingest/
    __tests__/
      dk-ingest.spec.ts
      ingest.spec.ts
    adapter.ts
    aliases.ts
    normalize.ts
    parse.ts
    schemas.ts
  opt/
    __tests__/
      greedy.spec.ts
    algorithms/
      greedy.ts
    config.ts
    constraints.ts
    fixtures.ts
    run.ts
    types.ts
  runs/
    api.ts
  state/
    ingest-store.ts
    run-store.ts
  table/
    columns.tsx
  ui/
    a11y.ts
    constants.ts
    layout.ts
  README.md
  utils.ts
pipeline/
  ingest/
    mappings/
      example_source.yaml
      README.md
    __init__.py
    __main__.py
    cli.py
    README.md
  io/
    __init__.py
    files.py
    validate.py
  registry/
    __init__.py
    README.md
  schemas/
    common.types.yaml
    contest_structure.schema.yaml
    field_metrics.schema.yaml
    field.schema.yaml
    manifest.schema.yaml
    metrics.schema.yaml
    optimizer_lineups.schema.yaml
    optimizer_metrics.schema.yaml
    players.schema.yaml
    portfolio.schema.yaml
    projections_normalized.schema.yaml
    projections_raw.schema.yaml
    README.md
    runs_registry.schema.yaml
    sim_metrics.schema.yaml
    sim_results.schema.yaml
    slates.schema.yaml
    variant_catalog.schema.yaml
    variant_metrics.schema.yaml
  __init__.py
  README.md
processes/
  api/
    __init__.py
    app.py
    models.py
  dk_export/
    __init__.py
    __main__.py
    writer.py
  field_sampler/
    _legacy/
      field_sampler.py
    __init__.py
    __main__.py
    adapter.py
    injection_model.py
    README.md
  gpp_sim/
    _legacy/
      nba_gpp_simulator.py
    __main__.py
    adapter.py
    engine.py
    io_schemas.py
  metrics/
    __init__.py
    __main__.py
    adapter.py
    README.md
  optimizer/
    _legacy/
      solvers/
        __init__.py
        cpsat_solver.py
      cpsat_solver.py
      dk_data_loader.py
      dk_strict_results.py
      nba_optimizer_functional.py
      optimize.py
      pruning.py
      README.md
      types.py
    __init__.py
    __main__.py
    adapter.py
    model_spec.py
    README.md
    types.py
  orchestrator/
    __init__.py
    __main__.py
    adapter.py
    README.md
  variants/
    _legacy/
      variant_builder.py
    __init__.py
    __main__.py
    adapter.py
    README.md
  __init__.py
  README.md
runs/
  25-09-07_225130/
    optimizer/
      25-09-07_233738__feat-prp-runs-01/
        artifacts/
          diagnostics_json
          lineups_json
          summary_json
        run_meta.json
      25-09-07_233819__feat-prp-runs-01/
        artifacts/
          diagnostics_json
          lineups_json
          summary_json
        run_meta.json
      25-09-09_165524__main/
        artifacts/
          diagnostics_json
          lineups_json
          summary_json
        run_meta.json
  25-09-07_225959/
    optimizer/
      25-09-07_225959__feat-prp-runs-01/
        artifacts/
          summary_json
        run_meta.json
  25-09-07_230939/
    optimizer/
      25-09-07_230939__feat-prp-runs-01/
        artifacts/
          summary_json
        run_meta.json
scripts/
  pyopt/
    optimize_cli.py
  make-fixture-snapshot.mjs
  qa-opt-fixture.mjs
  README.md
src/
  runs/
    __init__.py
    api.py
  variant_builder/
    __init__.py
  __init__.py
styles/
  globals.css
tests/
  fixtures/
    dk/
      2024-01-15/
        DKEntries(live).csv
        player_ids.csv
        projections.csv
    gpp/
      contest.csv
      lineups.csv
    contest_structure.csv
    dk_entries_template.csv
    mini_slate.csv
    player_ids.csv
    projections_sourceA.csv
    projections_sourceB.csv
    stub_field_sampler.py
    stub_simulator.py
  conftest.py
  README.md
  test_api_endpoints.py
  test_api_smoke.py
  test_api_validation.py
  test_dk_entries_writer_roundtrip.py
  test_dk_export_dedupe.py
  test_dk_export_discovery_from_run.py
  test_dk_export_from_sim_topn.py
  test_dk_export_header_order.py
  test_field_adapter_smoke.py
  test_field_dedup_and_diversity.py
  test_field_failfast_no_write.py
  test_field_manifest_registry.py
  test_field_run_id_determinism.py
  test_field_sampler_engine.py
  test_field_sampler_injection.py
  test_field_verbose_and_schemas_root.py
  test_gpp_sim_cli.py
  test_gpp_sim_engine.py
  test_ingest_normalize_smoke.py
  test_lineup_rules.py
  test_manifest_registry_write.py
  test_metrics_determinism.py
  test_metrics_failfast.py
  test_metrics_smoke.py
  test_optimizer_adapter_smoke.py
  test_optimizer_export_dk_csv.py
  test_optimizer_failfast_no_write.py
  test_optimizer_manifest_registry.py
  test_optimizer_ownership_penalty_flag.py
  test_optimizer_run_id_determinism.py
  test_optimizer_verbose_and_schemas_root.py
  test_orchestrator_dry_run.py
  test_orchestrator_smoke.py
  test_priority_latest_wins.py
  test_run_registry.py
  test_runtime_validation.py
  test_schemas_valid.py
  test_sim_adapter_smoke.py
  test_sim_failfast_no_write.py
  test_sim_manifest_registry.py
  test_sim_metrics_shapes.py
  test_sim_run_id_determinism.py
  test_sim_verbose_and_schemas_root.py
  test_variant_builder_contract.py
  test_variants_adapter_smoke.py
  test_variants_bad_yaml_config.py
  test_variants_exposure_caps.py
  test_variants_failfast_duplicate_players.py
  test_variants_failfast_no_write.py
  test_variants_failfast_salary_cap.py
  test_variants_manifest_registry.py
  test_variants_registry_missing_columns.py
  test_variants_run_id_determinism.py
  test_variants_verbose_and_schemas_root.py
tools/
  sample_field.py
validators/
  lineup_rules.py
workers/
  optimizer.worker.ts
.env.example
.env.local
.gitignore
.python-version
AGENTS.md
audit_fs.md
CLAUDE.md
components.json
next-env.d.ts
next.config.mjs
package.json
playwright.config.ts
postcss.config.js
PR_BODY.md
pyproject.toml
README.md
tailwind.config.ts
tsconfig.json
vitest.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".claude/settings.local.json">
{
  "permissions": {
    "allow": [
      "Bash(uv sync:*)",
      "Bash(python:*)",
      "Bash(uv run:*)",
      "Bash(mypy:*)"
    ],
    "deny": [],
    "ask": []
  }
}
</file>

<file path=".claude/agents/frontend-ui-builder.md">
---
name: frontend-ui-builder
description: Use this agent when you need to create or enhance React/Next.js user interfaces, including building new components, implementing forms with validation, creating data tables, adding theming, or improving user experience with polished interactions. Examples: <example>Context: User needs a new dashboard page with data visualization components. user: 'I need to create a dashboard page that shows NBA player statistics in a sortable table with filters' assistant: 'I'll use the frontend-ui-builder agent to create a comprehensive dashboard with TanStack Table, filtering capabilities, and proper loading states' <commentary>Since this involves creating new UI components and data tables, use the frontend-ui-builder agent to implement the dashboard with proper React patterns and shadcn/ui components.</commentary></example> <example>Context: User wants to add a form for user preferences with validation. user: 'Can you add a settings form where users can update their DFS preferences with proper validation?' assistant: 'I'll use the frontend-ui-builder agent to create a settings form with React Hook Form and Zod validation' <commentary>This requires form implementation with validation, which is exactly what the frontend-ui-builder agent specializes in.</commentary></example>
model: sonnet
color: purple
---

You are a Frontend UI Architect, an expert in crafting exceptional React/Next.js user interfaces using modern tooling and best practices. You specialize in building production-ready components with shadcn/ui, Radix primitives, and Tailwind CSS.

**Your Core Expertise:**
- **Component Architecture**: Design reusable, composable React components following atomic design principles
- **shadcn/ui Integration**: Leverage Radix primitives with Tailwind for accessible, customizable UI components
- **Form Engineering**: Implement robust forms using React Hook Form + Zod with proper validation and error handling
- **Data Presentation**: Build sophisticated tables using TanStack Table with sorting, filtering, pagination, and virtualization
- **Theming Systems**: Implement consistent theming with next-themes, CSS variables, and dark/light mode support
- **UX Polish**: Create smooth interactions with dialogs, sheets, toasts, loading states, empty states, and error boundaries
- **Accessibility**: Ensure keyboard navigation, screen reader support, and WCAG compliance

**Technical Standards:**
- Use TypeScript with strict typing for all components and props
- Follow the project's existing patterns from the monorepo structure
- Implement proper error boundaries and loading states for all async operations
- Create components that work seamlessly with the NBA DFS data pipeline
- Use Vitest and React Testing Library for component testing
- Follow conventional commit format and Git workflow (feature branch → small commits → PR)

**Implementation Approach:**
1. **Analyze Requirements**: Understand the UI/UX needs and data flow requirements
2. **Design Component Structure**: Plan the component hierarchy and state management
3. **Build with Best Practices**: Implement using shadcn/ui components, proper TypeScript interfaces, and accessibility features
4. **Add Polish**: Include loading states, error handling, empty states, and smooth animations
5. **Test Thoroughly**: Write component tests and ensure keyboard accessibility
6. **Document Briefly**: Create concise component READMEs with usage examples

**Quality Checklist:**
- All components are fully typed with TypeScript interfaces
- Forms use React Hook Form + Zod with proper validation messages
- Tables implement sorting, filtering, and proper data handling
- Loading, error, and empty states are handled gracefully
- Components are keyboard accessible and screen reader friendly
- Theming works correctly in both light and dark modes
- No unnecessary dependencies are added without consultation
- Code follows the project's existing patterns and conventions

**Scope Boundaries:**
- Focus exclusively on frontend UI/UX implementation
- Do not modify backend APIs or data processing logic unless explicitly requested
- Ask before adding heavy libraries or changing core dependencies
- Respect the project's existing architecture and data contracts

**Communication Style:**
- Provide clear explanations of design decisions and trade-offs
- Suggest UX improvements when relevant to the task
- Ask clarifying questions about specific requirements or constraints
- Offer alternatives when the initial approach might not be optimal

You will create polished, accessible, and maintainable React components that integrate seamlessly with the NBA DFS platform while following modern frontend development best practices.
</file>

<file path=".claude/commands/code-review.md">
---
description: Short Zen MCP code review with GPT-5 for a recent feature (glaring issues only)
argument-hint: "[path-or-glob] (optional) — limit review to files under this path/glob"
allowed-tools: Bash(git rev-parse:*), Bash(git log:*), Bash(git diff:*), Bash(git ls-files:*)
---

## Context to load (brief)

- Current HEAD: !`git rev-parse --short HEAD`
- Last commit: !`git log -1 --pretty=format:%h%x20%ad%x20%s --date=short`
- Changed files (HEAD~1..HEAD):
  !`git diff --name-only HEAD~1..HEAD`
- Scope argument (if any): $ARGUMENTS
  <!-- If listing matches is needed and $ARGUMENTS is not empty, you can keep this line; otherwise remove it to avoid huge output -->
  <!-- Tracked files under scope (may be empty): -->
  <!-- !`git ls-files -- "$ARGUMENTS"` -->

> Keep context tight: do **not** paste full file bodies. Rely on Zen’s codereview tool to fetch what it needs.

## Your task (use Zen MCP)

Use the **Zen MCP** `codereview` workflow to perform a **short** review of the recently implemented feature.

**Constraints & tone**
- This app is creator-use only. Prioritize *glaring* issues:
  - logic bugs, broken flows, obvious API misuse
  - data handling pitfalls that would bite even in solo use
  - perf foot-guns (N+1s, O(n²) in hot paths), dangerous defaults
  - missing basic error handling or validation where failure is likely
- De-emphasize enterprise hardening unless egregious even for solo use.
- Be concise. ~10 bullets or fewer.

**Scope**
- Prefer files changed in `HEAD~1..HEAD`.
- If `$ARGUMENTS` is provided, restrict the review to files under that path/glob.

**How to run via MCP**
- Invoke the Zen MCP `codereview` with the above context.
- Ask Zen to keep output focused and short (bullet list + top 3 fixes).
- If needed, request targeted diffs for specific files/regions rather than whole files.

## Output format

**Summary (2–3 lines maximum)**  
- One-liner risk profile  
- Quick confidence level

**Findings (bulleted, highest impact first)**  
- `[Impact] Finding — file:line — brief why-it-matters / quick fix`  

**Top 3 Actions**  
1) …  
2) …  
3) …
</file>

<file path=".claude/commands/end-prp.md">
/end-prp Command


Purpose

This command finalizes a PRP phase and updates project docs.

Steps

Confirm PRP completion

Ask user: “Which PRP number is complete?”
Ask user: “What’s the PRP title?”
Generate PRP doc
Copy PRPs/PRP_complete_template.md → PRPs/PRP-XX-COMPLETE.md.
Fill in with details from the user (objectives, implementation, validation, final state, next steps).
Set the title: # PRP-XX – COMPLETE.
Update README.md

Add an entry under Project Progress:
✅ PRP-XX – [TITLE]

Ask user about git actions
Prompt: “Do you want to commit changes to git? (y/n)”
If yes → stage and commit with message:
git add PRPs/PRP-XX-COMPLETE.md README.md
git commit -m "Finalize PRP-XX: COMPLETE"
Prompt: “Do you want to push changes to GitHub? (y/n)”
If yes →
git push origin <current_branch>

Final confirmation
Print:
🎉 PRP-XX COMPLETE and documentation updated.
</file>

<file path=".claude/commands/end.md">
---
description: End the current Claude session by committing changes, updating docs, and preparing CLAUDE.md context
argument-hint: "[commit-message] (optional) — use a custom commit message"
allowed-tools: Bash(git add:*), Bash(git commit:*), Bash(git push:*), Bash(git status:*), Bash(git diff:*), Bash(git log:*)
---

## Wrap-up Tasks

Claude, you are ending this session. Do the following in order:

1. **Stage & Commit Changes**
   - Run `git status` to confirm modified files.  
   - Stage all modified + new files with `git add -A`.  
   - Commit with the message:
     - If `$ARGUMENTS` provided → `"session end: $ARGUMENTS"`
     - Else → `"session end: update project and docs"`

2. **Update Relevant Docs**
   - Review if any changes require doc updates:
     - `README.md`
     - `/docs/` folder
     -CLAUDE.md
     -CLAUDE
     - Other feature-related docs
   - Make minimal updates (usage, config, known issues).
   - Stage & amend the same commit if docs updated.

3. **Update CLAUDE.md**
   - Ensure CLAUDE.md has:
     - Current project state (new features, config changes).
     - Any gotchas / quirks future Claude sessions must know.
     - Next-step recommendations.
   - Keep it concise but sufficient for continuity.
   - Amend commit with updated CLAUDE.md.

4. **Push to Repo**
   - Run `git push` to sync changes.

## Output

After finishing, output:

**Session Ended**  
- Commit: `<commit hash>`  
- Updated: `[list of key files]`  
- Notes: “Future Claude sessions should pick up from CLAUDE.md”
</file>

<file path=".claude/commands/execute-prp.md">
Execute BASE PRP

Implement a feature using using the PRP file.

PRP File: $ARGUMENTS

Execution Process

Load PRP

Read the specified PRP file
Understand all context and requirements
Follow all instructions in the PRP and extend the research if needed
Ensure you have all needed context to implement the PRP fully
Do more web searches and codebase exploration as needed
ULTRATHINK

Think hard before you execute the plan. Create a comprehensive plan addressing all requirements.
Break down complex tasks into smaller, manageable steps using your todos tools.
Use the TodoWrite tool to create and track your implementation plan.
Identify implementation patterns from existing code to follow.
Execute the plan

**Checkout a new feature branch on git**

Execute the PRP
Implement all the code
Validate

Run each validation command
Fix any failures
Re-run until all pass
Complete

Ensure all checklist items done
Run final validation suite
Report completion status
Read the PRP again to ensure you have implemented everything
Reference the PRP

You can always reference the PRP again if needed
Note: If validation fails, use error patterns in PRP to fix and retry.
</file>

<file path=".claude/commands/generate-prp.md">
Create PRP

Feature file: INITIAL.md

Generate a complete PRP for general feature implementation with thorough research. Ensure context is passed to the AI agent to enable self-validation and iterative refinement. Read the feature file first to understand what needs to be created, how the examples provided help, and any other considerations.

The AI agent only gets the context you are appending to the PRP and training data. Assuma the AI agent has access to the codebase and the same knowledge cutoff as you, so its important that your research findings are included or referenced in the PRP. The Agent has Websearch capabilities, so pass urls to documentation and examples.

Research Process

Codebase Analysis

Search for similar features/patterns in the codebase
Identify files to reference in PRP
Note existing conventions to follow
Check test patterns for validation approach
External Research

Search for similar features/patterns online
Library documentation (include specific URLs)
Implementation examples (GitHub/StackOverflow/blogs)
Best practices and common pitfalls
User Clarification (if needed)

Specific patterns to mirror and where to find them?
Integration requirements and where to find them?
PRP Generation

Using PRPs/templates/prp_base.md as template:

Critical Context to Include and pass to the AI agent as part of the PRP

Documentation: URLs with specific sections
Code Examples: Real snippets from codebase
Gotchas: Library quirks, version issues
Patterns: Existing approaches to follow
Implementation Blueprint

Start with pseudocode showing approach
Reference real files for patterns
Include error handling strategy
list tasks to be completed to fullfill the PRP in the order they should be completed
Validation Gates (Must be Executable) eg for python

# Syntax/Style
ruff check --fix && mypy .

# Unit Tests
uv run pytest tests/ -v
*** CRITICAL AFTER YOU ARE DONE RESEARCHING AND EXPLORING THE CODEBASE BEFORE YOU START WRITING THE PRP ***

*** ULTRATHINK ABOUT THE PRP AND PLAN YOUR APPROACH THEN START WRITING THE PRP ***

**CONSULT GPT-5 VIA ZEN MCP SERVER WHEN NECESSARY*

Output

Save as: PRPs/{feature-name}.md

Quality Checklist

 All necessary context included
 Validation gates are executable by AI
 References existing patterns
 Clear implementation path
 Error handling documented
Score the PRP on a scale of 1-10 (confidence level to succeed in one-pass implementation using claude codes)

Remember: The goal is one-pass implementation success through comprehensive context.
</file>

<file path=".codex/config.toml">
# .codex/config.toml for nba-dfs project
# Project-local MCP servers override any global settings

[mcp_servers.shadcn]
command = "npx"
args = ["-y", "shadcn", "mcp"]
# Allow UI scaffolding writes
allowed_paths = ["./app", "./components", "./lib", "./styles", "./configs", "./docs", "./tests"]

[mcp_servers.framelink_figma]
command = "npx"
args = ["-y", "figma-developer-mcp", "--stdio"]
# Environment is inherited; set FIGMA_API_KEY in your shell or .env
allowed_paths = ["./app", "./components", "./lib", "./styles", "./configs", "./docs", "./tests"]
</file>

<file path=".serena/memories/project_overview.md">
Project: NBA-DFS (nba-dfs)

Purpose: Data pipeline and tools for NBA Daily Fantasy Sports. Focus on deterministic, seed-controlled runs, strict data contracts, and clean repo hygiene.

Tech Stack:
- Python (version: latest on dev box; avoid 3.13-only unless needed)
- Libraries: pandas, duckdb, pyarrow, pydantic, streamlit
- Env/locking: uv (uses uv.lock)
- Lint/Format/Type: ruff, black, mypy (per AGENTS.md; not yet configured in pyproject)

Repo Structure (current):
- pipeline/ — ingestion, normalization, registry, schemas (schemas planned under pipeline/schemas)
- processes/ — optimizer, variant builder, field sampler, simulator
- app/ — future Streamlit/Dash UI
- data/ — parquet store (gitignored; read-only to agent)
- docs/ — PRPs and design notes (e.g., PRP-0 schema pack)
- tests/ — currently empty
- .serena/ — Serena project config

Key Contracts (from AGENTS.md + PRP-0):
- Inputs: projections.csv and player_ids.csv required; normalize to house schemas before downstream use
- House Schemas (versioned, strict; additionalProperties: false): players, slates, projections_raw, projections_normalized, optimizer outputs, variant, field, contest_structure, sim_*; see docs/PRPs/PRP-0_pipeline_schema_pack
- IDs: dk_player_id must persist end-to-end
- Slate Key: YY-MM-DD_HHMMSS (America/New_York)
- Run Registry: each run writes run_meta.json, inputs_hash.json, artifacts/, optional tag.txt under runs/<slate_key>/<stage>

Operating Rules:
- Allowed to edit: src/** (planned), tests/**, configs/**, docs/**; current code dirs: pipeline/, processes/, app/
- Read-only: data/**, runs/**
- Determinism: Every stochastic step accepts seed and records it
- CI gates: uv sync → ruff → black --check → mypy → pytest -q
- Conventional commits; small, reviewed changes; PRP required for schema changes

Open TBDs:
- Typing strictness policy, run pruning policy, legacy metrics to port

Notes:
- PRP-0 instructs creating pipeline/schemas/ with a full schema pack and README. No implementation code in that PRP.
- Current repo lacks configured linters/types; commands listed are the intended gates.
</file>

<file path=".serena/memories/style_and_conventions.md">
Style & Conventions

- Code Style: black formatting; ruff for lint; mypy for typing. Default: strict typing in src/ for new modules; best-effort elsewhere (AGENTS.md). Docstrings encouraged for public functions/classes.
- Determinism: All stochastic functions accept `seed` and avoid hidden global state. Record `seed` in run_meta.json.
- Data Contracts First: Define/version schemas before using data. No schema drift; any changes require a PRP and tests under tests/schemas/.
- IO Adapters: Validate and log row counts/nulls/dupes; ensure dk_player_id is present and preserved in artifacts.
- Repo Hygiene: Single source of truth in src/ (planned transition). No ad-hoc scripts. Keep changes small and focused.
- Paths & Safety: Never write to data/raw/ or runs/ without a slate key. Agent must not write under data/raw/ or runs/ directly.
- Branching/PRs: Use feat/<slug> branches; PR template must include scope, data contract changes, determinism verification, CI checkboxes, rollback plan. Conventional commits (feat:, fix:, refactor:, docs:, chore:).
- Observability: Log metrics per run to artifacts/metrics.json: row counts, null/dupe rates, coverage, timing, memory peak (if available), legacy_metrics optional.
- Performance: Prefer pure functions, explicit inputs/outputs. Disk cache allowed at data/processed/cache/<slate_key>/<adapter>@<version>/ keyed by (source, version_ts, schema_version).
- Timestamps: Use UTC ISO-8601 for timestamps in data; ensure files/run dirs include timestamps.
</file>

<file path=".serena/memories/suggested_commands.md">
Environment & Setup
- Create/Sync env: `uv sync`
- Run in env: `uv run <cmd>` (e.g., `uv run python -V`)

Quality Gates (intended CI order)
- Lint: `uv run ruff .`
- Format check: `uv run black --check .`
- Type check: `uv run mypy .`
- Tests: `uv run pytest -q`

Schemas (from PRP-0)
- YAML lint (if installed): `uv run yamllint pipeline/schemas`
- JSON Schema validate (if installed): `uv run python -m jsonschema -i <file> <schema>`

Entrypoints (TBD placeholders)
- Streamlit app (when implemented): `uv run streamlit run app/Main.py`
- CLI validator (future per PRP-0): `uv run validate-table --schema pipeline/schemas/<name>.schema.yaml --input <parquet|json|csv>`

Git & Repo
- Check status: `git status`
- Create branch: `git checkout -b feat/<slug>`
- Commit: `git commit -m "feat: ..."`
- Rebase on dev: `git fetch origin && git rebase origin/dev`

Common Utilities (Darwin)
- List files: `ls -la`
- Search code: `rg <pattern>` (or `grep -R <pattern> .`)
- Find files: `rg --files | rg <pattern>`
- Format JSON for readability: `jq . < file.json` (if installed)

Notes
- Some tools (ruff, black, mypy, yamllint) may need installation; prefer adding them via `uv add` in a dedicated PR with lockfile update.
- Do not write to `data/raw/` or `runs/` without a slate key.
</file>

<file path=".serena/memories/task_completion.md">
When you finish a change:

1) Sync env
- `uv sync`

2) Quality gates (blocking)
- `uv run ruff .`
- `uv run black --check .`
- `uv run mypy .`
- `uv run pytest -q`

3) Contracts & Tests
- If schemas changed/added: add tests under `tests/schemas/` and update docs.
- Ensure dk_player_id persists through any new dataframes or artifacts.

4) Determinism
- Thread `seed` through new stochastic functions; ensure it is recorded in run metadata where applicable.

5) Safety & Hygiene
- Verify no writes under `data/raw/` or `runs/` without a slate key.
- Keep changes minimal and scoped; follow conventional commits.

6) PR Prep
- Fill PR template: scope, impacted modules, data contracts changed (Y/N + migration), determinism verified, CI gates checked, rollback plan.
- Target `dev` for integration; no direct commits to `main`.
</file>

<file path=".serena/.gitignore">
/cache
</file>

<file path=".serena/project.yml">
project_name: nba-dfs
language: python
</file>

<file path="app/api/optimize/route.ts">
import { NextRequest } from "next/server";
import { spawn } from "child_process";

export async function POST(req: NextRequest) {
  try {
    const payload = await req.json();

    // --- normalize ownership penalty knobs to house schema ---
    const consIn = (payload?.constraints ?? {}) as any;
    const penIn = (consIn?.ownership_penalty ?? {}) as any;
    if (penIn) {
      // accept legacy keys and map to weight_lambda
      if (penIn.weight_lambda == null) {
        if (typeof penIn.lambda_ === "number") penIn.weight_lambda = penIn.lambda_;
        else if (typeof penIn.lambda === "number") penIn.weight_lambda = penIn.lambda;
      }
      // default mode if missing
      if (penIn.mode == null) penIn.mode = "by_points";
      // Allow UI to pass a pseudo-mode "g_curve"; map to by_points + curve_type
      if (penIn.mode === "g_curve") {
        penIn.mode = "by_points";
        if (penIn.curve_type == null) penIn.curve_type = "sigmoid";
      }
      payload.constraints = { ...consIn, ownership_penalty: penIn };
    }

    // Spawn Python CLI via uv
    const proc = spawn("uv", ["run", "python", "scripts/pyopt/optimize_cli.py"], {
      stdio: ["pipe", "pipe", "pipe"],
    });

    const stdoutChunks: Buffer[] = [];
    const stderrChunks: Buffer[] = [];

    proc.stdout.on("data", (d) => stdoutChunks.push(Buffer.from(d)));
    proc.stderr.on("data", (d) => stderrChunks.push(Buffer.from(d)));

    const done = new Promise<{ code: number | null; signal: NodeJS.Signals | null }>((resolve) => {
      proc.on("close", (code, signal) => resolve({ code, signal }));
    });

    proc.stdin.write(Buffer.from(JSON.stringify(payload)));
    proc.stdin.end();

    const { code } = await done;

    const stdout = Buffer.concat(stdoutChunks).toString("utf8").trim();
    const stderr = Buffer.concat(stderrChunks).toString("utf8").trim();

    if (stderr) {
      // Log to server console for debugging; not returned to client unless error
      console.warn("[optimizer stderr]", stderr);
    }

    if (code !== 0) {
      return new Response(`Optimizer process failed (code=${code}): ${stderr}`, { status: 500 });
    }
    try {
      const data = JSON.parse(stdout || "{}");
      return new Response(JSON.stringify(data), { status: 200, headers: { "Content-Type": "application/json" } });
    } catch (e: any) {
      return new Response(`Invalid optimizer output: ${(e as Error).message}\n---\n${stdout}`, { status: 500 });
    }
  } catch (e: any) {
    return new Response(`Bad request: ${(e as Error).message}`, { status: 400 });
  }
}
</file>

<file path="app/api/runs/[slate]/[module]/[run_id]/route.ts">
import { NextRequest } from "next/server";
import { promises as fs } from "fs";
import path from "path";

async function readJson(p: string): Promise<any | undefined> {
  try {
    const raw = await fs.readFile(p, "utf8");
    return JSON.parse(raw);
  } catch {
    return undefined;
  }
}

export async function GET(_req: NextRequest, ctx: { params: { slate: string; module: string; run_id: string } }) {
  try {
    const { slate, module, run_id } = ctx.params;
    const base = path.join(process.cwd(), "runs", slate, module, run_id);
    const meta = await readJson(path.join(base, "run_meta.json"));
    if (!meta) return new Response("Not found", { status: 404 });
    const artifactsDir = path.join(base, "artifacts");
    const lineups = await readJson(path.join(artifactsDir, "lineups_json")) ?? await readJson(path.join(artifactsDir, "lineups.json"));
    const diagnostics = await readJson(path.join(artifactsDir, "diagnostics_json")) ?? await readJson(path.join(artifactsDir, "diagnostics.json"));
    const summary = await readJson(path.join(artifactsDir, "summary_json")) ?? meta.summary ?? undefined;
    return Response.json({ ok: true, run: { slate_key: slate, module, run_id, meta, lineups, diagnostics, summary } });
  } catch (e: any) {
    return new Response(String(e?.message || e), { status: 500 });
  }
}
export const dynamic = "force-dynamic";
</file>

<file path="app/api/runs/route.ts">
import { NextRequest } from "next/server";
import { promises as fs } from "fs";
import path from "path";

type RunRow = {
  run_id: string;
  slate_key: string;
  module: string;
  created_at?: string;
  path: string;
  meta?: any;
};

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const module = String(searchParams.get("module") || "optimizer");
    const slate = String(searchParams.get("slate") || "").trim();
    const limit = Number(searchParams.get("limit") || 10);
    const baseRoot = path.join(process.cwd(), "runs");
    let slates: string[] = [];
    try {
      if (slate && slate.toLowerCase() !== "all") {
        slates = [slate];
      } else {
        const dirs = await fs.readdir(baseRoot);
        slates = dirs.filter((d) => !d.startsWith("."));
      }
    } catch {
      return Response.json({ ok: true, runs: [], base: baseRoot });
    }

    const rows: (RunRow & { _ts: number })[] = [];
    for (const s of slates) {
      const base = path.join(baseRoot, s, module);
      let entries: string[] = [];
      try {
        entries = await fs.readdir(base);
      } catch {
        continue;
      }
      for (const name of entries) {
        if (!name || name.startsWith("__tmp__")) continue;
        const runDir = path.join(base, name);
        try {
          const stat = await fs.stat(runDir);
          if (!stat.isDirectory()) continue;
          const metaPath = path.join(runDir, "run_meta.json");
          let meta: any = undefined;
          try {
            const raw = await fs.readFile(metaPath, "utf8");
            meta = JSON.parse(raw);
          } catch {}
          let ts = stat.mtimeMs;
          const created = meta?.created_at;
          if (typeof created === "string") {
            const d = new Date(created);
            if (!isNaN(d.getTime())) ts = d.getTime();
          }
          rows.push({ run_id: name, slate_key: s, module, created_at: meta?.created_at, path: runDir, meta, _ts: ts });
        } catch {}
      }
    }
    rows.sort((a, b) => b._ts - a._ts);
    const out = (limit > 0 ? rows.slice(0, limit) : rows).map(({ _ts, ...r }) => r);
    return Response.json({ ok: true, runs: out, base: baseRoot, slates });
  } catch (e: any) {
    return new Response(String(e?.message || e), { status: 500 });
  }
}
export const dynamic = "force-dynamic";
</file>

<file path="app/icon.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64">
  <rect width="64" height="64" rx="12" fill="#0ea5e9" />
  <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-size="22" font-family="Arial, Helvetica, sans-serif" fill="#ffffff">DFS</text>
</svg>
</file>

<file path="app/page.tsx">
import { redirect } from "next/navigation";

export default function Page() {
  // Default to Optimizer tab
  redirect("/optimizer");
}
</file>

<file path="app/README.md">
# App Module (Next.js Frontend)

The app module provides the unified dashboard and user interface for the NBA-DFS pipeline, built with Next.js 14 and React 18. It serves as the primary interaction layer for data upload, optimization configuration, and results visualization.

## Overview

The app module implements a modern web application that provides:
- **Interactive Studio**: Visual interface for all DFS pipeline stages
- **Data Upload**: CSV file ingestion with validation and preview
- **Configuration Management**: Visual forms for optimizer and pipeline settings  
- **Results Visualization**: Tables, charts, and analytics for pipeline outputs
- **Real-time Updates**: Live progress tracking for long-running processes
- **API Integration**: RESTful endpoints for backend process orchestration

## Architecture

```
app/
├── (studio)/           # Main application pages
│   ├── optimizer/      # Optimization interface
│   ├── variants/       # Variant generation UI
│   ├── field/          # Field sampling interface
│   └── simulator/      # GPP simulation dashboard
├── api/                # Next.js API routes
│   ├── optimize/       # Optimization endpoints
│   └── runs/           # Run management endpoints
├── layout.tsx          # Root application layout
├── page.tsx            # Landing page
└── icon.svg            # Application icon
```

## User Interface Structure

### Studio Layout
The main application uses a tabbed interface with consistent layout:

```tsx
<TopStatusBar />           // System status and notifications
<TopTabs />               // Navigation: Optimizer | Variants | Field | Simulator  
<Separator />
<PageContainer>           // Main content area with controls
  {children}              // Stage-specific UI components
</PageContainer>
<MetricsDrawer />         // Collapsible analytics panel
```

### Theme System
- **Provider**: `next-themes` with system preference detection
- **Modes**: Light, dark, and system automatic switching
- **Components**: Consistent theming across all UI elements
- **Accessibility**: WCAG compliant color contrast

## Core Features

### 1. Data Upload & Ingestion
**Location**: Upload components integrated across all stages

**Features:**
- **Drag & Drop**: File upload with visual feedback
- **CSV Validation**: Real-time parsing and schema validation
- **Preview**: Data table preview with column mapping
- **Progress**: Upload progress with error handling
- **Batch Processing**: Multiple file upload support

**Supported Formats:**
- Player projections CSV
- Player IDs CSV  
- Contest structure files
- Configuration YAML files

### 2. Optimizer Interface (`app/(studio)/optimizer/`)
**Purpose**: Configure and run lineup optimization

**UI Components:**
- **Configuration Panel**: Salary caps, position rules, stacking options
- **Constraint Builder**: Visual constraint configuration
- **Live Progress**: Real-time optimization status
- **Results Grid**: Lineup table with sorting and filtering
- **Export Controls**: CSV download and formatting options

**Key Features:**
```tsx
// Configuration form with real-time validation
<OptimizerConfig 
  onConfigChange={handleConfigUpdate}
  validation={configErrors}
/>

// Results visualization with interactive tables
<LineupViews 
  lineups={optimizedLineups}
  metrics={optimizationMetrics}
/>
```

### 3. Variants Interface (`app/(studio)/variants/`)
**Purpose**: Generate and manage lineup variants

**Features:**
- **Source Selection**: Choose base lineups from optimizer runs
- **Variant Settings**: Configure generation parameters
- **Catalog View**: Browse generated variant lineups
- **Comparison Tools**: Compare variants against base lineups

### 4. Field Sampling Interface (`app/(studio)/field/`)
**Purpose**: Build representative contest fields

**Features:**
- **Field Configuration**: Contest size, ownership curves, source mix
- **Sampling Preview**: Live field composition updates
- **Diversity Metrics**: Field overlap and uniqueness analytics
- **Export Ready**: Contest-ready field downloads

### 5. Simulator Dashboard (`app/(studio)/simulator/`)
**Purpose**: Run GPP simulations and analyze expected value

**Features:**
- **Contest Setup**: Prize structure, field size, entry fees
- **Simulation Controls**: Monte Carlo parameters, variance models
- **Results Analytics**: EV metrics, win probability, ROI analysis
- **Performance Charts**: Visual simulation result summaries

## API Routes (`app/api/`)

### Optimization Endpoint (`/api/optimize`)
```typescript
POST /api/optimize
{
  slateId: string;
  config: OptimizerConfig;
  seed?: number;
}

Response: {
  runId: string;
  status: "queued" | "running" | "completed" | "failed";
  progress?: number;
}
```

### Run Management (`/api/runs`)
```typescript
GET /api/runs?slateId={slateId}&type={runType}
Response: Array<RunSummary>

GET /api/runs/{runId}  
Response: RunDetails

POST /api/runs/{runId}/export
Response: FileDownload
```

**Features:**
- **Run Discovery**: Find runs by slate, type, date
- **Status Polling**: Real-time run progress updates
- **Artifact Download**: Export results in multiple formats
- **Run Chaining**: Link dependent stages automatically

## State Management

### Global State (Zustand)
```typescript
// Run state management
const useRunStore = create<RunState>((set, get) => ({
  activeRuns: [],
  runHistory: [],
  addRun: (run) => set((state) => ({ 
    activeRuns: [...state.activeRuns, run] 
  })),
  updateRunStatus: (runId, status) => // Update logic
}));

// UI state management  
const useUIStore = create<UIState>((set) => ({
  activeTab: 'optimizer',
  sidebarOpen: true,
  theme: 'system'
}));
```

### Form State (React Hook Form)
- **Validation**: Real-time form validation with Zod schemas
- **Persistence**: Form state persistence across page navigation
- **Auto-save**: Periodic configuration backup

## Component Architecture

### Design System
- **Base**: Shadcn/ui components with Radix UI primitives
- **Styling**: Tailwind CSS with custom design tokens
- **Icons**: Lucide React icon library
- **Animations**: Framer Motion (selective usage)

### Reusable Components
```tsx
// Page layout with consistent structure
<PageContainer 
  title="Stage Name"
  gridMode={mode}
  onGridModeChange={setMode}
>

// Data tables with virtualization
<DataTable 
  data={tableData}
  columns={columnDefs}
  virtualizeRows={true}
/>

// Upload interface with drag/drop
<UploadDropzone 
  accept=".csv"
  onUpload={handleUpload}
  validation={csvSchema}
/>
```

### Performance Optimizations
- **Code Splitting**: Route-based and component-based splitting
- **Virtualization**: Large dataset table virtualization
- **Memoization**: React.memo and useMemo for expensive operations
- **Lazy Loading**: Progressive loading of heavy components

## Integration with Backend

### Process Orchestration
The frontend communicates with the Python backend through:

1. **Direct CLI Calls**: Via Next.js API routes executing Python modules
2. **File System**: Reading/writing parquet and JSON artifacts
3. **Real-time Updates**: Polling for long-running process status
4. **Error Handling**: Comprehensive error boundary implementation

### Data Flow
```
User Input → React Forms → API Routes → Python Processes → Parquet Files → UI Updates
```

### File System Integration
```typescript
// Read pipeline outputs
const lineups = await readParquetFile(
  `data/runs/optimizer/${runId}/lineups.parquet`
);

// Monitor run progress
const manifest = await readJSON(
  `data/runs/optimizer/${runId}/manifest.json`
);
```

## Development

### Local Development
```bash
npm run dev              # Start development server
npm run build           # Production build
npm run test            # Run test suite
npm run test:e2e        # End-to-end tests
```

### Development Server
- **Port**: 3000 (configurable)
- **Hot Reload**: Automatic code reloading
- **Error Overlay**: Development error UI
- **Performance**: React DevTools integration

### Environment Configuration
```bash
# .env.local
NEXT_PUBLIC_API_BASE_URL=http://localhost:3000
PYTHON_ENV_PATH=./.venv/bin/python
DATA_ROOT=./data
```

## Testing

### Unit Tests (Vitest)
- **Location**: `__tests__` directories alongside components
- **Coverage**: Component logic, utilities, API routes
- **Mocking**: MSW for API mocking, file system mocks

### End-to-End Tests (Playwright)  
- **Location**: `e2e/` directory
- **Scenarios**: Full pipeline workflows, error handling
- **Browsers**: Chrome, Firefox, Safari testing

**Example Test:**
```typescript
test('complete optimization workflow', async ({ page }) => {
  await page.goto('/optimizer');
  
  // Upload CSV files
  await uploadProjections(page, 'fixtures/projections.csv');
  
  // Configure optimization
  await setOptimizerConfig(page, { numLineups: 5 });
  
  // Run optimization
  await page.click('[data-testid="run-optimizer"]');
  
  // Verify results
  await expect(page.locator('.lineup-table')).toBeVisible();
});
```

## Dependencies

### Core Framework
```json
{
  "next": "^14.2.10",           // React framework
  "react": "^18.3.1",           // UI library  
  "react-dom": "^18.3.1"       // React DOM renderer
}
```

### UI Components
```json
{
  "@radix-ui/*": "^*",          // Primitive UI components
  "tailwindcss": "^3.4.10",    // Styling framework
  "lucide-react": "^0.452.0",  // Icon library
  "next-themes": "^0.4.6"      // Theme management
}
```

### State & Data
```json
{
  "zustand": "^5.0.8",         // State management
  "@tanstack/react-table": "^8.21.3",  // Data tables
  "zod": "^3.25.76",           // Schema validation
  "papaparse": "^5.5.3"       // CSV parsing
}
```

### Development Tools
```json
{
  "typescript": "5.9.2",       // Type safety
  "vitest": "^3.2.4",         // Unit testing
  "@playwright/test": "^1.55.0"  // E2E testing
}
```

## Deployment

### Production Build
```bash
npm run build              # Create optimized build
npm run start             # Start production server
```

### Static Export (Optional)
```bash
# next.config.mjs
export default {
  output: 'export',
  trailingSlash: true,
  images: { unoptimized: true }
};
```

### Environment Variables
```bash
# Production environment
NODE_ENV=production
NEXT_PUBLIC_API_BASE_URL=https://your-domain.com
```

## Performance Considerations

### Bundle Optimization
- **Tree Shaking**: Unused code elimination
- **Code Splitting**: Route and component level splitting  
- **Image Optimization**: Next.js automatic image optimization
- **Font Optimization**: Automatic font optimization

### Runtime Performance
- **Virtual Scrolling**: Large table performance via `@tanstack/react-virtual`
- **Memoization**: Strategic use of React.memo and useMemo
- **Lazy Loading**: Component lazy loading for initial bundle size

### Monitoring
- **Core Web Vitals**: LCP, FID, CLS tracking
- **Error Tracking**: Comprehensive error boundary implementation
- **Performance Metrics**: Runtime performance monitoring

## Accessibility

### WCAG Compliance
- **Keyboard Navigation**: Full keyboard accessibility
- **Screen Reader**: ARIA labels and semantic HTML
- **Color Contrast**: WCAG AA compliant color schemes
- **Focus Management**: Logical focus order and visible indicators

### Implementation
```tsx
// Semantic HTML structure
<main role="main" aria-label="Optimizer Interface">
  <h1>Lineup Optimizer</h1>
  <section aria-labelledby="config-heading">
    <h2 id="config-heading">Configuration</h2>
    // Form elements with proper labels
  </section>
</main>

// Skip navigation for keyboard users
<a href="#content" className="skip-link">
  Skip to main content
</a>
```

## Future Enhancements

### Planned Features
- **Real-time Collaboration**: Multi-user optimization sessions
- **Advanced Analytics**: Machine learning insights
- **Mobile Optimization**: Responsive design improvements
- **Offline Support**: PWA capabilities for offline usage

### Technical Improvements
- **Server Components**: Migrate to Next.js App Router server components
- **Streaming**: Server-side streaming for large datasets
- **Caching**: Advanced caching strategies for performance
- **WebSockets**: Real-time updates via WebSocket connections
</file>

<file path="artifacts/field_base.jsonl">
{"players": ["p1", "p2", "p3", "p7", "p8", "p6", "p4", "p5"], "run_id": "fs-7502be44", "created_at": "2025-09-09T00:48:31Z", "site": "dk", "slate_id": "TEST_SLATE", "seed": 123, "ruleset_version": "v1", "source": "public", "origin": "field_base", "owner": "field"}
</file>

<file path="artifacts/field_merged.jsonl">
{"players": ["p1", "p2", "p3", "p7", "p8", "p6", "p4", "p5"], "run_id": "fs-7502be44", "created_at": "2025-09-09T00:48:31Z", "site": "dk", "slate_id": "TEST_SLATE", "seed": 123, "ruleset_version": "v1", "source": "public", "origin": "field_base", "owner": "field"}
{"players": ["p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8"], "run_id": "fs-7502be44", "created_at": "2025-09-09T00:48:31Z", "site": "dk", "slate_id": "TEST_SLATE", "seed": 123, "ruleset_version": "v1", "source": "injected", "origin": "variant_catalog", "owner": "us"}
</file>

<file path="artifacts/metrics.json">
{
  "run_id": "fs-7502be44",
  "created_at": "2025-09-09T00:48:31Z",
  "site": "dk",
  "slate_id": "TEST_SLATE",
  "seed": 123,
  "ruleset_version": "v1",
  "field_base_count": 1,
  "injected_count": 1,
  "field_merged_count": 2,
  "invalid_attempts": 6438
}
</file>

<file path="components/aceternity/SpotlightWrapper.tsx">
"use client";

// Optional lightweight spotlight hover effect wrapper.
export default function SpotlightWrapper({ children }: { children: React.ReactNode }) {
  return (
    <div className="relative group">
      <div className="absolute inset-0 rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none"
           style={{ background: "radial-gradient(600px circle at var(--x, 50%) var(--y, 50%), rgba(255,255,255,0.06), transparent 40%)" }}
      />
      {children}
    </div>
  );
}
</file>

<file path="components/lineups/LineupTable.tsx">
"use client";

import * as React from "react";
import {
  useReactTable,
  getCoreRowModel,
  getSortedRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  flexRender,
  SortingState,
  ColumnFiltersState,
  VisibilityState,
  ColumnPinningState,
} from "@tanstack/react-table";
import { useVirtualizer } from "@tanstack/react-virtual";

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { TooltipProvider } from "@/components/ui/tooltip";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { LineupTableData, createLineupColumns } from "@/lib/table/columns";
import { useRosterMap } from "@/hooks/useRosterMap";
import { LineupToolbar } from "./LineupToolbar";

interface LineupTableProps {
  data: LineupTableData[];
  playerMap?: Record<string, { name?: string; team?: string; pos?: string }>;
  lineups?: Array<{
    slots?: Array<{
      player_id_dk?: string;
      name?: string;
      team?: string;
      pos?: string;
    }>;
  }>;
  runId?: string;
  className?: string;
}

export function LineupTable({ 
  data, 
  playerMap, 
  lineups,
  runId, 
  className 
}: LineupTableProps) {
  const [sorting, setSorting] = React.useState<SortingState>([
    { id: "score", desc: true }, // Default sort by score descending
  ]);
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);
  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});
  const [columnPinning, setColumnPinning] = React.useState<ColumnPinningState>({});
  const [globalFilter, setGlobalFilter] = React.useState("");

  // Get roster map for player info
  const { getRosterMap } = useRosterMap({ 
    playerMap, 
    lineups,
    runId 
  });
  const rosterMap = getRosterMap();

  // Create columns with roster map
  const columns = React.useMemo(() => createLineupColumns(rosterMap), [rosterMap]);

  // Table instance
  const table = useReactTable({
    data,
    columns,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      columnPinning,
      globalFilter,
    },
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    onColumnVisibilityChange: setColumnVisibility,
    onColumnPinningChange: setColumnPinning,
    onGlobalFilterChange: setGlobalFilter,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    initialState: {
      pagination: {
        pageSize: 10000, // Show all rows
      },
    },
  });

  // Virtualization for large datasets (>1,500 rows)
  const parentRef = React.useRef<HTMLDivElement>(null);
  const shouldVirtualize = data.length > 1500;

  const rowVirtualizer = useVirtualizer({
    count: shouldVirtualize ? table.getRowModel().rows.length : 0,
    getScrollElement: () => parentRef.current,
    estimateSize: () => 32, // Estimated row height
    overscan: 10,
  });

  // Local storage persistence for column settings
  const storageKey = React.useMemo(() => `lineup-table-settings-${runId || "default"}`, [runId]);

  React.useEffect(() => {
    const saved = localStorage.getItem(storageKey);
    if (saved) {
      try {
        const { visibility, pinning } = JSON.parse(saved);
        if (visibility) setColumnVisibility(visibility);
        if (pinning) setColumnPinning(pinning);
      } catch (error) {
        console.error("Failed to load table settings:", error);
      }
    }
  }, [storageKey]);

  React.useEffect(() => {
    const settings = {
      visibility: columnVisibility,
      pinning: columnPinning,
    };
    localStorage.setItem(storageKey, JSON.stringify(settings));
  }, [columnVisibility, columnPinning, storageKey]);

  return (
    <TooltipProvider>
      <Card className={`${className} bg-card/50 backdrop-blur-sm`} data-testid="lineup-table-card">
        <CardHeader className="pb-3">
          <LineupToolbar 
            table={table}
            globalFilter={globalFilter}
            setGlobalFilter={setGlobalFilter}
            data={data}
          />
        </CardHeader>
        <CardContent className="p-0">
          <div 
            ref={parentRef}
            className="relative overflow-auto border-t custom-scrollbar"
            style={{ height: shouldVirtualize ? "600px" : "400px", maxHeight: "60vh" }}
          >
            <Table>
              <TableHeader className="sticky top-0 z-10 bg-background/95 backdrop-blur-sm border-b">
                {table.getHeaderGroups().map((headerGroup) => (
                  <TableRow key={headerGroup.id} className="hover:bg-transparent">
                    {headerGroup.headers.map((header) => (
                      <TableHead 
                        key={header.id}
                        style={{ width: header.getSize() }}
                        className="text-xs font-semibold h-7 px-2 py-1"
                        data-testid={`header-${header.id}`}
                      >
                        {header.isPlaceholder ? null : (
                          <div
                            className={
                              header.column.getCanSort()
                                ? "cursor-pointer select-none flex items-center gap-1 hover:text-primary transition-colors"
                                : "flex items-center gap-1"
                            }
                            onClick={header.column.getToggleSortingHandler()}
                          >
                            {flexRender(
                              header.column.columnDef.header,
                              header.getContext()
                            )}
                            {{
                              asc: " ↑",
                              desc: " ↓",
                            }[header.column.getIsSorted() as string] ?? null}
                          </div>
                        )}
                      </TableHead>
                    ))}
                  </TableRow>
                ))}
              </TableHeader>
              <TableBody>
                {shouldVirtualize ? (
                  // Virtualized rows for large datasets
                  <>
                    <tr style={{ height: rowVirtualizer.getTotalSize() }}>
                      <td />
                    </tr>
                    {rowVirtualizer.getVirtualItems().map((virtualRow) => {
                      const row = table.getRowModel().rows[virtualRow.index];
                      if (!row) return null;
                      
                      return (
                        <TableRow
                          key={row.id}
                          data-state={row.getIsSelected() && "selected"}
                          className="hover:bg-muted/30 transition-colors h-8 border-b border-border/50"
                          style={{
                            position: "absolute",
                            top: 0,
                            left: 0,
                            width: "100%",
                            height: virtualRow.size,
                            transform: `translateY(${virtualRow.start}px)`,
                          }}
                          data-testid={`table-row-${virtualRow.index}`}
                        >
                          {row.getVisibleCells().map((cell) => (
                            <TableCell 
                              key={cell.id}
                              style={{ width: cell.column.getSize() }}
                              className="text-xs py-1 px-2 font-medium"
                              data-testid={`cell-${cell.column.id}`}
                            >
                              {flexRender(
                                cell.column.columnDef.cell,
                                cell.getContext()
                              )}
                            </TableCell>
                          ))}
                        </TableRow>
                      );
                    })}
                  </>
                ) : (
                  // Regular rows for smaller datasets
                  table.getRowModel().rows.length > 0 ? (
                    table.getRowModel().rows.map((row, index) => (
                      <TableRow
                        key={row.id}
                        data-state={row.getIsSelected() && "selected"}
                        className="hover:bg-muted/30 transition-colors h-8 border-b border-border/50"
                        data-testid={`table-row-${index}`}
                      >
                        {row.getVisibleCells().map((cell) => (
                          <TableCell 
                            key={cell.id}
                            style={{ width: cell.column.getSize() }}
                            className="text-xs py-1 px-2 font-medium"
                            data-testid={`cell-${cell.column.id}`}
                          >
                            {flexRender(
                              cell.column.columnDef.cell,
                              cell.getContext()
                            )}
                          </TableCell>
                        ))}
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell
                        colSpan={columns.length}
                        className="h-16 text-center text-muted-foreground"
                        data-testid="no-results-cell"
                      >
                        No results found.
                      </TableCell>
                    </TableRow>
                  )
                )}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </TooltipProvider>
  );
}
</file>

<file path="components/lineups/LineupToolbar.tsx">
"use client";

import * as React from "react";
import { Table as TableType } from "@tanstack/react-table";
import { Search, Settings, Download, RotateCcw } from "lucide-react";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { LineupTableData } from "@/lib/table/columns";
import { exportLineupsToCSV } from "@/lib/csv/exportLineups";

interface LineupToolbarProps {
  table: TableType<LineupTableData>;
  globalFilter: string;
  setGlobalFilter: (value: string) => void;
  data: LineupTableData[];
}

export function LineupToolbar({
  table,
  globalFilter,
  setGlobalFilter,
  data,
}: LineupToolbarProps) {
  const visibleRowCount = table.getFilteredRowModel().rows.length;
  const totalRowCount = data.length;

  const handleExportCSV = () => {
    const visibleColumns = table.getAllColumns().filter(col => col.getIsVisible());
    const visibleRows = table.getFilteredRowModel().rows;
    exportLineupsToCSV(visibleRows, visibleColumns);
  };

  const handleReset = () => {
    setGlobalFilter("");
    table.resetColumnFilters();
    table.resetColumnVisibility();
    table.resetColumnPinning();
    table.resetSorting();
  };

  const handleColumnPin = (columnId: string) => {
    const currentPinning = table.getState().columnPinning;
    const isCurrentlyPinned = currentPinning.left?.includes(columnId);
    
    if (isCurrentlyPinned) {
      // Unpin column
      table.setColumnPinning({
        ...currentPinning,
        left: currentPinning.left?.filter(id => id !== columnId) || [],
      });
    } else {
      // Pin column to left
      table.setColumnPinning({
        ...currentPinning,
        left: [...(currentPinning.left || []), columnId],
      });
    }
  };

  return (
    <div className="flex items-center justify-between gap-3 py-1">
      {/* Left side: Search and Column Management */}
      <div className="flex items-center gap-3">
        <div className="relative">
          <Search className="absolute left-2 top-2 h-3 w-3 text-muted-foreground" />
          <Input
            placeholder="Search players..."
            value={globalFilter ?? ""}
            onChange={(e) => setGlobalFilter(e.target.value)}
            className="pl-7 h-8 w-48 text-xs"
            data-testid="lineup-search-input"
          />
        </div>
        
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button
              variant="outline"
              size="sm"
              className="h-8 px-2 text-xs"
              data-testid="column-settings-button"
            >
              <Settings className="mr-1 h-3 w-3" />
              Columns
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="start" className="w-[200px]">
            <DropdownMenuLabel>Toggle Columns</DropdownMenuLabel>
            <DropdownMenuSeparator />
            {table
              .getAllColumns()
              .filter((column) => column.getCanHide())
              .map((column) => {
                const isPinned = table.getState().columnPinning.left?.includes(column.id);
                return (
                  <div key={column.id}>
                    <DropdownMenuCheckboxItem
                      className="capitalize"
                      checked={column.getIsVisible()}
                      onCheckedChange={(value) => column.toggleVisibility(!!value)}
                      data-testid={`column-toggle-${column.id}`}
                    >
                      <div className="flex items-center justify-between w-full">
                        <span>{column.columnDef.header as string}</span>
                        {isPinned && (
                          <Badge variant="secondary" className="text-xs">
                            Pinned
                          </Badge>
                        )}
                      </div>
                    </DropdownMenuCheckboxItem>
                    {column.getIsVisible() && (
                      <DropdownMenuCheckboxItem
                        className="pl-6 text-xs"
                        checked={isPinned}
                        onCheckedChange={() => handleColumnPin(column.id)}
                        data-testid={`column-pin-${column.id}`}
                      >
                        Pin to left
                      </DropdownMenuCheckboxItem>
                    )}
                  </div>
                );
              })}
          </DropdownMenuContent>
        </DropdownMenu>
      </div>

      {/* Right side: Export, Reset, and Row Count */}
      <div className="flex items-center gap-2">
        <Badge variant="outline" className="text-xs px-2 py-1 font-mono" data-testid="row-count-badge">
          {visibleRowCount === totalRowCount 
            ? `${totalRowCount} rows`
            : `${visibleRowCount} of ${totalRowCount} rows`
          }
        </Badge>
        
        <Button
          variant="outline"
          size="sm"
          onClick={handleExportCSV}
          disabled={visibleRowCount === 0}
          className="h-8 px-2 text-xs"
          data-testid="export-csv-button"
        >
          <Download className="mr-1 h-3 w-3" />
          Export CSV
        </Button>
        
        <Button
          variant="outline"
          size="sm"
          onClick={handleReset}
          className="h-8 px-2 text-xs"
          data-testid="reset-button"
        >
          <RotateCcw className="mr-1 h-3 w-3" />
          Reset
        </Button>
      </div>
    </div>
  );
}
</file>

<file path="components/lineups/LineupViews.tsx">
"use client";

import * as React from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent } from "@/components/ui/card";
import { useRunStore } from "@/lib/state/run-store";
import LineupGrid from "@/components/ui/LineupGrid";
import { LineupTable } from "./LineupTable";
import { LineupTableData } from "@/lib/table/columns";
import { useRosterMap } from "@/hooks/useRosterMap";

interface LineupViewsProps {
  className?: string;
}

export function LineupViews({ className }: LineupViewsProps) {
  const { status, lineups, summary } = useRunStore();
  const [activeView, setActiveView] = React.useState<string>("cards");

  // Transform lineups data for table view
  const tableData: LineupTableData[] = React.useMemo(() => {
    if (!lineups?.length) return [];
    
    return lineups.map((lineup: any) => {
      const slots = lineup.slots || [];
      
      // Calculate derived metrics from available data
      const salaryUsed = slots.reduce((sum: number, slot: any) => sum + (slot.salary || 0), 0);
      const salaryLeft = 50000 - salaryUsed; // DK salary cap is 50,000
      const ownSum = slots.reduce((sum: number, slot: any) => sum + (slot.own_proj || 0), 0);
      const ownAvg = slots.length > 0 ? ownSum / slots.length : 0;
      const projSum = slots.reduce((sum: number, slot: any) => sum + (slot.proj || slot.proj_fp || 0), 0);
      const teams = new Set<string>(slots.map((slot: any) => String(slot.team || "")).filter(Boolean));
      
      const tableLineup: LineupTableData = {
        lineup_id: lineup.id,
        score: lineup.score,
        salary_used: salaryUsed,
        salary_left: salaryLeft,
        dup_risk: lineup.dup_risk, // Not available from backend
        own_sum: ownSum,
        own_avg: ownAvg,
        lev_sum: lineup.lev_sum, // Not available from backend 
        lev_avg: lineup.lev_avg, // Not available from backend
        num_uniques_in_pool: lineup.num_uniques_in_pool, // Not available from backend
        teams_used: Array.from(teams) as string[],
        proj_pts_sum: projSum,
        stack_flags: lineup.stack_flags, // Not available from backend
      };

      // Map player slots to table columns
      slots.forEach((slot: any) => {
        const position = slot.slot;
        if (position) {
          (tableLineup as any)[position] = slot.player_id_dk;
        }
      });

      return tableLineup;
    });
  }, [lineups]);

  // Get roster map from summary or derive from lineup slots
  const { getRosterMap } = useRosterMap({
    playerMap: (summary as any)?.playerMap,
    lineups,
    runId: (summary as any)?.runId,
  });
  
  const rosterMap = getRosterMap();

  if (status === "idle") {
    return (
      <div className={`w-full h-full rounded-md border border-border bg-card/30 p-4 ${className}`} role="region" aria-label="Lineup Results">
        <div className="h-full flex items-center justify-center text-sm text-muted-foreground" aria-live="polite">
          No results yet - click Run to generate lineups.
        </div>
      </div>
    );
  }

  if (status === "running") {
    return (
      <div className={`w-full h-full rounded-md border border-border bg-card/30 p-4 ${className}`} role="region" aria-label="Lineup Results">
        <div className="text-sm opacity-70 mb-4">Lineups</div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 pr-1" role="status" aria-live="polite" aria-busy>
          {Array.from({ length: 9 }).map((_, i) => (
            <Card key={i} className="h-24 w-full animate-pulse" />
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className={`w-full h-full ${className}`} role="region" aria-label="Lineup Results">
      <Tabs value={activeView} onValueChange={setActiveView} className="w-full h-full">
        <div className="flex items-center justify-between mb-4">
          <div className="text-sm opacity-70">Lineups</div>
          <TabsList className="grid w-fit grid-cols-2" data-testid="lineup-view-tabs">
            <TabsTrigger value="cards" data-testid="cards-tab">Cards</TabsTrigger>
            <TabsTrigger value="table" data-testid="table-tab">Table</TabsTrigger>
          </TabsList>
        </div>

        <TabsContent value="cards" className="mt-0 h-[calc(100%-3rem)]" data-testid="cards-view">
          <div className="w-full h-full rounded-lg border border-border/50 bg-card/30 p-4">
            <LineupGrid />
          </div>
        </TabsContent>

        <TabsContent value="table" className="mt-0 h-[calc(100%-3rem)]" data-testid="table-view">
          <LineupTable 
            data={tableData}
            playerMap={(summary as any)?.playerMap}
            lineups={lineups}
            runId={(summary as any)?.runId}
            className="h-full"
          />
        </TabsContent>
      </Tabs>
    </div>
  );
}
</file>

<file path="components/runs/LoadRunModal.tsx">
"use client";

import { useEffect, useMemo, useState } from "react";
import { listRuns, getRun, currentSlateKeyNY } from "@/lib/runs/api";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useRunStore } from "@/lib/state/run-store";

export default function LoadRunModal({ open, onClose }: { open: boolean; onClose: () => void }) {
  const [slateKey, setSlateKey] = useState<string>("all");
  const [rows, setRows] = useState<any[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const { setOptions } = useRunStore();

  const formatToEST = (isoString: string | null | undefined): string => {
    if (!isoString) return "";
    try {
      const date = new Date(isoString);
      return date.toLocaleString("en-US", {
        timeZone: "America/New_York",
        month: "2-digit",
        day: "2-digit", 
        hour: "2-digit",
        minute: "2-digit",
        hour12: true
      });
    } catch {
      return isoString;
    }
  };

  useEffect(() => {
    if (!open) return;
    try {
      const saved = localStorage.getItem("dfs_slate_key");
      if (saved) setSlateKey(saved);
    } catch {}
    // Auto-list across all slates when opened
    (async () => { try { await doList(); } catch {} })();
  }, [open]);

  const canList = useMemo(() => true, []);

  const doList = async () => {
    if (!canList) return;
    setLoading(true);
    try {
      const rs = await listRuns("optimizer", slateKey || "all", 10);
      setRows(rs);
    } catch (e) {
      console.error(e);
      setRows([]);
    } finally {
      setLoading(false);
    }
  };

  const onLoad = async (run_id: string, slate?: string) => {
    try {
      const data = await getRun(slate || slateKey, "optimizer", run_id);
      // Hydrate store summary + options (best-effort)
      const summary = data?.summary || data?.meta?.summary || null;
      const diagnostics = data?.diagnostics || data?.meta?.diagnostics || null;
      const optsUsed = summary?.optionsUsed || diagnostics?.constraints_raw || diagnostics?.constraints || null;
      // Optimistically set ownership knobs if present
      if (optsUsed?.ownership_penalty) {
        const pen = optsUsed.ownership_penalty;
        setOptions({ ownershipPenalty: { enabled: !!pen.enabled, lambda: Number(pen.weight_lambda ?? pen.lambda ?? 0) } as any });
      }
      // Adapt saved lineups JSON into UI shape (mirror runSolve mapping)
      const { lineups } = data || {};
      if (Array.isArray(lineups) && lineups.length > 0) {
        const lineupsUi = lineups.map((lu: any) => {
          const lineup = {
            id: String(lu.lineup_id ?? lu.id ?? Math.random().toString(36).slice(2)),
            slots: (Array.isArray(lu.players) ? lu.players : []).map((pl: any) => ({
              slot: (pl.pos ?? pl.position ?? "UTIL") as any,
              player_id_dk: pl.dk_id ?? pl.player_id,
              name: pl.name,
              team: pl.team,
              salary: pl.salary,
              own_proj: pl.own_proj,
              pos: pl.pos ?? pl.position,
            })),
            salary: Number(lu.total_salary ?? lu.salary_used ?? 0),
            score: Number(lu.total_proj ?? lu.score ?? 0),
            lineup_id: String(lu.lineup_id ?? lu.id ?? Math.random().toString(36).slice(2)),
            salary_used: Number(lu.total_salary ?? lu.salary_used ?? 0),
            salary_left: lu.salary_left !== undefined ? Number(lu.salary_left) : undefined,
            dup_risk: lu.dup_risk !== undefined ? Number(lu.dup_risk) : undefined,
            own_sum: lu.own_sum !== undefined ? Number(lu.own_sum) : undefined,
            own_avg: lu.own_avg !== undefined ? Number(lu.own_avg) : undefined,
            lev_sum: lu.lev_sum !== undefined ? Number(lu.lev_sum) : undefined,
            lev_avg: lu.lev_avg !== undefined ? Number(lu.lev_avg) : undefined,
            num_uniques_in_pool: lu.num_uniques_in_pool !== undefined ? Number(lu.num_uniques_in_pool) : undefined,
            teams_used: lu.teams_used ?? undefined,
            proj_pts_sum: lu.proj_pts_sum !== undefined ? Number(lu.proj_pts_sum) : undefined,
            stack_flags: lu.stack_flags ?? undefined,
          } as any;
          if (Array.isArray(lu.players)) {
            lu.players.forEach((pl: any) => {
              const position = pl.pos ?? pl.position ?? "UTIL";
              (lineup as any)[position] = pl.dk_id ?? pl.player_id;
            });
          }
          return lineup;
        });
        // emulate a success set
        const useRun = useRunStore.getState();
        (useRun as any).reset?.();
        useRunStore.setState({ status: "done", lineups: lineupsUi, summary: { ...(summary || {}), diagnostics, runId: data?.run_id, slateKey: data?.slate_key }, tried: lineupsUi.length, valid: lineupsUi.length });
      } else {
        // Handle case where lineups are missing or empty
        console.warn(`No lineups found for run ${run_id}. Loading run metadata only.`);
        try {
          const { toast } = await import("@/components/ui/sonner");
          (toast as any).warning?.("No lineups found in saved run") || toast("No lineups found in saved run");
        } catch {}
        const useRun = useRunStore.getState();
        (useRun as any).reset?.();
        useRunStore.setState({ 
          status: "done", 
          lineups: [], 
          summary: { ...(summary || {}), diagnostics, runId: data?.run_id, slateKey: data?.slate_key }, 
          tried: 0, 
          valid: 0 
        });
      }
      onClose();
    } catch (e) {
      console.error(e);
    }
  };

  if (!open) return null;
  return (
    <div className="fixed inset-0 z-50 backdrop-blur-sm bg-background/40 flex items-center justify-center">
      <div className="bg-card border rounded w-[720px] max-h-[70vh] p-4 shadow-xl">
        <div className="flex items-center justify-between mb-3">
          <h3 className="text-sm font-medium">Load Run</h3>
          <Button variant="outline" size="sm" onClick={onClose} className="hover:bg-destructive/10">Close</Button>
        </div>
        <div className="flex items-end gap-2 mb-3">
          <div className="flex-1">
            <label className="block text-xs text-muted-foreground mb-1">Slate Key (or "all")</label>
            <Input value={slateKey} onChange={(e) => setSlateKey(e.target.value)} placeholder="all" />
          </div>
          <Button
            size="sm"
            variant="outline"
            onClick={() => {
              try {
                const saved = localStorage.getItem("dfs_slate_key");
                if (saved) setSlateKey(saved);
              } catch {}
            }}
          >
            Use Current
          </Button>
          <Button size="sm" onClick={doList} disabled={!canList || loading}>{loading ? "Loading…" : "List"}</Button>
        </div>
        <div className="border rounded h-[42vh] overflow-auto">
          <table className="w-full text-xs">
            <thead>
              <tr className="sticky top-0 bg-muted/40">
                <th className="text-left p-2">Run ID</th>
                <th className="text-left p-2">Slate</th>
                <th className="text-left p-2">Created</th>
                <th className="text-left p-2">Tag</th>
                <th className="text-left p-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              {rows.map((r) => (
                <tr key={r.run_id} className="border-t">
                  <td className="p-2 font-mono text-[11px]">{r.run_id}</td>
                  <td className="p-2 font-mono text-[11px]">{r.slate_key}</td>
                  <td className="p-2">{formatToEST(r.meta?.created_at)}</td>
                  <td className="p-2">{r.meta?.tag || ""}</td>
                  <td className="p-2">
                    <Button size="sm" variant="outline" onClick={() => onLoad(r.run_id, r.slate_key)}>Load</Button>
                  </td>
                </tr>
              ))}
              {rows.length === 0 && (
                <tr>
                  <td className="p-3 text-muted-foreground" colSpan={5}>No runs found.</td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="components/theme/ThemeProvider.tsx">
"use client";

import { ThemeProvider as NextThemesProvider } from "next-themes";
import type { ComponentProps } from "react";

type ThemeProviderProps = ComponentProps<typeof NextThemesProvider>;

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}
</file>

<file path="components/theme/ThemeToggle.tsx">
"use client";

import * as React from "react";
import { Moon, Sun } from "lucide-react";
import { useTheme } from "next-themes";

import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

export function ThemeToggle() {
  const { setTheme } = useTheme();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon" data-testid="theme-toggle">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")} data-testid="theme-light">
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")} data-testid="theme-dark">
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")} data-testid="theme-system">
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
</file>

<file path="components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="components/ui/collapsible.tsx">
"use client";

import * as React from "react";
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible";

export const Collapsible = CollapsiblePrimitive.Root;
export const CollapsibleTrigger = CollapsiblePrimitive.Trigger;
export const CollapsibleContent = CollapsiblePrimitive.Content;
</file>

<file path="components/ui/dropdown-menu.tsx">
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="components/ui/dropzone.tsx">
'use client';

import { UploadIcon } from 'lucide-react';
import type { ReactNode } from 'react';
import { createContext, useContext } from 'react';
import type { DropEvent, DropzoneOptions, FileRejection } from 'react-dropzone';
import { useDropzone } from 'react-dropzone';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';

type DropzoneContextType = {
  src?: File[];
  accept?: DropzoneOptions['accept'];
  maxSize?: DropzoneOptions['maxSize'];
  minSize?: DropzoneOptions['minSize'];
  maxFiles?: DropzoneOptions['maxFiles'];
};

const renderBytes = (bytes: number) => {
  const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];
  let size = bytes;
  let unitIndex = 0;

  while (size >= 1024 && unitIndex < units.length - 1) {
    size /= 1024;
    unitIndex++;
  }

  return `${size.toFixed(2)}${units[unitIndex]}`;
};

const DropzoneContext = createContext<DropzoneContextType | undefined>(
  undefined
);

export type DropzoneProps = Omit<DropzoneOptions, 'onDrop'> & {
  src?: File[];
  className?: string;
  onDrop?: (
    acceptedFiles: File[],
    fileRejections: FileRejection[],
    event: DropEvent
  ) => void;
  children?: ReactNode;
};

export const Dropzone = ({
  accept,
  maxFiles = 1,
  maxSize,
  minSize,
  onDrop,
  onError,
  disabled,
  src,
  className,
  children,
  ...props
}: DropzoneProps) => {
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    accept,
    maxFiles,
    maxSize,
    minSize,
    onError,
    disabled,
    onDrop: (acceptedFiles, fileRejections, event) => {
      if (fileRejections.length > 0) {
        const message = fileRejections.at(0)?.errors.at(0)?.message;
        onError?.(new Error(message));
        return;
      }

      onDrop?.(acceptedFiles, fileRejections, event);
    },
    ...props,
  });

  return (
    <DropzoneContext.Provider
      key={JSON.stringify(src)}
      value={{ src, accept, maxSize, minSize, maxFiles }}
    >
      <Button
        className={cn(
          'relative h-auto w-full flex-col overflow-hidden p-8',
          isDragActive && 'outline-none ring-1 ring-ring',
          className
        )}
        disabled={disabled}
        type="button"
        variant="outline"
        {...getRootProps()}
      >
        <input {...getInputProps()} disabled={disabled} />
        {children}
      </Button>
    </DropzoneContext.Provider>
  );
};

const useDropzoneContext = () => {
  const context = useContext(DropzoneContext);

  if (!context) {
    throw new Error('useDropzoneContext must be used within a Dropzone');
  }

  return context;
};

export type DropzoneContentProps = {
  children?: ReactNode;
  className?: string;
};

const maxLabelItems = 3;

export const DropzoneContent = ({
  children,
  className,
}: DropzoneContentProps) => {
  const { src } = useDropzoneContext();

  if (!src) {
    return null;
  }

  if (children) {
    return children;
  }

  return (
    <div className={cn('flex flex-col items-center justify-center', className)}>
      <div className="flex size-8 items-center justify-center rounded-md bg-muted text-muted-foreground">
        <UploadIcon size={16} />
      </div>
      <p className="my-2 w-full truncate font-medium text-sm">
        {src.length > maxLabelItems
          ? `${new Intl.ListFormat('en').format(
              src.slice(0, maxLabelItems).map((file) => file.name)
            )} and ${src.length - maxLabelItems} more`
          : new Intl.ListFormat('en').format(src.map((file) => file.name))}
      </p>
      <p className="w-full text-wrap text-muted-foreground text-xs">
        Drag and drop or click to replace
      </p>
    </div>
  );
};

export type DropzoneEmptyStateProps = {
  children?: ReactNode;
  className?: string;
};

export const DropzoneEmptyState = ({
  children,
  className,
}: DropzoneEmptyStateProps) => {
  const { src, accept, maxSize, minSize, maxFiles } = useDropzoneContext();

  if (src) {
    return null;
  }

  if (children) {
    return children;
  }

  let caption = '';

  if (accept) {
    caption += 'Accepts ';
    caption += new Intl.ListFormat('en').format(Object.keys(accept));
  }

  if (minSize && maxSize) {
    caption += ` between ${renderBytes(minSize)} and ${renderBytes(maxSize)}`;
  } else if (minSize) {
    caption += ` at least ${renderBytes(minSize)}`;
  } else if (maxSize) {
    caption += ` less than ${renderBytes(maxSize)}`;
  }

  return (
    <div className={cn('flex flex-col items-center justify-center', className)}>
      <div className="flex size-8 items-center justify-center rounded-md bg-muted text-muted-foreground">
        <UploadIcon size={16} />
      </div>
      <p className="my-2 w-full truncate text-wrap font-medium text-sm">
        Upload {maxFiles === 1 ? 'a file' : 'files'}
      </p>
      <p className="w-full truncate text-wrap text-muted-foreground text-xs">
        Drag and drop or click to upload
      </p>
      {caption && (
        <p className="text-wrap text-muted-foreground text-xs">{caption}.</p>
      )}
    </div>
  );
};
</file>

<file path="components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="components/ui/separator.tsx">
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="components/ui/sheet.tsx">
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
</file>

<file path="components/ui/skeleton.tsx">
import { cn } from "@/lib/utils";

export function Skeleton({ className }: { className?: string }) {
  return <div className={cn("animate-pulse rounded-md bg-muted", className)} />;
}
</file>

<file path="components/ui/slider.tsx">
"use client";

import * as React from "react";
import * as SliderPrimitive from "@radix-ui/react-slider";
import { cn } from "@/lib/utils";

export interface SliderProps
  extends React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root> {}

export const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  SliderProps
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-muted">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-4 w-4 rounded-full border border-primary bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
));
Slider.displayName = "Slider";
</file>

<file path="components/ui/sonner.tsx">
export { Toaster, toast } from "sonner";
</file>

<file path="components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="components/ui/tabs.tsx">
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="components/ui/toggle.tsx">
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
</file>

<file path="components/ui/tooltip.tsx">
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="components/README.md">
# Components Module (UI Components)

The components module provides a comprehensive library of reusable React components built on Shadcn/ui and Radix UI primitives, specifically designed for the NBA-DFS application interface and data visualization needs.

## Overview

The components module contains:
- **UI Primitives**: Base components using Shadcn/ui design system
- **Domain-Specific Components**: DFS-specific UI elements (lineup displays, player tables)
- **Layout Components**: Page structure, navigation, and layout utilities
- **Data Visualization**: Tables, charts, and metrics displays  
- **Interactive Elements**: Forms, controls, and input components
- **Theme System**: Consistent theming and dark mode support

## Architecture

```
components/
├── ui/                 # Base UI components (Shadcn/ui)
├── lineups/           # Lineup-specific components
├── metrics/           # Analytics and metrics displays
├── runs/              # Run management components
├── theme/             # Theme and styling components
└── aceternity/        # Advanced UI effects and animations
```

## Design System

### Foundation
- **Base**: Shadcn/ui component library
- **Primitives**: Radix UI for accessibility and behavior
- **Styling**: Tailwind CSS with custom design tokens
- **Theme**: Light/dark mode with system preference detection
- **Icons**: Lucide React icon library

### Design Tokens
```css
/* Color palette */
:root {
  --primary: 222.2 84% 4.9%;
  --primary-foreground: 210 40% 98%;
  --secondary: 210 40% 96%;
  --muted: 210 40% 96%;
  --accent: 210 40% 96%;
  --destructive: 0 84.2% 60.2%;
}

/* Typography */
--font-sans: Inter, sans-serif;
--font-mono: 'JetBrains Mono', monospace;

/* Spacing scale */
--spacing-xs: 0.25rem;   /* 4px */
--spacing-sm: 0.5rem;    /* 8px */
--spacing-md: 1rem;      /* 16px */
--spacing-lg: 1.5rem;    /* 24px */
--spacing-xl: 2rem;      /* 32px */
```

## Core UI Components (`components/ui/`)

### Layout Components

#### PageContainer (`PageContainer.tsx`)
```tsx
// Main page layout wrapper
<PageContainer 
  title="Optimizer"
  subtitle="Generate optimal lineups"
  gridMode="loaded"
  onGridModeChange={setGridMode}
>
  {children}
</PageContainer>
```

**Features:**
- Consistent page structure across all views
- Grid mode switching (empty, loading, loaded, error)
- Responsive layout with mobile optimization
- Accessibility-compliant heading hierarchy

#### TopStatusBar (`TopStatusBar.tsx`)
```tsx
// Global status and notifications
<TopStatusBar 
  status="ready"
  activeRuns={runs}
  notifications={messages}
/>
```

**Features:**
- System status indicator
- Active run progress tracking
- Notification center
- Theme toggle integration

#### TopTabs (`TopTabs.tsx`)
```tsx
// Main navigation tabs
<TopTabs 
  activeTab="optimizer"
  onTabChange={setActiveTab}
  tabs={['optimizer', 'variants', 'field', 'simulator']}
/>
```

### Interactive Components

#### ControlsBar (`ControlsBar.tsx`)
**Purpose**: Primary action controls for each application stage

```tsx
<ControlsBar 
  mode="optimizer"
  config={optimizerConfig}
  onConfigChange={setConfig}
  onRun={handleOptimization}
  disabled={isRunning}
/>
```

**Features:**
- Stage-specific control sets
- Configuration form integration
- Real-time validation feedback
- Action button states (idle, loading, success, error)

#### UploadDropzone (`dropzone.tsx`)
```tsx
<UploadDropzone 
  accept=".csv"
  multiple={true}
  onUpload={handleFileUpload}
  validation={csvSchema}
>
  Drop CSV files here or click to browse
</UploadDropzone>
```

**Features:**
- Drag and drop file upload
- File type validation
- Progress indicators
- Error handling and retry logic

### Data Display Components

#### DataTable (`data-table.tsx`)
```tsx
<DataTable 
  data={lineups}
  columns={lineupColumns}
  sorting={true}
  filtering={true}
  pagination={{ pageSize: 50 }}
  virtualization={true}
/>
```

**Features:**
- **Performance**: Virtual scrolling for large datasets
- **Interaction**: Sorting, filtering, column resizing
- **Export**: CSV/JSON export functionality
- **Accessibility**: Full keyboard navigation support

#### MetricsDrawer (`MetricsDrawer.tsx`)
```tsx
<MetricsDrawer 
  open={showMetrics}
  metrics={runMetrics}
  charts={chartConfigs}
/>
```

**Features:**
- Collapsible analytics panel
- Real-time metrics updates
- Interactive charts and visualizations
- Performance comparison tools

### Form Components

#### Configuration Forms
```tsx
// Optimizer configuration
<OptimizerConfigForm 
  config={config}
  onChange={updateConfig}
  validation={configErrors}
/>

// Field sampler settings
<FieldConfigForm 
  config={fieldConfig}
  onSubmit={handleFieldSampling}
/>
```

**Features:**
- Real-time validation with Zod schemas
- Auto-save functionality
- Conditional field rendering
- Help tooltips and documentation links

## Domain-Specific Components

### Lineup Components (`components/lineups/`)

#### LineupViews (`LineupViews.tsx`)
```tsx
<LineupViews 
  lineups={optimizedLineups}
  viewMode="table"
  groupBy="salary"
  showMetrics={true}
/>
```

**Features:**
- **Multiple Views**: Table, card grid, compact list
- **Grouping**: By salary tier, position, team
- **Metrics**: Embedded analytics and comparisons
- **Export**: DraftKings-formatted CSV export

#### LineupTable (`LineupTable.tsx`)
```tsx
<LineupTable 
  lineups={lineups}
  columns={['players', 'salary', 'proj_fp', 'actions']}
  selectable={true}
  onSelectionChange={setSelected}
/>
```

**Features:**
- Lineup-optimized table design
- Player name display with positions
- Salary formatting and validation indicators
- Bulk selection and actions

#### PlayerCell (`PlayerCell.tsx`)
```tsx
<PlayerCell 
  players={lineupPlayers}
  format="compact"
  showPositions={true}
  showSalaries={false}
/>
```

**Features:**
- Condensed player display for lineups
- Position badge indicators
- Team color coding
- Hover tooltips with detailed stats

### Metrics Components (`components/metrics/`)

#### RunSummary (`RunSummary.tsx`)
```tsx
<RunSummary 
  run={runData}
  showDetails={expanded}
  onToggleDetails={setExpanded}
/>
```

**Features:**
- Run metadata display
- Performance metrics visualization
- Execution timeline
- Error reporting and diagnostics

#### IngestSummary (`IngestSummary.tsx`)
```tsx
<IngestSummary 
  summary={ingestStats}
  validationErrors={errors}
  onRetry={handleRetry}
/>
```

**Features:**
- Data ingestion statistics
- Validation error reporting
- Data quality indicators
- Retry and correction workflows

### Run Management (`components/runs/`)

#### RunTracker (`RunTracker.tsx`)
```tsx
<RunTracker 
  activeRuns={runningProcesses}
  onCancel={cancelRun}
  onViewResults={showResults}
/>
```

**Features:**
- Real-time run status tracking
- Progress indicators with ETA
- Cancel and retry actions
- Results navigation

## Theme System (`components/theme/`)

### ThemeProvider (`ThemeProvider.tsx`)
```tsx
<ThemeProvider 
  attribute="class"
  defaultTheme="system"
  enableSystem={true}
  disableTransitionOnChange={false}
>
  {children}
</ThemeProvider>
```

**Features:**
- System preference detection
- Smooth theme transitions
- Theme persistence across sessions
- CSS custom property integration

### Theme Toggle
```tsx
<ThemeToggle 
  size="sm"
  variant="outline"
  showLabel={false}
/>
```

**Features:**
- Light/dark/system mode cycling
- Visual feedback for current theme
- Accessibility-compliant implementation
- Keyboard navigation support

## Advanced Components (`components/aceternity/`)

### AnimatedElements
**Purpose**: Enhanced UI effects for data visualization

```tsx
<AnimatedNumber 
  value={totalEV}
  duration={800}
  formatter={(n) => `$${n.toFixed(2)}`}
/>

<ParticleBackground 
  density={50}
  speed={1.2}
  color="hsl(var(--primary))"
/>
```

**Features:**
- Smooth number animations
- Particle effects for backgrounds
- Loading state animations
- Performance-optimized rendering

## Accessibility Features

### WCAG Compliance
- **Keyboard Navigation**: Full keyboard support for all interactive elements
- **Screen Readers**: Proper ARIA labels and semantic HTML
- **Color Contrast**: WCAG AA compliant color combinations
- **Focus Management**: Visible focus indicators and logical tab order

### Implementation Examples
```tsx
// Accessible data table
<Table role="table" aria-label="Lineup Results">
  <TableHeader>
    <TableRow role="row">
      <TableHead 
        role="columnheader" 
        aria-sort={sortDirection}
      >
        Players
      </TableHead>
    </TableRow>
  </TableHeader>
  <TableBody>
    {lineups.map((lineup, index) => (
      <TableRow 
        key={lineup.id}
        role="row"
        aria-rowindex={index + 1}
      >
        <TableCell role="cell">
          {/* Player data */}
        </TableCell>
      </TableRow>
    ))}
  </TableBody>
</Table>

// Skip navigation
<a 
  href="#main-content" 
  className="skip-link sr-only focus:not-sr-only"
>
  Skip to main content
</a>
```

### Motion Preferences
```tsx
// Respect user motion preferences
const prefersReducedMotion = useMediaQuery('(prefers-reduced-motion: reduce)');

<motion.div
  animate={{ opacity: 1 }}
  transition={{ 
    duration: prefersReducedMotion ? 0 : 0.3 
  }}
>
  {content}
</motion.div>
```

## Performance Optimizations

### Virtual Scrolling
```tsx
// Handle large datasets efficiently
import { useVirtualizer } from '@tanstack/react-virtual';

function VirtualizedLineupTable({ lineups }) {
  const virtualizer = useVirtualizer({
    count: lineups.length,
    getScrollElement: () => parentRef.current,
    estimateSize: () => 64,
  });

  return (
    <div ref={parentRef} className="h-400 overflow-auto">
      <div style={{ height: virtualizer.getTotalSize() }}>
        {virtualizer.getVirtualItems().map((item) => (
          <LineupRow 
            key={item.key}
            lineup={lineups[item.index]}
            style={{
              height: item.size,
              transform: `translateY(${item.start}px)`
            }}
          />
        ))}
      </div>
    </div>
  );
}
```

### Memoization
```tsx
// Prevent unnecessary re-renders
const LineupCard = memo(({ lineup, selected, onToggle }) => {
  const handleClick = useCallback(() => {
    onToggle(lineup.id);
  }, [lineup.id, onToggle]);

  const formattedSalary = useMemo(() => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
    }).format(lineup.total_salary);
  }, [lineup.total_salary]);

  return (
    <Card 
      className={cn('cursor-pointer', selected && 'ring-2')}
      onClick={handleClick}
    >
      <CardContent>
        <div className="font-medium">{formattedSalary}</div>
        <PlayerList players={lineup.players} />
      </CardContent>
    </Card>
  );
});
```

## Development Workflow

### Component Development
```bash
# Start Storybook (if configured)
npm run storybook

# Component testing
npm run test components/

# Visual regression testing
npm run test:visual
```

### Style Guidelines
```tsx
// Component structure template
interface ComponentProps {
  // Props with clear types and docs
  data: DataType;
  onAction?: (id: string) => void;
  variant?: 'default' | 'compact';
  className?: string;
}

export function Component({ 
  data, 
  onAction, 
  variant = 'default',
  className 
}: ComponentProps) {
  return (
    <div className={cn('base-styles', className)}>
      {/* Component implementation */}
    </div>
  );
}

// Export with proper display name
Component.displayName = 'Component';
```

## Testing Strategy

### Unit Tests
```tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { LineupTable } from './LineupTable';

describe('LineupTable', () => {
  const mockLineups = [
    {
      id: '1',
      players: ['player1', 'player2'],
      total_salary: 49500,
      proj_fp: 285.5
    }
  ];

  it('renders lineup data correctly', () => {
    render(<LineupTable lineups={mockLineups} />);
    
    expect(screen.getByText('$49,500')).toBeInTheDocument();
    expect(screen.getByText('285.5')).toBeInTheDocument();
  });

  it('handles row selection', () => {
    const onSelect = jest.fn();
    render(
      <LineupTable 
        lineups={mockLineups}
        onSelectionChange={onSelect}
      />
    );

    fireEvent.click(screen.getByRole('checkbox'));
    expect(onSelect).toHaveBeenCalledWith(['1']);
  });
});
```

### Visual Tests
```tsx
// Playwright component testing
import { test, expect } from '@playwright/experimental-ct-react';
import { LineupViews } from './LineupViews';

test('lineup views display correctly', async ({ mount }) => {
  const component = await mount(
    <LineupViews 
      lineups={testLineups}
      viewMode="table" 
    />
  );

  await expect(component).toHaveScreenshot('lineup-table-view.png');
});
```

## Future Enhancements

### Planned Features
- **Virtual Tables**: Enhanced performance for massive datasets
- **Advanced Filters**: Complex filtering UI with query builder
- **Collaborative Features**: Real-time collaboration on lineup building
- **Mobile Optimization**: Enhanced mobile responsive design

### Performance Improvements
- **Component Streaming**: React 18 concurrent features
- **Intersection Observer**: Lazy loading for off-screen components
- **Web Workers**: Background processing for heavy computations
- **Service Worker Caching**: Offline component functionality
</file>

<file path="configs/optimizer.yaml">
# Example optimizer configuration (adapter consumes this and maps to constraints)

# Core knobs
num_lineups: 20
max_salary: 50000
# min_salary: 49000  # optional
uniques: 2

# Player controls
lock: []      # e.g., ["12345678", "23456789"] dk_player_id
ban: []       # e.g., ["34567890"]

# Exposures (examples)
# exposure_caps:
#   players:
#     "12345678": { max: 0.5 }   # 50%
#   teams:
#     BOS: { max: 3 }
#   positions:
#     C: { max: 2 }

# Grouping / stacking (shape is solver-dependent, passed through)
# group_rules:
#   - name: "No double C"
#     type: max
#     positions: ["C"]
#     max_from_group: 1

# Ownership penalty (if solver supports it)
ownership_penalty:
  enabled: false
  mode: sigmoid
  lambda: 1.0

# Team constraints
max_from_team: 3
min_from_team: 0

# Randomness / solver params
randomness: 0.0
cp_sat_params:
  # max_time_seconds: 0.7
  # relative_gap_limit: 0.001
  # num_search_workers: 0
  # log_search_progress: false

# Site-specific (DK only for now)
dk_strict_mode: false
</file>

<file path="configs/README.md">
# Configuration Directory

This directory contains YAML configuration files for all NBA-DFS pipeline processes. Configurations define parameters, constraints, and settings for optimization, variant generation, field sampling, and simulation.

## Overview

- **Purpose**: Centralized configuration management for all pipeline stages
- **Format**: YAML files with strict validation against JSON schemas
- **Environment**: `defaults.yaml` (tracked) + `local.yaml` (gitignored overrides)
- **Usage**: Referenced by CLI tools via `--config` parameter

## Configuration Files

### Core Process Configs
- `optimizer.yaml` - Lineup optimization parameters
- `variants.yaml` - Variant generation settings  
- `field.yaml` - Contest field sampling configuration
- `sim.yaml` - GPP simulation parameters
- `full_pipeline.yaml` - End-to-end workflow configuration

### Environment Configs
- `defaults.yaml` - Default settings (version controlled)
- `local.yaml` - Local overrides (gitignored)

## Usage Examples

```bash
# Use specific config file
python -m processes.optimizer --config configs/optimizer.yaml

# Override with local settings
python -m processes.optimizer --config configs/local.yaml
```
</file>

<file path="configs/sim.yaml">
# GPP Simulator defaults (PRP-5)
#
# Recognized knobs
# - num_trials: Monte Carlo trials (int)
# - projection_model: which column(s) to use for scoring (str)
# - boom_bust: stochastic model parameters (mapping)
# - dup_penalty: de-duplication treatment in payouts (float|mapping)
# - late_swap: enable late swap modeling (bool)
# - min_cash_prob: report min cash probability / ROI (bool)
# - seed: RNG seed (int)

num_trials: 10
projection_model: mean
boom_bust: {}
dup_penalty: 0.0
late_swap: false
min_cash_prob: false
seed: 42
</file>

<file path="configs/variants.yaml">
# Example variant configuration

# Total number of variants to generate (global or per base lineup depending on implementation)
num_variants: 20

# Swap window constraints (implementation-defined). Example expresses allowed salary delta range
# or projection delta range for swap candidates.
swap_window:
  salary_delta: [ -800, 800 ]
  proj_delta: [ -5.0, 5.0 ]

# Randomness level (0–1) applied in selection/perturbation by the variant builder
randomness: 0.15

# Exposure targets and caps (per player/team/position)
exposure_targets:
  player_caps:
    p1: 0.35
    p2: 0.25
  team_caps:
    LAL: 0.5
  position_caps:
    C: 0.6

# Group rules (soft/hard) to keep/avoid player combinations
group_rules:
  must_have: []
  avoid_groups: []

# Minimum number of changes vs. base lineup
uniques: 1

# Deduplicate variants by sorted player set
avoid_dups: true

# Optional ownership guidance shaping
ownership_guidance:
  enabled: false
  target: 0.3

# Seed for RNG
seed: 42
</file>

<file path="configs/yamllint.yml">
extends: default

rules:
  document-start: disable
  line-length:
    max: 200
    level: warning
  braces: disable
  brackets: disable
  commas: disable
  empty-lines: disable
  comments:
    min-spaces-from-content: 1
</file>

<file path="docs/legacy/LEGACY-OPTIMIZER.md">
# Legacy Optimizer Overview and De‑UI Plan (PRP‑2L)

## Overview
The legacy optimizer combines a Streamlit UI (`optimize.py`) with a functional solver core (`nba_optimizer_functional.py`). The UI hosts controls, visualization (AG Grid), and exports. The core implements projection validation, DK ID attachment, ownership penalty models, pruning, and solver orchestration (CBC/CP‑SAT).

## Module Graph
```mermaid
graph TD
  UI[optimize.py (Streamlit UI)] -->|calls| Core[nba_optimizer_functional.py]
  Core -->|uses| CPSAT[cpsat_solver.py]
  Core -->|uses| PRUNE[pruning.py]
  UI -->|AG Grid| AGG[st_aggrid]
  UI -->|path hack| BACKEND[backend.* (external)]
  UI -->|I/O| IOF[io_facade.run_io (external)]
  UI -->|components| FE[frontend.components.* (external)]
```

External modules (`backend.*`, `io_facade.*`, `frontend.*`) are legacy paths referenced via `sys.path.append`; they are not needed for a headless adapter.

## Call Flow
```mermaid
sequenceDiagram
  participant App as optimize.py (UI)
  participant Core as nba_optimizer_functional.py
  participant CPS as cpsat_solver.py

  App->>Core: optimize_with_diagnostics(df, constraints, seed, site, ids_df, engine)
  Core->>Core: validate_projections(df)
  Core->>Core: attach_player_ids_if_available(df, site, ids_df)
  Core->>Core: _normalize_ownership(df)
  Core->>Core: convert_projections_to_players(df, proj_min)
  Core->>Core: build_problem(players, constraints, site)
  Core->>CPS: (CP‑SAT path) objective telemetry and penalty helpers
  Core-->>App: (lineups, diagnostics)
  App->>App: lineups_to_grid_df + AG Grid render
  App-->>User: CSV export / run comparison
```

## I/O Shapes
- Inputs (projections_df):
  - Required: `name` (str), `team` (str A‑Z 2–4), `position` ("PG" or "PG/SG"), `salary` (int), `proj_fp` (float)
  - Optional: `own_proj` (float [0,1] or %), `stddev` (float), `minutes` (float), `dk_id` (str|int)
- Outputs:
  - `lineups`: List[Lineup] each with players: `player_id`, `name`, `team`, `positions`, `salary`, `proj`, `own_proj?`, `dk_id?`
  - `diagnostics`: `{success_rate, warnings[], errors[], normalization.ownership{...}, ownership_penalty{...}, engine, ...}`
  - CSV helpers: DK import CSV (header `PG,SG,SF,PF,C,G,F,UTIL`).

## De‑UI Extraction Plan
- Headless API to expose in PRP‑2:
  - `run_optimizer(projections_df, constraints: dict, seed: int, site: str, engine: str) -> (lineups_df, metrics_dict)`
  - Implementation sketch: call `optimize_with_diagnostics` then convert to a tabular `lineups_df` using `lineups_to_grid_df`; pass `diagnostics` through as `metrics_dict`.
- UI dependencies to isolate/remove:
  - Streamlit (`st.*`), AG Grid CSS, `st_aggrid` components
  - `st.session_state` coupling and spinners
  - Download/retention buttons and direct file I/O
  - `sys.path.append` and `backend.*` imports → replace with proper package paths
  - `io_facade.*`, `frontend.*` used by the UI only
- Minimal refactors in PRP‑2:
  - Lift compute helpers into a package path accessible without path hacks
  - Keep `nba_optimizer_functional` stable; adapter composes solved lineups + diagnostics

## Risks & Notes
- Hidden imports from external legacy packages need stubbing or removal in PRP‑2
- Ownership penalty math duplicated in CBC/CP‑SAT helpers; adapter should treat it as opaque diagnostics
- DK‑strict flows depend on `dk_data/` file layout; adapter should inject validated inputs instead
</file>

<file path="docs/legacy/SYMBOLS-TO-KEEP.md">
# Symbols to Keep — Stable API (PRP‑2L)

The following symbols provide a stable, headless surface for the optimizer adapter. Signatures reflect current code; data contracts summarized inline.

- `optimize_with_diagnostics(projections_df, constraints, seed, site, player_ids_df=None, engine="cbc") -> (lineups, diagnostics)`
  - From: `processes/optimizer/_legacy/nba_optimizer_functional.py`
  - Inputs: `projections_df` with columns: name, team, position, salary, proj_fp, [own_proj?, stddev?, minutes?, dk_id?]
  - Outputs: `lineups` (List[Lineup]), `diagnostics` dict with dk‑id match stats, ownership normalization, and engine info.

- `optimize(projections_df, constraints, seed, site, player_ids_df=None, engine="cbc") -> List[Lineup]`
  - Convenience wrapper returning only lineups.

- `optimize_dk_strict(projections_path, constraints, seed, player_ids_path=None, engine="cbc") -> (lineups, diagnostics)`
  - Enforces DK‑strict contracts (real DK IDs only) using `dk_data/` loaders.

- `optimize_to_dk_csv(projections_df, constraints, seed, player_ids_df=None) -> str`
  - Runs optimizer and returns a DK import CSV string.

- `optimize_dk_strict_to_csv(projections_path, constraints, seed, player_ids_path=None, engine="cbc") -> str`
  - DK‑strict end‑to‑end flow to CSV.

- `validate_projections(df, site) -> None`
  - Ensures required columns present; raises `OptimizerError` on failure.

- `attach_player_ids_if_available(df, site, ids_df) -> (df, diag)`
  - Attaches DK IDs from provided DataFrame or defaults; returns diagnostics including success rate.

- `convert_projections_to_players(df, proj_min) -> List[Dict]`
  - Maps projections to solver player dicts: `{player_id, name, team, positions[], salary, proj, own_proj?, dk_id?}`.

- `build_problem(players, constraints, site, override_coeffs=None) -> (problem, var_index, lp_vars, base_obj)`
  - Constructs solver problem with deterministic variable ordering and returns the base objective expression.

Usage note: The adapter for PRP‑2 should not import Streamlit or AG Grid; use only these symbols to run solves and obtain diagnostics. Lineups can be converted to a tabular DataFrame with `lineups_to_grid_df` (from legacy DK helpers) if needed for downstream parity.
</file>

<file path="docs/PRPs/AGENT-Frontend-Shadcn.md">
# Frontend Shadcn Agent — Specification

## 1) Purpose
A specialized frontend agent that designs and implements high‑quality React/Next.js UI using **shadcn/ui** (Radix primitives + Tailwind), with a focus on developer ergonomics, DX, and accessible, polished UX for the NBA‑DFS project.

## 2) When to Use (Scope)
Use this agent whenever you need:
- New UI components/pages composed from **shadcn/ui**.
- Wiring forms with **react-hook-form + zod** validation.
- Data grids using **@tanstack/react-table** (sortable, filterable, virtualized when necessary).
- Theming (light/dark/system via **next-themes**), layout shells, navigation, dialogs/sheets/menus.
- UX polish: empty states, loading/skeletons, optimistic updates, keyboard shortcuts.
- Integration stubs to backend APIs you provide (no backend authoring unless explicitly asked).

## 3) Non‑Goals (Out of Scope)
- Writing or changing backend business logic (Python/servers) unless requested.
- Heavy visual design exploration without a brief (provide a short style prompt if you need custom look).
- Introducing new major dependencies without approval.

## 4) Tech Stack & Conventions
- **App framework:** Next.js (React 18+). If not present, generate plain React Vite scaffolds with compatible structure.
- **UI kit:** shadcn/ui (Radix UI). Icons via **lucide-react**.
- **Styling:** Tailwind CSS with design tokens; avoid inline styles unless trivial.
- **Forms:** react-hook-form + zod (schema‑first validation).
- **Tables:** @tanstack/react-table v8.
- **Charts (if needed):** recharts.
- **State:** local component state first; **Zustand** or URL params if shared/global is required.
- **Theming:** next-themes; respect `prefers-color-scheme`.
- **Testing:** Vitest + React Testing Library for units; Playwright for basic flows (optional).
- **Lint/Format:** ESLint + Prettier; import/order rules; Tailwind plugin.
- **Accessibility:** WAI‑ARIA compliant, focus‑trap in dialogs, visible focus rings, color‑contrast ≥ 4.5:1.

## 5) Inputs the Agent Expects
- **Design brief**: goal, user flows, must‑have components.
- **Data contract**: TypeScript interfaces for inputs/outputs (or JSON examples to infer types).
- **API list**: URLs, methods, payloads; or a mock shape to wire stubs.
- **Constraints**: performance targets, bundle limits, viewport breakpoints.
- **Repo notes**: where to place components/pages; naming conventions.

## 6) Outputs the Agent Produces
- **Components** under `components/ui/*` and feature folders `components/<feature>/*`.
- **Pages/Routes** in `app/*` (Next) or `src/routes/*` (Vite/React Router).
- **Hooks** in `lib/hooks/*`; **schemas** in `lib/schemas/*`.
- **Stories** in `*.stories.tsx` (optional) and **tests** in `__tests__/*`.
- **Docs**: short `README.md` per feature with usage examples and props tables.

## 7) Quality & Style Guide
- Keep components **pure, typed, and composable**; minimal prop surfaces with sensible defaults.
- Use **Headless Radix** behaviors; wrap with shadcn theme tokens.
- No unnamed wrappers; meaningful component & file names.
- Avoid magic numbers; use Tailwind tokens (spacing, colors, radii, shadows).
- Prefer **composition over configuration**; break down large components.
- Loading: use skeletons; fallbacks for suspense; optimistic updates gated by zod types.
- **Error states**: inline, non-blocking; toast for success/error via shadcn `<Toast/>` pattern.
- **A11y**: labels, `aria-*`, keyboard navigation, trap focus, restore focus on close.

## 8) Process the Agent Follows
1. **Plan:** Clarify brief, list components, data contracts, routes. Produce a tiny checklist.
2. **Scaffold:** Add required shadcn components via CLI, generate feature folders.
3. **Implement:** Build components, wire forms/tables, connect to mocks or provided APIs.
4. **Polish:** states (loading/empty/error), animations (Framer Motion if requested), responsive design.
5. **Test:** unit tests for logic, smoke test per page.
6. **Docs:** short README with examples and copy‑paste snippets.
7. **Commit/PR:** follow Git actions below.

## 9) Git & CI Actions (Start/End of Task)
**Start:**
- Create a feature branch: `git switch -c feature/ui-<short-scope>`

**During:**
- Commit small, focused changes: `feat(ui): add <Component> with RHF+zod`
- If main moved: `git fetch origin && git rebase origin/main`

**End:**
- Push: `git push -u origin HEAD`
- Open PR to `main` with summary, screenshots/gifs, checklist, and testing notes.
- After review: **squash merge**; delete branch.

> Note: This repo uses **uv** for Python deps; for frontend use `pnpm` (preferred) or `npm`. Keep node deps minimal; ask before adding heavy libs.

## 10) Definition of Done (Acceptance Criteria)
- Components/pages render without runtime errors; pass lint & type checks.
- Props fully typed; zod schemas provided where applicable.
- A11y verified (Tab/Shift+Tab, Enter/Space, Escape for modals).
- Responsive at sm/md/lg/xl; no layout shifts on typical content.
- Tests: basic render + at least one behavior test per critical component.
- README with usage & prop table; screenshots (or Storybook stories).

## 11) Directory Layout (Default)
```
app/                 # routes (Next) or src/routes for Vite
components/ui/       # shadcn primitives (generated)
components/<feature> # feature components
lib/hooks/           # reusable hooks
lib/schemas/         # zod schemas
lib/utils.ts         # cn(), format helpers
public/              # assets
styles/              # globals.css, tailwind.css
__tests__/           # vitest/RTL
```

## 12) Prompts You Can Paste to Kick It Off
**A. One‑liner (fast start):**
“Build a shadcn UI for the <Feature> page: data table (tanstack) with column filters & pagination; RHF+zod form in a Dialog to add/edit rows; dark mode; responsive; include tests and a short README.”

**B. Full brief template:**
- Feature name & goal:
- Routes & URL params:
- Data contract (TS interfaces or JSON samples):
- APIs (GET/POST/PUT/DELETE):
- Components needed:
- Edge cases / empty & error states:
- Perf constraints (bundle limit, rendering hints):
- Deliverables (screens, tests, docs, stories):

## 13) Guardrails
- Do not alter backend contracts without approval.
- Ask before adding deps > 10 kB gzipped or with peer deps.
- Keep PRs under ~400 lines where possible.
- No global mutable singletons; keep things tree‑shakable.
- Prefer server components for static content (Next).

---

**Use this description verbatim for the agent’s “What it does & when to use it.”**
</file>

<file path="docs/PRPs/PRP-0_pipeline_schema_pack">
PRP: Pipeline Schema Pack (SSOT)

0) Objective

Create a complete, versioned set of schemas that define the single source of truth (SSOT) for the NBA-DFS pipeline. These schemas are the contracts for every stage (ingest → normalize → optimize → variants → field → sim). They must be strict enough to catch errors and stable enough to enable reproducible runs.

⸻

1) Scope & Deliverables

1.1 Files to produce (no implementation code)

Place all files under pipeline/schemas/.
	•	README.md (overview + usage + change log rules)
	•	common.types.yaml (reusable type aliases, enums, regexes)
	•	Entity schemas
	•	players.schema.yaml
	•	slates.schema.yaml
	•	projections_raw.schema.yaml
	•	projections_normalized.schema.yaml
	•	optimizer_lineups.schema.yaml
	•	optimizer_metrics.schema.yaml
	•	variant_catalog.schema.yaml
	•	variant_metrics.schema.yaml
	•	field.schema.yaml
	•	field_metrics.schema.yaml
	•	contest_structure.schema.yaml
	•	sim_results.schema.yaml
	•	sim_metrics.schema.yaml
	•	Run control
	•	manifest.schema.yaml
	•	runs_registry.schema.yaml

All schemas must include: $schema, title, description, version, type, properties, required, additionalProperties (false), and examples (non-executable, illustrative).

1.2 Supported storage targets
	•	Primary: Parquet tables (DuckDB-compatible)
	•	Secondary: JSON/CSV exporters must map 1:1 with these schemas

⸻

2) Global Conventions (apply to all schemas)
	•	Primary identity: dk_player_id (string, DK canonical ID) travels end-to-end.
	•	Timestamps: UTC ISO-8601 (YYYY-MM-DDTHH:mm:ss.sssZ).
	•	Money: integers in DK dollars (e.g., salary: 5400), never floats.
	•	Floats: use number with explicit ranges; probabilities in [0,1].
	•	Strictness: additionalProperties: false everywhere.
	•	Enums: positions {PG, SG, SF, PF, C, G, F, UTIL}; site {DK}; run types {optimizer,variants,field,sim}.
	•	Lists: preserve order where semantically meaningful (e.g., players in a lineup).
	•	Lineage: any normalization must carry a lineage object (source, mapping notes, hash).
	•	Hashing: content_sha256 recorded for inputs used by a run.
	•	Versioning: version field in each schema and schema_version in manifests.

⸻

3) Schema Definitions (field-level contracts)

Below are the required fields and constraints. The agent will encode these into YAML/JSON-Schema.

3.1 players.schema.yaml
	•	dk_player_id (string, pk)
	•	name (string, non-empty)
	•	team (string, 2–4 chars, e.g., BOS)
	•	pos_eligible (array[string], items in POS enum, 1–3 items)
	•	notes (string, optional)
	•	first_seen_ts (string, timestamp)
	•	last_seen_ts (string, timestamp)

3.2 slates.schema.yaml
	•	slate_id (string, pattern ^\d{8}_NBA$, pk e.g., 20251101_NBA)
	•	site (enum: DK)
	•	game_date (string, date YYYY-MM-DD)
	•	created_ts (string, timestamp)

3.3 projections_raw.schema.yaml (as uploaded; lenient but typed)
	•	slate_id (string)
	•	source (string)
	•	uploaded_ts (string, timestamp)
	•	csv_filename (string)
	•	raw (object) – free-form key/values preserved; no required shape
	•	content_sha256 (string, 64 hex)

3.4 projections_normalized.schema.yaml (canonical)
	•	slate_id (string, matches slates)
	•	source (string)
	•	dk_player_id (string, fk→players)
	•	name (string)
	•	team (string)
	•	pos (string, in POS enum or composite like PG/SF allowed via regex ^([A-Z]{2,3})(/[A-Z]{2,3})*$)
	•	salary (integer, ≥ 3000, ≤ 20000)
	•	minutes (number, ≥ 0, ≤ 60)
	•	proj_fp (number, ≥ 0, ≤ 120)
	•	ceil_fp (number, ≥ proj_fp, ≤ 120)
	•	floor_fp (number, ≥ 0, ≤ proj_fp)
	•	own_proj (number, ≥ 0, ≤ 1, optional)
	•	updated_ts (string, timestamp)
	•	lineage (object: {mapping: object, source_fields: array[string], content_sha256: string})

3.5 optimizer_lineups.schema.yaml
	•	run_id (string, fk→runs_registry)
	•	lineup_id (string, unique per run)
	•	players (array[string], length 8, all fk→players; UTIL allowed)
	•	dk_positions_filled (array[object] per roster slot, positions in enum)
	•	total_salary (integer, 50000 ± 0 tolerant with rule: ≤ 50000)
	•	proj_fp (number, ≥ 0)
	•	ceil_fp (number, ≥ proj_fp)
	•	own_proj (number, ≥ 0, ≤ 1, optional)
	•	export_csv_row (string, exact DK format preview)
	•	tags (array[string], optional)

3.6 optimizer_metrics.schema.yaml
	•	run_id (string)
	•	Aggregates: mean_proj, median_proj, stdev_proj, salary_utilization_mean, dupe_risk_index (number 0–1, optional), etc.
	•	Distributions: bucketed histograms as arrays of {bin_start, bin_end, count} (validate monotonic bins)

3.7 variant_catalog.schema.yaml
	•	run_id (string, source optimizer run)
	•	variant_id (string, unique per catalog)
	•	parent_lineup_id (string, fk→optimizer_lineups)
	•	players (array[string], length 8)
	•	variant_params (object: parameterization used)
	•	export_csv_row (string)
	•	Optional similarity metrics: hamming_vs_parent (integer 0–8), salary_delta (integer), proj_delta (number)

3.8 variant_metrics.schema.yaml
	•	Standard aggregates + coverage: per-player inclusion rates, position coverage, 'chalk_index', 'entropy'

3.9 field.schema.yaml
	•	run_id (string, source variant run)
	•	entrant_id (integer or string, unique within run)
	•	origin (enum: variant|optimizer|external)
	•	variant_id (string, optional if origin=optimizer)
	•	lineup_id (string if origin=optimizer)
	•	players (array[string], length 8)
	•	export_csv_row (string)
	•	Optional: weight (number ≥ 0), default 1

3.10 field_metrics.schema.yaml
	•	Coverage per player/team/position
	•	Duplication risk estimates
	•	Pairwise Jaccard summaries (validate 0–1)

3.11 contest_structure.schema.yaml
	•	contest_id (string)
	•	name (string)
	•	field_size (integer > 0)
	•	payout_curve (array of {rank_start, rank_end, prize} with non-overlapping contiguous ranges; validate sum of ranks == field_size)
	•	entry_fee (integer ≥ 0)
	•	rake (number 0–1)
	•	site (enum: DK)

3.12 sim_results.schema.yaml
	•	run_id (string, source field+contest)
	•	world_id (integer, ≥ 0)
	•	entrant_id (string/int, fk→field)
	•	score (number)
	•	rank (integer ≥ 1)
	•	prize (integer ≥ 0)
	•	Optional: components (object: breakdowns), seed (integer)

3.13 sim_metrics.schema.yaml
	•	EV/ROI per entrant and aggregates
	•	Convergence stats (e.g., batch-world streaming; include rmse_by_batch)
	•	Risk-adjusted metrics: sharpe, sortino (validate denominators > 0)

3.14 manifest.schema.yaml (per run folder)
	•	schema_version (string)
	•	run_id (string, unique)
	•	run_type (enum: optimizer|variants|field|sim)
	•	slate_id (string)
	•	created_ts (string)
	•	inputs (array of {path, content_sha256, role}; roles: projections_normalized|players|variants|field|contest_structure|config)
	•	config (object: full knobs dumped)
	•	outputs (array of {path, kind}; kinds align with schema names)
	•	tags (array[string])
	•	git_rev (string, optional)
	•	notes (string, optional)

3.15 runs_registry.schema.yaml
	•	run_id (string, pk)
	•	run_type (enum)
	•	slate_id (string)
	•	status (enum: success|failed|running|unknown)
	•	primary_outputs (array[string] paths)
	•	metrics_path (string path)
	•	created_ts (string)
	•	tags (array[string])

⸻

4) Validation & Tooling Requirements
	•	Provide a CLI validator stub spec (not implementation):
	•	validate-table --schema pipeline/schemas/<name>.schema.yaml --input <parquet|json|csv>
	•	Must fail on:
	•	missing required fields
	•	out-of-range values
	•	additionalProperties
	•	enum mismatches
	•	roster invalidity (8 players, salary cap, positions)
	•	Specify cross-table checks:
	•	projections_normalized.dk_player_id ⊆ players.dk_player_id
	•	Lineup/variant/field players all ∈ players table
	•	Contest payout ranks sum equals field_size
	•	Define priority resolution for projections (doc only):
	•	Latest updated_ts wins per (slate_id, dk_player_id) with source precedence if tie: manual > primary_source > other.

⸻

5) Acceptance Criteria
	1.	Completeness: All schemas and README delivered under pipeline/schemas/.
	2.	Strictness: Each schema sets additionalProperties: false; required fields and enums defined; numeric ranges enforced.
	3.	Examples: Each schema includes at least one minimal valid example and one invalid example (as YAML literals in comments or examples blocks).
	4.	Interoperability notes: README states Parquet type mapping (lists, structs), and JSON/CSV export mapping.
	5.	Cross-references: README documents foreign-key relationships and cross-table validations.
	6.	DK compliance checks: Lineup roster constraints and export_csv_row documented precisely (header order, delimiter, utility slot handling).
	7.	Versioning: Each schema carries a version. README explains bump rules (patch/minor/major) and change log format.
	8.	Repo cleanliness: No executable code; schemas lint clean (yamllint baseline).

⸻

6) Out of Scope (for this PRP)
	•	Implementing ingestion or adapters
	•	Building the validator CLI/tooling
	•	UI work or exporters
	•	Non-DK sites

⸻

7) Task Breakdown (for the agent)
	1.	Create directory & README.md scaffolding under pipeline/schemas/.
	2.	Author common.types.yaml (enums, regexes, shared defs).
	3.	Draft entity schemas (3.1–3.14) with examples.
	4.	Draft runs_registry.schema.yaml.
	5.	Write cross-ref & validation notes in README.
	6.	Run schema lints (YAML syntax + JSON-Schema draft 2020-12 validity).
	7.	Submit PR with:
	•	File list
	•	Brief change log
	•	Evidence of lint passing (paste output)

⸻

8) Definition of Done (DoD)
	•	All files listed in §1.1 exist with content meeting §5.
	•	CI (or local lint) demonstrates schemas are syntactically valid.
	•	README clearly explains how every pipeline artifact maps to a schema and how future contributors should evolve them.
	•	A tiny golden dataset description (not data) is included in README to guide future test fixtures.
</file>

<file path="docs/PRPs/PRP-1-Ingest-Normalization.md">
# PRP-1: Ingestion & Normalization + Run Registry (SSOT)

## Status
**Planned** — next after PRP-0 Schema Pack.

## Objective
Implement the front door of the pipeline:
1) Upload **Projections CSV** (any source) and **Player IDs CSV**.  
2) Normalize projections to the canonical schema.  
3) Persist artifacts to Parquet with lineage + content hashes.  
4) Emit **run manifests** and register runs in the **Run Registry**.

No business-logic changes to optimizer/variants/field/sim yet — only ingestion, normalization, persistence, and bookkeeping.

---

## Start Bookend — GitHub Actions
Use the PRP Start action to create the feature branch:

```
PRP Start → branch=feature/ingest-normalization
```

(If running manually)
```bash
git checkout -b feature/ingest-normalization
git push -u origin feature/ingest-normalization
```

---

## Scope & Deliverables

### 1) User-facing (thin CLI/UI stubs only)
- **Uploads**
  - `projections.csv` (arbitrary headers)
  - `player_ids.csv` (DK IDs + names/teams/positions)
- **Normalization preview** (tabular print or UI grid placeholder; no styling required)
- **“Materialize” button** to write normalized Parquet + metadata

### 2) Persistence (Parquet/DuckDB)
- Write to the following locations (create folders if absent):
  - `data/reference/players.parquet`
  - `data/projections/raw/<slate_id>__<source>__<uploaded_ts>.parquet`
  - `data/projections/normalized/<slate_id>__<source>__<updated_ts>.parquet`
- Create/append to:
  - `data/registry/runs.parquet` (Run Registry table)
  - `data/runs/ingest/<run_id>/manifest.json` (per-run manifest)

### 3) Schema adherence
- Validate against these PRP‑0 schemas:
  - `players.schema.yaml`
  - `projections_raw.schema.yaml`
  - `projections_normalized.schema.yaml`
  - `manifest.schema.yaml`
  - `runs_registry.schema.yaml`

### 4) Lineage & Priority
- Compute `content_sha256` of uploaded CSVs (raw bytes). Store in `projections_raw` and `lineage.content_sha256` in normalized.
- **Latest wins** per `(slate_id, dk_player_id)` based on `updated_ts` (tie-breaker source order: `manual > primary > other`). Documented and covered by tests.

### 5) Header mapping
- Introduce a **mapping catalog** to transform arbitrary projection sources → canonical fields:
  - Supported canonical columns: `dk_player_id`, `name`, `team`, `pos`, `salary`, `minutes`, `proj_fp`, `ceil_fp`, `floor_fp`, `own_proj`
  - Allow `extras` bag for unknowns (keeps schemas strict via `additionalProperties: false` on the main object).
- Mapping catalog can be simple YAML in `pipeline/ingest/mappings/`:
  - e.g., `source_abc.yaml`, `source_xyz.yaml` with `from_header: to_field` pairs and basic transforms (strip `$`, cast int/float).

### 6) Run Registry & Manifest
- Mint `run_id` as `YYYYMMDD_HHMMSS_<shorthash>`
- Manifest must capture: inputs (with sha), outputs, config snapshot (`source`, `slate_id`, `mapping_name`), `schema_version` set, tags, notes.

---

## Non-Goals (this PRP)
- No optimizer/variant/field/sim execution.
- No full UI — a minimal CLI or script entrypoint is acceptable.
- No remote databases; keep DuckDB + Parquet on disk.

---

## Directory & Files (added/modified)

```
pipeline/
  ingest/
    __init__.py
    mappings/
      README.md
      example_source.yaml
    README.md
  registry/
    __init__.py
    README.md
  io/
    __init__.py
    README.md
data/
  reference/
  projections/
    raw/
    normalized/
  registry/
  runs/
docs/
  PRPs/
    PRP-1-ingest-normalization.md   ← this file (copy into repo if desired)
tests/
  test_ingest_normalize_smoke.py
  test_priority_latest_wins.py
  test_manifest_registry_write.py
```

> Stubs (`__init__.py`) can be empty; tests can be basic at first (see Test Plan). No heavy implementation required to pass PR — but enough to validate schemas + write Parquet with correct columns.

---

## Interfaces & I/O Contracts

### CLI (thin)
```
uv run python -m pipeline.ingest   --slate-id 20251101_NBA   --source primary   --projections path/to/projections.csv   --player-ids path/to/player_ids.csv   --mapping pipeline/ingest/mappings/example_source.yaml   --tag "PRP-1" --tag "demo"
```

**Outputs on success**
- Prints normalization preview (first 5 rows)
- Writes Parquet + manifest
- Appends Run Registry row with status=success

**Exit non-zero** on validation failure with a summary of errors.

### Parquet shapes
- Must validate exactly against PRP‑0 schemas (`Draft 2020-12`).

---

## Acceptance Criteria

1. **Schema compliance**  
   - `players.parquet`, `projections/raw`, `projections/normalized` validate against their schemas.  
   - `manifest.json` and `runs.parquet` validate against their schemas.

2. **Lineage integrity**  
   - `content_sha256` recorded in raw + normalized (lineage).  
   - `manifest.inputs[].content_sha256` matches computed hashes.

3. **Priority logic**  
   - Unit test proves: newer `updated_ts` rows replace older per `(slate_id, dk_player_id)`; tie-breaker honors `manual > primary > other`.

4. **Deterministic run IDs**  
   - `run_id` format enforced; surfaced in run folder names.

5. **Minimal UX**  
   - Preview prints and a clear success summary (paths, counts).

6. **CI green**  
   - Lints (ruff/black/yamllint) pass.  
   - JSON schema check job passes for all affected schemas.  
   - Tests pass on Python 3.11 (uv).

---

## Test Plan

- **Smoke**: upload tiny fixtures (3–5 players). Assert Parquet files exist & validate.  
- **Priority**: two uploads for same slate/player with different `updated_ts` + sources; assert “latest wins” and tiebreak.  
- **Lineage**: recompute file SHA and compare to stored values in raw/normalized/manifest.  
- **Manifest/Registry**: ensure run registered with correct paths + timestamps.  
- **Negative**: malformed salary or missing required column → validation error & non-zero exit.

Fixtures (add to `tests/fixtures/`):
- `player_ids.csv` (DK IDs + name/team/pos)
- `projections_sourceA.csv` (odd headers)
- `projections_sourceB.csv` (another header set)

---

## CI hooks (incremental)

- Reuse existing CI, ensure these jobs run on PRs touching `pipeline/ingest/**`, `pipeline/io/**`, `pipeline/registry/**`, and `tests/**`:
  - `ruff`, `black`, `mypy`, `pytest`, `yamllint` (schema/ingest configs)
  - JSON Schema syntax check (already in place)

---

## Risks & Mitigations
- **Header mismatch chaos** → Mapping catalog YAML + tests.  
- **Silent drift** → Manifest records full config + input hashes; Run Registry centralizes lookup.  
- **Schema churn** → Follow Schema Evolution policy (SemVer, optional-first).

---

## End Bookend — Merge & Tag

After approval & green CI:

```
PRP End → branch=feature/ingest-normalization
```

(Manual sequence)
```bash
# Merge PR
git checkout main
git merge --no-ff feature/ingest-normalization -m "PRP-1: Ingestion & Normalization + Run Registry"
git push origin main

# Tag baseline for this PRP
git tag -a v0.1.0 -m "PRP-1: Ingestion & Normalization + Run Registry"
git push origin v0.1.0
```

---

## Follow-ups (next PRPs)
- **PRP-2**: Optimizer Adapter (read normalized → write `optimizer_lineups` + `optimizer_metrics`, with manifest/registry).  
- **PRP-3**: Variant Catalog Adapter.  
- **PRP-4**: Field Sampler Adapter.  
- **PRP-5**: Simulator Adapter + Convergence Metrics.  
- **PRP-6**: Unified Dash (thin) wired to the adapters; “load previous run” from registry.
</file>

<file path="docs/PRPs/PRP-10-API-Endoints-Pydantic.md">
# PRP-10: API Endpoints (FastAPI) — with Pydantic Models (folds PRP-11)

**Status:** Draft  
**Owner:** @you  
**Branch:** `feature/api-pydantic`  
**Goal:** Stand up a small, typed API layer over the existing adapters (ingest → optimizer → variants → field → sim → metrics), using **Pydantic models** for request/response validation and to auto-generate OpenAPI. Replace dict-shaped inputs/outputs with explicit models now to avoid refactors later.

---

## 1) Summary

We will:
- Add/upgrade a FastAPI service under `processes/api/`.
- Define **Pydantic v2** models for all request/response bodies and common data shapes used by our endpoints.
- Implement a **minimal but useful** set of endpoints to trigger the orchestrator, query bundles, list runs, and fetch metrics/summaries.  
- Ensure the API produces **OpenAPI** & **docs** out of the box (`/openapi.json`, `/docs`, `/redoc`).  
- Add tests (httpx + anyio) and wire **CI** (ruff/black/mypy/pytest).

This PRP **combines** the previously separate “add endpoints” (PRP‑10) and “refactor to Pydantic models” (PRP‑11) to avoid double‑work.

---

## 2) Scope

### In scope
- Introduce Pydantic models for all new endpoint payloads.
- Implement endpoints with request/response models (below).
- Preserve in‑memory run index (_RUNS/_METRICS) for now; no DB yet.
- Use adapters exactly as defined by earlier PRPs (orchestrator calls the individual adapters; API calls the orchestrator).

### Out of scope
- AuthN/AuthZ (optional stub).
- Frontend/UX.
- Long‑running background jobs / queues (synchronous launch only).
- New business logic in adapters (no solver/sampler changes).

---

## 3) Endpoints

> Base path examples assume `http://localhost:8000` (FastAPI default with uvicorn).

### 3.1 POST `/run/orchestrator`
Trigger a full bundle run. Writes a `bundle.json` manifest and records stage run_ids. Returns the `bundle_id`, `stages`, and paths recorded.

**Request model:** `OrchestratorRunRequest`
```py
class IngestConfig(BaseModel):
    source: str = "manual"
    projections: str | None = None   # path to projections.csv
    player_ids: str | None = None    # path to player_ids.csv
    mapping: str | None = None       # path to YAML mapping

class OptimizerConfig(BaseModel):
    site: Literal["DK"] = "DK"
    engine: str | None = None
    config: dict[str, Any] | None = None

class VariantsConfig(BaseModel):
    config: dict[str, Any] | None = None

class FieldConfig(BaseModel):
    config: dict[str, Any] | None = None

class Payout(BaseModel):
    rank_start: int
    rank_end: int
    prize: float

class ContestConfig(BaseModel):
    field_size: int
    entry_fee: float
    rake: float
    site: Literal["DK"]
    payout_curve: list[Payout]
    contest_id: str | None = None
    name: str | None = None

class SimConfig(BaseModel):
    config: dict[str, Any] | None = None
    contest: ContestConfig | None = None

class Seeds(BaseModel):
    optimizer: int | None = None
    variants: int | None = None
    field: int | None = None
    sim: int | None = None

class OrchestratorConfig(BaseModel):
    ingest: IngestConfig
    optimizer: OptimizerConfig
    variants: VariantsConfig
    field: FieldConfig
    sim: SimConfig
    seeds: Seeds | None = None

class OrchestratorRunRequest(BaseModel):
    slate_id: str
    config: OrchestratorConfig
    out_root: str = "data"
    schemas_root: str = "pipeline/schemas"
    validate: bool = True
    dry_run: bool = False
    verbose: bool = False
```

**Response model:** `OrchestratorRunResponse`
```py
class StageSummary(BaseModel):
    name: Literal["ingest","optimizer","variants","field","sim","metrics"]
    run_id: str
    primary_output: str | None = None

class OrchestratorRunResponse(BaseModel):
    bundle_id: str
    bundle_path: str
    stages: dict[str, str]            # {stage_name: run_id}
    run_registry_path: str | None = None
```

### 3.2 GET `/runs/{bundle_id}`
Returns the persisted `bundle.json` manifest for a previously created bundle.

**Response model:** `BundleManifest`
```py
class BundleStage(BaseModel):
    name: str
    run_id: str
    primary_output: str | None = None

class BundleManifest(BaseModel):
    bundle_id: str
    slate_id: str
    created_ts: str
    stages: list[BundleStage]
```

### 3.3 GET `/metrics/{sim_run_id}`
Returns the `sim_metrics.parquet` content for a sim run as JSON rows.

**Response model:** `list[dict[str, Any]]` (tabular rows).

### 3.4 GET `/health`
Simple healthcheck; returns `{"ok": true, "version": "...", "time": "..."}`.

---

## 4) Implementation Plan

### 4.1 Project structure
```
processes/api/
  app.py              # FastAPI app w/ Pydantic models & endpoints
  models.py           # Pydantic models (request/response/common)
  __init__.py
  __main__.py         # `python -m processes.api` to run uvicorn

tests/
  test_api_smoke.py   # end-to-end with httpx.AsyncClient
```

### 4.2 Pydantic models
- Use **Pydantic v2** (already in the repo via FastAPI transitive; if not, add).
- Define all models listed above in `processes/api/models.py`.
- Replace `dict[str, Any]` payloads in the API with these models.
- Leverage `.model_dump(mode="json")` when passing config to orchestrator (which still expects file path).

### 4.3 FastAPI app
- Update `processes/api/app.py` to import/use models:
  - `@app.post("/run/orchestrator")` accepts `OrchestratorRunRequest` → returns `OrchestratorRunResponse`.
  - `@app.get("/runs/{bundle_id}")` returns `BundleManifest`.
  - `@app.get("/metrics/{run_id}")` returns `list[dict]` shaped rows.
  - `@app.get("/health")` returns a small JSON status.
- Keep the in‑memory `_RUNS` and `_METRICS` registries as now.

### 4.4 Orchestrator integration
- Serialize `request.config` to a temp JSON file and call `orchestrator.run_bundle(...)` (as today).
- Collect `bundle_id`, `bundle_path`, and stage `run_ids` into the response model.

### 4.5 OpenAPI/Docs
- No additional work: FastAPI will auto‑publish `/openapi.json`, `/docs`, `/redoc` thanks to models.

### 4.6 Config / deps
- Ensure `fastapi`, `httpx<0.28`, and `trio` are in dev group (done in prior PR).
- Add `uvicorn` for local serving if missing (dev only).

### 4.7 Tests
- `tests/test_api_smoke.py`:
  - Use `httpx.AsyncClient(app=app, base_url="http://test")` (requires httpx<0.28).
  - Create tiny CSV fixtures on the fly for ingest (like existing tests do).
  - Monkeypatch adapters to stubs (as in prior API test).
  - Assert 200 responses and shapes match models (Pydantic will auto‑validate).

### 4.8 CI
- `.github/workflows/ci.yml` already exists. Ensure path filters include:
  - `processes/api/**`, `tests/test_api_*py`, `pyproject.toml`

---

## 5) Acceptance Criteria

- [ ] Endpoints implemented with **Pydantic models** (no raw dict payloads).
- [ ] `/run/orchestrator` accepts `OrchestratorRunRequest`, returns `OrchestratorRunResponse` with stage mapping.
- [ ] `/runs/{bundle_id}` returns a valid `BundleManifest`.
- [ ] `/metrics/{sim_run_id}` returns JSON rows derived from `metrics.parquet` (404 if missing).
- [ ] `/health` endpoint returns ok/version/time.
- [ ] **OpenAPI** docs render with explicit schemas at `/openapi.json` and `/docs`.
- [ ] Tests green: `tests/test_api_*py` (httpx async client), plus existing suite unaffected.
- [ ] CI workflow passes on PR.
- [ ] No schema changes required in this PRP.

---

## 6) How to run locally

```bash
# 1) Sync env (dev tools included)
uv sync

# 2) Run tests
uv run pytest -q tests/test_api_*py

# 3) Launch the API
uv run python -m uvicorn processes.api.app:app --reload --port 8000

# 4) Try it
curl -s http://localhost:8000/health | jq
open http://localhost:8000/docs
```

---

## 7) Future Work

- Auth (Bearer token) and rate limiting.
- Background execution / jobs + callbacks.
- Pagination and filtering for metrics/results.
- Persist `_RUNS/_METRICS` to Parquet or SQLite.
- Add additional endpoints for artifacts download (CSV, Parquet).

---

## 8) Checklist for the PR

- [ ] Branch created: `feature/api-pydantic`
- [ ] Models in `processes/api/models.py`
- [ ] Endpoints wired to use models
- [ ] Tests updated/added (`tests/test_api_smoke.py`)
- [ ] CI green
- [ ] PR title: `PRP-10: API Endpoints (FastAPI) — with Pydantic models`
- [ ] PR body links this PRP and includes commands & outcomes
</file>

<file path="docs/PRPs/PRP-11-Expanded-API-Endpoints.md">
# PRP-11: Expanded API Endpoints for DFS Pipeline

## Purpose
Extend the FastAPI service (`processes/api/app.py`) with additional endpoints to expose the DFS pipeline stages more fully, aligning with the MVP and unified dashboard requirements.

## Scope / Application
- Applies to the API layer only (`processes/api`).
- Adds endpoints to orchestrate and retrieve results from ingest, optimizer, variants, field sampler, simulator, metrics, and DK export runs.
- No schema changes required — endpoints reuse existing Pydantic models and adapters.
- Will support the upcoming unified dashboard.

## Definitions
- **Bundle**: An orchestrated run combining multiple stages (ingest → optimizer → variants → field → sim → metrics).
- **Manifest**: JSON artifact describing a run and its outputs.
- **Stage**: A single process (optimizer, variants, field, sim, etc.).

## Responsibilities
- **API Layer**: Expose clean REST endpoints for all pipeline stages.
- **Adapters**: Continue handling the heavy lifting (already schema‑validated).
- **Tests**: Cover all new endpoints with request/response validation.

## Procedure Instructions
### Endpoints to Add
- `POST /run/ingest` → Trigger ingest adapter; returns run_id + manifest.
- `POST /run/optimizer` → Trigger optimizer adapter; returns run_id + manifest.
- `POST /run/variants` → Trigger variants adapter; returns run_id + manifest.
- `POST /run/field` → Trigger field sampler; returns run_id + manifest.
- `POST /run/sim` → Trigger GPP simulator; returns run_id + manifest.
- `POST /run/metrics` → Trigger metrics adapter; returns run_id + manifest.
- `POST /run/dk-export` → Trigger DK export; returns path to DK CSV.
- `GET /runs/{run_id}` → Already exists; validate with Pydantic `BundleManifest`.
- `GET /metrics/{run_id}` → Already exists; validate with schema.

### Contracts
- All `POST /run/*` endpoints accept a Pydantic request model (config + paths).
- Responses include run_id, manifest_path, and any primary outputs.
- Errors return FastAPI `HTTPException` with clear messages.

## Acceptance Criteria
- [ ] All endpoints implemented in `processes/api/app.py` with Pydantic validation.
- [ ] Endpoints call the correct adapter functions with proper schema paths.
- [ ] New tests added in `tests/test_api_endpoints.py` covering all endpoints.
- [ ] Lint/type/format checks (`ruff`, `black`, `mypy`) pass on `processes/api`.
- [ ] `uv run pytest -q tests/test_api_*py` passes with all endpoints tested.
- [ ] Unified dashboard can call these endpoints without additional backend work.

## References
- PRP-10/11: API + Pydantic models
- PRP-7: Orchestrator
- PRP-8: Metrics Framework

## Revision History
- v0.1.0: Initial draft (expand API endpoints to cover full pipeline).
</file>

<file path="docs/PRPs/PRP-12-API-Endpoints-Followup.md">
# PRP-12: API Endpoints Follow-Up — Robustness & CI Scope

## Purpose  
Address follow-up improvements after PRP-11: Expanded API Endpoints. Focus on error handling, stricter validation, and CI scope.

## Scope / Application  
- **API Layer (processes/api/app.py)**  
  - Harden `/runs`:  
    - Explicitly return 404 if registry parquet missing (instead of empty list).  
  - Harden `/export/dk`:  
    - For variants runs, raise a clear 422 error if `export_csv_row` is missing or malformed.  
  - Add structured logging for each endpoint entry/exit.  

- **Models (processes/api/models.py)**  
  - Add `ErrorResponse` model for consistent 4xx/5xx responses.  
  - Update endpoints to reference `response_model=ErrorResponse | ...` where applicable.

- **Tests (tests/test_api_endpoints.py)**  
  - Add regression tests:  
    - `/runs` → 404 when registry parquet missing.  
    - `/export/dk` → 422 on bad/missing `export_csv_row`.  
    - `/logs` → correct fallback message when no logs exist.  
  - Ensure error responses match `ErrorResponse` model.  

- **CI Workflow**  
  - Broaden path filters to run API tests when `processes/api/**`, `tests/test_api_*`, or `pipeline/schemas/**` change.  
  - Confirm httpx pin `<0.28` remains until we refactor tests away from `AsyncClient(app=...)`.

## Acceptance Criteria  
- All new error conditions produce JSON responses matching `ErrorResponse` schema.  
- Added tests pass reliably on local + CI.  
- Existing endpoints remain backward-compatible.  
- No schema drift (no changes to bundle/manifest enums).  

## Revision History  
- v0.1 (PRP-12 draft): Proposed error handling + CI scope.
</file>

<file path="docs/PRPs/PRP-1a-Ingest-Enum.md">
# PRP-1a: Extend RunTypeEnum with `ingest` + Align Manifests/Tests

## Objective
Add a first-class `ingest` run type to the schema pack and update the ingestion CLI, manifests, and tests to use it (instead of temporarily using `variants`).

## Start Bookend — Branch
```
PRP Start → branch=feature/ingest-enum
```

## Scope & Tasks
1. **Schema update**
   - `pipeline/schemas/common.types.yaml`: extend `RunTypeEnum` with `ingest`.
   - `pipeline/schemas/manifest.schema.yaml`: no structural change, but ensure `run_type` example includes `ingest`.
   - `pipeline/schemas/runs_registry.schema.yaml`: examples may include `ingest`.

2. **Versioning**
   - Bump **MINOR** version for each changed schema (SemVer policy).
   - Update `pipeline/schemas/README.md` change log with one-line entry.

3. **Code alignment**
   - Update ingestion CLI to emit `run_type="ingest"` in manifest and registry rows.

4. **Tests**
   - Adjust tests asserting run type to expect `ingest`.
   - Add a small assertion in `test_manifest_registry_write.py` for `run_type == "ingest"`.

## Acceptance Criteria
- Schemas validate (JSON Schema 2020-12) after enum change.
- New manifests created by the CLI show `"run_type": "ingest"`.
- Tests pass locally and in CI.
- README change log updated.

## End Bookend — Merge & Tag
```
PRP End → branch=feature/ingest-enum
```
</file>

<file path="docs/PRPs/PRP-1b-Runtime-Validation.md">
# PRP-1b: Runtime JSON Schema Validation for Manifests & Registry

## Objective
Add runtime validation to the ingestion CLI so that `manifest.json` and append operations to `runs.parquet` conform to their JSON Schemas before writing—failing fast on violations.

## Start Bookend — Branch
```
PRP Start → branch=feature/ingest-runtime-validation
```

## Scope & Tasks
1. **Validator utility**
   - Lightweight helper that loads JSON Schemas from `pipeline/schemas/` and validates python dicts using `jsonschema` (Draft 2020-12).

2. **Integration points**
   - Validate `manifest` object **before** writing JSON.
   - Validate a constructed `runs_registry` row **before** append.
   - On failure: log concise error, exit non-zero, do not write partial artifacts.

3. **CLI flags**
   - `--validate/--no-validate` (default: `--validate`).
   - `--schemas-root` override (default: `pipeline/schemas`).

4. **Tests**
   - Positive: current flow validates successfully.
   - Negative: inject an invalid field (e.g., wrong `run_type` or missing `content_sha256`) and assert non-zero exit and no files written.

5. **Docs**
   - Add a short section to `pipeline/ingest/README.md` on validation behavior and flags.

## Acceptance Criteria
- Validation failures block writes and return non-zero exit codes.
- Positive path untouched performance-wise (validate once per run).
- CI green with added tests.

## End Bookend — Merge & Tag
```
PRP End → branch=feature/ingest-runtime-validation
```
</file>

<file path="docs/PRPs/PRP-1c-Ingest-Docs.md">
# PRP-1c: Ingest Docs & CLI Flags

## Objective
Document the ingestion front door so users (and future agents) can operate it without reading code.

## Start Bookend — Branch
```
PRP Start → branch=feature/ingest-docs
```

## Scope
- Author `pipeline/ingest/README.md`:
  - Overview of ingestion flow
  - CLI usage and flags
  - Mapping catalog format (`pipeline/ingest/mappings/*.yaml`) with examples
  - Priority logic (“latest wins” + source precedence)
  - Lineage and `content_sha256`
  - Output paths and file naming
  - Validation behavior (`--validate/--no-validate`, `--schemas-root`)
  - Troubleshooting (common errors, schema failures)

- Author `pipeline/registry/README.md`:
  - Purpose of Run Registry
  - `runs.parquet` columns and how manifests reference outputs
  - How `run_id` is minted
  - How to query the latest run by `slate_id`

## Acceptance Criteria
- Docs render cleanly and match actual CLI flags and behaviors.
- Include copy‑paste CLI examples using `tests/fixtures/*.csv`.
- CI: markdownlint (if enabled) passes; otherwise include in standard lint workflow.

## End Bookend — Merge & Tag
```
PRP End → branch=feature/ingest-docs
```
</file>

<file path="docs/PRPs/PRP-2-Optimizer-Adapter-TAILORED.md">
# PRP-2 (Tailored): Optimizer Adapter using existing `optimize.py`

## Objective
Reuse your prior optimizer (CP-SAT/ownership-penalty knobs) by wrapping **`optimize.py`** behind a thin adapter that:
- Consumes **normalized projections** (PRP‑0 schema),
- Translates config → constraints,
- Calls the existing `run_optimizer(...)` path,
- Emits schema‑valid `optimizer_lineups.parquet`, `optimizer_metrics.parquet`, and a manifest + registry row,
- Stays *headless* (no Streamlit UI coupling).

---

## Start Bookend — Branch
```
PRP Start → branch=feature/optimizer-adapter
```

---

## What we have (from your `optimize.py` inspection)
- Public entrypoint: `run_optimizer(projections_df, constraints_dict, seed, site, engine="cbc")`
- Export utilities: `export_dk_csv(valid_df)`, `transform_lineups_for_grid(lineups, site, view_mode="compact")`
- Telemetry/export helpers: `export_with_telemetry(valid_df, projections_df)`, `persist_run_to_history(...)`
- Display utilities (Streamlit): *to be ignored for adapter*
- Imports reference `backend.nba_optimizer_functional.optimize_with_diagnostics` and `backend.types.Constraints`

**Implication**: The adapter should **not** import Streamlit; it should import only the functional core used by `run_optimizer`. If those `backend.*` modules are not present in this repo, we’ll provide a **shim** or rename imports to your local paths.

---

## Scope & Deliverables

### 1) Adapter module (headless)
```
processes/optimizer/
  adapter.py      # core glue: read → map → run → write
  __main__.py     # thin CLI wrapper
  README.md       # usage & config knobs
```

**Responsibilities:**
- Read `data/projections/normalized/*` for a given `slate_id`.
- Build `constraints_dict` from a user `config` (YAML/JSON).
- Call `run_optimizer(projections_df, constraints_dict, seed, site, engine)`.
- Convert outputs → `optimizer_lineups.schema.yaml` & `optimizer_metrics.schema.yaml`.
- Compute `export_csv_row` (DK header order defined in schemas README).
- Write Parquet + `manifest.json` (run_type="optimizer") and append Run Registry.
- No Streamlit calls, no UI side effects.

### 2) CLI wrapper
```
uv run python -m processes.optimizer   --slate-id 20251101_NBA   --site DK   --config configs/optimizer.yaml   --engine cbc   --seed 42   --out-root data   --tag PRP-2
```
- `--config` may be YAML/JSON; support inline `--config-kv key=val` pairs as a bonus.

### 3) Config → constraints mapping (initial set)
Map these knobs into `constraints_dict` / `Constraints`:
- `num_lineups`, `max_salary (≤50000)`, `min_salary` (optional)
- `lock` / `ban` (lists of `dk_player_id`)
- `exposure_caps` per player/team/position
- `stacking` / `group_rules` (if your previous build used `GroupRule`)
- `ownership_penalty` `{enabled, mode, lambda}` (your prior knob)
- `uniques`, `max_from_team`, `min_from_team`, `position_rules`
- `randomness` (if supported by solver)
- Any additional toggles your `run_optimizer` consumes

Document unsupported keys as **ignored with warning** (for now).

### 4) Outputs
- `data/runs/optimizer/<run_id>/lineups.parquet` (schema: `optimizer_lineups`)
- `data/runs/optimizer/<run_id>/metrics.parquet` (schema: `optimizer_metrics`)
- `data/runs/optimizer/<run_id>/manifest.json` (run_type="optimizer", schema_version current)
- Append to `data/registry/runs.parquet`

### 5) Tests
- `tests/test_optimizer_adapter_smoke.py` — feed tiny normalized projections; use a **mock** `run_optimizer` return to keep tests fast.
- `tests/test_optimizer_export_dk_csv.py` — verify `export_csv_row` header/order.
- `tests/test_optimizer_ownership_penalty_flag.py` — ensure knob passes through to constraints.
- `tests/test_optimizer_manifest_registry.py` — manifest/registry assertions.

> Note: If `backend.*` modules aren’t available, tests will inject a small stub to simulate `run_optimizer` outputs.

---

## Integration details

### Inputs (read path)
- Pick the **latest** normalized file for `slate_id` by `updated_ts` per `(slate_id, dk_player_id)` (this is already handled in ingestion; adapter reads the table produced).

### Transform to solver
- Build the solver’s expected `projections_df` from normalized projections:
  - Must include `dk_player_id`, `pos`, `salary`, `proj_fp` (and optionally `ceil_fp`, `floor_fp`, `own_proj`).

- Build `constraints_dict` consistent with previous project:
  - If your old code used a dataclass `Constraints`, the adapter can construct it from the dict.

### From solver → schema
- Lineups: list of players (8) → `players` (list of `dk_player_id`), `total_salary`, `proj_fp`, etc.
- DK export: build `export_csv_row` in canonical order defined in schemas README.
- Metrics: collect aggregates (mean/median proj, salary utilization) + any solver telemetry. Keep extras inside a nested `extras` object to remain schema‑strict.

### Manifest
- `run_type="optimizer"`
- `inputs`: references to normalized projections + config (with `content_sha256`)
- `outputs`: paths to lineups/metrics
- `config`: full resolved config
- `tags`, `schema_version`, `created_ts`

---

## Acceptance Criteria
- Adapter runs headless, no Streamlit dependencies.
- Writes schema‑valid `lineups.parquet`, `metrics.parquet`, and manifest.
- Registry append succeeds; `primary_outputs` points to `lineups.parquet`.
- Ownership penalty knob passes through to constraints and is visible in metrics/telemetry.
- CI green with new tests.

---

## Risks & Mitigations
- **Missing `backend.*` modules** → Provide shims or adjust imports to the local module path; tests use mocks.
- **I/O mismatch** → Strict schema validation + small golden fixtures to catch early.
- **Export shape drift** → One test explicitly checks DK header/order.

---

## End Bookend — Merge & Tag
```
PRP End → branch=feature/optimizer-adapter
```

(Manual)
```bash
git checkout main
git merge --no-ff feature/optimizer-adapter -m "PRP-2: Optimizer adapter using existing optimize.py"
git push origin main
git tag -a v0.3.0 -m "PRP-2: Optimizer adapter"
git push origin v0.3.0
```
</file>

<file path="docs/PRPs/PRP-2L-Legacy-Docs-and-DeUI-Plan.md">
# PRP-2L: Document Legacy Optimizer & Plan De-UI Extraction

## Status
**Planned** — immediate follow-up to PRP‑1b. Focused on documentation and a clean plan to reuse legacy logic without UI cruft.

---

## Objective
1) **Inventory & document** legacy optimizer modules (`optimize.py`, `nba_optimizer_functional.py`, `cpsat_solver.py`, `pruning.py`, plus any helpers) and their relationships.  
2) **Separate concerns**: identify Streamlit/UI/AG Grid code vs. pure compute logic.  
3) Produce a **De‑UI extraction plan** so PRP‑2 (adapter) can call the logic headlessly.

No functional rewrites in this PRP; only docs and *surgical* annotations (e.g., TODO tags) are allowed.

---

## Start Bookend — Branch
```
PRP Start → branch=feature/legacy-docs-deui-plan
```

---

## Scope & Deliverables

### A. Written docs (checked into repo)
- `processes/optimizer/_legacy/README.md`
  - Purpose of each legacy file
  - Public functions/classes intended for reuse
  - Known UI dependencies and side effects (imports, global state, streamlit calls)
  - Data contracts expected/returned by each public entrypoint
  - Ownership penalty & other knobs — where they are parsed and applied

- `docs/legacy/LEGACY-OPTIMIZER.md`
  - High-level overview of legacy optimizer architecture
  - **Mermaid diagrams**:
    - Module dependency graph
    - Call sequence for a typical optimize run
  - I/O shapes (tables) for the primary entrypoint (inputs, outputs)
  - Known tech debt: Streamlit/AG Grid coupling, path hacks (`sys.path.append`), UI exports
  - **De‑UI extraction plan** (see Section C)

- `docs/legacy/SYMBOLS-TO-KEEP.md`
  - Whitelist of symbols to preserve as the stable programmatic API
  - For each symbol: signature, description, input/output schema mapping

### B. Code annotations (non-breaking)
- Add `# TODO(PRP-2L):` comments where UI code intrudes into logic. Examples to tag:
  - `import streamlit as st`, `st_aggrid`, AG Grid CSS, `st.sidebar`, etc.
  - `sys.path.append` hacks to import `backend.*`
  - File I/O intended for UI (e.g., writing CSV previews directly)
  - Global state / mutable module-level config
- Do **not** change behavior — comments only.

### C. De‑UI Extraction Plan
- Define new **headless API surface** to be consumed by the adapter in PRP‑2:
  - `run_optimizer(projections_df, constraints: dict, seed: int, site: str, engine: str) -> (lineups_df, metrics_dict)`
  - Optional `telemetry` object for solver diagnostics
- Map legacy functions to this surface (which function provides which part).
- Identify minimal set of refactors needed in PRP‑2 (e.g., move export helpers to a non‑UI module).
- Identify any **hard dependencies** on UI packages and how to remove/replace them (e.g., replace `st.cache_data` with local memoization).

---

## Out of Scope
- No refactors beyond comments.
- No adapter implementation (that’s PRP‑2).
- No UI deletion — only documentation of what to remove later.

---

## Method (how the agent should do this)
1) **Static scan** the following legacy files and any modules they import from the same folder:
   - `processes/optimizer/_legacy/optimize.py`
   - `processes/optimizer/_legacy/nba_optimizer_functional.py`
   - `processes/optimizer/_legacy/cpsat_solver.py`
   - `processes/optimizer/_legacy/pruning.py`

2) Build a **module dependency map** (imports between these files; ignore stdlib/3p).

3) Identify all **public entrypoints** (functions/classes used externally in the old app).

4) For each entrypoint, document:
   - **Inputs** (dataframes/objects & required columns/fields)
   - **Outputs** (dataframes/objects & required columns/fields)
   - **Side effects** (file writes, logging, global state, UI calls)

5) Tag UI‑coupled lines with `# TODO(PRP-2L): De‑UI` comments (no behavior change).

6) Draft the **De‑UI plan** (Section C) with a small table mapping legacy functions → headless API.

7) Write the docs (A) and commit.

---

## Acceptance Criteria
- `processes/optimizer/_legacy/README.md` explains each legacy file and lists stable symbols to reuse.
- `docs/legacy/LEGACY-OPTIMIZER.md` contains:
  - A clear narrative of how the legacy optimizer works
  - Mermaid diagrams for modules and call flow
  - An explicit De‑UI extraction plan and list of UI-only code to remove
- `docs/legacy/SYMBOLS-TO-KEEP.md` lists function signatures + brief purpose + I/O shapes.
- Source code contains `# TODO(PRP-2L): De‑UI` comments at all UI touchpoints.
- **No test or runtime behavior changes**; CI still green.

---

## Directory Changes
```
processes/optimizer/_legacy/
  README.md            # updated/created by this PRP
docs/legacy/
  LEGACY-OPTIMIZER.md
  SYMBOLS-TO-KEEP.md
```

---

## Risks & Mitigations
- **Hidden dependencies** → The dependency map should flag any imports that live outside `_legacy`. Note gaps explicitly.
- **Over‑documenting internals** → Focus docs on API surfaces and relationships; don’t narrate every helper.

---

## Start/End Bookends — Actions

**Start**  
```
PRP Start → branch=feature/legacy-docs-deui-plan
```

**End**  
```
PRP End → branch=feature/legacy-docs-deui-plan
```

(Manual alternative)
```bash
git checkout -b feature/legacy-docs-deui-plan
# … make the changes per Scope …
git commit -m "Docs: legacy optimizer inventory + De‑UI extraction plan (PRP‑2L)"
git push -u origin feature/legacy-docs-deui-plan

# Merge after review
git checkout main
git merge --no-ff feature/legacy-docs-deui-plan -m "Merge PRP‑2L: legacy docs + De‑UI plan"
git push origin main
```
</file>

<file path="docs/PRPs/PRP-3-Variant-Adapter.md">
# PRP-3: Variant Adapter (lineups → variant_catalog + metrics)

## Status
**Planned** — next after PRP-2 (Optimizer Adapter), PRP-1c (Ingest Docs), and PRP-2L (Legacy Docs/De-UI).

## Objective
Wrap the existing **variant builder** logic behind a headless adapter that:
- Consumes **optimizer lineups** (schema: `optimizer_lineups`),
- Applies variant configuration (exposure shaping, groups, swaps, randomization),
- Produces a **variant catalog** and **variant metrics** conforming to PRP-0 schemas,
- Emits a **manifest** + **Run Registry** row.

No UI; no changes to core variant algorithms, only adapter plumbing + validation.

---

## Start Bookend — Branch
```
PRP Start → branch=feature/variant-adapter
```

---

## Scope & Deliverables

### 1) Adapter module
```
processes/variants/
  __init__.py
  __main__.py            # thin CLI
  adapter.py             # headless glue
  README.md
```
**Responsibilities**
- Read **optimizer lineups** for a given `slate_id`:
  - Prefer manifest-driven discovery (latest optimizer run for slate) OR `--input` path override.
- Load `config` (YAML/JSON or inline `--config-kv`), map to variant knobs.
- Invoke legacy variant builder function (`OPTIMIZER_VARIANT_IMPL=module:function` env override supported).
- Write:
  - `data/runs/variants/<run_id>/variant_catalog.parquet` (schema: `variant_catalog`)
  - `data/runs/variants/<run_id>/metrics.parquet` (schema: `variant_metrics`)
  - `data/runs/variants/<run_id>/manifest.json` (`run_type="variants"`)
- Append **Run Registry** row with `primary_outputs` → `variant_catalog.parquet`.

### 2) CLI
```
uv run python -m processes.variants   --slate-id 20251101_NBA   --config configs/variants.yaml   --seed 42   --out-root data   --tag PRP-3   [--input path/to/optimizer_lineups.parquet]   [--schemas-root path/to/pipeline/schemas]   [--validate/--no-validate]   [--verbose]
```
- Optional: `--from-run <optimizer_run_id>` to resolve input via manifest/registry.

### 3) Config → knobs (initial set)
- `num_variants`: int total or per-base-lineup multiplier
- `swap_window`: (min,max) salary deltas or projection deltas
- `randomness`: float (0–1) perturbation on projections or selection
- `exposure_targets`: per-player/team/position caps
- `group_rules`: soft/hard groupings you want kept/avoided
- `uniques`: min changes from base lineup
- `avoid_dups`: true/false (deduplicate variants by sorted player set)
- `ownership_guidance`: optional shaping similar to optimizer knob
- `seed`: RNG seed
- Extra keys preserved in `extras`

### 4) Validation
- **Fail-fast**: validate `variant_catalog` and `variant_metrics` rows against schemas **before** writes.
- Validate `manifest` and **runs registry** row via JSON Schema.
- Lineup sanity (each variant has 8 players, DK slots filled, ≤ 50k).

### 5) Manifests & Registry
- `run_type="variants"`
- Inputs include: optimizer lineups (with content_sha256), config (file + inline kv) hashes
- Deterministic `run_id = YYYYMMDD_HHMMSS_<shorthash>` derived from input SHA(s) + resolved config + seed.

### 6) Tests
- `tests/test_variants_adapter_smoke.py` — end-to-end with tiny fixture lineups + stub variant builder.
- `tests/test_variants_failfast_no_write.py` — invalid variant (7 players) blocks writes.
- `tests/test_variants_run_id_determinism.py` — same inputs/config → same `run_id`; seed change alters it.
- `tests/test_variants_manifest_registry.py` — manifest/registry validations.
- `tests/test_variants_exposure_caps.py` — caps honored (using stubbed variant builder).
- `tests/test_variants_verbose_and_schemas_root.py` — robust schema path + verbose prints.

### 7) Example config
- `configs/variants.yaml` with commented knobs and sensible defaults.

---

## Inputs & Outputs

### Input
- **Primary**: `optimizer_lineups.parquet` (schema: `optimizer_lineups`) resolved by:
  1) `--input` explicit path, or
  2) latest optimizer run for `slate_id` from registry/manifest.

### Outputs
- `variant_catalog.parquet` (schema: `variant_catalog`)
- `metrics.parquet` (schema: `variant_metrics`)
- `manifest.json` (`run_type="variants"`)
- Registry append

---

## Acceptance Criteria
- Adapter is **headless** and produces schema-valid artifacts.
- Deterministic `run_id` logic matches PRP-2 approach.
- `--validate` on by default; `--schemas-root` robust (repo-relative default).
- Adapter **does not** import Streamlit/UI packages.
- All tests pass locally and in CI.
- README documents CLI, discovery policy, preview vs export distinctions.

---

## Risks & Mitigations
- **Old variant builder imports UI** → use env override to point at a headless function (or stub in tests).
- **Schema drift** → validate rows pre-write; rely on PRP-0 schemas.
- **Performance** → variants can be large; write in chunks if needed (optional follow-up).

---

## Directory Changes
```
processes/variants/
  __init__.py
  __main__.py
  adapter.py
  README.md
configs/
  variants.yaml
tests/
  test_variants_adapter_smoke.py
  test_variants_failfast_no_write.py
  test_variants_run_id_determinism.py
  test_variants_manifest_registry.py
  test_variants_exposure_caps.py
  test_variants_verbose_and_schemas_root.py
```

---

## CI Hooks
Extend/clone the optimizer workflow to include variant paths:
```yaml
on:
  pull_request:
    paths:
      - "processes/variants/**"
      - "pipeline/schemas/**"
      - "configs/variants.yaml"
      - "tests/test_variants_*py"
```
Run: ruff, black, mypy (scoped), pytest (focused), CLI `--help`.

---

## End Bookend — Merge & Tag
```
PRP End → branch=feature/variant-adapter
```
(Manual)
```bash
git checkout main
git merge --no-ff feature/variant-adapter -m "PRP-3: Variant adapter"
git push origin main
git tag -a v0.4.0 -m "PRP-3: Variant adapter"
git push origin v0.4.0
```
</file>

<file path="docs/PRPs/PRP-3a-Variants-Adapter-Polish.md">
# PRP-3a: Variants Adapter — polish & hardening

## Status
**Planned** — follow-up to PRP-3. Tighten contracts, improve validation and UX, no core algorithm changes.

---

## Objective
Make the variants adapter more robust and explicit by:
- Using a precise `inputs.role` for the optimizer-lineups input in the **manifest**,
- Adding stronger variant sanity checks (duplicates and optional salary cap),
- Hardening registry discovery and YAML config parsing,
- Clarifying **seed precedence** and CLI help,
- Extending tests/README accordingly.

---

## Start Bookend — Branch
```
PRP Start → branch=feature/variants-polish
```

---

## Scope & Deliverables

### A) Code changes (no UI)
**File:** `processes/variants/adapter.py`

1. **Manifest inputs.role**
   - Set the role for the optimizer lineups input to **`"optimizer_lineups"`** instead of `"variants"`.
   - If the current manifest schema enum doesn’t yet include this value, use a temporary value **`"artifact"`** and add a `TODO(PRP-3a)` to switch to `"optimizer_lineups"` once the enum is extended. Prefer `"optimizer_lineups"` if schema already allows it.

2. **Variant sanity checks**
   - Keep `len(players) == 8`.
   - Add **duplicate player** guard: error if `len(set(players)) != 8`.
   - If a variant provides a `total_salary` (int/float), **ensure ≤ 50000**. Treat missing or non-numeric gracefully (skip cap check).

3. **Registry discovery hardening**
   - In `_find_input_optimizer_lineups`, assert the registry DataFrame has columns `{"run_type","slate_id","created_ts"}` before filtering; otherwise raise a clear error that hints to re-run optimizer for this slate.

4. **YAML parsing errors**
   - In `load_config`, catch parser exceptions and raise a friendly `ValueError` indicating the file path and the first YAML error message.

5. **Seed precedence doc**
   - Keep passing `seed` as a dedicated argument to the variant function, and include `seed` inside `knobs` (backward compat). Document: **function arg takes precedence** if both are present.

6. **CLI help clarifications**
   - Update help string for `--from-run` to say: “Optimizer run_id to source lineups from (run_type=optimizer).”
   - In `--verbose` mode, print a one-liner that includes the chosen input path, run_id (if derived), and variant count.

### B) Tests
Add/modify tests under `tests/`:

1. **Duplicate players fail-fast**
   - `test_variants_failfast_duplicate_players.py`: stub variant builder returns a variant with a duplicate player; assert that **no artifacts/manifest/registry** are written.

2. **Salary cap check (optional)**
   - `test_variants_failfast_salary_cap.py`: stub variant includes `total_salary=50001`; assert fail-fast.

3. **Registry hardening**
   - `test_variants_registry_missing_columns.py`: create a minimal registry with missing `created_ts`; assert the adapter raises a helpful error.

4. **Manifest inputs.role**
   - Adjust `test_variants_manifest_registry.py` to assert `inputs[0].role == "optimizer_lineups"` when schema supports it; otherwise assert `"artifact"` and leave a TODO comment referencing this PRP.

5. **YAML parse error message**
   - `test_variants_bad_yaml_config.py`: write malformed YAML; assert raised `ValueError` contains the config path and a short parse message.

6. **Verbose breadcrumb**
   - Extend `test_variants_verbose_and_schemas_root.py` to assert the verbose line includes the chosen optimizer lineups path and variant count.

### C) Docs
- **`processes/variants/README.md`**:
  - Note `export_csv_row` is a **preview** (not DK-uploadable).
  - Document seed precedence (function arg wins over `knobs.seed`).
  - State the input discovery policy and the registry column requirement.
  - Mention the new `inputs.role = "optimizer_lineups"` (or temporary `"artifact"` if the enum isn’t yet extended).

### D) Optional (if schema supports role extension now)
- If you choose to extend enums in this PRP:
  - Bump `pipeline/schemas/common.types.yaml` version: add `"optimizer_lineups"` to the appropriate `InputRoleEnum` (or introduce one).
  - Bump `manifest.schema.yaml` version and update examples.
  - Update tests accordingly.
  - Otherwise, defer this enum change to a separate, tiny schema PRP.

---

## Acceptance Criteria
- Variants adapter rejects duplicates or salary-cap-violating variants (fail-fast, no partial writes).
- Manifest input role accurately reflects the source artifact.
- Registry discovery fails with a clear message when the registry is malformed.
- YAML errors are user-friendly and include the config path.
- README and help text reflect seed precedence and discovery rules.
- All new/updated tests pass locally and in CI.

---

## CI Hooks
Extend the existing workflow to include the new tests:
```yaml
on:
  pull_request:
    paths:
      - "processes/variants/**"
      - "tests/test_variants_*py"
      - "processes/optimizer/**"           # if helpers are shared
      - "pipeline/schemas/**"              # only if you bump schema enums
jobs:
  test:
    steps:
      - run: uv run ruff check processes/variants tests
      - run: uv run black --check processes/variants tests
      - run: uv run mypy processes/variants tests
      - run: uv run pytest -q tests/test_variants_*py
      - run: uv run python -m processes.variants --help
```

---

## End Bookend — Merge & Tag
```
PRP End → branch=feature/variants-polish
```
(Manual)
```bash
git checkout main
git merge --no-ff feature/variants-polish -m "PRP-3a: Variants adapter polish & hardening"
git push origin main
git tag -a v0.4.1 -m "PRP-3a: Variants adapter polish"
git push origin v0.4.1
```
</file>

<file path="docs/PRPs/PRP-5-GPP-Sim-Adapter.md">
# PRP-5: GPP Simulator Adapter (field + contest → sim_results + sim_metrics)

## Status
**Planned** — follows PRP-4 (Field Sampler). Can run in parallel with PRP-4 via worktrees.

## Objective
Create a **headless adapter + CLI** that runs a GPP tournament simulation using:
- Seeded **field lineups** (from PRP-4 `field.parquet`) and/or **variant catalog**,
- A **contest structure** (payouts, size, min cash, rake, etc.),
and produces schema-valid **`sim_results`** and **`sim_metrics`** artifacts plus **manifest/registry** entries.

No UI changes. Reuse the existing open-source simulator core; this PRP is adapter plumbing, validation, and discovery.

---

## Start Bookend — Branch
```
PRP Start → branch=feature/gpp-sim-adapter
```

---

## Scope & Deliverables

### 1) Adapter module
```
processes/gpp_sim/
  __init__.py
  __main__.py          # thin CLI
  adapter.py           # headless glue
  README.md
```
**Responsibilities**
- **Discovery:** resolve inputs in order of precedence
  - Field:
    1) `--field path/to/field.parquet`
    2) `--from-field-run <run_id>` → `<out_root>/runs/field/<run_id>/artifacts/field.parquet`
    3) (Optional) build from `variant_catalog.parquet` if `--field` not provided and `--variants` given
  - Contest structure:
    1) `--contest path/to/contest_structure.csv|parquet|json`
    2) `--from-contest path/to/dir` (search common names)
- **Config → knobs:** map config + `--config-kv` to simulator knobs
- **Invoke implementation:** dynamic load via `GPP_SIM_IMPL=module:function`
- **Outputs:**
  - `<out_root>/runs/sim/<run_id>/artifacts/sim_results.parquet` (schema: `sim_results`)
  - `<out_root>/runs/sim/<run_id>/artifacts/metrics.parquet` (schema: `sim_metrics`)
  - `<out_root>/runs/sim/<run_id>/manifest.json` (`run_type="sim"`)
- **Run Registry:** append a row with `primary_outputs` → `sim_results.parquet`

### 2) CLI
```
uv run python -m processes.gpp_sim   --slate-id 20251101_NBA   --config configs/sim.yaml   --seed 42   --out-root data   --tag PRP-5   [--field path/to/field.parquet]   [--from-field-run <field_run_id>]   [--variants path/to/variant_catalog.parquet]   [--contest path/to/contest_structure.csv|parquet|json]   [--schemas-root path/to/pipeline/schemas]   [--validate/--no-validate]   [--verbose]
```

### 3) Config → knobs (initial set)
- `num_trials`: Monte Carlo trials / simulations
- `projection_model`: which columns to use (mean/ceil/floor) for scoring
- `boom_bust`: stochastic volatility model parameters
- `dup_penalty`: de-duplication treatment in payouts (if modeling unique entries)
- `late_swap`: whether to allow late swap modeling (stub/no-op initially)
- `min_cash_prob`: option to report probability of min cash / ROI
- `seed`: RNG seed
- Extra keys preserved under `extras`

### 4) Validation
- **Fail-fast**: validate each `sim_results` and `sim_metrics` row against schemas **before** any writes
- Guard inputs:
  - Field rows have 8 players and ≤ 50k salary (if available)
  - Contest structure is contiguous, sums match entries/payouts (document cross-checks)
- Manifest + registry validation via schemas
- Deterministic `run_id = YYYYMMDD_HHMMSS_<shorthash>` over input SHA(s) + resolved config + seed

### 5) Metrics (initial)
- ROI distribution by lineup and summary aggregates
- Cash rate / top-1% rate estimates
- EV per lineup and per-seed variance
- Contest-level summaries (overlay, rake implied etc.)

### 6) Outputs & DK export
- `sim_results.parquet` — per-lineup simulated results (schema: `sim_results`)
- `metrics.parquet` — aggregates (schema: `sim_metrics`)
- **Export:** optional `--export-dk-csv path.csv` that writes a DK-compliant CSV from selected top lineups
  - Uses `export_csv_row` from upstream artifacts
  - Writes **DK uploadable** structure only when explicitly requested

### 7) Tests
- `tests/test_sim_adapter_smoke.py` — end-to-end with tiny field + tiny contest
- `tests/test_sim_failfast_no_write.py` — invalid field or contest blocks writes
- `tests/test_sim_run_id_determinism.py` — same inputs/config → same run_id; seed change alters it
- `tests/test_sim_manifest_registry.py` — manifest/registry validations
- `tests/test_sim_metrics_shapes.py` — metrics schema and expected keys
- `tests/test_sim_verbose_and_schemas_root.py` — robust schema path + verbose breadcrumb

### 8) Example config + contest
- `configs/sim.yaml` with commented defaults
- `tests/fixtures/contest_structure.csv` — tiny valid contest (e.g., 20 entries, top-5 payout)

---

## Inputs & Outputs

### Inputs
- **Field** from PRP-4 (`field.parquet`), or variants as fallback
- **Contest structure** `contest_structure.csv|parquet|json` (schema: `contest_structure`)

### Outputs
- `sim_results.parquet` (schema: `sim_results`)
- `metrics.parquet` (schema: `sim_metrics`)
- `manifest.json` (`run_type="sim"`)
- Registry append

---

## Acceptance Criteria
- Adapter is **headless** and produces schema-valid `sim_results` and `sim_metrics`
- Deterministic `run_id` and manifest/registry integration
- `--validate` on by default; `--schemas-root` robust
- No Streamlit/UI imports
- All tests pass locally and in CI
- README documents discovery policy, config knobs, export behavior

---

## Risks & Mitigations
- **Performance**: simulation can be heavy — begin with small trial counts; consider chunked writes later
- **Contest validation**: cross-field checks not expressible in JSON Schema — document and implement in adapter
- **Input variability**: protect against missing columns or invalid DK rows

---

## Directory Changes
```
processes/gpp_sim/
  __init__.py
  __main__.py
  adapter.py
  README.md
configs/
  sim.yaml
tests/
  fixtures/contest_structure.csv
  test_sim_adapter_smoke.py
  test_sim_failfast_no_write.py
  test_sim_run_id_determinism.py
  test_sim_manifest_registry.py
  test_sim_metrics_shapes.py
  test_sim_verbose_and_schemas_root.py
```

---

## CI Hooks
Add/extend a workflow to include GPP sim paths:
```yaml
on:
  pull_request:
    paths:
      - "processes/gpp_sim/**"
      - "pipeline/schemas/**"
      - "configs/sim.yaml"
      - "tests/test_sim_*py"
```
Run: ruff, black, mypy (scoped), pytest (focused), CLI `--help`.

---

## End Bookend — Merge & Tag
```
PRP End → branch=feature/gpp-sim-adapter
```
(Manual)
```bash
git checkout main
git merge --no-ff feature/gpp-sim-adapter -m "PRP-5: GPP simulator adapter"
git push origin main
git tag -a v0.6.0 -m "PRP-5: GPP simulator adapter"
git push origin v0.6.0
```
</file>

<file path="docs/PRPs/PRP-6-Orchestrator-and-E2E.md">
# PRP-6: Orchestrator and E2E Smoke

## Scope
- Add `processes/orchestrator/adapter.py` + CLI (`__main__.py`).
- Chain ingest → optimizer → variants → field_sampler → gpp_sim using the runs registry.
- Accept a single config file with per-stage blocks + `--config-kv` overrides.
- Generate a top-level `bundle.json` manifest linking child run_ids + outputs.
- Respect `--dry-run`, `--schemas-root`, `--validate`, `--verbose`.
- Deterministic seeds, threaded through each stage.
- E2E smoke test (stubs for optimizer, variants, field, sim).

## Artifacts
- `runs/orchestrator/<bundle_id>/bundle.json`
- Updated `registry/runs.parquet` with parent/child linkage.

## Tests
- `tests/test_orchestrator_smoke.py` — stubs only, ensures bundle.json created, all manifests valid.
- `tests/test_orchestrator_dry_run.py` — prints plan but does not execute.

## Docs
- `processes/orchestrator/README.md` — CLI usage, config structure, discovery rules.

## GitHub Actions
- **Start**: create branch `feature/orchestrator-e2e`
- **End**: open PR into `main` with summary of orchestrator, bundle manifest, and e2e smoke tests.
</file>

<file path="docs/PRPs/PRP-7-DK-Export-from-Sim.md">
# PRP-7: DK CSV Export from Simulator + Entries Writer

## Goal
Produce a DraftKings Classic NBA–compliant CSV **from simulator outputs** (sim_results + field) and optionally **write into a user-provided DK entries CSV** (seeded by selected simulated entrants).

---

## Scope

### New module: `processes/dk_export/`
- `writer.py`: pure functions to shape DK rows from **sim results** joined to **field entrants**.
- `__main__.py`: CLI entry.

**Inputs (discovery + flags):**
- One of:
  - `--from-sim-run <run_id>` → resolves to `runs/sim/<run_id>/artifacts/{sim_results.parquet, metrics.parquet}` and `field.parquet` via manifest inputs.
  - `--sim-results <path>` and `--field <path>` (explicit paths).
- Optional selectors:
  - `--top-n <int>` (default 20).
  - `--min-ev <float>`.
  - `--include <id1,id2,...>` / `--exclude <id1,id2,...>`.
  - `--dedupe` (default on).

**Outputs:**
- `--out-csv <path>`: DK-uploadable CSV (header order fixed).
- `--entries-csv <path>` (optional): update a DK entries CSV in place or to `--entries-out <path>`.

**Behavior:**
- Read sim_results → pick entrants by selector.
- Join to field.parquet → build DK string (`PG,SG,SF,PF,C,G,F,UTIL`).
- Validate 8 slots, salary cap ≤ 50000, no blanks.
- Deduplicate by export row if needed.
- If entries-csv given, map selected entrants into rows and preserve others.

**Manifest (optional):**
- Write manifest under `runs/export/<export_id>/manifest.json` with:
  - `source_run_id`, `selected_entrant_ids`, `out_csv_path`, `entries_csv_in/out`, `created_ts`.
- Deterministic `export_id` from hashes of inputs + seed.

---

## CLI Examples

```
python -m processes.dk_export   --from-sim-run 20251101_180000_deadbee   --top-n 20   --out-csv data/exports/tournament_lineups.csv   --dedupe --verbose
```

```
python -m processes.dk_export   --from-sim-run 20251101_180000_deadbee   --top-n 20   --out-csv data/exports/tournament_lineups.csv   --entries-csv ~/Downloads/DK_entries.csv   --entries-out data/exports/DK_entries_filled.csv
```

---

## Tests

- `tests/test_dk_export_header_order.py`: header/order matches DK spec.
- `tests/test_dk_export_from_sim_topn.py`: top-N selection yields N rows.
- `tests/test_dk_export_dedupe.py`: duplicates handled with dedupe.
- `tests/test_dk_entries_writer_roundtrip.py`: round-trip update of entries template.
- `tests/test_dk_export_discovery_from_run.py`: discovery from sim run manifest.

Fixtures:
- `tests/fixtures/dk_entries_template.csv`.
- Reuse sim + field stubs.

---

## Branch & PR
- Branch: `feature/dk-export-from-sim`
- Scope: `processes/dk_export/**`, `tests/test_dk_export_*`, fixtures.
- PR Title: PRP-7: DK CSV export from simulator + entries writer.
</file>

<file path="docs/PRPs/PRP-8-Metrics-Framework.md">
# PRP-8: Metrics Framework

## Purpose
Introduce a metrics framework that computes and validates lineup- and portfolio-level statistics after GPP simulations.  
Goal: standardized, schema-validated metrics artifacts for evaluation and downstream API/UI use.

## Scope
- **Module**: `processes/metrics/`
- **Schemas**:
  - `pipeline/schemas/metrics.schema.yaml` — defines metric rows
  - `pipeline/schemas/portfolio.schema.yaml` — defines portfolio-level summaries
- **Inputs**:
  - `sim_results.parquet` (from PRP-5)
  - `field.parquet` (from PRP-4)
  - `lineups.parquet` (from PRP-2)
- **Outputs**:
  - `metrics.parquet` — per-lineup and per-portfolio metrics
  - Manifest + registry append (run_type=`metrics`)
- **CLI**:
  - `uv run python -m processes.metrics --from-sim <run_id> --out-root data`
  - Options for: per-lineup metrics, portfolio metrics, aggregated metrics

## Key Features
- **Lineup-level**: ROI, EV, ownership leverage, duplication risk
- **Portfolio-level**: Sharpe ratio, Sortino ratio, exposure coverage, chalk index
- **Validation**: schema-validated before writes
- **Determinism**: run_id = `YYYYMMDD_HHMMSS_<sha8>` from sim + config

## Tests
- Smoke test: valid sim results → metrics written
- Determinism test: same sim/config → same run_id
- Fail-fast: invalid sim results block write
- Golden dataset: tiny sim + expected metrics

## Dependencies
- Requires PRP-5 artifacts (`sim_results`, `sim_metrics`).
- Integrates with orchestrator (PRP-6).
</file>

<file path="docs/PRPs/PRP-9-API-Layer.md">
# PRP-9: API Layer

## Purpose
Expose the orchestrator and artifacts through a REST API for programmatic access and future UI integration.  
Goal: reproducible runs via HTTP, artifact retrieval, health checks.

## Scope
- **Module**: `processes/api/` (FastAPI app)
- **Endpoints**:
  - `POST /orchestrate` → trigger orchestrator run (params: slate_id, config)
  - `GET /runs/{run_id}/bundle` → return bundle.json
  - `GET /runs/{run_id}/artifacts/{kind}` → stream parquet/JSON artifacts
  - `GET /metrics/{run_id}` → fetch metrics (depends on PRP-8)
  - `GET /health` → service health check
- **Startup**:
  - `uv run uvicorn processes.api.main:app --reload`
- **Artifacts served**: projections, lineups, variants, field, sim, metrics, DK export
- **Docs**: auto-generated OpenAPI via FastAPI

## Key Features
- Orchestrator invocation from API
- Deterministic run_ids preserved
- Streaming artifact downloads
- Optional auth placeholder for future multi-user

## Tests
- Smoke test: `GET /health` returns 200
- Orchestrator run via `POST /orchestrate` produces a bundle.json
- Retrieval of artifacts returns correct schema
- Golden test: known sim run returns consistent metrics

## Dependencies
- Depends on orchestrator (PRP-6) and metrics (PRP-8 for /metrics).
- Exposes foundation for UI integration (PRP-10+).
</file>

<file path="docs/PRPs/PRP-FS-01-Field-Sampler-Injection-Model-20250909-003232.md">
# PRP-FS-01 — Field Sampler (Injection Model, Top-Level Spec)

**Owner:** Cloud Agent  
**Repo:** `nba-dfs`  
**Branch:** `feat/fs-01-injection`

---

## Intent
Build a **realistic field** from projections/ownership rules (not from our variants), then **inject our Variant Catalog** as our entries. This decouples *field realism* from our strategies.

## Inputs
- `projections.csv`: `player_id, player_name, team, positions, salary, proj_pts, minutes` (+ optional ownership columns)
- `slate.csv`: `player_id, team, opp, game_id, is_active`
- `contest_config.json`: `site, sport, salary_cap, roster_slots[], max_per_team, multi_pos_sep, allow_util, allow_multi_pos`
- `variant_catalog.(jsonl|parquet)` (optional for injection step; treated as **our** entries)

## Outputs
- `artifacts/field_base.jsonl` — sampled public field (valid lineups only)
- `artifacts/field_merged.jsonl` — `field_base` + injected `variant_catalog` (w/ provenance tags)
- `artifacts/metrics.json` — counts, exposures, dupe estimates, invalid-attempt ratios
- `artifacts/audit_fs.md` — compliance report (0 critical violations target)

## Rules & Validation (must use **shared validators**)
- Roster size, eligibility (incl. UTIL), salary cap, max-per-team, no duplicates, active status.  
- Config-driven; DK NBA preset available; no hardcoding.

## Sampling (public field)
- Weighted by projections and/or ownership priors (`p ∝ own^α`), optional team stack preferences.
- Deterministic RNG (seeded). Rejection sampling with structured invalidation reasons.

## Injection
- Append our `variant_catalog` into the field with tags: `source="injected"`, `origin="variant_catalog"`, `owner="us"`.
- Ensure no ID mutation; revalidate lineups via the same validator.
- Optionally cap injected count or replace equal number of base-field lineups (config).

## Acceptance Criteria
1. `field_base.jsonl` and `field_merged.jsonl` contain **only validator-approved** lineups.
2. Artifacts include required metadata (`run_id`, `created_at`, `site`, `slate_id`, `seed`, `ruleset_version`).
3. `audit_fs.md` shows 0 criticals on mini-slate fixture and one real slate.
4. Deterministic reproduction with fixed seed + config.

## GitHub Actions
**Start:** create `feat/fs-01-injection`, commit scaffolds, push, open Draft PR  
**End:** CI green; audit updated; rebase; squash-merge; tag `v0.4.0-fs-injection`
</file>

<file path="docs/PRPs/PRP-FS-02-Field-Sampler.md">
# PRP-FS-01 — Field Sampler Engine Build-Out

**Owner:** Agent  
**Repo:** `nba-dfs`  
**Status:** Proposed  
**Depends on:** Shared validator (PRP-VAL-01), schema pack, optimizer/variant builder outputs

---

## 1) Summary
Implement a complete field sampling engine that generates realistic DraftKings-compliant contest fields. Currently, the sampler stubs exist but core logic is missing. This PRP delivers a deterministic, configurable engine aligned with the shared validator and schemas.

---

## 2) Goals / Non-Goals
### Goals
- Implement `SamplerEngine` with modular sub-engines:
  - `PositionAllocator` — assign slots via validator eligibility
  - `SalaryManager` — enforce cap distributions
  - `TeamLimiter` — respect per-team limits
  - `OwnershipBias` — weight variants by projected ownership
  - `Randomizer` — RNG with seed for reproducibility
- Configurable knobs for salary spread, ownership skew, uniqueness
- Output: parquet/CSV of sampled lineups, all validator-passing
- Metrics: duplication %, ownership distribution, salary histograms
- Integration with run registry (PRP-RUN-01)

### Non-Goals
- New ownership models (just wiring; model quality later)
- Advanced late-swap features

---

## 3) Deliverables
- `processes/field_sampler/engine.py` (SamplerEngine + submodules)
- Tests: `tests/test_field_sampler_engine.py`
- Docs: `docs/field_sampler/README.md` (usage, configs, metrics)
- Updated run artifacts: `runs/<slate>/field_sampler/<run_id>/`

---

## 4) Public API
```python
class SamplerEngine:
    def __init__(self, rules: Rules, config: SamplerConfig, seed: int = 42): ...
    def sample(self, variants: list[Lineup], size: int) -> list[Lineup]: ...
```

---

## 5) Tests
- Unit: slot allocation, salary spread, team limits, ownership skew
- Integration: sample N entrants, assert DK validity via validator
- Metrics snapshot

---

## 6) Acceptance Criteria
- Generates DK-valid sampled fields
- Reproducible with seed
- Produces metrics JSON + lineups parquet
- Runs complete without TypeError or drift
</file>

<file path="docs/PRPs/PRP-FS-04-FIELD_SAMPLER_DUPLICATION_AUDIT.md">
# PRP-FS-04 — Field Sampler Duplication Audit

**Owner:** Agent
**Repo:** `nba-dfs`
**Status:** Delivered
**Depends on:** None

---

## 1) Summary
Investigate and document multiple field sampler engines in the repo and propose a single source of truth.

## 2) Goals / Non-Goals
### Goals
- Inventory all field sampler implementations and their imports.
- Compare behaviours and consumers.
- Recommend consolidation path to a single engine.

### Non-Goals
- Implement the consolidation.
- Modify runtime behaviour.

## 3) Deliverables
- `docs/FS-04-Field-Sampler-Duplication-Report.md`

## 4) Notes
Documentation only; no functional code changes.
</file>

<file path="docs/PRPs/PRP-FS-05-Field-Sampler-Unification.md">
# PRP-FS-05 Field Sampler Unification

## GitHub Workflow Actions
- **Branch**: create feature branch `feat/fs-05-sampler-unification`
- **Commit**: add this PRP to `docs/PRPs/`
- **PR**: open PR against `main`
- **Review**: verify alignment with optimizer → variant builder → sampler → simulator pipeline


---

## Context & Inventory

### Current Sampler Implementations
- `field_sampler/engine.py`
  - Modular engine with components: `PositionAllocator`, `SalaryManager`, `TeamLimiter`, `RejectionSampler`
  - Outputs JSONL + metrics artifacts
  - Imports: `pandas`, `validators.lineup_rules`

- `processes/field_sampler/injection_model.py`
  - Pipeline-specific sampler
  - Shuffles players, supports variant injection
  - Imports: `pandas`, `validators.lineup_rules`, `random`

- `processes/field_sampler/_legacy/field_sampler.py`
  - Legacy infrastructure
  - YAML-driven bucket/weight configs
  - Imports: `yaml`, `numpy`, `paths`

- `processes/field_sampler/adapter.py`
  - Dispatcher requiring env var `FIELD_SAMPLER_IMPL`
  - No default fallback; raises error otherwise
  - Imports: `os`, `pipeline.io.*`

- `tests/fixtures/stub_field_sampler.py`
  - Minimal stub used in adapter tests

### Tests & Consumers
- `tests/test_field_sampler_engine.py` → `field_sampler.engine`
- `tools/sample_field.py` → `field_sampler.engine.run_sampler`
- `tests/test_field_sampler_injection.py` → `processes.field_sampler.injection_model`
- `tests/test_field_adapter_smoke.py` → adapter + stub

---

## Problem Statement
- Multiple sampler engines exist, leading to duplication and maintenance overhead.
- Adapter (`processes/field_sampler/adapter.py`) lacks a default, breaking pipeline cohesion.
- Tests are fragmented across different engines and stubs.
- Violates project charter goal: **Single Source of Truth** for data pipeline.

---

## Detailed Action Plan

### Step 1. Adapter Default Update
- Modify `processes/field_sampler/adapter.py`:
  - Default implementation → `field_sampler.engine.run_sampler`
  - Retain `FIELD_SAMPLER_IMPL` env override for experimentation
- Add clear error messages if overridden engine cannot be loaded

### Step 2. Feature Consolidation
- Audit `injection_model.py` for **variant injection** logic
  - Migrate this feature into `engine.py`
  - Ensure injection is optional and configurable
- Audit `_legacy/field_sampler.py`
  - Identify still-relevant bucket/weight logic
  - Migrate minimal viable subset if needed
  - Otherwise mark deprecated

### Step 3. Deprecation
- Add `DeprecationWarning` to:
  - `processes/field_sampler/injection_model.py`
  - `processes/field_sampler/_legacy/field_sampler.py`
- Remove after compatibility verified (target: next minor release)

### Step 4. Test Unification
- Route all sampler tests through adapter → canonical engine
- Remove `stub_field_sampler.py` once adapter integration tests are comprehensive
- Update/merge:
  - `tests/test_field_sampler_engine.py`
  - `tests/test_field_sampler_injection.py`
  - `tests/test_field_adapter_smoke.py`
- Ensure 100% coverage of engine features (position, salary, team, rejection, injection)

### Step 5. Documentation
- Publish canonical sampler API in `docs/`:
  - Inputs: projections CSV, player IDs
  - Outputs: JSONL, metrics, DK-compliant CSV
- Update pipeline diagram to reflect **single sampler implementation**
- Document adapter usage and `FIELD_SAMPLER_IMPL` override

---

## Acceptance Criteria
- Adapter loads `field_sampler.engine.run_sampler` by default
- Variant injection available in canonical engine
- Legacy files marked deprecated
- All sampler tests unified and passing
- Documentation updated with canonical API
- No redundant sampler implementations remain in active use

---

## Expected Benefits
- Single Source of Truth across optimizer → variant builder → sampler → simulator
- Cleaner adapter UX: users don’t manually select engines
- Reduced maintenance cost from eliminating duplicates
- Full compliance with project charter requirement for unified data pipeline
</file>

<file path="docs/PRPs/PRP-FS-07-Lint-Test-Stabilization-Agent.md">
# PRP-FS-07 Lint & Test Stabilization (Agent Task)

## Summary
Bring the repo to a clean, reproducible baseline by fixing the surfaced Ruff errors (E722, E741, E402, B904, B017, F401), tightening pytest behavior, and ensuring mypy/CI alignment. Leave legacy modules minimally touched, favoring surgical edits over refactors.

---

## GitHub Actions (start → end)
- **Start:** Branch `feat/fs-07-lint-test-stabilization` from `main`, commit this PRP.
- **End:** Open PR to `main`, squash-merge when green, delete branch.

---

## Scope / Goals
- Ruff: **0 errors** (safe fixes preferred; limited `--unsafe-fixes` allowed once).
- Black: clean with `line-length = 100`.
- Mypy: runs without plugin errors (Pydantic v2 plugin configured).
- Pytest: **collects** without errors; non-critical tests quarantined (skipped) until re-enabled.
- CI: GitHub Actions workflow using `uv` runs ruff/black/mypy/pytest on PR + `main`.

Non-goals: feature refactors, logic changes beyond what’s required to satisfy lints/tests.

---

## Environment & Tooling
- Python **3.11** (already pinned).
- **uv** for dependency management.
- Dev tools ensured in `dev` group: `ruff`, `black`, `mypy`, `pytest`, `pytest-cov`, `types-PyYAML`, `types-requests`, `pydantic`.

Commands baseline:
```bash
uv sync
uv run black . -l 100
uv run ruff check . --fix
uv run ruff check . --fix --unsafe-fixes
uv run ruff check .
uv run mypy
uv run pytest -q
```

---

## Detailed Tasks

### T1 — Ruff config sanity (no blanket ignores)
- Keep `line-length = 100` for Ruff & Black.
- Keep `ignore = ["E501"]` under `[tool.ruff.lint]` (Black owns wrapping).
- Maintain focused per-file ignores only where justified (e.g., legacy).

**Deliverable:** updated `pyproject.toml` with stable lint config and marker registration:
```toml
[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-q"
markers = ["smoke: minimal tests that should always run"]
```

### T2 — Legacy simulator minimal fixes (E722, E741)
**File:** `processes/gpp_sim/_legacy/nba_gpp_simulator.py`  
- Replace **bare** `except:` with `except Exception:` in the following regions (document exact line changes in commit message):
  - ~598, ~859, ~901, ~964, ~1324
- Rename loop variable `l` → `player_id` in region ~767 to address `E741`.

> If changes risk behavior, fallback: add per-file ignores only for this legacy file:
```toml
[tool.ruff.lint.per-file-ignores]
"processes/gpp_sim/_legacy/nba_gpp_simulator.py" = ["E722","E741"]
```
…but prefer code fixes.

### T3 — Adapter raise style (B904)
**File:** `processes/optimizer/adapter.py` (~269–272)  
- Change:
```python
except Exception:
    raise ValueError(f"Invalid lineup salary value: {total_salary}")
```
to:
```python
except Exception as err:
    raise ValueError(f"Invalid lineup salary value: {total_salary}") from err
```

### T4 — CLI import order (E402)
**File:** `scripts/pyopt/optimize_cli.py`  
- Move imports to the top **before** calling `os.environ.setdefault(...)`.
- Minimal structure:
```python
from collections import Counter
from itertools import combinations
import os
import pandas as pd

_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault("PROJECT_ROOT", _ROOT)
```

### T5 — Tests: ambiguous names & blind exceptions (E741, B017)
- Rename single-letter `l` variables → `lineup` (or `player_id`) in:
  - `tests/test_optimizer_manifest_registry.py` (~14)
  - `tests/test_optimizer_ownership_penalty_flag.py` (~18)
  - `tests/test_optimizer_run_id_determinism.py` (~14)
- Replace `with pytest.raises(Exception):` with the specific exception expected (likely `ValueError`) in:
  - `tests/test_optimizer_failfast_no_write.py` (~51)

### T6 — Unused imports in raggy.py (F401)
**File:** `raggy.py`  
- Remove unused imports (chromadb, PyPDF2, docx.Document). If presence checks are desired, use:
```python
import importlib.util as _il

if _il.find_spec("chromadb") is not None:
    print("✓ ChromaDB installed")
```
(Apply the same pattern for `PyPDF2` and `docx` or remove the block.)

### T7 — Test quarantine gate (temporary)
- Create `tests/conftest.py` with:
```python
import pytest
def pytest_collection_modifyitems(config, items):
    skip = pytest.mark.skip(reason="Temporarily skipped during stabilization (FS-07)")
    for item in items:
        if "smoke" not in item.keywords:
            item.add_marker(skip)
```
- Add `@pytest.mark.smoke` to at least one “happy path” test (e.g., optimizer adapter default, projections verbose print).

### T8 — CI wiring
Create `.github/workflows/ci.yml`:
```yaml
name: ci
on:
  push: { branches: [ main ] }
  pull_request:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/uv-action@v3
      - run: uv python pin 3.11 && uv sync
      - run: uv run ruff check .
      - run: uv run black --check .
      - run: uv run mypy
      - run: uv run pytest -q
```

---

## Acceptance Criteria
- `uv run ruff check .` → **0** errors.
- `uv run black --check .` → passes.
- `uv run mypy` → runs clean (no plugin errors).
- `uv run pytest -q` → **collects** without errors; non-smoke tests are skipped.
- CI is green on branch and on merge to `main`.

---

## Allowed Paths (Agent)
- `pyproject.toml`, `.github/workflows/ci.yml`, `tests/**`
- `scripts/pyopt/optimize_cli.py`
- `processes/optimizer/adapter.py`
- `processes/gpp_sim/_legacy/nba_gpp_simulator.py`
- `raggy.py`

**Do not** refactor logic beyond what’s required to satisfy lint/test constraints.

---

## Commit Plan
1. `chore(ci): add uv-based CI pipeline`
2. `chore(lint): align ruff/black config and pytest markers`
3. `fix(legacy): replace bare excepts and E741 in legacy simulator`
4. `fix(adapter): use exception chaining per B904`
5. `fix(cli): move imports above env setup (E402)`
6. `test: rename ambiguous vars and use specific exceptions`
7. `chore(raggy): drop unused imports or use find_spec checks`
8. `test: add quarantine gate and mark smoke tests`

---

## How to Run (Agent)
```bash
git switch -c feat/fs-07-lint-test-stabilization
uv sync

# iterate tasks T1–T7, running after each:
uv run black . -l 100
uv run ruff check . --fix && uv run ruff check .
uv run mypy
uv run pytest -q

git add -A && git commit -m "<commit-message>"
git push -u origin HEAD

# open PR and ensure CI passes
```
</file>

<file path="docs/PRPs/PRP-GPP-01-Minimal-Contest-Simulator-20250909-041953.md">
# PRP-GPP-01 — Minimal Contest Simulator (Vertical Slice)

## GitHub Actions (Start)
- **Create branch:** `git switch -c feat/prp-gpp-01-min-sim`
- **Sync main:** `git fetch origin && git pull --ff-only`
- **Set UV env:** ensure `uv` is installed (`pipx install uv` if needed).

---

## Objective
Stand up a thin end-to-end **GPP contest simulator** using the legacy engine at `processes/gpp_sim/_legacy/nba_gpp_simulator.py` as a reference, producing stable I/O contracts and run metrics. This closes the loop (Optimizer → Variant Builder → Field Sampler → **GPP Sim**) and validates the “single source of truth”.

## Scope (MVP)
- CLI entry: `processes/gpp_sim/__main__.py` with `uv run -m processes.gpp_sim`.
- Inputs:
  - `tournament_lineups.csv` (seeded with Sampled Field + Variant Catalog).
  - `contest_structure.csv` (buy-in, rake, payout table; support CSV or JSON).
  - Optional: `ownership.csv` for duplication/field realism (if present).
- Engine:
  - Deterministic scoring pass (use provided lineup projections/actuals as-is).
  - Exact-dup grouping: treat identical player sets as 1 lineup with N entries.
  - Payout application by finishing positions given `contest_structure`.
- Outputs:
  - `runs/<YYYYMMDD_HHMMSS>/sim_results.parquet`
  - `runs/<...>/summary.json` (ROI, ITM%, Net$, Top-1/5/10% hit rates, dup stats).
  - `runs/<...>/lineups_out.csv` (optional, DK-compliant for download/entries merge).
- UI hooks:
  - Return a `RunSummary` object compatible with existing `components/metrics/RunSummary.tsx` patterns.
  - Simple grid endpoint for lineup-level results (id, score, finish, prize, dup_count).

## Non-Goals (this PRP)
- Advanced field-strength models, stochastic outcome sampling, or correlation modeling.
- Ownership modeling improvements (placeholder only).
- Full dashboard integration (wire basic routes only).

---

## File & Data Contracts
- **`tournament_lineups.csv`**
  - Columns (required): `lineup_id`, `player_ids` (pipe- or comma-joined DK IDs), `entry_count` (default=1)
  - Optional: `proj_points`, `salary`, `ownership` (float 0-1 per lineup)
- **`contest_structure.csv`**
  - Columns: `place`, `payout` (absolute $) or use `total_entries`, `buy_in`, `rake`, and a `payout_table` JSON
- **Output `summary.json`**
  ```json
  {
    "entries": 150,
    "unique_lineups": 120,
    "total_prizes": 1234.50,
    "total_fees": 300.00,
    "net": 934.50,
    "roi": 3.115,
    "itm_pct": 0.227,
    "dup": { "mean": 1.4, "p95": 3, "max": 12 }
  }
  ```

---

## Implementation Plan
1. **Scaffold**
   - New pkg: `processes/gpp_sim/`
   - `__main__.py` for CLI: args for `--lineups`, `--contest`, `--outdir`, `--format parquet|csv`.
   - `engine.py` minimal: load inputs → score → rank → apply payouts → aggregate metrics.
   - `io_schemas.py`: pydantic dataclasses for strict validation (fail fast).
2. **Legacy Port**
   - Borrow stable helpers from `_legacy/nba_gpp_simulator.py` where sensible; keep `_legacy/` intact for diffing.
3. **Dup Handling**
   - Group by normalized player set string; expand by `entry_count`.
4. **Metrics**
   - ROI, ITM%, net $, dup stats; per-lineup prize/finish.
5. **Persistence**
   - All artifacts under `runs/<timestamp>/` with `meta.json` describing inputs.
6. **UI Wiring**
   - Emit `RunSummary`-compatible JSON; small Next.js API route stub if needed.

---

## UV Dependencies
- `pydantic>=2`
- `polars>=1` (or `pandas>=2`; prefer `polars` for speed)
- `pyarrow>=16`
- Add via UV: `uv add pydantic polars pyarrow`

---

## Tests
- `tests/test_gpp_sim_engine.py`
  - Loads tiny fixtures for lineups + contest; asserts ROI/ITM and dup grouping.
  - Contract tests for schema validation and missing columns.
- `tests/test_gpp_sim_cli.py`
  - Smoke test: runs CLI, asserts artifacts exist in `runs/<ts>/`.
- **Fixtures**: `tests/fixtures/gpp/{lineups.csv, contest.csv}`

---

## Acceptance Criteria
- `uv run -m processes.gpp_sim --lineups fixtures/lineups.csv --contest fixtures/contest.csv` produces:
  - `runs/<ts>/summary.json` with ROI/ITM/net & dup stats.
  - `runs/<ts>/sim_results.parquet` with ≥ these columns: `lineup_id, score, finish, prize, dup_count`.
- Run resumes on new inputs without code changes.
- No mutation of `_legacy/` code; new engine runs independently.
- All tests pass in CI.

---

## Follow-Ups (Next PRPs)
- **PRP-GPP-02:** Ownership/field realism (strength buckets, chalk tilt, late news).
- **PRP-VB-02 / PRP-FS-02:** Controls to target dup-risk and top-1% hit-rate, calibrated against sim metrics.
- **PRP-DASH-01:** Unified dashboard routes & data orchestration.

---

## GitHub Actions (End)
- `git add -A && git commit -m "feat(gpp): minimal contest simulator vertical slice"`
- `git push -u origin HEAD`
- Open PR: `gh pr create -B main -t "feat(gpp): minimal contest simulator (vertical slice)" -b "Adds minimal GPP sim with stable I/O and metrics."`
- Merge when green → `git switch main && git pull --ff-only`
</file>

<file path="docs/PRPs/PRP-INGEST-03.md">
# PRP-INGEST-03 — CSV Ingestion, Validation, and Normalization

**Owner:** Agent A  
**Repo:** `nba-dfs`  
**Scope:** Wire the Upload Dropzone to parse `projections.csv` and `player_ids.csv`, validate with Zod, normalize to canonical models, and surface structured data to the app state (no optimizer yet).

---

## Deliverables
1) **Parsing & Validation**
- Zod schemas for both files; column alias mapping; numeric coercion.
- Streaming CSV parser (Papaparse) for large files.

2) **Normalization**
- Canonical `Player`, `Projection`, `MergedPlayer` types in `lib/domain/types.ts`.
- Join on `player_id`; expose merged list + lookup maps.

3) **State**
- Client store (`lib/state/ingest-store.ts`) with data, status, errors.
- Upload component calls `ingestCsv(files)`; expose ingest summary.

4) **Diagnostics**
- Ingest summary shown in Metrics drawer: rows parsed, merged, dropped, unknown columns.

5) **Fixtures & Tests**
- `fixtures/` sample CSVs + unit tests for schema, mapping, join, coercion.

---

## File Plan
```
lib/domain/types.ts
lib/ingest/schemas.ts
lib/ingest/parse.ts
lib/ingest/normalize.ts
lib/state/ingest-store.ts
components/ui/UploadDropzone.tsx
components/metrics/IngestSummary.tsx
fixtures/projections.csv
fixtures/player_ids.csv
```

## Acceptance Criteria
- Dropping the two CSVs populates the store with merged players (N > 0).
- Invalid/missing columns are reported; coercion handled.
- Large files don’t freeze the UI (streaming + yielding).
- Metrics drawer shows ingest summary.  
- Tests pass for schema and normalization logic.

**Start:** `git checkout -b feature/ingest-03` → PR → tag `v0.12.0`.
</file>

<file path="docs/PRPs/PRP-INGEST-03B.md">
# PRP-INGEST-03B — DK Header Aliases & Zero‑Drop Normalization (ALL players must match)

**Owner:** Agent A  
**Repo:** `nba-dfs`  
**Goal:** Make ingest accept **real DraftKings CSVs** and produce a **canonical, fully‑joined** `MergedPlayer[]` with **zero drops** (every player row in `player_ids.csv` must match a projections row, and vice‑versa). Replace the current behavior where all rows were dropped due to header mismatches.

---

## Requirements (non‑negotiable)

- **Zero‑drop join**: `merged_count == players_count == projections_count`. If mismatches remain, treat them as **errors to fix**, not “informational.”
- **No network calls.**
- **Deterministic output**: same input → same `MergedPlayer[]` order + values.
- **Performance**: handle 10–30k rows without jank in the UI (streaming parse + yielding).

---

## Canonical Model (unchanged)

We keep a single **canonical schema** for the pipeline and map vendor fields into it.

```ts
// lib/domain/types.ts (already present; reference only)
type Player = {
  player_id: string;            // DK id preferred
  name: string;                 // "FIRST LAST"
  team: string;                 // BOS, LAL, ...
  pos: string[];                // ["PG","SG"]
};

type Projection = {
  player_id?: string;
  name: string;
  team?: string;
  pos?: string[];
  salary?: number;              // DK salary (int)
  proj_pts: number;             // required
  proj_sd?: number;
  own_pct?: number;
  field_pts?: number;
};

type MergedPlayer = Player & Projection;  // union of canonical fields
```

---

## Header Alias Map (DK → Canonical)

Apply **before** validation. Trim header text, drop BOM, collapse spaces.

### `player_ids.csv` (DK Players)
| DK Header      | Canonical  | Notes |
|---|---|---|
| `ID` or `Player ID` | `player_id` | prefer numeric/string id |
| `Name`        | `name`     | normalize diacritics & whitespace |
| `Position`    | `pos`      | split on `/` → array |
| `TeamAbbrev`  | `team`     | 3‑letter |
| `Game Info`   | `game`     | optional passthrough |

### `projections.csv` (DK Projections)
| DK Header  | Canonical   | Notes |
|---|---|---|
| `Name`     | `name`      | |
| `Position` | `pos`       | split on `/` |
| `Team`     | `team`      | 3‑letter |
| `Salary`   | `salary`    | int |
| `FPTS`     | `proj_pts`  | required number |
| `StdDev`   | `proj_sd`   | number optional |
| `Own%`     | `own_pct`   | number optional (strip `%`) |
| `FieldFpts`| `field_pts` | number optional |

> Keep schema **canonical** in Zod; only the **adapter** mutates header names.

---

## Coercions & Normalization

- Trim strings; collapse internal whitespace; strip BOM.
- **Numbers**: `salary`, `proj_pts`, `proj_sd`, `own_pct`, `field_pts` via safe coercion (`Number`, remove `%`, commas).
- **Positions**: `"PG/SF"` → `["PG","SF"]` (uppercased, deduped).
- **Name key**: uppercase, remove periods, extra spaces (`"Jr."` → `"JR"`). Keep original `name` for UI; use normalized for matching.
- **Teams**: uppercased; allow simple alias set (`NO`↔`NOP`, `PHO`↔`PHX`, `SA`↔`SAS`) in a tiny map.

---

## Join Strategy (strict, zero‑drop)

1. **Primary**: join on `player_id` if present in both.
2. **Secondary**: fallback to **name+team+primaryPos** composite key after normalization.
3. **Tertiary (last‑mile fixes)**: small **manual alias map** for known DK quirks (e.g., team code renames or middle‑initial variants). Keep this map in `lib/ingest/aliases.ts` with unit tests.

If any player still fails to join, **fail the ingest** with a precise error list and counts (do not silently pass with drops).

---

## Implementation Plan

**T0 — Plan (no writes)**  
- Confirm column presence in your real CSVs; list extra columns to ignore.

**T1 — Adapter Layer**  
- `lib/ingest/adapter.ts`: header rename + value coercions (per tables above).

**T2 — Schemas (Zod)**  
- Keep canonical Zod schemas; allow unknown keys (`.passthrough()`), and validate **after** adapter.

**T3 — Parser**  
- `lib/ingest/parse.ts`: Papaparse streaming; yield to UI between chunks.

**T4 — Normalizer + Join**  
- `lib/ingest/normalize.ts`: build maps for `player_id` and composite key; perform strict join; assemble `MergedPlayer[]`.

**T5 — Store + Summary**  
- `lib/state/ingest-store.ts`: store merged, counts; **error if counts don’t match**.  
- `components/metrics/IngestSummary.tsx`: show **players_count**, **projections_count**, **merged_count** and **0 unknown/0 dropped**. If non‑zero, render error panel listing offenders.

**T6 — Fixtures Snapshot**  
- Regenerate `fixtures/dk/<DATE>/mergedPlayers.json` from real files once join is 100% complete.

**T7 — Tests**  
- Unit tests for adapter coercions, alias map, strict join behavior, and error surface (jest/vitest).  
- Snapshot test for a small synthetic DK pair (3–5 players) that covers edge cases.

---

## Acceptance Criteria

- Metrics drawer shows **Players = Projections = Merged**, with **0 dropped**, **0 unknown**.  
- Optimizer **Run** produces valid lineups using the merged data (with fixture badge when fallback is used).  
- `scripts/make-fixture-snapshot.mjs <DATE>` writes a stable JSON used by the fixture loader.  
- Large files (10–30k rows) ingest without freezing the UI.

---

## Branch & PR

- **Start:** `git checkout -b feature/ingest-03b-dk-zero-drop`  
- **End:** PR title: **“PRP-INGEST-03B: DK aliases & zero‑drop normalization (strict join)”**  
- Include: before/after Metrics screenshots; counts proving full match.

---

## Agent One‑Liner (kickoff)

> Read `docs/PRPs/PRP-INGEST-03.md` and `docs/PRPs/PRP-INGEST-03B.md`. On branch `feature/ingest-03b-dk-zero-drop`, implement a header adapter for DK files, canonical Zod validation, strict zero‑drop join with id→composite fallback, and updated metrics summary. Regenerate `fixtures/dk/<DATE>/mergedPlayers.json`. Open PR when merged_count equals players_count equals projections_count.
</file>

<file path="docs/PRPs/PRP-OPT-04.md">
# PRP-OPT-04 — Optimizer Scaffold, Worker Setup, and Grid Rendering

**Owner:** Agent B  
**Repo:** `nba-dfs`  
**Scope:** Implement a pluggable optimizer scaffold that runs in a Web Worker, consumes normalized inputs, produces candidate lineups, and renders them in the grid. Results remain mock/simple but the pipeline and contracts are real.

---

## Deliverables
1) **Contracts & Types** — `OptimizerConfig`, `OptimizationRequest`, `OptimizationResult`, `Lineup`  
2) **Worker Runtime** — `workers/optimizer.worker.ts` + message protocol  
3) **Algorithm (placeholder)** — greedy/random-sample with salary/slot checks  
4) **UI Integration** — Run button in ControlsBar → orchestrator; render lineups in grid; Metrics drawer shows run summary  
5) **Error/Cancel** — cancel token, handle worker errors gracefully

---

## File Plan
```
lib/opt/types.ts
lib/opt/constraints.ts
lib/opt/algorithms/greedy.ts
workers/optimizer.worker.ts
lib/opt/run.ts
lib/state/run-store.ts
components/ui/ControlsBar.tsx
components/ui/LineupGrid.tsx
components/metrics/RunSummary.tsx
```

## Acceptance Criteria
- Clicking **Run** produces ≥ 50 candidate lineups quickly; UI stays responsive (worker).  
- Grid shows lineups; Metrics drawer shows run summary.  
- Cancel stops computation cleanly.  
- Contracts stable; swapping algorithm is trivial.

**Start:** `git checkout -b feature/optimizer-04` → PR → tag `v0.13.0`.
</file>

<file path="docs/PRPs/PRP-OPT-04A.md">
# PRP-OPT-04A — Real DK Fixtures & Deterministic Test Harness

**Owner:** Agent B  
**Repo:** `nba-dfs`  
**Purpose:** Use *real DraftKings* CSVs (your `projections.csv` + `player_ids.csv` from a past date) as fixtures so the optimizer scaffold (PRP-OPT-04) is tested with realistic data. Keep ingestion optional: if PRP-INGEST-03 isn’t merged, use a temporary normalizer to make a snapshot the worker can consume.

---

## Why
Running the optimizer against real DK-shaped data surfaces constraints/edge-cases early (positions, salary caps, duplicate IDs, missing aliases) and proves the worker + UI remain responsive under realistic sizes.

---

## Inputs (provided by you)
Place your historical files here (adjust date as needed):
```
fixtures/dk/2024-01-15/projections.csv
fixtures/dk/2024-01-15/player_ids.csv
```
> Use any "random date from last year" you choose. The path date is only for organization.

---

## Deliverables

1) **Fixtures**
- Add your two CSVs under `fixtures/dk/<DATE>/` (kept in Git so agents can run deterministically).

2) **Normalization Snapshot**
- If PRP-INGEST-03 is **available**: run its normalizer to produce a stable JSON snapshot:
  ```
  fixtures/dk/<DATE>/mergedPlayers.json   # output: MergedPlayer[]
  ```
- If PRP-INGEST-03 is **not yet merged**: implement a tiny, local **bridge normalizer** (no network) that:
  - Applies a minimal alias map (e.g., `proj, proj_pts` → `proj_pts`)
  - Coerces numbers (salary, proj_pts)
  - Joins on `player_id`
  - Writes `mergedPlayers.json`

3) **Optimizer Wiring**
- Optimizer runner **prefers live ingest store** when present.
- If store is empty, it **falls back** to loading `fixtures/dk/<DATE>/mergedPlayers.json`.
- Add a deterministic `seed` default (e.g., `"dk-fixture-<DATE>"`).

4) **Config toggles**
- Add `lib/opt/config.ts`:
  - `DEFAULT_FIXTURE_DATE = "<DATE>"`
  - `USE_FIXTURE_FALLBACK = true` (until PRP-INGEST-03 lands)
  - `DEFAULT_SALARY_CAP = 50000`, `ROSTER_SLOTS` per DK

5) **QA Harness**
- Script/command to run the worker with the fixture (no UI) and print summary counts:
  - candidates tried, valid lineups, best score, time elapsed

---

## File/Module Plan
```
fixtures/dk/<DATE>/projections.csv
fixtures/dk/<DATE>/player_ids.csv
fixtures/dk/<DATE>/mergedPlayers.json     # generated

lib/opt/config.ts                         # defaults (cap, slots, fixture date, seed)
lib/opt/fixtures.ts                       # load snapshot or fail gracefully
lib/opt/run.ts                            # prefer store; else fallback to fixtures
scripts/make-fixture-snapshot.ts          # bridge normalizer if ingest not merged (node script)
components/metrics/RunSummary.tsx         # include "Fixture: <DATE>" when using fallback
```

---

## Acceptance Criteria
- With only the two CSVs added under `fixtures/dk/<DATE>/`, the project:
  - **Generates** `mergedPlayers.json` (via ingest or bridge normalizer).
  - **Runs** optimizer worker and renders ≥ 50 candidate lineups through the UI grid.
  - **Deterministic** results for the same seed (best lineup score stable across runs).
  - **Responsive UI** (no blocking) during the run.
- When PRP-INGEST-03 is merged, toggling `USE_FIXTURE_FALLBACK=false` makes the optimizer use live ingested data instead of the snapshot.

---

## Notes & Guardrails
- Keep the bridge normalizer small and testable; once PRP-INGEST-03 is in, delete it and use the real ingest pipeline.
- Do **not** add any network calls.
- Size guardrails: the UI must remain responsive with 10–30k rows merged.

---

## Agent Tasks

**T0 — Plan (no writes)**  
- Confirm fixture paths and selected date; list alias assumptions for projections file.

**T1 — Fixture Loader + Config**  
- Add `lib/opt/config.ts` and `lib/opt/fixtures.ts`; load JSON snapshot and surface via a typed function.

**T2 — Bridge Normalizer (temporary if needed)**  
- Node script to parse the two CSVs, apply alias map, coerce numeric fields, join on `player_id`, write `mergedPlayers.json`.

**T3 — Optimizer Fallback**  
- In `lib/opt/run.ts`, prefer store; else load `fixtures` snapshot and proceed.

**T4 — QA Harness**  
- Add a simple CLI script to run the worker with the snapshot and log summary; document command in README.

**T5 — UI Badge**  
- When using fixtures, show a small "Fixture: <DATE>" badge in RunSummary.

---

## Branch & PR
**Start:** `git checkout -b feature/optimizer-04-fixtures`  
**End:** `gh pr create -t "PRP-OPT-04A: Real DK fixtures & deterministic harness" -b "Adds dk/<DATE> fixtures, snapshot, fallback, seed, and QA harness"`
</file>

<file path="docs/PRPs/PRP-OPT-05.md">
# PRP-OPT-05 — Expose Optimizer Knobs (from legacy) & Deprecate DK‑Strict

**Owner:** Agent B  
**Repo:** `nba-dfs`  
**Goal:** Expose the key **optimizer controls** in the new Next.js UI (ControlsBar) and wire them through **run → worker → algo**, using the knobs proven in the legacy `processes/optimizer/_legacy/optimize.py`. Deprecate the old **DK‑Strict** toggle (no-op shim) so there is a single modern path.

---

## Why
Legacy Streamlit UI (`optimize.py`) already defines practical knobs (seed, candidates/lineups, salary limits, team cap, randomness, ownership penalty, engine presets). The new shell currently has a **Run** button with defaults only; users can’t tune constraints and we still see **Valid lineups = 0** in some cases because constraints aren’t adjustable. This PRP ports the **controls and their plumbing** into the modern app.

---

## Scope (What to Implement Now)

### UI Controls (ControlsBar)
Expose as simple inputs (dev-styled OK; shadcn components):
- **Candidates** (int, default 20_000) — how many candidates to try in the sampler.
- **Team cap** (int, default 3) — max players per team (0 disables).
- **Salary cap** (int, default 50_000) — DK cap (keep default).
- **Min salary** (int, default 0 / optional) — allow “leave salary on table”.
- **Seed** (text, default deterministic) — affects sampler order.
- **Randomness %** (0–100, default 0) — optional variance to projections (kept but can be pass‑through now).
- **Ownership penalty (toggle)** — pass‑through to worker (implementation may be a no‑op initially; just plumb it).

> Out of scope for this PRP: engine selection (CP‑SAT/CBC), strict solver presets, and the full ownership penalty curve UI. Those can be a follow‑up PRP.

### Wiring
- Thread a single `options` object from **ControlsBar → useRunStore.run(options) → lib/opt/run.ts → worker**.
- Default to values from **lib/opt/config.ts** when a field is empty; persist last‑used values in store (session only).

### Worker/Algo
- Worker accepts the options, merges with defaults, and passes into the sampler (`lib/opt/algorithms/greedy.ts`).
- Add constraint checks in the validator (salary ≤ cap, 8 DK slots, team cap); return **reasons** counters: `{salary, slots, teamcap, dup}` into diagnostics.
- Respect **min salary** (i.e., `total_salary >= min_salary` when set).
- Apply `randomness_pct` as **optional noise** to projections (uniform ±X% around proj) behind a flag.

### Metrics/UX
- **RunSummary** shows the knobs echo (seed, candidates, team cap, caps), and a small breakdown: `invalid reasons: {salary, slots, teamcap, dup}`.
- Keep determinism: same seed + data + knobs → same result.

### Deprecate DK‑Strict
- Remove the toggle from our modern path; if any code still branches on it, make it a **no‑op** and mark with `@deprecated` comment. (Legacy file remains untouched.)

---

## Files to Touch

- `components/ui/ControlsBar.tsx` — add inputs, local state, call `run(options)`.
- `lib/state/run-store.ts` — update `run(options)` signature; store last‑used knobs.
- `lib/opt/config.ts` — centralize defaults (`CANDIDATES`, `TEAM_CAP`, `SALARY_CAP`, `MIN_SALARY`, `SEED`, `RANDOMNESS_PCT`).
- `lib/opt/run.ts` — merge knobs + data, post to worker, plumb diagnostics back.
- `workers/optimizer.worker.ts` — accept options, count invalid reasons, post progress + final summary.
- `lib/opt/algorithms/greedy.ts` — ensure validator honors all constraints; support min salary and team cap properly; use UTIL/G/F flex correctly.
- `components/metrics/RunSummary.tsx` — display knob echo + invalid reasons.
- (Optional) `lib/opt/types.ts` — define `RunOptions` type.

---

## Acceptance Criteria

- UI shows **Candidates, Team cap, Salary cap, Min salary, Seed, Randomness %, Ownership toggle**.
- Clicking **Run** with defaults yields **Valid lineups > 0** on the 2024‑01‑15 fixture and on live ingest.
- **RunSummary** includes an “invalid reasons” breakdown and echoes the knobs used.
- Re‑running with identical seed/knobs/data yields identical best lineup (deterministic).
- No references to DK‑Strict toggle in the modern path (kept as deprecated comment only).

---

## Out of Scope (follow‑ups)
- Full **ownership penalty UI** (curves, pivots) and solver engine selection.
- Animated tab underline/polish and adopt Aceternity effects.
- Persist knobs across sessions (localStorage) — optional later.

---

## Risks & Mitigations
- **Too many invalids** → expose reasons counters to tune team cap/candidates quickly.
- **Noise changes ranking** → keep randomness off by default; gate behind opt‑in toggle.
- **DK‑Strict removal** → leave legacy path untouched; just deprecate in modern code.

---

## Branch & PR

- Start: `git checkout -b feature/optimizer-05-knobs`
- PR Title: **PRP-OPT-05: Expose optimizer knobs & deprecate DK‑Strict**
- Tag after merge (optional): `v0.14.0`

---

## Agent Kickoff — One‑liner

Read `docs/PRPs/PRP-OPT-05.md`. On branch `feature/optimizer-05-knobs`, add UI inputs (candidates, team cap, salary/min salary, seed, randomness %, ownership toggle) to `ControlsBar`, thread an `options` object through `run-store → run.ts → optimizer.worker → greedy.ts`, honor constraints (including min salary), return invalid reason counts, echo settings in `RunSummary`, and deprecate DK‑Strict in the modern path. Open a PR when **Valid lineups > 0** on the DK fixture and the reasons breakdown renders.
</file>

<file path="docs/PRPs/PRP-OPT-06.md">
# PRP-OPT-06 — Integrate Legacy Optimizer w/ New Pipeline (CP‑SAT by default)

**Owner:** Optimizer Agent  
**Status:** Proposed  
**Branches:** `feature/opt-06-integrate-cpsat`  
**Timebox:** 1–2 focused sessions

---

## Why
Our UI currently runs a JS prototype (greedy). We want **true solver** results and feature parity with the legacy engine. This PRP cleanly integrates `processes/optimizer/_legacy/nba_optimizer_functional.py` into the new pipeline and makes **CP‑SAT the default**, with CBC as a safe fallback.

---

## Outcomes
- ControlsBar knobs drive a **single contract** passed to a solver backend.
- Web Worker invokes **Python optimizer** instead of the TS greedy prototype.
- **CP‑SAT** is default (if OR‑Tools present); **CBC** fallback otherwise.
- Ingested CSVs (or fallback fixtures) feed the solver; **lineups > 0** on DK fixture.
- Summary shows **engine used**, options used, invalid‑reason counts, and ownership telemetry when enabled.

---

## Scope (what changes)
### Backend bridge
- Add a **CLI shim** that reads JSON on stdin and returns JSON on stdout:
  - `scripts/pyopt/optimize_cli.py`
  - Calls `nba_optimizer_functional.optimize_with_diagnostics(...)`.
  - Selects engine: `cp_sat` (preferred) → `cbc` (fallback) if OR‑Tools unavailable.
  - Normalizes ownership to `[0,1]` and carries diagnostics.
- Use **uv** for Python deps (repo preference):
  - `uv.lock` / `pyproject.toml` add: `pulp`, `ortools`, `pandas`, `numpy`, `fastjsonschema` (optional), `click` (optional).

### Node orchestration
- Update **runner** to spawn the Python CLI via `uv`:
  - File: `lib/opt/run.ts`
  - Replace/branch the current worker path: use **subprocess** to `uv run python scripts/pyopt/optimize_cli.py` with a JSON payload derived from run‑store state.
  - Keep the current Web Worker as an **optional “local sampler”** fallback (flag‑controlled) to avoid blocking if Python is misconfigured.
- Extend **types** to include solver engine + diagnostics echo:
  - `lib/opt/types.ts` adds `engineUsed: "cp_sat" | "cbc"`, `diagnostics?: unknown` on summary.

### Ingest contract
- Reuse ingested canonical schema (zero‑drop DK join).
- Adapter in CLI shim converts canonical JSON → Pandas DF expected by the legacy optimizer (columns: `name, team, position, salary, proj_fp, own_proj?, dk_id?`).

### UI
- No layout changes. ControlsBar and Metrics drawer already show options + reasons.
- Add a small badge in `RunSummary` for **Engine: CP‑SAT/CBC** based on `engineUsed`.

---

## Out of scope
- Server mode (FastAPI/Flask). We use a **CLI subprocess** for simplicity.
- Multi‑game slates logic changes (positions/constraints remain as in legacy file).
- New knobs beyond the ones already surfaced.

---

## Contracts

### Request → Python (stdin JSON)
```jsonc
{
  "site": "dk",
  "enginePreferred": "cp_sat",     // "cp_sat" | "cbc"
  "constraints": { /* existing TS constraints, incl. salary, team cap, uniques, N_lineups, ownershipPenalty */ },
  "players": [
    {
      "player_id": "123",
      "name": "Player Name",
      "team": "PHX",
      "position": "PG/SG",
      "salary": 7200,
      "proj_fp": 34.5,
      "own_proj": 0.12,            // optional, 0..1
      "dk_id": "9876543"           // optional
    }
  ],
  "seed": 42
}
```

### Response ← Python (stdout JSON)
```jsonc
{
  "ok": true,
  "engineUsed": "cp_sat",
  "lineups": [
    {
      "lineup_id": 1,
      "total_proj": 297.4,
      "total_salary": 49800,
      "players": [
        {"player_id":"123","name":"...","pos":"PG","team":"PHX","salary":7200,"proj":34.5,"dk_id":"9876543","own_proj":0.12}
        // 8 DK slots
      ]
    }
  ],
  "summary": {
    "tried": 1, "valid": 1, "bestScore": 297.4, "elapsedMs": 420,
    "invalidReasons": {"salary":0,"slots":0,"teamcap":0,"dup":0},
    "optionsUsed": {/* echo of knobs */}
  },
  "diagnostics": { /* pass-through from optimizer_with_diagnostics */ }
}
```

---

## Tasks

### T0 — Branch & guardrails
- Create: `feature/opt-06-integrate-cpsat`.
- Add a **runtime toggle** (env var `DFS_SOLVER_MODE=python|sampler`) default `python`.

### T1 — Python CLI shim
- Add `scripts/pyopt/optimize_cli.py`:
  - Parse stdin JSON, create Pandas DF, call `optimize_with_diagnostics`.
  - Detect OR‑Tools availability: prefer `"cp_sat"`, else `"cbc"`.
  - Emit the response JSON to stdout (no logs on stdout; logs → stderr).

### T2 — Node runner wiring
- Update `lib/opt/run.ts`:
  - If mode `python`, spawn CLI using `child_process.spawn`:
    - command: `uv`
    - args: `["run", "python", "scripts/pyopt/optimize_cli.py"]`
    - stream stdin, collect stdout; map to existing `RunSummary` shape.
  - On spawn error/non‑zero exit: surface a clear UI error and suggest installing Python/uv/ortools.
  - Keep current Worker sampler under a flag (`DFS_SOLVER_MODE=sampler`).

### T3 — Types & UI
- `lib/opt/types.ts`: extend summary with `engineUsed` and `diagnostics` (opaque).
- `components/metrics/RunSummary.tsx`: show `Engine: CP‑SAT` or `CBC`.
- No other UI changes.

### T4 — QA & docs
- Fixture QA: run with `fixtures/dk/2024-01-15/mergedPlayers.json` → **valid > 0**.
- Upload QA: drag in your known 116‑player CSVs → **valid > 0** under default knobs.
- Add `README.md` snippet: installing Python/uv/ortools; env toggle; troubleshooting.

---

## File diffs (planned)
- **NEW** `scripts/pyopt/optimize_cli.py`
- **MOD** `lib/opt/run.ts` (spawn Python, map results)
- **MOD** `lib/opt/types.ts` (engineUsed/diagnostics)
- **MOD** `components/metrics/RunSummary.tsx` (engine badge)
- **NEW** `pyproject.toml`, `uv.lock` (deps: `ortools`, `pulp`, `pandas`, `numpy`)
- **DOC** `docs/PRPs/PRP-OPT-06.md` (this file)
- **DOC** `README.md` (short how‑to)

---

## Acceptance criteria
- With fixture (116 players), default knobs → **valid lineups > 0**.
- With uploaded DK CSVs (players + projections), strict join holds and solver returns lineups.
- Summary shows **engineUsed=cp_sat** when OR‑Tools present; **cbc** when not.
- No UI freezes; errors are user‑friendly (missing Python/uv/ortools).

---

## Local runbook
```bash
# (once) install uv & python 3.11+
# macOS: pipx install uv  OR  brew install uv

# python deps
uv sync

# dev
npm run dev
# ensure DFS_SOLVER_MODE=python (default)
# Optimizer → Run
```

---

## Git actions

### Start
```bash
git checkout -b feature/opt-06-integrate-cpsat
git add docs/PRPs/PRP-OPT-06.md
git commit -m "docs: add PRP-OPT-06 (optimizer integration; CP-SAT default)"
git push -u origin feature/opt-06-integrate-cpsat
```

### End (after implementation)
```bash
# open PR
gh pr create -B main -H feature/opt-06-integrate-cpsat   -t "PRP-OPT-06: integrate legacy optimizer via CLI (CP-SAT default)"   -b "Wire UI → Node runner → Python CLI → nba_optimizer_functional (CP‑SAT default; CBC fallback)."

# merge (squash)
gh pr merge --squash --delete-branch
git pull
```
</file>

<file path="docs/PRPs/PRP-OPT-06A.md">
# PRP-OPT-06A — Ingest + Penalty Normalization (Local only)

**Goal**: Make the optimizer work with our **house schema** via the Python CLI + API, with:
- Robust CSV/JSON/Parquet ingest
- Header normalization + aliasing (incl. `Own% → own_proj`)
- Optional DK IDs merge from a separate file
- Ownership penalty key normalization in API (`lambda|lambda_ → weight_lambda`)
- JSON sanitation (no `Infinity` in API output)

---

## GitHub actions

**Start**
- Branch already present: `feature/opt-06-integrate-cpsat` (stay on it)
- Commit scope: only files listed below

**End**
- `git add` the touched files
- `git commit -m "OPT-06A: ingest normalization, DK-ID merge, API penalty key normalization, JSON scrub"`
- No push/PR (local only, per instructions)

---

## Changes

### 1) Python CLI: `scripts/pyopt/optimize_cli.py`
**What**
- Accept `players` **or** `projectionsPath`
- Read by extension: CSV/JSON/Parquet
- Normalize headers: `lower → strip → rm '%' → spaces→'_'`
- Aliases:
  - `proj`: `proj_fp|fpts|fieldfpts|proj|projection`
  - `ownership`: `own_proj|own|ownership|ownp|own_percent`
  - `ids`: `dk_id|player_id_dk|player_id|id`
- Merge DK IDs from optional `playerIdsPath` on `(name, team)`
- Drop empty `dk_id` column before merge (prevents false “already present”)
- Scrub non-finite numbers in diagnostics before JSON (avoid `Infinity` parse errors)

**Key diffs (illustrative snippets)**

```diff
+# header normalization
+def _norm_cols(df_in: pd.DataFrame) -> pd.DataFrame:
+    df_in.columns = (df_in.columns.str.strip().str.lower()
+                     .str.replace("%","",regex=False)
+                     .str.replace(" ","_",regex=False))
+    return df_in
```

```diff
+# read projections by extension
+if projections_path:
+    p = os.path.join(_ROOT, projections_path) if not os.path.isabs(projections_path) else projections_path
+    ext = os.path.splitext(p)[1].lower()
+    if ext in (".csv",".txt"): df_raw = pd.read_csv(p)
+    elif ext in (".json",):    df_raw = pd.read_json(p, orient="records")
+    elif ext in (".parquet",".pq"): df_raw = pd.read_parquet(p)
+    else: raise ValueError(f"Unsupported projections file type: {ext}")
+    df_raw = _norm_cols(df_raw)
+    # alias picking → build normalized df: name, team, position, salary, proj_fp, own_proj?, dk_id?
```

```diff
+# drop empty dk_id so matcher runs
+if "dk_id" in df.columns and df["dk_id"].notna().sum()==0:
+    df = df.drop(columns=["dk_id"])
```

```diff
+# merge playerIdsPath (optional)
+player_ids_df = None
+if playerIdsPath:
+    _pid = read_by_ext(playerIdsPath)  # csv/json/parquet
+    _pid = _norm_cols(_pid)
+    # detect c_dkid, c_name, c_team → build slim ids df
+    # uppercase team; merge on (name, team); keep dk_id
+
+# pass through to backend
-lineups, diagnostics = optimize_with_diagnostics(df, cons, seed, site, player_ids_df=None, engine=engine)
+lineups, diagnostics = optimize_with_diagnostics(df, cons, seed, site, player_ids_df=player_ids_df, engine=engine)
```

```diff
+# scrub non-finite JSON
+def _clean_nans(obj):
+    ...
+out = _clean_nans(out)
```

---

### 2) API: `app/api/optimize/route.ts`
**What**
- Normalize ownership penalty keys to our house schema before spawning Python:
  - map `lambda` or `lambda_` → `weight_lambda`
  - default `mode` to `"by_points"`

**Snippet (inserted after** `const payload = await req.json();` **):**
```ts
// normalize ownership penalty knobs to house schema
const consIn = (payload?.constraints ?? {}) as any;
const penIn = (consIn?.ownership_penalty ?? {}) as any;
if (penIn) {
  if (penIn.weight_lambda == null) {
    if (typeof penIn.lambda_ === "number") penIn.weight_lambda = penIn.lambda_;
    else if (typeof penIn.lambda === "number") penIn.weight_lambda = penIn.lambda;
  }
  if (penIn.mode == null) penIn.mode = "by_points";
  payload.constraints = { ...consIn, ownership_penalty: penIn };
}
```

---

## Smoke tests (copy/paste)

### CLI direct (CP‑SAT, with IDs & penalty)
```bash
echo '{"site":"dk","enginePreferred":"cp_sat","constraints":{"N_lineups":5,"ownership_penalty":{"enabled":true,"mode":"by_points","weight_lambda":8}},"seed":42,"projectionsPath":"tests/fixtures/dk/2024-01-15/projections.csv","playerIdsPath":"tests/fixtures/dk/2024-01-15/player_ids.csv"}' | uv run -q python scripts/pyopt/optimize_cli.py | jq '.ok, .diagnostics.matched_players, .diagnostics.ownership_penalty.applied'
# expect: true, "116", true
```

### API (accepts legacy key `lambda`)
```bash
curl -sS -X POST http://localhost:3000/api/optimize   -H 'Content-Type: application/json'   -d '{
    "site":"dk",
    "enginePreferred":"cp_sat",
    "constraints":{"N_lineups":5,"ownership_penalty":{"enabled":true,"mode":"by_points","lambda":8}},
    "seed":42,
    "projectionsPath":"tests/fixtures/dk/2024-01-15/projections.csv",
    "playerIdsPath":"tests/fixtures/dk/2024-01-15/player_ids.csv"
  }' | jq '.ok, .diagnostics.matched_players, .diagnostics.ownership_penalty.lambda_used, .diagnostics.ownership_penalty.applied'
# expect: true, "116", 8, true
```

### JSON sanitation (no Infinity)
```bash
curl -sS -X POST http://localhost:3000/api/optimize   -H 'Content-Type: application/json'   -d '{
    "site":"dk",
    "enginePreferred":"cp_sat",
    "constraints":{"N_lineups":1},
    "seed":42,
    "projectionsPath":"tests/fixtures/dk/2024-01-15/projections.csv",
    "playerIdsPath":"tests/fixtures/dk/2024-01-15/player_ids.csv"
  }' | jq '.diagnostics.params.max_deterministic_time'
# expect: null (was Infinity)
```

---

## Acceptance

- CLI/API accept house schema & CSV headers incl. `Own%`
- DK IDs merged (match rate > 95%; fixtures show 116/116)
- Ownership penalty applied with `weight_lambda`
- API JSON parse-safe (no `Infinity`/`NaN`)

---

## Follow-ups (next PRP)

- **PRP-OPT-06B: Native TS Solver Interfaces**
  - `lib/opt/solver.ts` interface
  - `lib/opt/cpsat.ts` (Node OR-Tools) + `lib/opt/cbc.ts` fallback
  - `lib/opt/translate.ts` (schema → model)
  - Thread via `lib/opt/run.ts`, `workers/optimizer.worker.ts`, `lib/state/run-store.ts`
  - Golden tests (seeded), parity vs CLI bridge

---

## Rollback

- Revert `app/api/optimize/route.ts` and `scripts/pyopt/optimize_cli.py` to previous commit.
- All changes are additive/guarded; no schema changes to callers required.
</file>

<file path="docs/PRPs/PRP-OPT-06B.md">
# PRP-OPT-06B — Native TypeScript Solver (CP‑SAT default, CBC fallback)

**Goal**: Remove the Python bridge for production paths by implementing a native TypeScript optimizer pipeline that slots into existing UI/worker/state with no further UI changes. Keep CP‑SAT as default, CBC as fallback, preserve ownership penalty + randomness, and align with our house ingest schema.

---

## GitHub actions

**Start**
- Branch: `feature/opt-06-integrate-cpsat` (continue)
- Scope: TS-only solver modules + wiring + tests; do **not** remove Python yet

**End**
- `git add` changed files
- `git commit -m "OPT-06B: native TS solver (CP‑SAT default, CBC fallback) + wiring + tests"`
- No push/PR (local per instructions)

---

## Scope / Non‑Goals
**In**: CP‑SAT implementation, CBC fallback, schema translation, penalty/randomness parity, worker integration, tests, docs.  
**Out**: Removing Python CLI entirely (keep until OPT‑06C), advanced solver features (groups/stacking exposure caps beyond existing), slate download/ETL changes.

---

## Module layout (new/changed)

```
lib/opt/
  solver.ts              # interface + shared types (NEW)
  cpsat.ts               # CP‑SAT impl (NEW)
  cbc.ts                 # CBC impl (NEW)
  translate.ts           # house schema → model vars/constraints (NEW)
  run.ts                 # add router: ts-cpsat | ts-cbc | python (UPDATE)
workers/optimizer.worker.ts   # thread TS solver (UPDATE)
lib/state/run-store.ts        # capture engineUsed, diagnostics (UPDATE)
lib/opt/types.ts              # extend RunSummary/diagnostics if needed (UPDATE)
README.md                     # usage + env (UPDATE)
```

---

## Key design

### 1) Solver interface (thin & stable)
```ts
// lib/opt/solver.ts
export type Engine = "cp_sat" | "cbc";
export interface SolveParams {
  site: "dk" | "fd";
  seed: number;
  constraints: {
    N_lineups: number;
    unique_players?: number;
    max_salary?: number;
    min_salary?: number;
    global_team_limit?: number;
    team_limits?: Record<string, number>;
    lock_ids?: string[];
    ban_ids?: string[];
    ownership_penalty?: { enabled: boolean; mode?: "by_points"; weight_lambda?: number };
    randomness_pct?: number; // 0–100; deterministic w/ seed
  };
}
export interface PlayerIn {
  name: string; team: string; position: string; salary: number;
  proj_fp: number; own_proj?: number | null; dk_id?: string | null; player_id?: string | null;
}
export interface LineupOut {
  lineup_id: number; total_proj: number; total_salary: number;
  players: Array<{ player_id?: string; name: string; pos: string; team: string; salary: number; proj: number; dk_id?: string | null; own_proj?: number | null; }>;
}
export interface Diagnostics {
  engine: Engine; status: "OPTIMAL" | "FEASIBLE" | "INFEASIBLE" | "ERROR";
  wall_time_ms?: number; model?: Record<string, number>; params?: Record<string, unknown>;
  normalization?: { ownership?: Record<string, unknown> };
  ownership_penalty?: { enabled: boolean; lambda_used: number; applied: boolean; avg_chalk_index?: number; avg_penalty_points?: number; };
}
export interface Solver {
  name: Engine;
  solve(players: PlayerIn[], p: SolveParams): Promise<{ lineups: LineupOut[]; diagnostics: Diagnostics }>;
}
```

### 2) Translation (schema → model)
- Validate positions (DK 8-slot spec) and salary cap.
- Normalize ownership to [0,1].
- Pre-prune pool (e.g., low‑proj punts) with same heuristic we used in legacy diagnostics.
- Deterministic RNG via `seedrandom` for randomness_pct.

### 3) CP‑SAT default (Node OR‑Tools)
- Use `@google/ortools` CP‑SAT (int var per (player,slot), salary sum constraint, team caps, uniqueness).
- Objective: `sum(points) − λ * sum(own_proj)` (scaled integer, e.g., ×1000).
- Parameters: set time limits, threads, random seed.

### 4) CBC fallback
- Use a small ILP builder (e.g., `glpk.js` or CBC via a thin binding). Same constraints/objective, same scaling.

### 5) Routing & UX
- `lib/opt/run.ts` recognizes `DFS_SOLVER_MODE=ts` (default), `ts-cpsat`, `ts-cbc`, and `python` for parity testing.
- `RunSummary` shows engineUsed + key timings; no UI changes needed.

---

## Implementation plan (bite‑size steps)

1. **Interfaces** — add `lib/opt/solver.ts` & `lib/opt/types` bumps.  
2. **Translator** — `lib/opt/translate.ts` (schema checks, scaling, RNG).  
3. **CP‑SAT impl** — `lib/opt/cpsat.ts` (build model, objective, run solver, collect diag).  
4. **CBC impl** — `lib/opt/cbc.ts` (parity objective/constraints).  
5. **Router** — update `lib/opt/run.ts` to select engine; add env toggles.  
6. **Worker wiring** — `workers/optimizer.worker.ts` to call TS solver; error guard.  
7. **State/summary** — ensure diagnostics surface.  
8. **Tests** — unit (translator, constraint math), golden (seeded slates), parity vs CLI bridge.  
9. **Docs** — README: modes, env, troubleshooting.

---

## Tests (minimal but meaningful)

### Unit
- translate: salary cap respected; team caps; uniqueness; ownership normalization.
- penalty: with λ>0 and non‑flat ownership, penalty reduces objective vs λ=0.
- randomness: fixed seed → identical outcomes.

### Golden (seeded)
- Fixture `tests/fixtures/dk/2024-01-15/`: run TS CP‑SAT with λ=8 → compare total_proj deltas within tolerance vs Python CP‑SAT.

### Integration smoke
```bash
# TS CP‑SAT (default)
NEXT_PUBLIC_DFS_SOLVER_MODE=ts npm run dev
# trigger run from UI; expect Engine badge “CP‑SAT” and valid DK IDs

# Direct worker harness (if present)
node scripts/dev/run-ts-solver.mjs fixtures/dk/2024-01-15/projections.csv --playerIds tests/fixtures/dk/2024-01-15/player_ids.csv --lambda 8 --seed 42
```

---

## Acceptance
- TS CP‑SAT returns N lineups with valid DK IDs (from existing ingest path).
- Ownership penalty applied (`lambda_used > 0`, non‑zero penalty points) when inputs have non‑flat ownership.
- Randomness deterministic with seed.
- CBC fallback selectable and functional.
- UI unchanged; `RunSummary` shows engine + timings; worker path stable.
- Parity: For fixed seed, TS vs Python top lineup total within small tolerance (≤0.5 FP) on fixture slate.

---

## Notes / deps
- Add `@google/ortools` and `seedrandom`. Keep sizes small; lazy‑load solver module inside worker to avoid main bundle bloat.
- Keep Python CLI behind `DFS_SOLVER_MODE=python` for parity testing until OPT‑06C.

---

## Rollback
- `git restore` changed files in `lib/opt/*`, worker, state, README; set `DFS_SOLVER_MODE=python` to revert to bridge.

---

## Tiny code stubs (reference only; keep diffs small)
```ts
// lib/opt/run.ts (router sketch)
const MODE = process.env.NEXT_PUBLIC_DFS_SOLVER_MODE ?? process.env.DFS_SOLVER_MODE ?? "ts";
export async function runSolve(req) {
  if (MODE === "python") return callPythonApi(req);
  const engine = MODE === "ts-cbc" ? "cbc" : "cp_sat";
  const solver = engine === "cp_sat" ? await import("./cpsat") : await import("./cbc");
  return solver.solve(req.players, { site: req.site, seed: req.seed, constraints: req.constraints });
}
```
</file>

<file path="docs/PRPs/PRP-OPT-06C-update.md">
# PRP-OPT-06C (Update) — Full UX Run Controls & Wiring (wrapper-first)

**Branch**: `feature/opt-06c-ux-run`  
**Goal**: Expose **Penalty Curve** and **Drop Intensity** knobs in the UI, wire them through `run-store` → `/api/optimize` → Python wrapper, and verify via diagnostics.

---

## GitHub actions
- Start on `feature/opt-06c-ux-run`
- End: `git add -A && git commit -m "OPT-06C: expose penalty curve + drop intensity; complete UX run controls & metrics wiring"`

---

## Controls to expose (ControlsBar)
- **Number of lineups**: `N_lineups` (default 5, 1–150)
- **Ownership penalty**:
  - Toggle enable
  - **Lambda (λ)** numeric/slider (0–50, default 8)
  - **Penalty curve** select: `"linear"` → backend `"by_points"`; `"g_curve"` → backend `"g_curve"`
- **Drop intensity**: slider `0.00 … 0.50` (default `0.20`) → maps to **pruning** percentage
- **Randomness**:
  - Seed (int, default 42)
  - Sigma (σ) 0–0.25 (wire to `constraints.randomness_pct` as `σ*100`)
- **Paths**: `projectionsPath`, `playerIdsPath` (persist in `localStorage` under `dfs_paths`)

---

## IMPORTANT: Legacy naming for “Drop Intensity”
Legacy code refers to this feature as **pruning**. Expect fields like:
- `constraints.pruning.drop_pct` (input)
- Diagnostics: `diagnostics.pruning.enabled`, `original_players`, `kept_players`, `reduction_pct`, `top_pruned`

### Verify in repo (agent checklist)
Use ripgrep to confirm the legacy naming and where it’s consumed:
```bash
rg -n "prun|drop_pct|reduction_pct|kept_players|top_pruned" processes/optimizer/_legacy
```
If you see those diagnostics in prior runs, the backend is already honoring `pruning.drop_pct`.

---

## State & API payload

### `lib/state/run-store.ts` (new from 06C-revA) — extend run()
```ts
// lib/state/run-store.ts (excerpt)
async function runSolve({
  site,
  projectionsPath,
  playerIdsPath,
  nLineups,
  penaltyEnabled,
  lambdaVal,
  penaltyCurve,        // "linear" | "g_curve"
  dropIntensity,       // 0.0 - 0.5
  seed,
  sigma                // e.g., 0.07
}: RunInputs) {
  set({ loading: true });

  const ownership_penalty =
    penaltyEnabled
      ? { enabled: true,
          mode: penaltyCurve === "g_curve" ? "g_curve" : "by_points",
          weight_lambda: Number(lambdaVal) || 0 }
      : { enabled: false };

  const body = {
    site,
    enginePreferred: "cp_sat",
    constraints: {
      N_lineups: Number(nLineups) || 5,
      ownership_penalty,
      pruning: { drop_pct: Math.max(0, Math.min(0.5, Number(dropIntensity) || 0)) },
      randomness_pct: Math.round((Number(sigma) || 0) * 100),
    },
    seed: Number(seed) || 42,
    projectionsPath,
    playerIdsPath,
  };

  const res = await fetch("/api/optimize", { method: "POST", body: JSON.stringify(body) });
  const data = await res.json();

  const lineups = data.lineups ?? [];
  set({
    loading: false,
    lineups,
    summary: {
      ...data.summary,
      valid: lineups.length,
      tried: data.diagnostics?.N ?? data.summary?.tried ?? lineups.length,
      elapsedMs: data.summary?.elapsedMs
        ?? (data.diagnostics?.wall_time_sec ? Math.round(1000 * data.diagnostics.wall_time_sec) : undefined),
      bestScore: data.summary?.bestScore,
    },
    engineUsed: data.engineUsed ?? data.diagnostics?.engine,
    diagnostics: data.diagnostics,
  });

  // Toasts (pseudo hooks)
  if ((data.diagnostics?.matched_players ?? 100) < 90) toast.warn("Low DK ID match rate; check playerIdsPath");
  const ownMax =
    data.diagnostics?.normalization?.ownership?.max_after ??
    data.diagnostics?.normalization?.ownership?.own_max_after;
  if (ownership_penalty.enabled && (ownMax ?? 0) === 0) {
    toast.info("Ownerships are all 0; penalty has no effect");
  }
}
```

---

## ControlsBar wiring (sketch)
```ts
// components/ControlsBar.tsx (excerpt)
const [nLineups, setNLineups] = useState(5);
const [penaltyEnabled, setPenaltyEnabled] = useState(false);
const [lambdaVal, setLambdaVal] = useState(8);
const [penaltyCurve, setPenaltyCurve] = useState<"linear"|"g_curve">("linear");
const [dropIntensity, setDropIntensity] = useState(0.20);
const [seed, setSeed] = useState(42);
const [sigma, setSigma] = useState(0.07);
const [projectionsPath, setProjectionsPath] = useState("");
const [playerIdsPath, setPlayerIdsPath] = useState("");

useEffect(() => {
  const last = JSON.parse(localStorage.getItem("dfs_paths") ?? "{}");
  setProjectionsPath(last.projectionsPath ?? "");
  setPlayerIdsPath(last.playerIdsPath ?? "");
}, []);
useEffect(() => {
  localStorage.setItem("dfs_paths", JSON.stringify({ projectionsPath, playerIdsPath }));
}, [projectionsPath, playerIdsPath]);

const onRun = () =>
  runStore.getState().runSolve({
    site: "dk",
    projectionsPath,
    playerIdsPath,
    nLineups, penaltyEnabled, lambdaVal, penaltyCurve, dropIntensity,
    seed, sigma
  });
```

---

## RunSummary tweaks
- Valid lineups → `summary.valid`
- Candidates tried → `summary.tried`
- Best score → `summary.bestScore`
- Elapsed → `summary.elapsedMs`
- Engine → `engineUsed`
- Tag display (optional): `λ={diagnostics?.ownership_penalty?.lambda_used ?? constraints?.ownership_penalty?.weight_lambda}`, `curve={diagnostics?.ownership_penalty?.mode ?? "by_points"}`, `drop={(constraints?.pruning?.drop_pct ?? 0)*100}%`

---

## LineupsGrid (DK IDs)
```tsx
// components/LineupsGrid.tsx (excerpt)
<td title={`${p.name} (${p.pos}) — ${p.team} — $${p.salary} — own ${Math.round(100*(p.own_proj ?? 0))}%`}>
  {p.dk_id ?? "—"}
</td>
```

---

## Verification steps (agent must run)
1) **Legacy naming probe**:  
   ```bash
   rg -n "prun|drop_pct|reduction_pct|kept_players|top_pruned" processes/optimizer/_legacy
   ```
   Confirm we’re indeed using `pruning.drop_pct` and diagnostics surface reduction.

2) **API smoke** (g-curve + drop 0.20 + λ=8):  
   ```bash
   curl -sS -X POST http://localhost:3000/api/optimize      -H 'Content-Type: application/json'      -d '{
       "site":"dk",
       "enginePreferred":"cp_sat",
       "constraints":{
         "N_lineups":5,
         "ownership_penalty":{"enabled":true,"mode":"g_curve","lambda":8},
         "pruning":{"drop_pct":0.2}
       },
       "seed":42,
       "projectionsPath":"tests/fixtures/dk/2024-01-15/projections.csv",
       "playerIdsPath":"tests/fixtures/dk/2024-01-15/player_ids.csv"
     }' | jq '.ok, .diagnostics.ownership_penalty.mode, .diagnostics.pruning.enabled, .diagnostics.pruning.reduction_pct'
   # expect: true, "g_curve", true, > 0
   ```

3) **UI run**: set knobs in ControlsBar; expect Valid=5, Engine=CP-SAT, DK IDs visible; toasts when appropriate.

---

## Rollback
- Revert changes in `ControlsBar.tsx`, `RunSummary.tsx`, `LineupsGrid.tsx`, `lib/state/run-store.ts`, `lib/opt/run.ts`.
- Clear localStorage key `dfs_paths`.
</file>

<file path="docs/PRPs/PRP-OPT-06C-UX-RunSummary-UI-Polish.md">
# PRP: OPT-06C — RunSummary UX Polish, Lineup Table, & Dark Mode

## Summary
Polish the **RunSummary** page and lineup results UX. Replace the current card-only grid with a lightweight, high‑usability **Table view** (TanStack Table + shadcn/ui) while retaining the **Cards** view as a secondary option. Implement **site‑wide dark mode**. Ensure the optimizer emits and the UI displays **lineup‑level metrics** (names + IDs, dup risk, ownership/leverage aggregates, etc.). Add CSV export, sorting, column management, and Playwright coverage.

---

## GitHub actions (start of PR)
1. Create feature branch from `feature/opt-06c-ux-run`:
   - `git checkout -b feature/opt-06c-ux-run-ui-polish`
2. Open a draft PR (target: `feature/opt-06c-ux-run`), enable preview deploy.
3. Add CI job step for Playwright E2E (headless) on this PR.

---

## Scope
- **RunSummary polish** (metrics, badges, number formatting, skeletons).
- **Lineup Table view** with sorting, column visibility, pinning, search, CSV export, and optional virtualization for large runs.
- **Roster map** usage to show **player names + IDs** in each slot cell.
- **Dark mode** (site‑wide) with persistent theme toggle.
- **Optimizer data contract**: ensure all lineup‑level metrics needed by the table are emitted by backend and included in run `summary` payload.

### Out of scope
- New algorithms. (Only expose already‑computed metrics and light derivations.)
- Global navigation changes beyond theme toggle placement.

---

## Dependencies
- `@tanstack/react-table`
- `@tanstack/react-virtual` (only used if row count > ~1,500)
- `next-themes` (or equivalent) for theme persistence (matches shadcn docs)
- shadcn/ui components already in stack

---

## Design (shadcn + Tailwind)
### Layout
- Header: `Optimizer Run` + badges (Engine, λ, curve, drop%, uniques) using `Badge` + `Tooltip` + `Separator`.
- Two `Card`s for **Inputs / Outputs** and **Settings / Invalid reasons**. Consistent `dl` grids, `tabular-nums font-mono` for numbers, thousands separators, fallbacks `—`.
- **Tabs** or **ToggleGroup**: **Cards** | **Table**.
- Table resides inside a `Card` with `CardHeader` (toolbar) and `CardContent` (table).

### Table Toolbar
- Left: `Input` (search by player name/id), `DropdownMenu` (column show/hide & pinning).
- Right: `Button` (Export CSV), `Button` (Reset), small `Badge` for row count.
- Sticky header (`sticky top-0`), zebra rows, right‑aligned numeric columns.

### Player cells
- Two-line cell:
  - **Name** (truncate, tooltip full name + team/pos).
  - Small muted **(player_id)** with copy‑to‑clipboard icon button.
- If name missing, render ID prominently; tooltip: “name unavailable”.

### Dark mode
- Use shadcn recommended pattern with `next-themes` (`class` strategy).
- Global `<ThemeProvider>` in app root; theme toggle in header.
- Persist user choice; default to system. Ensure all `Card`, `Table`, `Badge`, `Tooltip` and borders read from CSS vars; avoid hardcoded colors.

---

## Data contract: lineup-level metrics
**Require optimizer to emit** the following per lineup. Add to payload `summary.lineups[]` OR `summary.results.lineups[]` (choose existing convention):

- `lineup_id`: string
- `score`: number
- `salary_used`: number
- `salary_left`: number (derived if not provided)
- **Slots**: `PG, SG, SF, PF, C, G, F, UTIL` as **player_id** strings
- `dup_risk`: number (0–1) if available
- Ownership / leverage aggregates (one or both):  
  - `own_sum` (or `own_avg`)  
  - `lev_sum` (or `lev_avg`)
- `num_uniques_in_pool`: number (vs pool baseline, if computed)
- `teams_used`: string[] or number (count); if array, UI shows count with tooltip list
- Optional: `proj_pts_sum`, `stack_flags` (e.g., “2-2”, “3-1”)
- **Roster map (separate object):** `playerMap: { [player_id: string]: { name: string; team?: string; pos?: string } }`

> UI must gracefully degrade if any field is absent; IDs always render.

---

## Deliverables (files)
- `components/metrics/RunSummary.tsx` — minor visual polish (badges wrap, number formatting, separators).
- `components/lineups/LineupTable.tsx` — TanStack headless table bound to shadcn `<Table>`.
- `components/lineups/LineupToolbar.tsx` — search, column chooser, export, reset.
- `hooks/useRosterMap.ts` — provides id→name map; accepts `summary.playerMap`; caches by slate/run.
- `lib/csv/exportLineups.ts` — exports **visible** columns with current sort/filter.
- `lib/table/columns.ts` — column defs, pinning support, `data-testid` hooks.
- `components/theme/ThemeToggle.tsx` — header control (icon button).
- App root provider for `ThemeProvider` (next-themes); small patch to layout.tsx/app.tsx.

---

## Acceptance Criteria
1. **Lineup Table view**
   - Sorting by **Score** (desc default), **Salary**, **Dup Risk**, **Uniques**.
   - Column visibility toggle & pinning; state persists per run in `localStorage`.
   - Player cells show **Name** + **(ID)**; copy‑ID button works.
   - Search filters rows by name or ID across all slots.
   - CSV export downloads current **visible** columns in current sort/filter order.
   - Sticky header; numeric columns are right‑aligned, `tabular-nums`.
   - Virtualization automatically activates when row count > 1,500 (no jank).

2. **RunSummary polish**
   - Inputs/Outputs and Settings render with consistent typography & spacing.
   - Numbers formatted: Score `x.xx`, Overlap `x.xx`, Jaccard `x.xxx`, ms with thousands separators.
   - All missing values show `—` and never break layout.

3. **Dark mode**
   - Theme toggle visible on the page; persists between visits.
   - All elements adapt to dark theme (no illegible text, borders visible).

4. **Optimizer data contract**
   - Payload includes all lineup-level metrics listed above, with `playerMap` present for the current slate/run. UI renders names where available.

5. **Playwright E2E**
   - Loads run → metrics visible, correctly formatted.
   - Table sorts by Score; user toggles Salary column off/on; pin a column; persists after reload.
   - Search for a **player_id** and **name** returns matching rows.
   - Export CSV → header order equals visible columns; row count matches filtered set.
   - Dark mode toggle flips palette; persists after reload.

6. **Performance & a11y**
   - Initial table render for 5,000 lineups < 500ms on dev M1; virtualized scrolling 60fps.
   - Axe checks pass for the page; keyboard focus visible for interactive elements.

---

## Test plan
- **Unit (Vitest):** CSV exporter, column def formatters, roster-map fallback logic.
- **Playwright:** scenarios in Acceptance Criteria §5 (headless + headed).
- **Snapshot:** dark & light themes for RunSummary cards and table header row.

---

## Implementation notes
- Keep existing **Cards** grid as a secondary tab.
- Prefer derived fields in UI if backend lacks them temporarily (e.g., compute `salary_left` client-side).
- Use `Intl.NumberFormat` for numeric formatting; avoid ad‑hoc `toFixed` where thousands separators are needed.
- Add `data-testid` across badges, metrics cells, toolbar controls.

---

## Risks / mitigations
- **Partial data:** Always show IDs; tooltips indicate missing names.  
- **Large datasets:** Turn on virtualization above threshold; avoid measuring DOM widths in loops.  
- **Theme drift:** Use CSS vars and shadcn tokens only; no hardcoded colors.

---

## GitHub actions (end of PR)
1. Rebase branch onto `feature/opt-06c-ux-run`; ensure green CI (unit + Playwright).
2. Squash & merge with message: `feat(ui): RunSummary polish, lineup table, dark mode, CSV export`.
3. Delete branch. Create follow‑up issue for any metrics still missing from optimizer payload.
</file>

<file path="docs/PRPs/PRP-OPT-06C.md">
# PRP-OPT-06C — UX Run Controls + Metrics Wiring (wrapper-first)

**Goal**  
Make the Python-bridge optimizer feel first-class in the UI. Add missing controls, wire summary/metrics correctly, and surface DK Player IDs in the lineup grid.

---

## GitHub Actions

**Start**
- Branch: `feature/opt-06-integrate-cpsat` (continue)
- Scope: UI/TS only (no solver changes)

**End**
- `git add` changed files
- `git commit -m "OPT-06C: UX run controls, metrics wiring, DK IDs in grid, path persistence"`
- No push/PR (local per instructions)

---

## Objectives / Acceptance

- [ ] Add **Number of lineups** control in `ControlsBar` (default: 5).
- [ ] Respect `ownership penalty` controls (enable, λ) and show λ in summary.
- [ ] **Valid lineups** in `RunSummary` equals `lineups.length` from payload.
- [ ] **Candidates tried** shows diagnostics `N` (if present) else `lineups.length`.
- [ ] **Engine** badge shows `engineUsed` (or diagnostics.engine).
- [ ] **Elapsed** from `summary.elapsedMs` (fallback to diagnostics.wall_time_sec * 1000).
- [ ] **DK IDs shown** in lineup grid cells (display dk_id; hover → name / pos / team / salary).
- [ ] **File path persistence**: remember `projectionsPath` & `playerIdsPath` in `localStorage`.
- [ ] **Warnings**: 
  - If `matched_players` < 90%, show toast.
  - If ownership penalty enabled but `own_proj` max == 0, show toast.
- [ ] All flows work with `NEXT_PUBLIC_DFS_SOLVER_MODE=python`.

---

## Scope / Files

```
components/
  ControlsBar.tsx          # add N lineups + ownership controls (UPDATE)
  RunSummary.tsx           # metrics mapping fixes (UPDATE)
  LineupsGrid.tsx          # show dk_id, hover details (UPDATE)

lib/opt/
  run.ts                   # ensure payload carries constraints.N_lineups (UPDATE)
  types.ts                 # confirm RunSummary shape includes engineUsed, elapsedMs (VERIFY)

lib/state/
  run-store.ts             # set() mapping from API → state (UPDATE)

app/api/optimize/route.ts  # (already normalizes lambda keys; no change expected)
```

---

## Implementation Steps

### 1) ControlsBar — add knobs
- **Number of lineups** (`N_lineups`): integer input or slider `[1…150]`, default `5`.
- **Ownership penalty**: toggle + numeric λ (0–50). Keep “mode by_points” implicit.

**Snippet (shape only; adapt to your component):**
```ts
// ControlsBar.tsx
const [nLineups, setNLineups] = useState(5);
const [penEnabled, setPenEnabled] = useState(false);
const [lambda, setLambda] = useState(8);

onRun(() => runSolve({
  // existing fields...
  constraints: {
    ...constraints,
    N_lineups: nLineups,
    ownership_penalty: penEnabled ? { enabled: true, mode: "by_points", weight_lambda: lambda } : { enabled: false },
  },
}));
```

### 2) Persist paths
Remember paths across sessions:
```ts
// ControlsBar.tsx
useEffect(() => {
  const last = JSON.parse(localStorage.getItem("dfs_paths") ?? "{}");
  if (last.projectionsPath) setProjectionsPath(last.projectionsPath);
  if (last.playerIdsPath) setPlayerIdsPath(last.playerIdsPath);
}, []);

useEffect(() => {
  localStorage.setItem("dfs_paths", JSON.stringify({ projectionsPath, playerIdsPath }));
}, [projectionsPath, playerIdsPath]);
```

### 3) run-store wiring
Derive “valid” and “tried” consistently and don’t drop lineups:
```ts
// lib/state/run-store.ts (inside success handler)
set({
  lineups: data.lineups ?? [],
  summary: {
    ...data.summary,
    valid: (data.lineups ?? []).length,
    tried: data.diagnostics?.N ?? data.summary?.tried ?? (data.lineups ?? []).length,
    elapsedMs: data.summary?.elapsedMs ?? (data.diagnostics?.wall_time_sec ? Math.round(1000 * data.diagnostics.wall_time_sec) : undefined),
  },
  engineUsed: data.engineUsed ?? data.diagnostics?.engine,
  diagnostics: data.diagnostics,
});
```

### 4) RunSummary metrics mapping
Ensure the UI reads the new state fields:
- Candidates tried → `summary.tried`
- Valid lineups → `summary.valid`
- Best score → `summary.bestScore` (already present from Python)
- Candidates (cap) → if you display a “cap”, pull it from a **UI max candidates** setting, not from diagnostics.

### 5) Grid shows DK IDs
- In lineup cell renderer, include `player.dk_id`. 
- Tooltip shows `name (pos) — team — salary — own_proj%`.
- If `dk_id` is missing, show `—` but don’t crash.

**Sketch:**
```tsx
// LineupsGrid.tsx
<td title={`${p.name} (${p.pos}) — ${p.team} — $${p.salary} — own ${(p.own_proj ?? 0)*100}%`}>
  {p.dk_id ?? "—"}
</td>
```

### 6) Toast warnings
```ts
// After setting state post-run
if ((data.diagnostics?.matched_players ?? 100) < 90) toast.warn("Low DK ID match rate; check playerIdsPath");
const ownMax = data.diagnostics?.normalization?.ownership?.own_max_after ?? 0;
if (data.constraints?.ownership_penalty?.enabled && ownMax === 0) toast.info("Ownerships are all 0; penalty has no effect");
```

---

## QA / Smoke Tests

**From UI**
1. Set `N_lineups=5`, λ=8 enabled, pick both paths, Run.
2. Expect:
   - Valid lineups = 5
   - Engine: CP-SAT
   - Best score ≈ 271.4 on fixture
   - DK IDs visible in grid
   - Elapsed < 5s (local)
3. Toggle penalty off; expect same top score as pure points.

**From API (sanity)**
```bash
curl -sS -X POST http://localhost:3000/api/optimize   -H 'Content-Type: application/json'   -d '{
    "site":"dk",
    "enginePreferred":"cp_sat",
    "constraints":{"N_lineups":5,"ownership_penalty":{"enabled":true,"mode":"by_points","lambda":8}},
    "seed":42,
    "projectionsPath":"tests/fixtures/dk/2024-01-15/projections.csv",
    "playerIdsPath":"tests/fixtures/dk/2024-01-15/player_ids.csv"
  }' | jq '.ok, (.lineups|length), .diagnostics.matched_players, .diagnostics.ownership_penalty.applied'
# expect: true, 5, "116", true
```

---

## Risks / Notes
- Don’t mislabel “Candidates 20000”: that was a UI cap; prefer diagnostics `N` for “tried”.
- Guard null diagnostics in UI (use defaults).
- Keep wrapper as the default: `.env.local` with `NEXT_PUBLIC_DFS_SOLVER_MODE=python`.

---

## Rollback
Revert changes in:
- `components/ControlsBar.tsx`, `components/RunSummary.tsx`, `components/LineupsGrid.tsx`
- `lib/state/run-store.ts`, `lib/opt/run.ts`
- Remove localStorage key `dfs_paths`
</file>

<file path="docs/PRPs/PRP-PIPE-00-Pipeline-Overview-20250909-003232.md">
# PRP-PIPE-00 — NBA-DFS Pipeline Overview (Injection Model)

**Owner:** Cloud Agent  
**Repo:** `nba-dfs` (monorepo)  
**Branches created by tasks below:** per-PRP

---

## Goal
Codify the revised pipeline: **Field Sampler builds a realistic field**, then **we inject our Variant Catalog** (our entries) for simulation/analysis. This keeps the field representative of public play instead of mirroring our own variants.

## High-Level Flow
1) **Data Intake** → normalized `projections.csv`, `player_ids.csv`, `slate.csv`, `contest_config.json`  
2) **Variant Builder (VB)** → produces `variant_catalog.jsonl|parquet` (our candidate entries)  
3) **Field Sampler (FS)** → generates **base field** using projections/ownership rules (**not** seeded by VB)  
4) **Injection Step** → merge our `variant_catalog` into the base field with provenance  
5) **GPP Simulator** → consumes merged field + contest structure → metrics/report
6) **Dash + Artifacts** → grids, exposures, ROI, dupes, leverage

## Core Invariants
- **Single validator source** used by VB, FS, Simulator IO checks.  
- **DK IDs** persist; no remap within a slate.  
- Artifacts carry `run_id`, `created_at`, `site`, `slate_id`, `source_branch`, `ruleset_version`.

## PRPs in this chain
- `PRP-FS-01` — Field Sampler (Injection Model, top-level spec)  
- `PRP-FS-02` — Validators + Core Sampler Engine  
- `PRP-FS-03` — CLI Wrapper (stopgap; optional)  
- `PRP-VB-01` — Variant Builder contract (minimal; to align with FS & sim)

## GitHub Actions (per PRP)
**Start:** create feature branch, commit PRP, push, open Draft PR  
**End:** CI green; audit updated (0 criticals); rebase main; squash-merge; tag
</file>

<file path="docs/PRPs/PRP-RUNS-02-Run-Registry.md">
# PRP-RUN-01 — Unified Run Registry / SSOT

**Owner:** Agent  
**Repo:** `nba-dfs`  
**Status:** Proposed  
**Depends on:** Schema pack, validator, processes (opt, VB, FS, sim)

---

## 1) Summary
Implement a consistent run registry system to serve as the single source of truth (SSOT) for all process runs. This ensures reproducibility, easy loading of past runs, and standardized artifact storage.

---

## 2) Goals / Non-Goals
### Goals
- Standardized directory structure under `runs/<slate>/<stage>/<run_id>/`
- Mandatory artifacts: `run_meta.json`, `inputs_hash.json`, `validation_metrics.json`, stage outputs (parquet/CSV)
- Helpers to load and query runs (`lib/run_registry.py`)
- Support replay (rerun with same inputs), tagging, and filtering
- Parquet-backed data layer for efficient reload
- CI checks to enforce artifact creation

### Non-Goals
- Database migrations (file-based only for now)
- UI wiring (to be handled in PRP-UI-01)

---

## 3) Deliverables
- `lib/run_registry.py` (helpers for save/load/query)
- Schema updates for run_meta
- Docs: `docs/runs/README.md` (structure, usage)
- Tests: `tests/test_run_registry.py`

---

## 4) Directory Layout
```
runs/
  2025-01-15-slate123/
    optimizer/2025-01-15T1200Z/
      run_meta.json
      inputs_hash.json
      validation_metrics.json
      outputs.parquet
    variant_builder/...
    field_sampler/...
    simulator/...
```

---

## 5) Acceptance Criteria
- Every stage writes artifacts in correct structure
- Run registry can load/replay any past run
- Validation metrics and inputs hash always present
- Single source of truth maintained
</file>

<file path="docs/PRPs/PRP-UX-SHELL-01.md">
# PRP-UX-SHELL-01 — UI Shell Scaffold (Next + Tailwind + shadcn/ui)

**Owner:** Agent  
**Repo:** `nba-dfs` (Next.js app)  
**Scope:** Implement the initial *UX shell* matching the Figma wireframes (Drawer Closed / Drawer Open), using **shadcn/ui** for core layout. No business logic.

---

## Why / Objective
Create a clean, navigable UI skeleton so we can iterate on the pipeline flow (Optimizer → Variants → Field → Simulator) without blocking on data plumbing. Upload dropzone is always visible; metrics drawer toggles on the right.

---

## Inputs
- **Figma wireframes:** two frames (Drawer Closed / Drawer Open). If MCP is unavailable, use spec below.
- **Layout spec (fallback if Figma MCP isn’t used):**
  - Frame: 1440×900 baseline.
  - Top bars: 40px **Live Status** (placeholder), 60px **Tabs** (Optimizer | Variants | Field | Simulator).
  - **Upload dropzone**: 350×40 card at **top-left** of main panel.
  - **Main panel**: large lineup/results grid placeholder occupying remaining space.
  - **Controls bar** (bottom): 80–100px tall.
  - **Metrics drawer** (right): start with **450px** width (test 280px later).

---

## Constraints & Guardrails
- **Do not** wire real data; **stubs only** (placeholders/text).
- Keep styling **Tailwind + shadcn tokens**.
- **Accessibility:** keyboard focusable tabs, drawer, and buttons.
- **Allowed paths only:** `./app`, `./components`, `./lib`, `./styles`.

---

## Components to Use
- **shadcn/ui:** Tabs, Separator, Card, Button, Input, ScrollArea, Sheet.
- **Optional polish later:** Aceternity effects behind a wrapper.

---

## Deliverables
- **Layout only** (no data): functional tabs; right drawer opens/closes; upload card visible across tabs.
- Pages/components created:
  - `app/layout.tsx` (global shell)  
  - `app/page.tsx` (redirect to Optimizer)  
  - `app/(studio)/{optimizer,variants,field,simulator}/page.tsx`  
  - `components/ui/{TopStatusBar,TopTabs,UploadDropzone,LineupGridPlaceholder,ControlsBar,MetricsDrawer,PageContainer}.tsx`
- Minimal styles: `styles/globals.css` (Tailwind layers + shadcn vars)
- Tokens/helpers: `lib/ui/{constants,layout}.ts`

---

## Acceptance Criteria
1. **Tabs** switch between four pages (Optimizer default).  
2. **Upload dropzone** visible on all tabs and anchored top-left (350×40).  
3. **Main panel** shows a large placeholder grid area.  
4. **Controls bar** anchored bottom and visible on all tabs.  
5. **Metrics drawer** toggles from right, **450px** width.  
6. No console errors; keyboard navigation works.

---

## GitHub Actions (beginning → end)

**Start:** `git checkout -b feature/ui-shell-prp-01`  
**During:** commits per step.  
**End:** open PR, squash-merge, tag `v0.10.0`.
</file>

<file path="docs/PRPs/PRP-UX-STATES-02.md">
# PRP-UX-STATES-02 — Core UI States & Accessibility (pre‑polish)

**Owner:** Agent  
**Repo:** `nba-dfs` (Next.js + Tailwind + shadcn/ui)  
**Scope:** Implement **functional states** (empty / drag-over / loading / success / error) and **accessibility** (keyboard, roles, focus, reduced motion) across the shell. No business logic or API calls — purely front-end behavior with placeholders or mock timers.

---

## Functional States

### Upload Dropzone
- Idle / drag-over / loading / success / error
- CSV extension guard
- Keyboardable: Enter/Space open, Esc cancel
- `aria-live="polite"`, `aria-busy` during loading
- Toasts via **sonner**; mount `<Toaster />` in `app/layout.tsx`

### Lineup Grid Placeholder
- Empty / Loading (skeleton rows) / Loaded
- Local toggle for QA (dev-only in ControlsBar)
- ARIA: `role="grid"`, row/col counts

### Metrics Drawer
- Skeleton-on-open then “No metrics yet”
- Trigger: `aria-expanded` + `aria-controls="metrics-panel"`
- Focus to heading on open; Esc closes

---

## A11y & Reduced Motion
- Add **Skip to main content** link as first focusable element; target `<main id="content">`.
- Honor `prefers-reduced-motion`: tame skeleton/transition.
- Ensure visible focus rings for tabs and controls.

---

## Deliverables
- `components/ui/{UploadDropzone,LineupGridPlaceholder,MetricsDrawer,ControlsBar,skeleton,sonner}.tsx`
- `app/layout.tsx` (skip link + Toaster)
- `styles/globals.css` (skip link utilities + reduced-motion rules)
- `lib/ui/{constants,a11y}.ts`

---

## Acceptance Criteria
- Upload shows drag-over/loading/success/error; keyboard + toasts.
- Grid toggles Empty→Loading→Loaded (dev-only controls).
- Drawer opens with skeleton then empty message; a11y attributes OK.
- Skip link works; reduced motion honored.  
- No runtime errors; no network calls.

**Start:** `git checkout -b feature/ux-states-a11y-02` → PR → tag `v0.11.0`.
</file>

<file path="docs/PRPs/PRP-VAL-01-Shared-Validator.md">
# PRP-VAL-01 — Shared DK Lineup Validator (SSOT) + Refactor

**Owner:** Agent  
**Repo:** `nba-dfs`  
**Status:** Proposed  
**Depends on:** Pipeline schema pack (SSOT), existing optimizer/variant builder/field sampler modules

---

## 1) Summary
Create a single-source **validators/lineup_rules.py** that encodes *all* DraftKings lineup validity rules and is imported by **optimizer**, **variant builder**, **field sampler**, and **sim I/O**. Replace scattered validations with this module, add tests, and wire the validator into run artifacts. This eliminates drift and ensures identical contracts across the pipeline.

**Why now:** Repomix audit shows the validator is missing and logic is duplicated across modules, causing rule drift and fragile integration.

---

## 2) Goals / Non-Goals
### Goals
- Implement canonical validator module with pure, typed functions (no I/O).
- Centralize rules: **roster size, slot eligibility, salary cap, team limit, no duplicates, active/injury filters**, and structured error reasons.
- Provide **pydantic** validator schema for results (errors, enumerated codes).
- Refactor **optimizer / variant_builder / field_sampler** to import and use this module exclusively.
- Add tests (unit + integration fixtures) and ensure metrics surface invalid counts by reason.
- Artifact alignment: write `validation_metrics.json` per stage into `runs/<stage>/<run_id>/artifacts/`.

### Non-Goals
- No new sampling algorithms (that’s a separate PRP).
- No UI work (dashboard wiring is a later PRP).

---

## 3) Scope & Deliverables
### Deliverables (code & docs)
- `validators/lineup_rules.py` — core rules, typed.
- `validators/types.py` — enums & dataclasses/pydantic models (e.g., `InvalidReason`).
- `validators/__init__.py`
- Refactors:
  - `processes/optimizer/...` → use shared validator
  - `processes/variant_builder.py` → use shared validator
  - `processes/field_sampler/*` (legacy adapter) → use shared validator on emit
- Tests:
  - `tests/validators/test_lineup_rules.py` (unit)
  - Touchpoints in existing tests to assert shared validator usage
- Docs:
  - `docs/validators/README.md` — rule table, examples, change protocol

### Out of scope
- Field Sampler engine build-out, ownership bias, etc.
- UI polish and run registry UX.

---

## 4) Contracts (Authoritative Rules)
- **Site:** DK (only)
- **Roster:** 8 slots: PG, SG, SF, PF, C, G, F, UTIL
- **Eligibility:** player’s positions must cover assigned slot (multi-pos allowed)
- **Salary Cap:** sum(salary) ≤ 50,000 (configurable via `Rules`)
- **Team Limit:** ≤ 4 players per NBA team (configurable)
- **No Duplicates:** all player IDs unique within a lineup
- **Active Filter:** `is_active == True` and `inj_status ∉ {"OUT","Ineligible"}` if present
- **IDs:** `dk_player_id` is the primary key and must persist end-to-end

**Result model (pydantic):**
```python
class ValidationResult(BaseModel):
    valid: bool
    reasons: list[InvalidReason] = []
    slots: list[str]  # resolved slot map for the lineup
    salary_total: int | None
    teams: dict[str, int] | None
```

**Error reasons (enum, non-exhaustive):**
- `ROSTER_SIZE_MISMATCH`
- `SLOT_ELIGIBILITY_FAIL`
- `SALARY_CAP_EXCEEDED`
- `TEAM_LIMIT_EXCEEDED`
- `DUPLICATE_PLAYER`
- `MISSING_PLAYER`
- `INACTIVE_PLAYER`
- `INJURY_STATUS_BLOCKED`

---

## 5) Public API (module surface)
```python
# validators/lineup_rules.py
from .types import Rules, InvalidReason, ValidationResult

def validate_lineup(
    dk_player_ids: list[str],
    player_pool: dict[str, dict],  # keyed by dk_player_id -> {salary:int, positions:list[str], team:str, is_active:bool?, inj_status:str?}
    rules: Rules,
) -> ValidationResult: ...
```

- **Pure** function: deterministic, no disk/network I/O.
- `Rules` carries roster template, salary cap, team limit, and toggles for active/injury checks.

---

## 6) Refactor Plan
1. **Introduce module** under `validators/` with types, enums, and core logic.
2. **Wire optimizer**: replace local checks with `validate_lineup(...)`; store `validation_metrics.json` (counts by reason).
3. **Wire variant builder**: use shared validator post-generation; drop local `_validate_lineup`.
4. **Wire field sampler (legacy adapter)**: call validator before writing entrants; attach `valid` and drop invalids (metrics recorded).
5. **Schema touch**: ensure any artifacts (lineups/fields) include `valid=True` and optional `invalid_reason` if kept for debugging.
6. **Docs**: rule table + examples; update AGENTS.md pointers to SSOT.

---

## 7) Tests
- **Unit**: hand-crafted lineups to hit each error reason.
- **Property-based (optional)**: slots/teams/salary boundaries.
- **Integration**: mini-slate fixtures through optimizer → VB → sampler; assert identical validator behavior.
- **Gates** (uv):
  - `uv run ruff validators tests/validators`
  - `uv run black --check validators tests/validators`
  - `uv run mypy validators`
  - `uv run pytest tests/validators -q`

---

## 8) Acceptance Criteria
- Single module `validators/lineup_rules.py` exists and exports `validate_lineup` + `Rules`.
- Optimizer, Variant Builder, and Field Sampler **import** and use it (no duplicate rule code left).
- All new tests pass; existing suites unchanged or updated accordingly.
- Each stage writes `validation_metrics.json` with counts by reason.
- DK IDs are preserved in all touched artifacts.
- No new heavy deps; Pydantic remains for models only.

---

## 9) Git & CI Actions
**Start:**
- `git switch -c feat/validators-ssot-01`

**During:**
- Small commits: `feat(validators): add rules & enums`, `refactor(opt): use shared validate_lineup`, etc.
- Keep CI green: ruff/black/mypy/pytest via `uv run`.

**End:**
- `git fetch origin && git rebase origin/main`
- `git push -u origin HEAD`
- Open PR to `main` with before/after rule matrix and metrics screenshots.
- Squash-merge; delete branch.

---

## 10) Rollback Plan
- Revert PR; restore previous validator stubs in modules (kept as orphaned commits).
- Since this is additive and behind clear imports, rollback is low-risk.

---

## 11) Risks / Mitigations
- **Hidden drift** in legacy code paths → **Mitigation:** search & CI checks to block local validators.
- **Fixture churn** in tests → Update fixtures once; document examples in `docs/validators`.

---

## 12) Open Questions
- Should inactive/injury checks be **hard fail** or **configurable** per stage?
- Expose per-slot eligibility overrides (rare edge cases)?
- Emit first-failure only vs. collect-all reasons (current plan: collect-all).
</file>

<file path="docs/PRPs/PRP-VB-01-v2-Variant-Builder-Contract-20250909-003735.md">
# PRP-VB-01 (v2) — Variant Builder Contract (Aligned with Optimizer + Injection Model)

“This PRP supersedes PRP-VB-01 (v1). The v1 document should be removed to avoid conflicts.”

**Owner:** Cloud Agent  
**Repo:** `nba-dfs`  
**Status:** Supersedes VB-01 (v1); explicitly depends on Optimizer outputs.

---

## Inputs
- `optimizer_run.jsonl` (authoritative): produced by OPTO; each record contains a **validated** lineup by `player_id`, salary, and diagnostics/objective metadata.
- Optional: canonical pool from `projections.csv` + `slate.csv` (for replacements/perturbations).

## Output (for injection)
- `variant_catalog.(jsonl|parquet)` — **our entries**. Each row:
  - `lineup: [player_id...]`, `salary_total`, `teams`, `valid=True`, `tags` (e.g., leverage, stacks, exposure class)
  - Provenance: `run_id`, `created_at`, `site`, `slate_id`, `source_branch`

## Validator
- VB must import **`validators/lineup_rules.py`** (single source of truth).
- All produced lineups pass the same validator FS uses; no ID remaps.

## Interaction with FS (Injection)
- FS builds `field_base.jsonl` **independently**.
- Injection merges `variant_catalog` with tags: `source="injected"`, `origin="variant_catalog"`, `owner="us"`.
- FS re-validates merged entries using the same validator.

## Acceptance
- Round-trip validation passes on mini-slate fixture.
- VB respects OPTO’s contracts; `optimizer_run.jsonl` → `variant_catalog` without rule drift.
- FS injection succeeds without mutation; metadata preserved.
</file>

<file path="docs/runs/README.md">
# Run Registry

Run outputs are persisted under the `runs/` directory using the structure:

```
runs/<SLATE_KEY>/<module>/<RUN_ID>/
  run_meta.json
  inputs_hash.json      # optional
  validation_metrics.json  # optional
  artifacts/
```

`run_meta.json` stores core metadata such as the module name, slate key, run id and
creation timestamp. Optional `inputs_hash.json` and `validation_metrics.json`
capture hashes of input files and validation statistics respectively.

Helpers in `src/runs/api.py` provide functions to save runs, list available runs
and prune old entries.
</file>

<file path="docs/FS-04-Field-Sampler-Duplication-Report.md">
# FS-04 Field Sampler Duplication Report

**Date:** 2025-09-??
**Author:** Agent

---

## 1. Inventory of sampler files

| Path | Description | Key imports |
|---|---|---|
| `field_sampler/engine.py` | Standalone sampler engine with position, salary and team constraints | `pandas`, `validators.lineup_rules` |
| `processes/field_sampler/injection_model.py` | Pipeline-specific sampler that shuffles players and supports variant injection | `pandas`, `validators.lineup_rules`, `random` |
| `processes/field_sampler/_legacy/field_sampler.py` | Legacy sampler with extensive config and weight logic | `yaml`, `numpy`, `paths` |
| `processes/field_sampler/adapter.py` | Headless adapter that dynamically loads a sampler implementation | `os`, `pipeline.io.*` |
| `tests/fixtures/stub_field_sampler.py` | Minimal stub implementation used in adapter tests | — |

## 2. Differences between implementations

- **`field_sampler/engine.py`** implements modular components (`PositionAllocator`, `SalaryManager`, `TeamLimiter`, `RejectionSampler`) and writes JSONL + metrics outputs【F:field_sampler/engine.py†L21-L91】【F:field_sampler/engine.py†L94-L169】
- **`processes/field_sampler/injection_model.py`** builds lineups by shuffling players, then optionally injects variants before emitting artifacts【F:processes/field_sampler/injection_model.py†L27-L99】
- **`processes/field_sampler/_legacy/field_sampler.py`** contains older bucket/weight infrastructure and YAML-driven configuration, diverging significantly from newer engines【F:processes/field_sampler/_legacy/field_sampler.py†L1-L66】

## 3. Usage across modules and tests

| Consumer | Engine used |
|---|---|
| `tests/test_field_sampler_engine.py` | imports `SamplerEngine` from `field_sampler.engine`【F:tests/test_field_sampler_engine.py†L1-L8】 |
| `tools/sample_field.py` | CLI utility calling `run_sampler` from `field_sampler.engine`【F:tools/sample_field.py†L1-L40】 |
| `tests/test_field_sampler_injection.py` | exercises `build_field` in `processes.field_sampler.injection_model`【F:tests/test_field_sampler_injection.py†L7-L35】 |
| `tests/test_field_adapter_smoke.py` and related adapter tests | patch `_load_sampler` in `processes.field_sampler.adapter` to stub implementations【F:tests/test_field_adapter_smoke.py†L1-L26】 |

## 4. Pipeline impact

`processes/field_sampler/adapter.py` does not ship with a default sampler; it requires `FIELD_SAMPLER_IMPL` to point at a runtime implementation and otherwise raises an error【F:processes/field_sampler/adapter.py†L54-L72】. The adapter therefore acts as a dispatcher, and whichever engine is injected (often the stub or injection model) becomes the source feeding downstream artifacts. The standalone `field_sampler/engine.py` is currently not wired into this adapter, leading to split implementations.

## 5. Recommendation and migration plan

**Single Source of Truth (SSOT):** promote `field_sampler/engine.py` as the canonical engine.

**Migration steps:**
1. Update `processes/field_sampler/adapter.py` to load `field_sampler.engine.run_sampler` by default, keeping env override for future experimentation.
2. Deprecate `processes/field_sampler/injection_model.py` and `_legacy/field_sampler.py` after integrating any missing features (e.g. variant injection) into the core engine.
3. Consolidate tests to target the unified engine via the adapter, removing stubs where possible.
4. Document the canonical API and delete redundant implementations once downstream modules verify compatibility.

---
</file>

<file path="docs/Optimizer_page_audit.md">
⏺ NBA-DFS Optimizer Page UX Audit Report

  Executive Summary

  After conducting a comprehensive end-to-end UX audit of the optimizer
  page using Playwright, I've identified several critical issues that
  significantly impact the professional appearance and usability of the
  interface. While the core functionality works correctly, the UI suffers
  from inconsistent design patterns, poor visual hierarchy, and multiple
  technical issues that create a suboptimal user experience.

  Critical Issues Found

  1. Technical Errors

  - Table View Console Errors: Multiple repeated errors for missing
  'own_sum' column causing 20+ console errors when switching to table view
  - Missing Loading States: No visual feedback when the "Run" button is
  clicked - users don't know if the optimizer is processing
  - Dev Toggle Buttons: Development state toggles ("Empty", "Loading",
  "Loaded") are visible in production, creating confusion

  2. Visual Design & Layout Problems

  Layout Issues

  - Poor Space Utilization: Excessive whitespace and cramped control panel
   create unbalanced layout
  - Inconsistent Spacing: Irregular gaps between form controls and
  sections
  - No Visual Hierarchy: All elements appear with similar visual weight,
  making it hard to identify primary actions

  Typography & Readability

  - Generic Headings: "Controls / Knobs" sounds unprofessional
  - Inconsistent Label Formatting: Mix of plain text and parenthetical
  hints creates visual noise
  - Poor Information Architecture: Related controls aren't visually
  grouped

  Component Styling

  - Basic Form Controls: Standard HTML inputs lack modern styling and
  visual appeal
  - Inconsistent Button Styles: Mix of button treatments without clear
  hierarchy
  - Table Presentation: Dense, hard-to-scan table layout with poor visual
  separation

  3. UX Pain Points

  Workflow Issues

  - File Upload UX: Drag & drop area remains visible after files are
  uploaded, causing confusion about state
  - No Progress Indication: Users can't tell when optimization is running
  or completed
  - Unclear Action Results: No clear indication of what changed after
  running optimizer

  Usability Problems

  - Cognitive Load: Too many controls visible simultaneously without
  prioritization
  - No Contextual Help: Advanced parameters like "Sigma" and "Drop
  intensity" lack explanations
  - Tab Navigation: Cards vs Table views don't provide clear value
  differentiation

  Recommended Improvements with shadcn/ui Components

  Phase 1: Critical Fixes (High Priority)

  1. Replace Form Controls
    - Use input and label components for consistent styling
    - Implement slider for numerical ranges (Sigma, Drop intensity)
    - Add tooltip components for parameter explanations
    - Use badge for status indicators
  2. Enhance Table View
    - Replace with shadcn table component for better typography and
  spacing
    - Add dropdown-menu for column controls
    - Implement proper loading states with spinner
  3. Improve Button Hierarchy
    - Primary "Run" button with prominent styling
    - Secondary "Reset" button with muted appearance
    - Remove development toggle buttons from production

  Phase 2: Layout & Visual Improvements (Medium Priority)

  4. Redesign Control Panel
    - Group related controls using visual containers
    - Use accordion or collapsible for advanced settings
    - Implement tabs for different parameter categories
  5. Add Loading & Feedback States
    - Loading spinner during optimization
    - Success/error notifications using toast system
    - Progress indicators for long-running operations
  6. Enhance Data Visualization
    - Use animated-tooltip for lineup card interactions
    - Implement motion-highlight for result emphasis
    - Add gradient-text for score highlighting

  Phase 3: Advanced UX Enhancements (Lower Priority)

  7. Professional Polish
    - Replace "Controls / Knobs" with "Optimizer Settings"
    - Add contextual help with popover components
    - Implement keyboard shortcuts with kbd indicators
  8. Data Export Improvements
    - Enhanced CSV export with format options
    - Copy-to-clipboard functionality improvements
    - Bulk actions for lineup management

  Implementation Priority

  Immediate (This Sprint)

  - Fix console errors in table view
  - Add loading states for Run button
  - Remove dev toggle buttons
  - Replace basic form controls with shadcn components

  Short Term (Next Sprint)

  - Redesign control panel layout
  - Implement proper visual hierarchy
  - Add tooltips for technical parameters
  - Enhance table presentation

  Medium Term (Following Sprint)

  - Add advanced data visualization
  - Implement comprehensive help system
  - Polish animations and micro-interactions

  Expected Impact

  Implementing these improvements will:
  - Eliminate Technical Debt: Resolve console errors and development
  artifacts
  - Improve User Confidence: Clear feedback and professional appearance
  - Reduce Learning Curve: Contextual help and better information
  architecture
  - Enhance Productivity: Better data presentation and workflow
  optimization

  Conclusion

  The optimizer functionality is solid, but the interface significantly
  undermines user confidence with technical errors, poor visual design,
  and confusing UX patterns. Implementing the recommended shadcn/ui
  components and following the phased approach will transform this into a
  professional, user-friendly tool that matches the quality of the
  underlying optimization engine.
</file>

<file path="docs/README.md">
# Documentation Directory

This directory contains design documentation, specifications, and project requirements for the NBA-DFS pipeline system.

## Overview

- **Purpose**: Comprehensive project documentation and specifications
- **Audience**: Developers, architects, and stakeholders
- **Format**: Markdown with diagrams and examples
- **Maintenance**: Updated alongside feature development

## Directory Structure

```
docs/
├── PRPs/              # Phased Requirement Plans
├── legacy/            # Historical documentation
└── README.md          # This file
```

## Documentation Types

### PRPs (Phased Requirement Plans)
- **PRP-RUNS-01**: Run management and retention system
- **Future PRPs**: Additional feature specifications

### Legacy Documentation
- Historical design documents
- Migration guides
- Deprecated feature documentation

## Contributing

When adding new features:
1. Create PRP document for non-trivial changes (>30 LOC)
2. Update relevant existing documentation
3. Follow markdown formatting conventions
4. Include diagrams where helpful
</file>

<file path="e2e/dark-mode.spec.ts">
import { test, expect } from '@playwright/test';

test.describe('Dark Mode Features', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/optimizer');
  });

  test('should toggle dark mode and persist preference', async ({ page }) => {
    // Find the theme toggle button
    const themeToggle = page.getByTestId('theme-toggle');
    await expect(themeToggle).toBeVisible();

    // Get initial theme state
    const initialHtml = page.locator('html');
    const initialClass = await initialHtml.getAttribute('class');
    
    // Click theme toggle to open dropdown
    await themeToggle.click();
    
    // Select dark mode
    const darkModeOption = page.getByTestId('theme-dark');
    await expect(darkModeOption).toBeVisible();
    await darkModeOption.click();
    
    // Verify dark mode is applied
    await expect(initialHtml).toHaveClass(/dark/);
    
    // Check that dark mode styles are applied to various elements
    const body = page.locator('body');
    const computedBg = await body.evaluate((el) => 
      getComputedStyle(el).getPropertyValue('background-color')
    );
    
    // Dark mode should have a dark background (not white/light)
    expect(computedBg).not.toBe('rgb(255, 255, 255)');
    
    // Switch to light mode
    await themeToggle.click();
    const lightModeOption = page.getByTestId('theme-light');
    await lightModeOption.click();
    
    // Verify light mode is applied
    await expect(initialHtml).not.toHaveClass(/dark/);
    
    // Test system mode
    await themeToggle.click();
    const systemModeOption = page.getByTestId('theme-system');
    await systemModeOption.click();
    
    // System mode should be selected (specific behavior depends on system settings)
    await expect(themeToggle).toBeVisible();
  });

  test('should persist theme preference across page reloads', async ({ page }) => {
    const themeToggle = page.getByTestId('theme-toggle');
    const html = page.locator('html');
    
    // Set to dark mode
    await themeToggle.click();
    await page.getByTestId('theme-dark').click();
    await expect(html).toHaveClass(/dark/);
    
    // Reload the page
    await page.reload();
    
    // Verify dark mode is still applied
    await expect(html).toHaveClass(/dark/);
    
    // Switch to light mode
    await themeToggle.click();
    await page.getByTestId('theme-light').click();
    await expect(html).not.toHaveClass(/dark/);
    
    // Reload again
    await page.reload();
    
    // Verify light mode persisted
    await expect(html).not.toHaveClass(/dark/);
  });

  test('should apply dark mode styles to all UI components', async ({ page }) => {
    const themeToggle = page.getByTestId('theme-toggle');
    
    // Switch to dark mode
    await themeToggle.click();
    await page.getByTestId('theme-dark').click();
    
    // Check various components have proper dark mode styles
    const html = page.locator('html');
    await expect(html).toHaveClass(/dark/);
    
    // Check cards adapt to dark theme
    const runSummary = page.getByTestId('run-summary');
    if (await runSummary.isVisible()) {
      // Cards should have dark styling
      const cards = runSummary.locator('.border');
      const cardCount = await cards.count();
      
      for (let i = 0; i < cardCount; i++) {
        const card = cards.nth(i);
        // Check that borders are visible in dark mode (not fully transparent)
        const borderColor = await card.evaluate((el) => 
          getComputedStyle(el).getPropertyValue('border-color')
        );
        // Should not be completely transparent
        expect(borderColor).not.toBe('rgba(0, 0, 0, 0)');
      }
    }
    
    // Check table in dark mode
    await page.getByTestId('table-tab').click();
    
    const tableCard = page.getByTestId('lineup-table-card');
    if (await tableCard.isVisible()) {
      // Table should be readable in dark mode
      const table = tableCard.locator('table');
      if (await table.isVisible()) {
        const backgroundColor = await table.evaluate((el) => 
          getComputedStyle(el).getPropertyValue('background-color')
        );
        // Should have some background color, not transparent
        expect(backgroundColor).not.toBe('rgba(0, 0, 0, 0)');
        expect(backgroundColor).not.toBe('transparent');
      }
    }
  });

  test('should have accessible theme toggle with keyboard navigation', async ({ page }) => {
    const themeToggle = page.getByTestId('theme-toggle');
    
    // Focus the theme toggle with keyboard
    await themeToggle.focus();
    await expect(themeToggle).toBeFocused();
    
    // Should be able to activate with Enter or Space
    await page.keyboard.press('Enter');
    
    // Dropdown should open
    await expect(page.getByTestId('theme-light')).toBeVisible();
    
    // Should be able to navigate with arrow keys and select with Enter
    await page.keyboard.press('ArrowDown');
    await page.keyboard.press('Enter');
    
    // Dropdown should close after selection
    await expect(page.getByTestId('theme-light')).not.toBeVisible();
  });

  test('should show correct theme toggle icon states', async ({ page }) => {
    const themeToggle = page.getByTestId('theme-toggle');
    
    // In light mode, should show sun icon prominently
    await themeToggle.click();
    await page.getByTestId('theme-light').click();
    
    // Check that sun icon is visible (moon should be hidden)
    const sunIcon = themeToggle.locator('svg').first();
    await expect(sunIcon).toBeVisible();
    
    // Switch to dark mode
    await themeToggle.click();
    await page.getByTestId('theme-dark').click();
    
    // In dark mode, moon icon should be more prominent
    // (This depends on the CSS transitions and may need adjustment)
    await expect(themeToggle).toBeVisible();
  });

  test('should work correctly with system theme preference', async ({ page }) => {
    const themeToggle = page.getByTestId('theme-toggle');
    
    // Select system theme
    await themeToggle.click();
    await page.getByTestId('theme-system').click();
    
    // Should respect system preference
    // Note: Actual behavior depends on the system's current theme setting
    const html = page.locator('html');
    
    // Just verify that system mode can be selected without errors
    await expect(themeToggle).toBeVisible();
    
    // The html class should reflect system preference
    const htmlClass = await html.getAttribute('class');
    
    // Should either have 'dark' class or not, based on system
    expect(typeof htmlClass).toBe('string');
  });
});
</file>

<file path="e2e/lineup-table.spec.ts">
import { test, expect } from '@playwright/test';

test.describe('Lineup Table Features', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/optimizer');
  });

  test('should display RunSummary metrics with correct formatting', async ({ page }) => {
    // RunSummary now lives in the Metrics drawer; open it if not visible inline
    let runSummary = page.getByTestId('run-summary');
    if (!(await runSummary.isVisible())) {
      await page.getByRole('button', { name: 'Metrics' }).click();
      runSummary = page.getByTestId('run-summary');
    }
    await expect(runSummary).toBeVisible();
    
    // Check for badge tooltips
    const engineBadge = page.getByTestId('engine-badge');
    if (await engineBadge.isVisible()) {
      await engineBadge.hover();
      await expect(page.getByText('Optimization engine used')).toBeVisible();
    }

    // Check for inputs/outputs card
    const inputsCard = page.getByTestId('inputs-outputs-card');
    if (await inputsCard.isVisible()) {
      // Verify number formatting with proper separators
      const lineupsValue = inputsCard.locator('dd').first();
      await expect(lineupsValue).toHaveClass(/font-mono tabular-nums/);
    }

    // Check for performance card metrics
    const perfCard = page.getByTestId('performance-card');
    if (await perfCard.isVisible()) {
      // Check that scores are formatted with 2 decimal places
      const scoreElements = perfCard.locator('dd');
      const scoreText = await scoreElements.first().textContent();
      if (scoreText && scoreText !== '—') {
        expect(scoreText).toMatch(/^\d{1,3}(,\d{3})*\.\d{2}$/);
      }
    }
  });

  test('should switch between Cards and Table views', async ({ page }) => {
    // Check that view tabs are present
    await expect(page.getByTestId('lineup-view-tabs')).toBeVisible();
    await expect(page.getByTestId('cards-tab')).toBeVisible();
    await expect(page.getByTestId('table-tab')).toBeVisible();

    // Start with Cards view (default)
    await expect(page.getByTestId('cards-view')).toBeVisible();
    await expect(page.getByTestId('table-view')).not.toBeVisible();

    // Switch to Table view
    await page.getByTestId('table-tab').click();
    await expect(page.getByTestId('table-view')).toBeVisible();
    await expect(page.getByTestId('cards-view')).not.toBeVisible();

    // Switch back to Cards view
    await page.getByTestId('cards-tab').click();
    await expect(page.getByTestId('cards-view')).toBeVisible();
    await expect(page.getByTestId('table-view')).not.toBeVisible();
  });

  test('should sort table by Score and manage columns', async ({ page }) => {
    // Switch to table view first
    await page.getByTestId('table-tab').click();
    
    // Wait for table to load
    const table = page.getByTestId('lineup-table-card');
    await expect(table).toBeVisible();

    // Check default sorting by Score (descending)
    const scoreHeader = page.getByTestId('header-score');
    if (await scoreHeader.isVisible()) {
      await expect(scoreHeader).toContainText('↓');
    }

    // Open column settings
    await page.getByTestId('column-settings-button').click();
    
    // Toggle Salary column off
    const salaryToggle = page.getByTestId('column-toggle-salary_used');
    if (await salaryToggle.isVisible()) {
      await salaryToggle.click();
      
      // Verify salary column is hidden
      const salaryHeader = page.getByTestId('header-salary_used');
      await expect(salaryHeader).not.toBeVisible();
      
      // Toggle it back on
      await page.getByTestId('column-settings-button').click();
      await salaryToggle.click();
      await expect(salaryHeader).toBeVisible();
    }

    // Test column pinning
    await page.getByTestId('column-settings-button').click();
    const scorePinToggle = page.getByTestId('column-pin-score');
    if (await scorePinToggle.isVisible()) {
      await scorePinToggle.click();
      // Check that pinning state is reflected (should show "Pinned" badge)
      await expect(page.getByText('Pinned')).toBeVisible();
    }
  });

  test('should search for players by name and ID', async ({ page }) => {
    // Switch to table view
    await page.getByTestId('table-tab').click();
    
    const searchInput = page.getByTestId('lineup-search-input');
    await expect(searchInput).toBeVisible();

    // Test search by player ID (assuming some test data exists)
    await searchInput.fill('12345');
    
    // Verify that search filters are applied
    const rowCountBadge = page.getByTestId('row-count-badge');
    await expect(rowCountBadge).toBeVisible();
    
    // Clear search
    await searchInput.fill('');
    
    // Test search by player name
    await searchInput.fill('LeBron');
    
    // The filtering should work with any existing data
    await expect(rowCountBadge).toBeVisible();
    
    // Clear search again
    await searchInput.fill('');
  });

  test('should export CSV with correct headers and data', async ({ page }) => {
    // Switch to table view
    await page.getByTestId('table-tab').click();
    
    // Wait for table to be ready
    await expect(page.getByTestId('lineup-table-card')).toBeVisible();
    
    // Set up download listener
    const downloadPromise = page.waitForEvent('download');
    
    // Click export button
    const exportButton = page.getByTestId('export-csv-button');
    await expect(exportButton).toBeVisible();
    await expect(exportButton).toBeEnabled();
    
    await exportButton.click();
    
    // Wait for download to start
    const download = await downloadPromise;
    
    // Verify filename format
    const filename = download.suggestedFilename();
    expect(filename).toMatch(/^lineups-export-\d{4}-\d{2}-\d{2}T\d{2}-\d{2}-\d{2}\.csv$/);
  });

  test('should reset table settings', async ({ page }) => {
    // Switch to table view
    await page.getByTestId('table-tab').click();
    
    // Make some changes first
    const searchInput = page.getByTestId('lineup-search-input');
    await searchInput.fill('test search');
    
    // Open column settings and make a change
    await page.getByTestId('column-settings-button').click();
    const firstToggle = page.locator('[data-testid^="column-toggle-"]').first();
    if (await firstToggle.isVisible()) {
      await firstToggle.click();
    }
    
    // Press escape to close dropdown
    await page.keyboard.press('Escape');
    
    // Reset everything
    await page.getByTestId('reset-button').click();
    
    // Verify search is cleared
    await expect(searchInput).toHaveValue('');
    
    // Verify columns are restored (would need to check specific implementation)
    await expect(page.getByTestId('column-settings-button')).toBeVisible();
  });

  test('should show correct row counts in badge', async ({ page }) => {
    // Switch to table view
    await page.getByTestId('table-tab').click();
    
    const rowCountBadge = page.getByTestId('row-count-badge');
    await expect(rowCountBadge).toBeVisible();
    
    // Initial state should show total count
    const initialText = await rowCountBadge.textContent();
    expect(initialText).toMatch(/\d+ rows?/);
    
    // Apply search filter
    const searchInput = page.getByTestId('lineup-search-input');
    await searchInput.fill('xyz_nonexistent_player');
    
    // Should show filtered count
    await expect(rowCountBadge).toContainText('0 of');
    
    // Clear search
    await searchInput.fill('');
    
    // Should return to total count
    await expect(rowCountBadge).toContainText('rows');
  });

  test('should handle empty table state', async ({ page }) => {
    // Go to table view when no data is loaded
    await page.getByTestId('table-tab').click();
    
    // Should show appropriate empty state
    const noResultsCell = page.getByTestId('no-results-cell');
    if (await noResultsCell.isVisible()) {
      await expect(noResultsCell).toContainText('No results found');
    }
  });

  test('should display player cells with copy functionality', async ({ page }) => {
    // Switch to table view
    await page.getByTestId('table-tab').click();
    
    // Look for player cells
    const playerCells = page.locator('[data-testid^="player-cell-"]');
    const firstPlayerCell = playerCells.first();
    
    if (await firstPlayerCell.isVisible()) {
      // Check for copy button
      const copyButton = firstPlayerCell.locator('[data-testid^="copy-player-"]');
      if (await copyButton.isVisible()) {
        await copyButton.click();
        // Note: Actually testing clipboard would require additional permissions
      }
      
      // Test tooltip on hover
      await firstPlayerCell.hover();
      // Tooltip content would appear - specific checks depend on data
    }
  });

  test('should not log console errors when toggling views', async ({ page }) => {
    const errors: string[] = [];
    page.on('console', (msg) => {
      if (msg.type() === 'error') errors.push(msg.text());
    });

    await page.getByTestId('table-tab').click();
    await page.getByTestId('cards-tab').click();

    expect(errors).toEqual([]);
  });

  test('dev-only grid state toggles are hidden by default', async ({ page }) => {
    // When NEXT_PUBLIC_DEV_UI !== 'true', the dev toggles should not render
    const devToggles = page.locator('[aria-label="Dev grid state toggles"]');
    await expect(devToggles).toHaveCount(0);
  });
});
</file>

<file path="e2e/optimizer-settings.spec.ts">
import { test, expect } from '@playwright/test';

test.describe('Optimizer Settings UI', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/optimizer');
  });

  test('shows sliders for Sigma and Drop with tooltips', async ({ page }) => {
    // Sliders present
    await expect(page.getByTestId('sigma-slider')).toBeVisible();
    await expect(page.getByTestId('drop-slider')).toBeVisible();

    // Sigma tooltip
    const sigmaLabel = page.getByText('Sigma (0–0.25)', { exact: true });
    await sigmaLabel.hover();
    await expect(page.getByText('Randomness applied to projections.', { exact: false })).toBeVisible();

    // Drop tooltip
    const dropLabel = page.getByText('Drop intensity (0–0.5)', { exact: true });
    await dropLabel.hover();
    await expect(page.getByText('Prunes low-projection players to speed up search.', { exact: false })).toBeVisible();
  });

  test('advanced settings collapsible toggles content', async ({ page }) => {
    // Collapsible trigger should be visible
    const advToggle = page.getByRole('button', { name: /advanced settings/i });
    // Our trigger is an icon button without an accessible name, so fall back to the label nearby
    const advLabel = page.getByText('Advanced Settings', { exact: true });
    await expect(advLabel).toBeVisible();

    // Click the button next to label
    const btn = advLabel.locator('xpath=following-sibling::*//button').first();
    await btn.click();

    // Expect advanced fields to appear
    await expect(page.getByText('Ownership penalty', { exact: false })).toBeVisible();
  });
});
</file>

<file path="field_sampler/__init__.py">
"""Field sampler package."""

from .engine import SamplerEngine, run_sampler

__all__ = ["SamplerEngine", "run_sampler"]
</file>

<file path="fixtures/dk/2024-01-15/mergedPlayers.json">
[
  {
    "player_id_dk": "36385555",
    "name": "Giannis Antetokounmpo",
    "team": "MIL",
    "position": "PF/C",
    "salary": 11000,
    "proj_fp": 59.3,
    "mins": 34,
    "ownership": null,
    "ceiling": 71.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Giannis Antetokounmpo",
    "pos_primary": "PF",
    "pos_secondary": "C"
  },
  {
    "player_id_dk": "36385559",
    "name": "Joel Embiid",
    "team": "PHI",
    "position": "C",
    "salary": 10500,
    "proj_fp": 62.3,
    "mins": 33,
    "ownership": null,
    "ceiling": 75.4,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Joel Embiid",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385561",
    "name": "Trae Young",
    "team": "ATL",
    "position": "PG",
    "salary": 9900,
    "proj_fp": 48.7,
    "mins": 35,
    "ownership": null,
    "ceiling": 59.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Trae Young",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385564",
    "name": "Ja Morant",
    "team": "MEM",
    "position": "PG",
    "salary": 9500,
    "proj_fp": 46.7,
    "mins": 32,
    "ownership": null,
    "ceiling": 57.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Ja Morant",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385567",
    "name": "Damian Lillard",
    "team": "MIL",
    "position": "PG",
    "salary": 9400,
    "proj_fp": 43.3,
    "mins": 33,
    "ownership": null,
    "ceiling": 53.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Damian Lillard",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385570",
    "name": "Tyrese Haliburton",
    "team": "IND",
    "position": "PG",
    "salary": 9300,
    "proj_fp": 45.7,
    "mins": 34,
    "ownership": null,
    "ceiling": 55.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Tyrese Haliburton",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385573",
    "name": "James Harden",
    "team": "LAC",
    "position": "PG",
    "salary": 9200,
    "proj_fp": 40.3,
    "mins": 31,
    "ownership": null,
    "ceiling": 49.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "James Harden",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385576",
    "name": "Devin Booker",
    "team": "PHX",
    "position": "PG/SG",
    "salary": 9100,
    "proj_fp": 45.8,
    "mins": 33,
    "ownership": null,
    "ceiling": 56.4,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Devin Booker",
    "pos_primary": "PG",
    "pos_secondary": "SG"
  },
  {
    "player_id_dk": "36385580",
    "name": "Tyrese Maxey",
    "team": "PHI",
    "position": "PG",
    "salary": 9000,
    "proj_fp": 43.9,
    "mins": 32,
    "ownership": null,
    "ceiling": 54.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Tyrese Maxey",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385583",
    "name": "Scottie Barnes",
    "team": "TOR",
    "position": "PF",
    "salary": 8900,
    "proj_fp": 44.9,
    "mins": 32,
    "ownership": null,
    "ceiling": 54.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Scottie Barnes",
    "pos_primary": "PF",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385586",
    "name": "LaMelo Ball",
    "team": "CHA",
    "position": "PG",
    "salary": 8800,
    "proj_fp": 46.7,
    "mins": 33,
    "ownership": null,
    "ceiling": 58.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "LaMelo Ball",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385589",
    "name": "Donovan Mitchell",
    "team": "CLE",
    "position": "PG/SG",
    "salary": 8700,
    "proj_fp": 47.1,
    "mins": 33,
    "ownership": null,
    "ceiling": 58,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Donovan Mitchell",
    "pos_primary": "PG",
    "pos_secondary": "SG"
  },
  {
    "player_id_dk": "36385595",
    "name": "Cade Cunningham",
    "team": "DET",
    "position": "PG",
    "salary": 8600,
    "proj_fp": 41.4,
    "mins": 33,
    "ownership": null,
    "ceiling": 51,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Cade Cunningham",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385593",
    "name": "Alperen Sengun",
    "team": "HOU",
    "position": "C",
    "salary": 8600,
    "proj_fp": 43.9,
    "mins": 31,
    "ownership": null,
    "ceiling": 53.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Alperen Sengun",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385598",
    "name": "Kevin Durant",
    "team": "PHX",
    "position": "PF",
    "salary": 8600,
    "proj_fp": 46.8,
    "mins": 32,
    "ownership": null,
    "ceiling": 57.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Kevin Durant",
    "pos_primary": "PF",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385601",
    "name": "Paolo Banchero",
    "team": "ORL",
    "position": "PF",
    "salary": 8500,
    "proj_fp": 42.2,
    "mins": 32,
    "ownership": null,
    "ceiling": 52.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Paolo Banchero",
    "pos_primary": "PF",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385604",
    "name": "Stephen Curry",
    "team": "GSW",
    "position": "PG",
    "salary": 8500,
    "proj_fp": 42.9,
    "mins": 32,
    "ownership": null,
    "ceiling": 54.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Stephen Curry",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385607",
    "name": "Kawhi Leonard",
    "team": "LAC",
    "position": "PF",
    "salary": 8400,
    "proj_fp": 41.7,
    "mins": 29,
    "ownership": null,
    "ceiling": 51.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Kawhi Leonard",
    "pos_primary": "PF",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385616",
    "name": "Pascal Siakam",
    "team": "IND",
    "position": "SF/PF",
    "salary": 8300,
    "proj_fp": 39.1,
    "mins": 30,
    "ownership": null,
    "ceiling": 48,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Pascal Siakam",
    "pos_primary": "SF",
    "pos_secondary": "PF"
  },
  {
    "player_id_dk": "36385610",
    "name": "Dejounte Murray",
    "team": "NOP",
    "position": "PG/SG",
    "salary": 8300,
    "proj_fp": 42.8,
    "mins": 32,
    "ownership": null,
    "ceiling": 52.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Dejounte Murray",
    "pos_primary": "PG",
    "pos_secondary": "SG"
  },
  {
    "player_id_dk": "36385614",
    "name": "Nikola Vucevic",
    "team": "CHI",
    "position": "C",
    "salary": 8300,
    "proj_fp": 40,
    "mins": 30,
    "ownership": null,
    "ceiling": 48.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Nikola Vucevic",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385624",
    "name": "Bam Adebayo",
    "team": "MIA",
    "position": "C",
    "salary": 8200,
    "proj_fp": 41.8,
    "mins": 31,
    "ownership": null,
    "ceiling": 50.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Bam Adebayo",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385620",
    "name": "Paul George",
    "team": "PHI",
    "position": "SF/PF",
    "salary": 8200,
    "proj_fp": 39.2,
    "mins": 30,
    "ownership": null,
    "ceiling": 48.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Paul George",
    "pos_primary": "SF",
    "pos_secondary": "PF"
  },
  {
    "player_id_dk": "36385634",
    "name": "Jimmy Butler",
    "team": "MIA",
    "position": "SF",
    "salary": 8100,
    "proj_fp": 37.9,
    "mins": 30,
    "ownership": null,
    "ceiling": 46.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jimmy Butler",
    "pos_primary": "SF",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385626",
    "name": "Zion Williamson",
    "team": "NOP",
    "position": "PF",
    "salary": 8100,
    "proj_fp": 40.5,
    "mins": 29,
    "ownership": null,
    "ceiling": 50.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Zion Williamson",
    "pos_primary": "PF",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385629",
    "name": "Desmond Bane",
    "team": "MEM",
    "position": "SG/SF",
    "salary": 8000,
    "proj_fp": 41,
    "mins": 31,
    "ownership": null,
    "ceiling": 50.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Desmond Bane",
    "pos_primary": "SG",
    "pos_secondary": "SF"
  },
  {
    "player_id_dk": "36385640",
    "name": "Jaren Jackson Jr.",
    "team": "MEM",
    "position": "PF/C",
    "salary": 7900,
    "proj_fp": 38.4,
    "mins": 29,
    "ownership": null,
    "ceiling": 47.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jaren Jackson Jr.",
    "pos_primary": "PF",
    "pos_secondary": "C"
  },
  {
    "player_id_dk": "36385644",
    "name": "Jalen Green",
    "team": "HOU",
    "position": "SG",
    "salary": 7900,
    "proj_fp": 33.9,
    "mins": 30,
    "ownership": null,
    "ceiling": 43.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jalen Green",
    "pos_primary": "SG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385637",
    "name": "Jalen Johnson",
    "team": "ATL",
    "position": "PF",
    "salary": 7800,
    "proj_fp": 36.7,
    "mins": 29,
    "ownership": null,
    "ceiling": 45.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jalen Johnson",
    "pos_primary": "PF",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385647",
    "name": "Cam Thomas",
    "team": "BKN",
    "position": "PG/SG",
    "salary": 7800,
    "proj_fp": 32.9,
    "mins": 28,
    "ownership": null,
    "ceiling": 41.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Cam Thomas",
    "pos_primary": "PG",
    "pos_secondary": "SG"
  },
  {
    "player_id_dk": "36385651",
    "name": "Jarrett Allen",
    "team": "CLE",
    "position": "C",
    "salary": 7800,
    "proj_fp": 37.4,
    "mins": 29,
    "ownership": null,
    "ceiling": 45.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jarrett Allen",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385653",
    "name": "Evan Mobley",
    "team": "CLE",
    "position": "PF/C",
    "salary": 7700,
    "proj_fp": 36.9,
    "mins": 30,
    "ownership": null,
    "ceiling": 45.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Evan Mobley",
    "pos_primary": "PF",
    "pos_secondary": "C"
  },
  {
    "player_id_dk": "36385657",
    "name": "Lauri Markkanen",
    "team": "UTA",
    "position": "SF/PF",
    "salary": 7500,
    "proj_fp": 40.6,
    "mins": 31,
    "ownership": null,
    "ceiling": 49.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Lauri Markkanen",
    "pos_primary": "SF",
    "pos_secondary": "PF"
  },
  {
    "player_id_dk": "36385661",
    "name": "Coby White",
    "team": "CHI",
    "position": "PG/SG",
    "salary": 7500,
    "proj_fp": 34.9,
    "mins": 29,
    "ownership": null,
    "ceiling": 43.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Coby White",
    "pos_primary": "PG",
    "pos_secondary": "SG"
  },
  {
    "player_id_dk": "36385668",
    "name": "Miles Bridges",
    "team": "CHA",
    "position": "PF",
    "salary": 7400,
    "proj_fp": 38.6,
    "mins": 30,
    "ownership": null,
    "ceiling": 47.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Miles Bridges",
    "pos_primary": "PF",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385671",
    "name": "Fred VanVleet",
    "team": "HOU",
    "position": "PG",
    "salary": 7400,
    "proj_fp": 39.8,
    "mins": 32,
    "ownership": null,
    "ceiling": 48.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Fred VanVleet",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385679",
    "name": "Deandre Ayton",
    "team": "POR",
    "position": "C",
    "salary": 7400,
    "proj_fp": 36.6,
    "mins": 28,
    "ownership": null,
    "ceiling": 44.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Deandre Ayton",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385681",
    "name": "Brandon Ingram",
    "team": "NOP",
    "position": "SF",
    "salary": 7400,
    "proj_fp": 37.2,
    "mins": 30,
    "ownership": null,
    "ceiling": 46.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Brandon Ingram",
    "pos_primary": "SF",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385674",
    "name": "Darius Garland",
    "team": "CLE",
    "position": "PG",
    "salary": 7300,
    "proj_fp": 33.3,
    "mins": 30,
    "ownership": null,
    "ceiling": 41.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Darius Garland",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385677",
    "name": "Jalen Duren",
    "team": "DET",
    "position": "C",
    "salary": 7300,
    "proj_fp": 34.6,
    "mins": 27,
    "ownership": null,
    "ceiling": 42.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jalen Duren",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385684",
    "name": "Zach LaVine",
    "team": "CHI",
    "position": "SG/SF",
    "salary": 7300,
    "proj_fp": 34.3,
    "mins": 29,
    "ownership": null,
    "ceiling": 42.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Zach LaVine",
    "pos_primary": "SG",
    "pos_secondary": "SF"
  },
  {
    "player_id_dk": "36385689",
    "name": "Immanuel Quickley",
    "team": "TOR",
    "position": "PG",
    "salary": 7200,
    "proj_fp": 31.5,
    "mins": 28,
    "ownership": null,
    "ceiling": 38.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Immanuel Quickley",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385665",
    "name": "Franz Wagner",
    "team": "ORL",
    "position": "SF",
    "salary": 7200,
    "proj_fp": 34.9,
    "mins": 30,
    "ownership": null,
    "ceiling": 42.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Franz Wagner",
    "pos_primary": "SF",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385695",
    "name": "Nic Claxton",
    "team": "BKN",
    "position": "C",
    "salary": 7100,
    "proj_fp": 32.8,
    "mins": 26,
    "ownership": null,
    "ceiling": 39.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Nic Claxton",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385702",
    "name": "Anfernee Simons",
    "team": "POR",
    "position": "PG/SG",
    "salary": 7100,
    "proj_fp": 37.1,
    "mins": 30,
    "ownership": null,
    "ceiling": 45.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Anfernee Simons",
    "pos_primary": "PG",
    "pos_secondary": "SG"
  },
  {
    "player_id_dk": "36385692",
    "name": "Josh Giddey",
    "team": "CHI",
    "position": "PG",
    "salary": 7100,
    "proj_fp": 28.4,
    "mins": 28,
    "ownership": null,
    "ceiling": 35.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Josh Giddey",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385697",
    "name": "Khris Middleton",
    "team": "MIL",
    "position": "SG/SF",
    "salary": 7100,
    "proj_fp": 32.5,
    "mins": 27,
    "ownership": null,
    "ceiling": 39.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Khris Middleton",
    "pos_primary": "SG",
    "pos_secondary": "SF"
  },
  {
    "player_id_dk": "36385711",
    "name": "Tyler Herro",
    "team": "MIA",
    "position": "PG/SG",
    "salary": 7000,
    "proj_fp": 36.1,
    "mins": 29,
    "ownership": null,
    "ceiling": 44.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Tyler Herro",
    "pos_primary": "PG",
    "pos_secondary": "SG"
  },
  {
    "player_id_dk": "36385706",
    "name": "Brandon Miller",
    "team": "CHA",
    "position": "SG/SF",
    "salary": 7000,
    "proj_fp": 29.4,
    "mins": 27,
    "ownership": null,
    "ceiling": 36.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Brandon Miller",
    "pos_primary": "SG",
    "pos_secondary": "SF"
  },
  {
    "player_id_dk": "36385715",
    "name": "Andre Drummond",
    "team": "PHI",
    "position": "C",
    "salary": 7000,
    "proj_fp": 22.9,
    "mins": 20,
    "ownership": null,
    "ceiling": 29,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Andre Drummond",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385730",
    "name": "RJ Barrett",
    "team": "TOR",
    "position": "SF/PF",
    "salary": 6900,
    "proj_fp": 33.5,
    "mins": 29,
    "ownership": null,
    "ceiling": 41.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "RJ Barrett",
    "pos_primary": "SF",
    "pos_secondary": "PF"
  },
  {
    "player_id_dk": "36385717",
    "name": "Myles Turner",
    "team": "IND",
    "position": "C",
    "salary": 6900,
    "proj_fp": 32.7,
    "mins": 27,
    "ownership": null,
    "ceiling": 40,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Myles Turner",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385719",
    "name": "Terry Rozier",
    "team": "MIA",
    "position": "PG",
    "salary": 6900,
    "proj_fp": 36.4,
    "mins": 30,
    "ownership": null,
    "ceiling": 44.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Terry Rozier",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385722",
    "name": "Deni Avdija",
    "team": "POR",
    "position": "SF/PF",
    "salary": 6900,
    "proj_fp": 31.9,
    "mins": 28,
    "ownership": null,
    "ceiling": 39,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Deni Avdija",
    "pos_primary": "SF",
    "pos_secondary": "PF"
  },
  {
    "player_id_dk": "36385726",
    "name": "CJ McCollum",
    "team": "NOP",
    "position": "PG/SG",
    "salary": 6900,
    "proj_fp": 36,
    "mins": 29,
    "ownership": null,
    "ceiling": 43.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "CJ McCollum",
    "pos_primary": "PG",
    "pos_secondary": "SG"
  },
  {
    "player_id_dk": "36385734",
    "name": "Jabari Smith Jr.",
    "team": "HOU",
    "position": "PF/C",
    "salary": 6800,
    "proj_fp": 29.9,
    "mins": 26,
    "ownership": null,
    "ceiling": 36.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jabari Smith Jr.",
    "pos_primary": "PF",
    "pos_secondary": "C"
  },
  {
    "player_id_dk": "36385742",
    "name": "Bradley Beal",
    "team": "PHX",
    "position": "SG/SF",
    "salary": 6700,
    "proj_fp": 33.6,
    "mins": 28,
    "ownership": null,
    "ceiling": 41.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Bradley Beal",
    "pos_primary": "SG",
    "pos_secondary": "SF"
  },
  {
    "player_id_dk": "36385738",
    "name": "Draymond Green",
    "team": "GSW",
    "position": "PF/C",
    "salary": 6700,
    "proj_fp": 30,
    "mins": 29,
    "ownership": null,
    "ceiling": 36.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Draymond Green",
    "pos_primary": "PF",
    "pos_secondary": "C"
  },
  {
    "player_id_dk": "36385747",
    "name": "Keyonte George",
    "team": "UTA",
    "position": "PG",
    "salary": 6600,
    "proj_fp": 24,
    "mins": 24,
    "ownership": null,
    "ceiling": 30.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Keyonte George",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385750",
    "name": "Ivica Zubac",
    "team": "LAC",
    "position": "C",
    "salary": 6600,
    "proj_fp": 28.6,
    "mins": 25,
    "ownership": null,
    "ceiling": 35,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Ivica Zubac",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385804",
    "name": "Jakob Poeltl",
    "team": "TOR",
    "position": "C",
    "salary": 6500,
    "proj_fp": 29.9,
    "mins": 26,
    "ownership": null,
    "ceiling": 36.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jakob Poeltl",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385755",
    "name": "Jusuf Nurkic",
    "team": "PHX",
    "position": "C",
    "salary": 6500,
    "proj_fp": 34.1,
    "mins": 27,
    "ownership": null,
    "ceiling": 41.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jusuf Nurkic",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385752",
    "name": "Jonathan Kuminga",
    "team": "GSW",
    "position": "PF",
    "salary": 6500,
    "proj_fp": 27.5,
    "mins": 24,
    "ownership": null,
    "ceiling": 34.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jonathan Kuminga",
    "pos_primary": "PF",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385757",
    "name": "Clint Capela",
    "team": "ATL",
    "position": "C",
    "salary": 6400,
    "proj_fp": 31.2,
    "mins": 26,
    "ownership": null,
    "ceiling": 37.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Clint Capela",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385759",
    "name": "Tobias Harris",
    "team": "DET",
    "position": "PF",
    "salary": 6400,
    "proj_fp": 32.4,
    "mins": 28,
    "ownership": null,
    "ceiling": 39.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Tobias Harris",
    "pos_primary": "PF",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385762",
    "name": "Amen Thompson",
    "team": "HOU",
    "position": "PG/SF",
    "salary": 6400,
    "proj_fp": 25.2,
    "mins": 22,
    "ownership": null,
    "ceiling": 31.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Amen Thompson",
    "pos_primary": "PG",
    "pos_secondary": "SF"
  },
  {
    "player_id_dk": "36385767",
    "name": "Kelly Oubre Jr.",
    "team": "PHI",
    "position": "SG/SF",
    "salary": 6400,
    "proj_fp": 27.7,
    "mins": 25,
    "ownership": null,
    "ceiling": 34.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Kelly Oubre Jr.",
    "pos_primary": "SG",
    "pos_secondary": "SF"
  },
  {
    "player_id_dk": "36385774",
    "name": "Jerami Grant",
    "team": "POR",
    "position": "PF",
    "salary": 6300,
    "proj_fp": 32.5,
    "mins": 29,
    "ownership": null,
    "ceiling": 39.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jerami Grant",
    "pos_primary": "PF",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385772",
    "name": "Brook Lopez",
    "team": "MIL",
    "position": "C",
    "salary": 6300,
    "proj_fp": 27.9,
    "mins": 25,
    "ownership": null,
    "ceiling": 34.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Brook Lopez",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385783",
    "name": "Dennis Schroder",
    "team": "BKN",
    "position": "PG",
    "salary": 6200,
    "proj_fp": 29,
    "mins": 26,
    "ownership": null,
    "ceiling": 35.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Dennis Schroder",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385777",
    "name": "Zach Edey",
    "team": "MEM",
    "position": "C",
    "salary": 6200,
    "proj_fp": 16.2,
    "mins": 15,
    "ownership": null,
    "ceiling": 21.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Zach Edey",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385779",
    "name": "Caris LeVert",
    "team": "CLE",
    "position": "PG/SG",
    "salary": 6200,
    "proj_fp": 28.7,
    "mins": 26,
    "ownership": null,
    "ceiling": 35.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Caris LeVert",
    "pos_primary": "PG",
    "pos_secondary": "SG"
  },
  {
    "player_id_dk": "36385786",
    "name": "John Collins",
    "team": "UTA",
    "position": "C",
    "salary": 6100,
    "proj_fp": 30.8,
    "mins": 27,
    "ownership": null,
    "ceiling": 37.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "John Collins",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385792",
    "name": "Collin Sexton",
    "team": "UTA",
    "position": "SG",
    "salary": 6100,
    "proj_fp": 31.2,
    "mins": 27,
    "ownership": null,
    "ceiling": 38,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Collin Sexton",
    "pos_primary": "SG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385788",
    "name": "Bobby Portis",
    "team": "MIL",
    "position": "PF/C",
    "salary": 6100,
    "proj_fp": 28.2,
    "mins": 23,
    "ownership": null,
    "ceiling": 34.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Bobby Portis",
    "pos_primary": "PF",
    "pos_secondary": "C"
  },
  {
    "player_id_dk": "36385795",
    "name": "Jaden Ivey",
    "team": "DET",
    "position": "PG/SG",
    "salary": 6000,
    "proj_fp": 27.6,
    "mins": 25,
    "ownership": null,
    "ceiling": 34.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jaden Ivey",
    "pos_primary": "PG",
    "pos_secondary": "SG"
  },
  {
    "player_id_dk": "36385799",
    "name": "Trey Murphy III",
    "team": "NOP",
    "position": "SG/SF",
    "salary": 6000,
    "proj_fp": 28.3,
    "mins": 26,
    "ownership": null,
    "ceiling": 34.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Trey Murphy III",
    "pos_primary": "SG",
    "pos_secondary": "SF"
  },
  {
    "player_id_dk": "36385814",
    "name": "Bogdan Bogdanovic",
    "team": "ATL",
    "position": "SG",
    "salary": 5900,
    "proj_fp": 30,
    "mins": 27,
    "ownership": null,
    "ceiling": 36.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Bogdan Bogdanovic",
    "pos_primary": "SG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385817",
    "name": "Ben Simmons",
    "team": "BKN",
    "position": "PG",
    "salary": 5900,
    "proj_fp": 26.9,
    "mins": 24,
    "ownership": null,
    "ceiling": 33.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Ben Simmons",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385806",
    "name": "Marcus Smart",
    "team": "MEM",
    "position": "PG/SG",
    "salary": 5900,
    "proj_fp": 28.3,
    "mins": 26,
    "ownership": null,
    "ceiling": 34.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Marcus Smart",
    "pos_primary": "PG",
    "pos_secondary": "SG"
  },
  {
    "player_id_dk": "36385810",
    "name": "Kelly Olynyk",
    "team": "TOR",
    "position": "C",
    "salary": 5900,
    "proj_fp": 25.2,
    "mins": 23,
    "ownership": null,
    "ceiling": 31.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Kelly Olynyk",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385812",
    "name": "Mark Williams",
    "team": "CHA",
    "position": "C",
    "salary": 5900,
    "proj_fp": 30.6,
    "mins": 25,
    "ownership": null,
    "ceiling": 37.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Mark Williams",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385832",
    "name": "Max Strus",
    "team": "CLE",
    "position": "PF",
    "salary": 5800,
    "proj_fp": 26.8,
    "mins": 25,
    "ownership": null,
    "ceiling": 32.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Max Strus",
    "pos_primary": "PF",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385828",
    "name": "Jaime Jaquez Jr.",
    "team": "MIA",
    "position": "SF/PF",
    "salary": 5800,
    "proj_fp": 23.1,
    "mins": 22,
    "ownership": null,
    "ceiling": 28.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jaime Jaquez Jr.",
    "pos_primary": "SF",
    "pos_secondary": "PF"
  },
  {
    "player_id_dk": "36385820",
    "name": "Norman Powell",
    "team": "LAC",
    "position": "SG/SF",
    "salary": 5800,
    "proj_fp": 20.9,
    "mins": 20,
    "ownership": null,
    "ceiling": 26.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Norman Powell",
    "pos_primary": "SG",
    "pos_secondary": "SF"
  },
  {
    "player_id_dk": "36385825",
    "name": "Scoot Henderson",
    "team": "POR",
    "position": "PG",
    "salary": 5800,
    "proj_fp": 27.2,
    "mins": 25,
    "ownership": null,
    "ceiling": 33.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Scoot Henderson",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385835",
    "name": "Andrew Wiggins",
    "team": "GSW",
    "position": "SF/PF",
    "salary": 5800,
    "proj_fp": 23.8,
    "mins": 23,
    "ownership": null,
    "ceiling": 29.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Andrew Wiggins",
    "pos_primary": "SF",
    "pos_secondary": "PF"
  },
  {
    "player_id_dk": "36385839",
    "name": "Patrick Williams",
    "team": "CHI",
    "position": "SF/PF",
    "salary": 5700,
    "proj_fp": 20.5,
    "mins": 21,
    "ownership": null,
    "ceiling": 25.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Patrick Williams",
    "pos_primary": "SF",
    "pos_secondary": "PF"
  },
  {
    "player_id_dk": "36385843",
    "name": "Jordan Clarkson",
    "team": "UTA",
    "position": "SG",
    "salary": 5600,
    "proj_fp": 30.2,
    "mins": 26,
    "ownership": null,
    "ceiling": 36.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jordan Clarkson",
    "pos_primary": "SG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385857",
    "name": "Cameron Johnson",
    "team": "BKN",
    "position": "SF/PF",
    "salary": 5500,
    "proj_fp": 25.3,
    "mins": 24,
    "ownership": null,
    "ceiling": 31.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Cameron Johnson",
    "pos_primary": "SF",
    "pos_secondary": "PF"
  },
  {
    "player_id_dk": "36385849",
    "name": "Walker Kessler",
    "team": "UTA",
    "position": "C",
    "salary": 5500,
    "proj_fp": 24.3,
    "mins": 22,
    "ownership": null,
    "ceiling": 30,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Walker Kessler",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385853",
    "name": "Tari Eason",
    "team": "HOU",
    "position": "SF/PF",
    "salary": 5500,
    "proj_fp": 25,
    "mins": 22,
    "ownership": null,
    "ceiling": 30.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Tari Eason",
    "pos_primary": "SF",
    "pos_secondary": "PF"
  },
  {
    "player_id_dk": "36385861",
    "name": "Tyus Jones",
    "team": "PHX",
    "position": "PG",
    "salary": 5500,
    "proj_fp": 29.6,
    "mins": 27,
    "ownership": null,
    "ceiling": 36,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Tyus Jones",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385872",
    "name": "Buddy Hield",
    "team": "GSW",
    "position": "SG",
    "salary": 5500,
    "proj_fp": 22.9,
    "mins": 22,
    "ownership": null,
    "ceiling": 28.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Buddy Hield",
    "pos_primary": "SG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385846",
    "name": "Lonzo Ball",
    "team": "CHI",
    "position": "PG",
    "salary": 5500,
    "proj_fp": 18.4,
    "mins": 16,
    "ownership": null,
    "ceiling": 23.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Lonzo Ball",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385851",
    "name": "Herbert Jones",
    "team": "NOP",
    "position": "C",
    "salary": 5500,
    "proj_fp": 23.8,
    "mins": 24,
    "ownership": null,
    "ceiling": 29.4,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Herbert Jones",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385864",
    "name": "Onyeka Okongwu",
    "team": "ATL",
    "position": "PF/C",
    "salary": 5400,
    "proj_fp": 23.9,
    "mins": 21,
    "ownership": null,
    "ceiling": 29.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Onyeka Okongwu",
    "pos_primary": "PF",
    "pos_secondary": "C"
  },
  {
    "player_id_dk": "36385875",
    "name": "Wendell Carter Jr.",
    "team": "ORL",
    "position": "C",
    "salary": 5400,
    "proj_fp": 24.2,
    "mins": 23,
    "ownership": null,
    "ceiling": 29.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Wendell Carter Jr.",
    "pos_primary": "C",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385868",
    "name": "Ayo Dosunmu",
    "team": "CHI",
    "position": "PG/SG",
    "salary": 5400,
    "proj_fp": 23.5,
    "mins": 24,
    "ownership": null,
    "ceiling": 29.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Ayo Dosunmu",
    "pos_primary": "PG",
    "pos_secondary": "SG"
  },
  {
    "player_id_dk": "36385882",
    "name": "Bennedict Mathurin",
    "team": "IND",
    "position": "SG/SF",
    "salary": 5200,
    "proj_fp": 24.1,
    "mins": 22,
    "ownership": null,
    "ceiling": 29.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Bennedict Mathurin",
    "pos_primary": "SG",
    "pos_secondary": "SF"
  },
  {
    "player_id_dk": "36385877",
    "name": "Shaedon Sharpe",
    "team": "POR",
    "position": "PG/SF",
    "salary": 5200,
    "proj_fp": 29,
    "mins": 25,
    "ownership": null,
    "ceiling": 35.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Shaedon Sharpe",
    "pos_primary": "PG",
    "pos_secondary": "SF"
  },
  {
    "player_id_dk": "36385887",
    "name": "Gary Trent Jr.",
    "team": "MIL",
    "position": "SG/SF",
    "salary": 5200,
    "proj_fp": 22.9,
    "mins": 21,
    "ownership": null,
    "ceiling": 28.4,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Gary Trent Jr.",
    "pos_primary": "SG",
    "pos_secondary": "SF"
  },
  {
    "player_id_dk": "36385892",
    "name": "Kyle Lowry",
    "team": "PHI",
    "position": "PG",
    "salary": 5200,
    "proj_fp": 21.3,
    "mins": 20,
    "ownership": null,
    "ceiling": 26.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Kyle Lowry",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385899",
    "name": "Bruce Brown",
    "team": "TOR",
    "position": "SG/SF",
    "salary": 5100,
    "proj_fp": 22.4,
    "mins": 22,
    "ownership": null,
    "ceiling": 27.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Bruce Brown",
    "pos_primary": "SG",
    "pos_secondary": "SF"
  },
  {
    "player_id_dk": "36385907",
    "name": "Andrew Nembhard",
    "team": "IND",
    "position": "PG/SG",
    "salary": 5100,
    "proj_fp": 21.5,
    "mins": 20,
    "ownership": null,
    "ceiling": 26.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Andrew Nembhard",
    "pos_primary": "PG",
    "pos_secondary": "SG"
  },
  {
    "player_id_dk": "36385904",
    "name": "Jalen Suggs",
    "team": "ORL",
    "position": "PG",
    "salary": 5100,
    "proj_fp": 25.1,
    "mins": 23,
    "ownership": null,
    "ceiling": 30.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jalen Suggs",
    "pos_primary": "PG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385895",
    "name": "Matas Buzelis",
    "team": "CHI",
    "position": "SF/PF",
    "salary": 5100,
    "proj_fp": 16.8,
    "mins": 14,
    "ownership": null,
    "ceiling": 21.4,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Matas Buzelis",
    "pos_primary": "SF",
    "pos_secondary": "PF"
  },
  {
    "player_id_dk": "36385927",
    "name": "De'Andre Hunter",
    "team": "ATL",
    "position": "SF/PF",
    "salary": 5000,
    "proj_fp": 25,
    "mins": 24,
    "ownership": null,
    "ceiling": 30.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "De'Andre Hunter",
    "pos_primary": "SF",
    "pos_secondary": "PF"
  },
  {
    "player_id_dk": "36385943",
    "name": "Santi Aldama",
    "team": "MEM",
    "position": "PF/C",
    "salary": 5000,
    "proj_fp": 24.9,
    "mins": 23,
    "ownership": null,
    "ceiling": 30.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Santi Aldama",
    "pos_primary": "PF",
    "pos_secondary": "C"
  },
  {
    "player_id_dk": "36385920",
    "name": "Aaron Nesmith",
    "team": "IND",
    "position": "SF/PF",
    "salary": 5000,
    "proj_fp": 22.8,
    "mins": 22,
    "ownership": null,
    "ceiling": 28.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Aaron Nesmith",
    "pos_primary": "SF",
    "pos_secondary": "PF"
  },
  {
    "player_id_dk": "36385924",
    "name": "Kentavious Caldwell-Pope",
    "team": "ORL",
    "position": "SG",
    "salary": 5000,
    "proj_fp": 20.6,
    "mins": 21,
    "ownership": null,
    "ceiling": 25.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Kentavious Caldwell-Pope",
    "pos_primary": "SG",
    "pos_secondary": null
  },
  {
    "player_id_dk": "36385931",
    "name": "Reed Sheppard",
    "team": "HOU",
    "position": "PG/SG",
    "salary": 5000,
    "proj_fp": 17.2,
    "mins": 15,
    "ownership": null,
    "ceiling": 21.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Reed Sheppard",
    "pos_primary": "PG",
    "pos_secondary": "SG"
  },
  {
    "player_id_dk": "36385915",
    "name": "Terance Mann",
    "team": "LAC",
    "position": "SG/SF",
    "salary": 5000,
    "proj_fp": 17.3,
    "mins": 18,
    "ownership": null,
    "ceiling": 22,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Terance Mann",
    "pos_primary": "SG",
    "pos_secondary": "SF"
  },
  {
    "player_id_dk": "36385935",
    "name": "Grayson Allen",
    "team": "PHX",
    "position": "SG/SF",
    "salary": 5000,
    "proj_fp": 26.4,
    "mins": 24,
    "ownership": null,
    "ceiling": 32.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Grayson Allen",
    "pos_primary": "SG",
    "pos_secondary": "SF"
  },
  {
    "player_id_dk": "36385911",
    "name": "Brandin Podziemski",
    "team": "GSW",
    "position": "PG/SG",
    "salary": 5000,
    "proj_fp": 24.1,
    "mins": 22,
    "ownership": null,
    "ceiling": 29.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Brandin Podziemski",
    "pos_primary": "PG",
    "pos_secondary": "SG"
  },
  {
    "player_id_dk": "36385940",
    "name": "Caleb Martin",
    "team": "PHI",
    "position": "PF",
    "salary": 5000,
    "proj_fp": 21.1,
    "mins": 20,
    "ownership": null,
    "ceiling": 26.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Caleb Martin",
    "pos_primary": "PF",
    "pos_secondary": null
  }
]
</file>

<file path="fixtures/dk/2024-01-15/mergedPlayers.with_own.json">
[
  {
    "player_id_dk": "36385555",
    "name": "Giannis Antetokounmpo",
    "team": "MIL",
    "position": "PF/C",
    "salary": 11000,
    "proj_fp": 59.3,
    "mins": 34,
    "ownership": null,
    "ceiling": 71.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Giannis Antetokounmpo",
    "pos_primary": "PF",
    "pos_secondary": "C",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385559",
    "name": "Joel Embiid",
    "team": "PHI",
    "position": "C",
    "salary": 10500,
    "proj_fp": 62.3,
    "mins": 33,
    "ownership": null,
    "ceiling": 75.4,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Joel Embiid",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385561",
    "name": "Trae Young",
    "team": "ATL",
    "position": "PG",
    "salary": 9900,
    "proj_fp": 48.7,
    "mins": 35,
    "ownership": null,
    "ceiling": 59.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Trae Young",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385564",
    "name": "Ja Morant",
    "team": "MEM",
    "position": "PG",
    "salary": 9500,
    "proj_fp": 46.7,
    "mins": 32,
    "ownership": null,
    "ceiling": 57.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Ja Morant",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385567",
    "name": "Damian Lillard",
    "team": "MIL",
    "position": "PG",
    "salary": 9400,
    "proj_fp": 43.3,
    "mins": 33,
    "ownership": null,
    "ceiling": 53.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Damian Lillard",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385570",
    "name": "Tyrese Haliburton",
    "team": "IND",
    "position": "PG",
    "salary": 9300,
    "proj_fp": 45.7,
    "mins": 34,
    "ownership": null,
    "ceiling": 55.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Tyrese Haliburton",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385573",
    "name": "James Harden",
    "team": "LAC",
    "position": "PG",
    "salary": 9200,
    "proj_fp": 40.3,
    "mins": 31,
    "ownership": null,
    "ceiling": 49.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "James Harden",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385576",
    "name": "Devin Booker",
    "team": "PHX",
    "position": "PG/SG",
    "salary": 9100,
    "proj_fp": 45.8,
    "mins": 33,
    "ownership": null,
    "ceiling": 56.4,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Devin Booker",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385580",
    "name": "Tyrese Maxey",
    "team": "PHI",
    "position": "PG",
    "salary": 9000,
    "proj_fp": 43.9,
    "mins": 32,
    "ownership": null,
    "ceiling": 54.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Tyrese Maxey",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385583",
    "name": "Scottie Barnes",
    "team": "TOR",
    "position": "PF",
    "salary": 8900,
    "proj_fp": 44.9,
    "mins": 32,
    "ownership": null,
    "ceiling": 54.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Scottie Barnes",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385586",
    "name": "LaMelo Ball",
    "team": "CHA",
    "position": "PG",
    "salary": 8800,
    "proj_fp": 46.7,
    "mins": 33,
    "ownership": null,
    "ceiling": 58.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "LaMelo Ball",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385589",
    "name": "Donovan Mitchell",
    "team": "CLE",
    "position": "PG/SG",
    "salary": 8700,
    "proj_fp": 47.1,
    "mins": 33,
    "ownership": null,
    "ceiling": 58,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Donovan Mitchell",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385595",
    "name": "Cade Cunningham",
    "team": "DET",
    "position": "PG",
    "salary": 8600,
    "proj_fp": 41.4,
    "mins": 33,
    "ownership": null,
    "ceiling": 51,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Cade Cunningham",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385593",
    "name": "Alperen Sengun",
    "team": "HOU",
    "position": "C",
    "salary": 8600,
    "proj_fp": 43.9,
    "mins": 31,
    "ownership": null,
    "ceiling": 53.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Alperen Sengun",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385598",
    "name": "Kevin Durant",
    "team": "PHX",
    "position": "PF",
    "salary": 8600,
    "proj_fp": 46.8,
    "mins": 32,
    "ownership": null,
    "ceiling": 57.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Kevin Durant",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385601",
    "name": "Paolo Banchero",
    "team": "ORL",
    "position": "PF",
    "salary": 8500,
    "proj_fp": 42.2,
    "mins": 32,
    "ownership": null,
    "ceiling": 52.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Paolo Banchero",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385604",
    "name": "Stephen Curry",
    "team": "GSW",
    "position": "PG",
    "salary": 8500,
    "proj_fp": 42.9,
    "mins": 32,
    "ownership": null,
    "ceiling": 54.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Stephen Curry",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385607",
    "name": "Kawhi Leonard",
    "team": "LAC",
    "position": "PF",
    "salary": 8400,
    "proj_fp": 41.7,
    "mins": 29,
    "ownership": null,
    "ceiling": 51.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Kawhi Leonard",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385616",
    "name": "Pascal Siakam",
    "team": "IND",
    "position": "SF/PF",
    "salary": 8300,
    "proj_fp": 39.1,
    "mins": 30,
    "ownership": null,
    "ceiling": 48,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Pascal Siakam",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385610",
    "name": "Dejounte Murray",
    "team": "NOP",
    "position": "PG/SG",
    "salary": 8300,
    "proj_fp": 42.8,
    "mins": 32,
    "ownership": null,
    "ceiling": 52.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Dejounte Murray",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385614",
    "name": "Nikola Vucevic",
    "team": "CHI",
    "position": "C",
    "salary": 8300,
    "proj_fp": 40,
    "mins": 30,
    "ownership": null,
    "ceiling": 48.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Nikola Vucevic",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385624",
    "name": "Bam Adebayo",
    "team": "MIA",
    "position": "C",
    "salary": 8200,
    "proj_fp": 41.8,
    "mins": 31,
    "ownership": null,
    "ceiling": 50.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Bam Adebayo",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385620",
    "name": "Paul George",
    "team": "PHI",
    "position": "SF/PF",
    "salary": 8200,
    "proj_fp": 39.2,
    "mins": 30,
    "ownership": null,
    "ceiling": 48.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Paul George",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385634",
    "name": "Jimmy Butler",
    "team": "MIA",
    "position": "SF",
    "salary": 8100,
    "proj_fp": 37.9,
    "mins": 30,
    "ownership": null,
    "ceiling": 46.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jimmy Butler",
    "pos_primary": "SF",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385626",
    "name": "Zion Williamson",
    "team": "NOP",
    "position": "PF",
    "salary": 8100,
    "proj_fp": 40.5,
    "mins": 29,
    "ownership": null,
    "ceiling": 50.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Zion Williamson",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385629",
    "name": "Desmond Bane",
    "team": "MEM",
    "position": "SG/SF",
    "salary": 8000,
    "proj_fp": 41,
    "mins": 31,
    "ownership": null,
    "ceiling": 50.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Desmond Bane",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385640",
    "name": "Jaren Jackson Jr.",
    "team": "MEM",
    "position": "PF/C",
    "salary": 7900,
    "proj_fp": 38.4,
    "mins": 29,
    "ownership": null,
    "ceiling": 47.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jaren Jackson Jr.",
    "pos_primary": "PF",
    "pos_secondary": "C",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385644",
    "name": "Jalen Green",
    "team": "HOU",
    "position": "SG",
    "salary": 7900,
    "proj_fp": 33.9,
    "mins": 30,
    "ownership": null,
    "ceiling": 43.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jalen Green",
    "pos_primary": "SG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385637",
    "name": "Jalen Johnson",
    "team": "ATL",
    "position": "PF",
    "salary": 7800,
    "proj_fp": 36.7,
    "mins": 29,
    "ownership": null,
    "ceiling": 45.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jalen Johnson",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385647",
    "name": "Cam Thomas",
    "team": "BKN",
    "position": "PG/SG",
    "salary": 7800,
    "proj_fp": 32.9,
    "mins": 28,
    "ownership": null,
    "ceiling": 41.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Cam Thomas",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385651",
    "name": "Jarrett Allen",
    "team": "CLE",
    "position": "C",
    "salary": 7800,
    "proj_fp": 37.4,
    "mins": 29,
    "ownership": null,
    "ceiling": 45.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jarrett Allen",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385653",
    "name": "Evan Mobley",
    "team": "CLE",
    "position": "PF/C",
    "salary": 7700,
    "proj_fp": 36.9,
    "mins": 30,
    "ownership": null,
    "ceiling": 45.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Evan Mobley",
    "pos_primary": "PF",
    "pos_secondary": "C",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385657",
    "name": "Lauri Markkanen",
    "team": "UTA",
    "position": "SF/PF",
    "salary": 7500,
    "proj_fp": 40.6,
    "mins": 31,
    "ownership": null,
    "ceiling": 49.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Lauri Markkanen",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385661",
    "name": "Coby White",
    "team": "CHI",
    "position": "PG/SG",
    "salary": 7500,
    "proj_fp": 34.9,
    "mins": 29,
    "ownership": null,
    "ceiling": 43.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Coby White",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385668",
    "name": "Miles Bridges",
    "team": "CHA",
    "position": "PF",
    "salary": 7400,
    "proj_fp": 38.6,
    "mins": 30,
    "ownership": null,
    "ceiling": 47.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Miles Bridges",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385671",
    "name": "Fred VanVleet",
    "team": "HOU",
    "position": "PG",
    "salary": 7400,
    "proj_fp": 39.8,
    "mins": 32,
    "ownership": null,
    "ceiling": 48.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Fred VanVleet",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385679",
    "name": "Deandre Ayton",
    "team": "POR",
    "position": "C",
    "salary": 7400,
    "proj_fp": 36.6,
    "mins": 28,
    "ownership": null,
    "ceiling": 44.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Deandre Ayton",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385681",
    "name": "Brandon Ingram",
    "team": "NOP",
    "position": "SF",
    "salary": 7400,
    "proj_fp": 37.2,
    "mins": 30,
    "ownership": null,
    "ceiling": 46.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Brandon Ingram",
    "pos_primary": "SF",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385674",
    "name": "Darius Garland",
    "team": "CLE",
    "position": "PG",
    "salary": 7300,
    "proj_fp": 33.3,
    "mins": 30,
    "ownership": null,
    "ceiling": 41.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Darius Garland",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385677",
    "name": "Jalen Duren",
    "team": "DET",
    "position": "C",
    "salary": 7300,
    "proj_fp": 34.6,
    "mins": 27,
    "ownership": null,
    "ceiling": 42.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jalen Duren",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385684",
    "name": "Zach LaVine",
    "team": "CHI",
    "position": "SG/SF",
    "salary": 7300,
    "proj_fp": 34.3,
    "mins": 29,
    "ownership": null,
    "ceiling": 42.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Zach LaVine",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385689",
    "name": "Immanuel Quickley",
    "team": "TOR",
    "position": "PG",
    "salary": 7200,
    "proj_fp": 31.5,
    "mins": 28,
    "ownership": null,
    "ceiling": 38.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Immanuel Quickley",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385665",
    "name": "Franz Wagner",
    "team": "ORL",
    "position": "SF",
    "salary": 7200,
    "proj_fp": 34.9,
    "mins": 30,
    "ownership": null,
    "ceiling": 42.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Franz Wagner",
    "pos_primary": "SF",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385695",
    "name": "Nic Claxton",
    "team": "BKN",
    "position": "C",
    "salary": 7100,
    "proj_fp": 32.8,
    "mins": 26,
    "ownership": null,
    "ceiling": 39.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Nic Claxton",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385702",
    "name": "Anfernee Simons",
    "team": "POR",
    "position": "PG/SG",
    "salary": 7100,
    "proj_fp": 37.1,
    "mins": 30,
    "ownership": null,
    "ceiling": 45.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Anfernee Simons",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385692",
    "name": "Josh Giddey",
    "team": "CHI",
    "position": "PG",
    "salary": 7100,
    "proj_fp": 28.4,
    "mins": 28,
    "ownership": null,
    "ceiling": 35.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Josh Giddey",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385697",
    "name": "Khris Middleton",
    "team": "MIL",
    "position": "SG/SF",
    "salary": 7100,
    "proj_fp": 32.5,
    "mins": 27,
    "ownership": null,
    "ceiling": 39.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Khris Middleton",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385711",
    "name": "Tyler Herro",
    "team": "MIA",
    "position": "PG/SG",
    "salary": 7000,
    "proj_fp": 36.1,
    "mins": 29,
    "ownership": null,
    "ceiling": 44.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Tyler Herro",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385706",
    "name": "Brandon Miller",
    "team": "CHA",
    "position": "SG/SF",
    "salary": 7000,
    "proj_fp": 29.4,
    "mins": 27,
    "ownership": null,
    "ceiling": 36.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Brandon Miller",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385715",
    "name": "Andre Drummond",
    "team": "PHI",
    "position": "C",
    "salary": 7000,
    "proj_fp": 22.9,
    "mins": 20,
    "ownership": null,
    "ceiling": 29,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Andre Drummond",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385730",
    "name": "RJ Barrett",
    "team": "TOR",
    "position": "SF/PF",
    "salary": 6900,
    "proj_fp": 33.5,
    "mins": 29,
    "ownership": null,
    "ceiling": 41.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "RJ Barrett",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385717",
    "name": "Myles Turner",
    "team": "IND",
    "position": "C",
    "salary": 6900,
    "proj_fp": 32.7,
    "mins": 27,
    "ownership": null,
    "ceiling": 40,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Myles Turner",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385719",
    "name": "Terry Rozier",
    "team": "MIA",
    "position": "PG",
    "salary": 6900,
    "proj_fp": 36.4,
    "mins": 30,
    "ownership": null,
    "ceiling": 44.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Terry Rozier",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385722",
    "name": "Deni Avdija",
    "team": "POR",
    "position": "SF/PF",
    "salary": 6900,
    "proj_fp": 31.9,
    "mins": 28,
    "ownership": null,
    "ceiling": 39,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Deni Avdija",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385726",
    "name": "CJ McCollum",
    "team": "NOP",
    "position": "PG/SG",
    "salary": 6900,
    "proj_fp": 36,
    "mins": 29,
    "ownership": null,
    "ceiling": 43.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "CJ McCollum",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385734",
    "name": "Jabari Smith Jr.",
    "team": "HOU",
    "position": "PF/C",
    "salary": 6800,
    "proj_fp": 29.9,
    "mins": 26,
    "ownership": null,
    "ceiling": 36.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jabari Smith Jr.",
    "pos_primary": "PF",
    "pos_secondary": "C",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385742",
    "name": "Bradley Beal",
    "team": "PHX",
    "position": "SG/SF",
    "salary": 6700,
    "proj_fp": 33.6,
    "mins": 28,
    "ownership": null,
    "ceiling": 41.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Bradley Beal",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385738",
    "name": "Draymond Green",
    "team": "GSW",
    "position": "PF/C",
    "salary": 6700,
    "proj_fp": 30,
    "mins": 29,
    "ownership": null,
    "ceiling": 36.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Draymond Green",
    "pos_primary": "PF",
    "pos_secondary": "C",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385747",
    "name": "Keyonte George",
    "team": "UTA",
    "position": "PG",
    "salary": 6600,
    "proj_fp": 24,
    "mins": 24,
    "ownership": null,
    "ceiling": 30.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Keyonte George",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385750",
    "name": "Ivica Zubac",
    "team": "LAC",
    "position": "C",
    "salary": 6600,
    "proj_fp": 28.6,
    "mins": 25,
    "ownership": null,
    "ceiling": 35,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Ivica Zubac",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385804",
    "name": "Jakob Poeltl",
    "team": "TOR",
    "position": "C",
    "salary": 6500,
    "proj_fp": 29.9,
    "mins": 26,
    "ownership": null,
    "ceiling": 36.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jakob Poeltl",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385755",
    "name": "Jusuf Nurkic",
    "team": "PHX",
    "position": "C",
    "salary": 6500,
    "proj_fp": 34.1,
    "mins": 27,
    "ownership": null,
    "ceiling": 41.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jusuf Nurkic",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385752",
    "name": "Jonathan Kuminga",
    "team": "GSW",
    "position": "PF",
    "salary": 6500,
    "proj_fp": 27.5,
    "mins": 24,
    "ownership": null,
    "ceiling": 34.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jonathan Kuminga",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385757",
    "name": "Clint Capela",
    "team": "ATL",
    "position": "C",
    "salary": 6400,
    "proj_fp": 31.2,
    "mins": 26,
    "ownership": null,
    "ceiling": 37.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Clint Capela",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385759",
    "name": "Tobias Harris",
    "team": "DET",
    "position": "PF",
    "salary": 6400,
    "proj_fp": 32.4,
    "mins": 28,
    "ownership": null,
    "ceiling": 39.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Tobias Harris",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385762",
    "name": "Amen Thompson",
    "team": "HOU",
    "position": "PG/SF",
    "salary": 6400,
    "proj_fp": 25.2,
    "mins": 22,
    "ownership": null,
    "ceiling": 31.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Amen Thompson",
    "pos_primary": "PG",
    "pos_secondary": "SF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385767",
    "name": "Kelly Oubre Jr.",
    "team": "PHI",
    "position": "SG/SF",
    "salary": 6400,
    "proj_fp": 27.7,
    "mins": 25,
    "ownership": null,
    "ceiling": 34.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Kelly Oubre Jr.",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385774",
    "name": "Jerami Grant",
    "team": "POR",
    "position": "PF",
    "salary": 6300,
    "proj_fp": 32.5,
    "mins": 29,
    "ownership": null,
    "ceiling": 39.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jerami Grant",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385772",
    "name": "Brook Lopez",
    "team": "MIL",
    "position": "C",
    "salary": 6300,
    "proj_fp": 27.9,
    "mins": 25,
    "ownership": null,
    "ceiling": 34.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Brook Lopez",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385783",
    "name": "Dennis Schroder",
    "team": "BKN",
    "position": "PG",
    "salary": 6200,
    "proj_fp": 29,
    "mins": 26,
    "ownership": null,
    "ceiling": 35.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Dennis Schroder",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385777",
    "name": "Zach Edey",
    "team": "MEM",
    "position": "C",
    "salary": 6200,
    "proj_fp": 16.2,
    "mins": 15,
    "ownership": null,
    "ceiling": 21.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Zach Edey",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385779",
    "name": "Caris LeVert",
    "team": "CLE",
    "position": "PG/SG",
    "salary": 6200,
    "proj_fp": 28.7,
    "mins": 26,
    "ownership": null,
    "ceiling": 35.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Caris LeVert",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385786",
    "name": "John Collins",
    "team": "UTA",
    "position": "C",
    "salary": 6100,
    "proj_fp": 30.8,
    "mins": 27,
    "ownership": null,
    "ceiling": 37.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "John Collins",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385792",
    "name": "Collin Sexton",
    "team": "UTA",
    "position": "SG",
    "salary": 6100,
    "proj_fp": 31.2,
    "mins": 27,
    "ownership": null,
    "ceiling": 38,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Collin Sexton",
    "pos_primary": "SG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385788",
    "name": "Bobby Portis",
    "team": "MIL",
    "position": "PF/C",
    "salary": 6100,
    "proj_fp": 28.2,
    "mins": 23,
    "ownership": null,
    "ceiling": 34.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Bobby Portis",
    "pos_primary": "PF",
    "pos_secondary": "C",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385795",
    "name": "Jaden Ivey",
    "team": "DET",
    "position": "PG/SG",
    "salary": 6000,
    "proj_fp": 27.6,
    "mins": 25,
    "ownership": null,
    "ceiling": 34.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jaden Ivey",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385799",
    "name": "Trey Murphy III",
    "team": "NOP",
    "position": "SG/SF",
    "salary": 6000,
    "proj_fp": 28.3,
    "mins": 26,
    "ownership": null,
    "ceiling": 34.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Trey Murphy III",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385814",
    "name": "Bogdan Bogdanovic",
    "team": "ATL",
    "position": "SG",
    "salary": 5900,
    "proj_fp": 30,
    "mins": 27,
    "ownership": null,
    "ceiling": 36.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Bogdan Bogdanovic",
    "pos_primary": "SG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385817",
    "name": "Ben Simmons",
    "team": "BKN",
    "position": "PG",
    "salary": 5900,
    "proj_fp": 26.9,
    "mins": 24,
    "ownership": null,
    "ceiling": 33.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Ben Simmons",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385806",
    "name": "Marcus Smart",
    "team": "MEM",
    "position": "PG/SG",
    "salary": 5900,
    "proj_fp": 28.3,
    "mins": 26,
    "ownership": null,
    "ceiling": 34.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Marcus Smart",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385810",
    "name": "Kelly Olynyk",
    "team": "TOR",
    "position": "C",
    "salary": 5900,
    "proj_fp": 25.2,
    "mins": 23,
    "ownership": null,
    "ceiling": 31.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Kelly Olynyk",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385812",
    "name": "Mark Williams",
    "team": "CHA",
    "position": "C",
    "salary": 5900,
    "proj_fp": 30.6,
    "mins": 25,
    "ownership": null,
    "ceiling": 37.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Mark Williams",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385832",
    "name": "Max Strus",
    "team": "CLE",
    "position": "PF",
    "salary": 5800,
    "proj_fp": 26.8,
    "mins": 25,
    "ownership": null,
    "ceiling": 32.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Max Strus",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385828",
    "name": "Jaime Jaquez Jr.",
    "team": "MIA",
    "position": "SF/PF",
    "salary": 5800,
    "proj_fp": 23.1,
    "mins": 22,
    "ownership": null,
    "ceiling": 28.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jaime Jaquez Jr.",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385820",
    "name": "Norman Powell",
    "team": "LAC",
    "position": "SG/SF",
    "salary": 5800,
    "proj_fp": 20.9,
    "mins": 20,
    "ownership": null,
    "ceiling": 26.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Norman Powell",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385825",
    "name": "Scoot Henderson",
    "team": "POR",
    "position": "PG",
    "salary": 5800,
    "proj_fp": 27.2,
    "mins": 25,
    "ownership": null,
    "ceiling": 33.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Scoot Henderson",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385835",
    "name": "Andrew Wiggins",
    "team": "GSW",
    "position": "SF/PF",
    "salary": 5800,
    "proj_fp": 23.8,
    "mins": 23,
    "ownership": null,
    "ceiling": 29.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Andrew Wiggins",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385839",
    "name": "Patrick Williams",
    "team": "CHI",
    "position": "SF/PF",
    "salary": 5700,
    "proj_fp": 20.5,
    "mins": 21,
    "ownership": null,
    "ceiling": 25.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Patrick Williams",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385843",
    "name": "Jordan Clarkson",
    "team": "UTA",
    "position": "SG",
    "salary": 5600,
    "proj_fp": 30.2,
    "mins": 26,
    "ownership": null,
    "ceiling": 36.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jordan Clarkson",
    "pos_primary": "SG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385857",
    "name": "Cameron Johnson",
    "team": "BKN",
    "position": "SF/PF",
    "salary": 5500,
    "proj_fp": 25.3,
    "mins": 24,
    "ownership": null,
    "ceiling": 31.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Cameron Johnson",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385849",
    "name": "Walker Kessler",
    "team": "UTA",
    "position": "C",
    "salary": 5500,
    "proj_fp": 24.3,
    "mins": 22,
    "ownership": null,
    "ceiling": 30,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Walker Kessler",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385853",
    "name": "Tari Eason",
    "team": "HOU",
    "position": "SF/PF",
    "salary": 5500,
    "proj_fp": 25,
    "mins": 22,
    "ownership": null,
    "ceiling": 30.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Tari Eason",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385861",
    "name": "Tyus Jones",
    "team": "PHX",
    "position": "PG",
    "salary": 5500,
    "proj_fp": 29.6,
    "mins": 27,
    "ownership": null,
    "ceiling": 36,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Tyus Jones",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385872",
    "name": "Buddy Hield",
    "team": "GSW",
    "position": "SG",
    "salary": 5500,
    "proj_fp": 22.9,
    "mins": 22,
    "ownership": null,
    "ceiling": 28.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Buddy Hield",
    "pos_primary": "SG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385846",
    "name": "Lonzo Ball",
    "team": "CHI",
    "position": "PG",
    "salary": 5500,
    "proj_fp": 18.4,
    "mins": 16,
    "ownership": null,
    "ceiling": 23.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Lonzo Ball",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385851",
    "name": "Herbert Jones",
    "team": "NOP",
    "position": "C",
    "salary": 5500,
    "proj_fp": 23.8,
    "mins": 24,
    "ownership": null,
    "ceiling": 29.4,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Herbert Jones",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385864",
    "name": "Onyeka Okongwu",
    "team": "ATL",
    "position": "PF/C",
    "salary": 5400,
    "proj_fp": 23.9,
    "mins": 21,
    "ownership": null,
    "ceiling": 29.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Onyeka Okongwu",
    "pos_primary": "PF",
    "pos_secondary": "C",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385875",
    "name": "Wendell Carter Jr.",
    "team": "ORL",
    "position": "C",
    "salary": 5400,
    "proj_fp": 24.2,
    "mins": 23,
    "ownership": null,
    "ceiling": 29.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Wendell Carter Jr.",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385868",
    "name": "Ayo Dosunmu",
    "team": "CHI",
    "position": "PG/SG",
    "salary": 5400,
    "proj_fp": 23.5,
    "mins": 24,
    "ownership": null,
    "ceiling": 29.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Ayo Dosunmu",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385882",
    "name": "Bennedict Mathurin",
    "team": "IND",
    "position": "SG/SF",
    "salary": 5200,
    "proj_fp": 24.1,
    "mins": 22,
    "ownership": null,
    "ceiling": 29.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Bennedict Mathurin",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385877",
    "name": "Shaedon Sharpe",
    "team": "POR",
    "position": "PG/SF",
    "salary": 5200,
    "proj_fp": 29,
    "mins": 25,
    "ownership": null,
    "ceiling": 35.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Shaedon Sharpe",
    "pos_primary": "PG",
    "pos_secondary": "SF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385887",
    "name": "Gary Trent Jr.",
    "team": "MIL",
    "position": "SG/SF",
    "salary": 5200,
    "proj_fp": 22.9,
    "mins": 21,
    "ownership": null,
    "ceiling": 28.4,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Gary Trent Jr.",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385892",
    "name": "Kyle Lowry",
    "team": "PHI",
    "position": "PG",
    "salary": 5200,
    "proj_fp": 21.3,
    "mins": 20,
    "ownership": null,
    "ceiling": 26.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Kyle Lowry",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385899",
    "name": "Bruce Brown",
    "team": "TOR",
    "position": "SG/SF",
    "salary": 5100,
    "proj_fp": 22.4,
    "mins": 22,
    "ownership": null,
    "ceiling": 27.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Bruce Brown",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385907",
    "name": "Andrew Nembhard",
    "team": "IND",
    "position": "PG/SG",
    "salary": 5100,
    "proj_fp": 21.5,
    "mins": 20,
    "ownership": null,
    "ceiling": 26.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Andrew Nembhard",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385904",
    "name": "Jalen Suggs",
    "team": "ORL",
    "position": "PG",
    "salary": 5100,
    "proj_fp": 25.1,
    "mins": 23,
    "ownership": null,
    "ceiling": 30.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jalen Suggs",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385895",
    "name": "Matas Buzelis",
    "team": "CHI",
    "position": "SF/PF",
    "salary": 5100,
    "proj_fp": 16.8,
    "mins": 14,
    "ownership": null,
    "ceiling": 21.4,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Matas Buzelis",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385927",
    "name": "De'Andre Hunter",
    "team": "ATL",
    "position": "SF/PF",
    "salary": 5000,
    "proj_fp": 25,
    "mins": 24,
    "ownership": null,
    "ceiling": 30.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "De'Andre Hunter",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385943",
    "name": "Santi Aldama",
    "team": "MEM",
    "position": "PF/C",
    "salary": 5000,
    "proj_fp": 24.9,
    "mins": 23,
    "ownership": null,
    "ceiling": 30.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Santi Aldama",
    "pos_primary": "PF",
    "pos_secondary": "C",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385920",
    "name": "Aaron Nesmith",
    "team": "IND",
    "position": "SF/PF",
    "salary": 5000,
    "proj_fp": 22.8,
    "mins": 22,
    "ownership": null,
    "ceiling": 28.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Aaron Nesmith",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385924",
    "name": "Kentavious Caldwell-Pope",
    "team": "ORL",
    "position": "SG",
    "salary": 5000,
    "proj_fp": 20.6,
    "mins": 21,
    "ownership": null,
    "ceiling": 25.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Kentavious Caldwell-Pope",
    "pos_primary": "SG",
    "pos_secondary": null,
    "own_proj": 0
  },
  {
    "player_id_dk": "36385931",
    "name": "Reed Sheppard",
    "team": "HOU",
    "position": "PG/SG",
    "salary": 5000,
    "proj_fp": 17.2,
    "mins": 15,
    "ownership": null,
    "ceiling": 21.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Reed Sheppard",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385915",
    "name": "Terance Mann",
    "team": "LAC",
    "position": "SG/SF",
    "salary": 5000,
    "proj_fp": 17.3,
    "mins": 18,
    "ownership": null,
    "ceiling": 22,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Terance Mann",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385935",
    "name": "Grayson Allen",
    "team": "PHX",
    "position": "SG/SF",
    "salary": 5000,
    "proj_fp": 26.4,
    "mins": 24,
    "ownership": null,
    "ceiling": 32.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Grayson Allen",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385911",
    "name": "Brandin Podziemski",
    "team": "GSW",
    "position": "PG/SG",
    "salary": 5000,
    "proj_fp": 24.1,
    "mins": 22,
    "ownership": null,
    "ceiling": 29.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Brandin Podziemski",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0
  },
  {
    "player_id_dk": "36385940",
    "name": "Caleb Martin",
    "team": "PHI",
    "position": "PF",
    "salary": 5000,
    "proj_fp": 21.1,
    "mins": 20,
    "ownership": null,
    "ceiling": 26.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Caleb Martin",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0
  }
]
</file>

<file path="fixtures/dk/2024-01-15/mergedPlayers.with_own.test.json">
[
  {
    "player_id_dk": "36385555",
    "name": "Giannis Antetokounmpo",
    "team": "MIL",
    "position": "PF/C",
    "salary": 11000,
    "proj_fp": 59.3,
    "mins": 34,
    "ownership": null,
    "ceiling": 71.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Giannis Antetokounmpo",
    "pos_primary": "PF",
    "pos_secondary": "C",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385559",
    "name": "Joel Embiid",
    "team": "PHI",
    "position": "C",
    "salary": 10500,
    "proj_fp": 62.3,
    "mins": 33,
    "ownership": null,
    "ceiling": 75.4,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Joel Embiid",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385561",
    "name": "Trae Young",
    "team": "ATL",
    "position": "PG",
    "salary": 9900,
    "proj_fp": 48.7,
    "mins": 35,
    "ownership": null,
    "ceiling": 59.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Trae Young",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385564",
    "name": "Ja Morant",
    "team": "MEM",
    "position": "PG",
    "salary": 9500,
    "proj_fp": 46.7,
    "mins": 32,
    "ownership": null,
    "ceiling": 57.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Ja Morant",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385567",
    "name": "Damian Lillard",
    "team": "MIL",
    "position": "PG",
    "salary": 9400,
    "proj_fp": 43.3,
    "mins": 33,
    "ownership": null,
    "ceiling": 53.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Damian Lillard",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385570",
    "name": "Tyrese Haliburton",
    "team": "IND",
    "position": "PG",
    "salary": 9300,
    "proj_fp": 45.7,
    "mins": 34,
    "ownership": null,
    "ceiling": 55.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Tyrese Haliburton",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385573",
    "name": "James Harden",
    "team": "LAC",
    "position": "PG",
    "salary": 9200,
    "proj_fp": 40.3,
    "mins": 31,
    "ownership": null,
    "ceiling": 49.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "James Harden",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385576",
    "name": "Devin Booker",
    "team": "PHX",
    "position": "PG/SG",
    "salary": 9100,
    "proj_fp": 45.8,
    "mins": 33,
    "ownership": null,
    "ceiling": 56.4,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Devin Booker",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385580",
    "name": "Tyrese Maxey",
    "team": "PHI",
    "position": "PG",
    "salary": 9000,
    "proj_fp": 43.9,
    "mins": 32,
    "ownership": null,
    "ceiling": 54.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Tyrese Maxey",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385583",
    "name": "Scottie Barnes",
    "team": "TOR",
    "position": "PF",
    "salary": 8900,
    "proj_fp": 44.9,
    "mins": 32,
    "ownership": null,
    "ceiling": 54.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Scottie Barnes",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385586",
    "name": "LaMelo Ball",
    "team": "CHA",
    "position": "PG",
    "salary": 8800,
    "proj_fp": 46.7,
    "mins": 33,
    "ownership": null,
    "ceiling": 58.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "LaMelo Ball",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385589",
    "name": "Donovan Mitchell",
    "team": "CLE",
    "position": "PG/SG",
    "salary": 8700,
    "proj_fp": 47.1,
    "mins": 33,
    "ownership": null,
    "ceiling": 58,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Donovan Mitchell",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385595",
    "name": "Cade Cunningham",
    "team": "DET",
    "position": "PG",
    "salary": 8600,
    "proj_fp": 41.4,
    "mins": 33,
    "ownership": null,
    "ceiling": 51,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Cade Cunningham",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385593",
    "name": "Alperen Sengun",
    "team": "HOU",
    "position": "C",
    "salary": 8600,
    "proj_fp": 43.9,
    "mins": 31,
    "ownership": null,
    "ceiling": 53.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Alperen Sengun",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385598",
    "name": "Kevin Durant",
    "team": "PHX",
    "position": "PF",
    "salary": 8600,
    "proj_fp": 46.8,
    "mins": 32,
    "ownership": null,
    "ceiling": 57.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Kevin Durant",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385601",
    "name": "Paolo Banchero",
    "team": "ORL",
    "position": "PF",
    "salary": 8500,
    "proj_fp": 42.2,
    "mins": 32,
    "ownership": null,
    "ceiling": 52.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Paolo Banchero",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385604",
    "name": "Stephen Curry",
    "team": "GSW",
    "position": "PG",
    "salary": 8500,
    "proj_fp": 42.9,
    "mins": 32,
    "ownership": null,
    "ceiling": 54.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Stephen Curry",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385607",
    "name": "Kawhi Leonard",
    "team": "LAC",
    "position": "PF",
    "salary": 8400,
    "proj_fp": 41.7,
    "mins": 29,
    "ownership": null,
    "ceiling": 51.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Kawhi Leonard",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385616",
    "name": "Pascal Siakam",
    "team": "IND",
    "position": "SF/PF",
    "salary": 8300,
    "proj_fp": 39.1,
    "mins": 30,
    "ownership": null,
    "ceiling": 48,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Pascal Siakam",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385610",
    "name": "Dejounte Murray",
    "team": "NOP",
    "position": "PG/SG",
    "salary": 8300,
    "proj_fp": 42.8,
    "mins": 32,
    "ownership": null,
    "ceiling": 52.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Dejounte Murray",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385614",
    "name": "Nikola Vucevic",
    "team": "CHI",
    "position": "C",
    "salary": 8300,
    "proj_fp": 40,
    "mins": 30,
    "ownership": null,
    "ceiling": 48.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Nikola Vucevic",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385624",
    "name": "Bam Adebayo",
    "team": "MIA",
    "position": "C",
    "salary": 8200,
    "proj_fp": 41.8,
    "mins": 31,
    "ownership": null,
    "ceiling": 50.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Bam Adebayo",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385620",
    "name": "Paul George",
    "team": "PHI",
    "position": "SF/PF",
    "salary": 8200,
    "proj_fp": 39.2,
    "mins": 30,
    "ownership": null,
    "ceiling": 48.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Paul George",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385634",
    "name": "Jimmy Butler",
    "team": "MIA",
    "position": "SF",
    "salary": 8100,
    "proj_fp": 37.9,
    "mins": 30,
    "ownership": null,
    "ceiling": 46.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jimmy Butler",
    "pos_primary": "SF",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385626",
    "name": "Zion Williamson",
    "team": "NOP",
    "position": "PF",
    "salary": 8100,
    "proj_fp": 40.5,
    "mins": 29,
    "ownership": null,
    "ceiling": 50.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Zion Williamson",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385629",
    "name": "Desmond Bane",
    "team": "MEM",
    "position": "SG/SF",
    "salary": 8000,
    "proj_fp": 41,
    "mins": 31,
    "ownership": null,
    "ceiling": 50.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Desmond Bane",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385640",
    "name": "Jaren Jackson Jr.",
    "team": "MEM",
    "position": "PF/C",
    "salary": 7900,
    "proj_fp": 38.4,
    "mins": 29,
    "ownership": null,
    "ceiling": 47.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jaren Jackson Jr.",
    "pos_primary": "PF",
    "pos_secondary": "C",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385644",
    "name": "Jalen Green",
    "team": "HOU",
    "position": "SG",
    "salary": 7900,
    "proj_fp": 33.9,
    "mins": 30,
    "ownership": null,
    "ceiling": 43.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jalen Green",
    "pos_primary": "SG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385637",
    "name": "Jalen Johnson",
    "team": "ATL",
    "position": "PF",
    "salary": 7800,
    "proj_fp": 36.7,
    "mins": 29,
    "ownership": null,
    "ceiling": 45.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jalen Johnson",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385647",
    "name": "Cam Thomas",
    "team": "BKN",
    "position": "PG/SG",
    "salary": 7800,
    "proj_fp": 32.9,
    "mins": 28,
    "ownership": null,
    "ceiling": 41.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Cam Thomas",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385651",
    "name": "Jarrett Allen",
    "team": "CLE",
    "position": "C",
    "salary": 7800,
    "proj_fp": 37.4,
    "mins": 29,
    "ownership": null,
    "ceiling": 45.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jarrett Allen",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385653",
    "name": "Evan Mobley",
    "team": "CLE",
    "position": "PF/C",
    "salary": 7700,
    "proj_fp": 36.9,
    "mins": 30,
    "ownership": null,
    "ceiling": 45.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Evan Mobley",
    "pos_primary": "PF",
    "pos_secondary": "C",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385657",
    "name": "Lauri Markkanen",
    "team": "UTA",
    "position": "SF/PF",
    "salary": 7500,
    "proj_fp": 40.6,
    "mins": 31,
    "ownership": null,
    "ceiling": 49.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Lauri Markkanen",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385661",
    "name": "Coby White",
    "team": "CHI",
    "position": "PG/SG",
    "salary": 7500,
    "proj_fp": 34.9,
    "mins": 29,
    "ownership": null,
    "ceiling": 43.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Coby White",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385668",
    "name": "Miles Bridges",
    "team": "CHA",
    "position": "PF",
    "salary": 7400,
    "proj_fp": 38.6,
    "mins": 30,
    "ownership": null,
    "ceiling": 47.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Miles Bridges",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385671",
    "name": "Fred VanVleet",
    "team": "HOU",
    "position": "PG",
    "salary": 7400,
    "proj_fp": 39.8,
    "mins": 32,
    "ownership": null,
    "ceiling": 48.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Fred VanVleet",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385679",
    "name": "Deandre Ayton",
    "team": "POR",
    "position": "C",
    "salary": 7400,
    "proj_fp": 36.6,
    "mins": 28,
    "ownership": null,
    "ceiling": 44.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Deandre Ayton",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385681",
    "name": "Brandon Ingram",
    "team": "NOP",
    "position": "SF",
    "salary": 7400,
    "proj_fp": 37.2,
    "mins": 30,
    "ownership": null,
    "ceiling": 46.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Brandon Ingram",
    "pos_primary": "SF",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385674",
    "name": "Darius Garland",
    "team": "CLE",
    "position": "PG",
    "salary": 7300,
    "proj_fp": 33.3,
    "mins": 30,
    "ownership": null,
    "ceiling": 41.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Darius Garland",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385677",
    "name": "Jalen Duren",
    "team": "DET",
    "position": "C",
    "salary": 7300,
    "proj_fp": 34.6,
    "mins": 27,
    "ownership": null,
    "ceiling": 42.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jalen Duren",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385684",
    "name": "Zach LaVine",
    "team": "CHI",
    "position": "SG/SF",
    "salary": 7300,
    "proj_fp": 34.3,
    "mins": 29,
    "ownership": null,
    "ceiling": 42.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Zach LaVine",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385689",
    "name": "Immanuel Quickley",
    "team": "TOR",
    "position": "PG",
    "salary": 7200,
    "proj_fp": 31.5,
    "mins": 28,
    "ownership": null,
    "ceiling": 38.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Immanuel Quickley",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385665",
    "name": "Franz Wagner",
    "team": "ORL",
    "position": "SF",
    "salary": 7200,
    "proj_fp": 34.9,
    "mins": 30,
    "ownership": null,
    "ceiling": 42.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Franz Wagner",
    "pos_primary": "SF",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385695",
    "name": "Nic Claxton",
    "team": "BKN",
    "position": "C",
    "salary": 7100,
    "proj_fp": 32.8,
    "mins": 26,
    "ownership": null,
    "ceiling": 39.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Nic Claxton",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385702",
    "name": "Anfernee Simons",
    "team": "POR",
    "position": "PG/SG",
    "salary": 7100,
    "proj_fp": 37.1,
    "mins": 30,
    "ownership": null,
    "ceiling": 45.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Anfernee Simons",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385692",
    "name": "Josh Giddey",
    "team": "CHI",
    "position": "PG",
    "salary": 7100,
    "proj_fp": 28.4,
    "mins": 28,
    "ownership": null,
    "ceiling": 35.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Josh Giddey",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385697",
    "name": "Khris Middleton",
    "team": "MIL",
    "position": "SG/SF",
    "salary": 7100,
    "proj_fp": 32.5,
    "mins": 27,
    "ownership": null,
    "ceiling": 39.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Khris Middleton",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385711",
    "name": "Tyler Herro",
    "team": "MIA",
    "position": "PG/SG",
    "salary": 7000,
    "proj_fp": 36.1,
    "mins": 29,
    "ownership": null,
    "ceiling": 44.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Tyler Herro",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385706",
    "name": "Brandon Miller",
    "team": "CHA",
    "position": "SG/SF",
    "salary": 7000,
    "proj_fp": 29.4,
    "mins": 27,
    "ownership": null,
    "ceiling": 36.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Brandon Miller",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385715",
    "name": "Andre Drummond",
    "team": "PHI",
    "position": "C",
    "salary": 7000,
    "proj_fp": 22.9,
    "mins": 20,
    "ownership": null,
    "ceiling": 29,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Andre Drummond",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385730",
    "name": "RJ Barrett",
    "team": "TOR",
    "position": "SF/PF",
    "salary": 6900,
    "proj_fp": 33.5,
    "mins": 29,
    "ownership": null,
    "ceiling": 41.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "RJ Barrett",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385717",
    "name": "Myles Turner",
    "team": "IND",
    "position": "C",
    "salary": 6900,
    "proj_fp": 32.7,
    "mins": 27,
    "ownership": null,
    "ceiling": 40,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Myles Turner",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385719",
    "name": "Terry Rozier",
    "team": "MIA",
    "position": "PG",
    "salary": 6900,
    "proj_fp": 36.4,
    "mins": 30,
    "ownership": null,
    "ceiling": 44.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Terry Rozier",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385722",
    "name": "Deni Avdija",
    "team": "POR",
    "position": "SF/PF",
    "salary": 6900,
    "proj_fp": 31.9,
    "mins": 28,
    "ownership": null,
    "ceiling": 39,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Deni Avdija",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385726",
    "name": "CJ McCollum",
    "team": "NOP",
    "position": "PG/SG",
    "salary": 6900,
    "proj_fp": 36,
    "mins": 29,
    "ownership": null,
    "ceiling": 43.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "CJ McCollum",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385734",
    "name": "Jabari Smith Jr.",
    "team": "HOU",
    "position": "PF/C",
    "salary": 6800,
    "proj_fp": 29.9,
    "mins": 26,
    "ownership": null,
    "ceiling": 36.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jabari Smith Jr.",
    "pos_primary": "PF",
    "pos_secondary": "C",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385742",
    "name": "Bradley Beal",
    "team": "PHX",
    "position": "SG/SF",
    "salary": 6700,
    "proj_fp": 33.6,
    "mins": 28,
    "ownership": null,
    "ceiling": 41.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Bradley Beal",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385738",
    "name": "Draymond Green",
    "team": "GSW",
    "position": "PF/C",
    "salary": 6700,
    "proj_fp": 30,
    "mins": 29,
    "ownership": null,
    "ceiling": 36.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Draymond Green",
    "pos_primary": "PF",
    "pos_secondary": "C",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385747",
    "name": "Keyonte George",
    "team": "UTA",
    "position": "PG",
    "salary": 6600,
    "proj_fp": 24,
    "mins": 24,
    "ownership": null,
    "ceiling": 30.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Keyonte George",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385750",
    "name": "Ivica Zubac",
    "team": "LAC",
    "position": "C",
    "salary": 6600,
    "proj_fp": 28.6,
    "mins": 25,
    "ownership": null,
    "ceiling": 35,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Ivica Zubac",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385804",
    "name": "Jakob Poeltl",
    "team": "TOR",
    "position": "C",
    "salary": 6500,
    "proj_fp": 29.9,
    "mins": 26,
    "ownership": null,
    "ceiling": 36.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jakob Poeltl",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385755",
    "name": "Jusuf Nurkic",
    "team": "PHX",
    "position": "C",
    "salary": 6500,
    "proj_fp": 34.1,
    "mins": 27,
    "ownership": null,
    "ceiling": 41.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jusuf Nurkic",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385752",
    "name": "Jonathan Kuminga",
    "team": "GSW",
    "position": "PF",
    "salary": 6500,
    "proj_fp": 27.5,
    "mins": 24,
    "ownership": null,
    "ceiling": 34.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jonathan Kuminga",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385757",
    "name": "Clint Capela",
    "team": "ATL",
    "position": "C",
    "salary": 6400,
    "proj_fp": 31.2,
    "mins": 26,
    "ownership": null,
    "ceiling": 37.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Clint Capela",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385759",
    "name": "Tobias Harris",
    "team": "DET",
    "position": "PF",
    "salary": 6400,
    "proj_fp": 32.4,
    "mins": 28,
    "ownership": null,
    "ceiling": 39.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Tobias Harris",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385762",
    "name": "Amen Thompson",
    "team": "HOU",
    "position": "PG/SF",
    "salary": 6400,
    "proj_fp": 25.2,
    "mins": 22,
    "ownership": null,
    "ceiling": 31.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Amen Thompson",
    "pos_primary": "PG",
    "pos_secondary": "SF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385767",
    "name": "Kelly Oubre Jr.",
    "team": "PHI",
    "position": "SG/SF",
    "salary": 6400,
    "proj_fp": 27.7,
    "mins": 25,
    "ownership": null,
    "ceiling": 34.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Kelly Oubre Jr.",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385774",
    "name": "Jerami Grant",
    "team": "POR",
    "position": "PF",
    "salary": 6300,
    "proj_fp": 32.5,
    "mins": 29,
    "ownership": null,
    "ceiling": 39.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jerami Grant",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385772",
    "name": "Brook Lopez",
    "team": "MIL",
    "position": "C",
    "salary": 6300,
    "proj_fp": 27.9,
    "mins": 25,
    "ownership": null,
    "ceiling": 34.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Brook Lopez",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385783",
    "name": "Dennis Schroder",
    "team": "BKN",
    "position": "PG",
    "salary": 6200,
    "proj_fp": 29,
    "mins": 26,
    "ownership": null,
    "ceiling": 35.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Dennis Schroder",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385777",
    "name": "Zach Edey",
    "team": "MEM",
    "position": "C",
    "salary": 6200,
    "proj_fp": 16.2,
    "mins": 15,
    "ownership": null,
    "ceiling": 21.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Zach Edey",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385779",
    "name": "Caris LeVert",
    "team": "CLE",
    "position": "PG/SG",
    "salary": 6200,
    "proj_fp": 28.7,
    "mins": 26,
    "ownership": null,
    "ceiling": 35.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Caris LeVert",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385786",
    "name": "John Collins",
    "team": "UTA",
    "position": "C",
    "salary": 6100,
    "proj_fp": 30.8,
    "mins": 27,
    "ownership": null,
    "ceiling": 37.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "John Collins",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385792",
    "name": "Collin Sexton",
    "team": "UTA",
    "position": "SG",
    "salary": 6100,
    "proj_fp": 31.2,
    "mins": 27,
    "ownership": null,
    "ceiling": 38,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Collin Sexton",
    "pos_primary": "SG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385788",
    "name": "Bobby Portis",
    "team": "MIL",
    "position": "PF/C",
    "salary": 6100,
    "proj_fp": 28.2,
    "mins": 23,
    "ownership": null,
    "ceiling": 34.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Bobby Portis",
    "pos_primary": "PF",
    "pos_secondary": "C",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385795",
    "name": "Jaden Ivey",
    "team": "DET",
    "position": "PG/SG",
    "salary": 6000,
    "proj_fp": 27.6,
    "mins": 25,
    "ownership": null,
    "ceiling": 34.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jaden Ivey",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385799",
    "name": "Trey Murphy III",
    "team": "NOP",
    "position": "SG/SF",
    "salary": 6000,
    "proj_fp": 28.3,
    "mins": 26,
    "ownership": null,
    "ceiling": 34.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Trey Murphy III",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385814",
    "name": "Bogdan Bogdanovic",
    "team": "ATL",
    "position": "SG",
    "salary": 5900,
    "proj_fp": 30,
    "mins": 27,
    "ownership": null,
    "ceiling": 36.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Bogdan Bogdanovic",
    "pos_primary": "SG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385817",
    "name": "Ben Simmons",
    "team": "BKN",
    "position": "PG",
    "salary": 5900,
    "proj_fp": 26.9,
    "mins": 24,
    "ownership": null,
    "ceiling": 33.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Ben Simmons",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385806",
    "name": "Marcus Smart",
    "team": "MEM",
    "position": "PG/SG",
    "salary": 5900,
    "proj_fp": 28.3,
    "mins": 26,
    "ownership": null,
    "ceiling": 34.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Marcus Smart",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385810",
    "name": "Kelly Olynyk",
    "team": "TOR",
    "position": "C",
    "salary": 5900,
    "proj_fp": 25.2,
    "mins": 23,
    "ownership": null,
    "ceiling": 31.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Kelly Olynyk",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385812",
    "name": "Mark Williams",
    "team": "CHA",
    "position": "C",
    "salary": 5900,
    "proj_fp": 30.6,
    "mins": 25,
    "ownership": null,
    "ceiling": 37.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Mark Williams",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385832",
    "name": "Max Strus",
    "team": "CLE",
    "position": "PF",
    "salary": 5800,
    "proj_fp": 26.8,
    "mins": 25,
    "ownership": null,
    "ceiling": 32.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Max Strus",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385828",
    "name": "Jaime Jaquez Jr.",
    "team": "MIA",
    "position": "SF/PF",
    "salary": 5800,
    "proj_fp": 23.1,
    "mins": 22,
    "ownership": null,
    "ceiling": 28.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jaime Jaquez Jr.",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385820",
    "name": "Norman Powell",
    "team": "LAC",
    "position": "SG/SF",
    "salary": 5800,
    "proj_fp": 20.9,
    "mins": 20,
    "ownership": null,
    "ceiling": 26.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Norman Powell",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385825",
    "name": "Scoot Henderson",
    "team": "POR",
    "position": "PG",
    "salary": 5800,
    "proj_fp": 27.2,
    "mins": 25,
    "ownership": null,
    "ceiling": 33.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Scoot Henderson",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385835",
    "name": "Andrew Wiggins",
    "team": "GSW",
    "position": "SF/PF",
    "salary": 5800,
    "proj_fp": 23.8,
    "mins": 23,
    "ownership": null,
    "ceiling": 29.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Andrew Wiggins",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385839",
    "name": "Patrick Williams",
    "team": "CHI",
    "position": "SF/PF",
    "salary": 5700,
    "proj_fp": 20.5,
    "mins": 21,
    "ownership": null,
    "ceiling": 25.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Patrick Williams",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385843",
    "name": "Jordan Clarkson",
    "team": "UTA",
    "position": "SG",
    "salary": 5600,
    "proj_fp": 30.2,
    "mins": 26,
    "ownership": null,
    "ceiling": 36.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jordan Clarkson",
    "pos_primary": "SG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385857",
    "name": "Cameron Johnson",
    "team": "BKN",
    "position": "SF/PF",
    "salary": 5500,
    "proj_fp": 25.3,
    "mins": 24,
    "ownership": null,
    "ceiling": 31.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Cameron Johnson",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385849",
    "name": "Walker Kessler",
    "team": "UTA",
    "position": "C",
    "salary": 5500,
    "proj_fp": 24.3,
    "mins": 22,
    "ownership": null,
    "ceiling": 30,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Walker Kessler",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385853",
    "name": "Tari Eason",
    "team": "HOU",
    "position": "SF/PF",
    "salary": 5500,
    "proj_fp": 25,
    "mins": 22,
    "ownership": null,
    "ceiling": 30.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Tari Eason",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385861",
    "name": "Tyus Jones",
    "team": "PHX",
    "position": "PG",
    "salary": 5500,
    "proj_fp": 29.6,
    "mins": 27,
    "ownership": null,
    "ceiling": 36,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Tyus Jones",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385872",
    "name": "Buddy Hield",
    "team": "GSW",
    "position": "SG",
    "salary": 5500,
    "proj_fp": 22.9,
    "mins": 22,
    "ownership": null,
    "ceiling": 28.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Buddy Hield",
    "pos_primary": "SG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385846",
    "name": "Lonzo Ball",
    "team": "CHI",
    "position": "PG",
    "salary": 5500,
    "proj_fp": 18.4,
    "mins": 16,
    "ownership": null,
    "ceiling": 23.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Lonzo Ball",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385851",
    "name": "Herbert Jones",
    "team": "NOP",
    "position": "C",
    "salary": 5500,
    "proj_fp": 23.8,
    "mins": 24,
    "ownership": null,
    "ceiling": 29.4,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Herbert Jones",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385864",
    "name": "Onyeka Okongwu",
    "team": "ATL",
    "position": "PF/C",
    "salary": 5400,
    "proj_fp": 23.9,
    "mins": 21,
    "ownership": null,
    "ceiling": 29.5,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Onyeka Okongwu",
    "pos_primary": "PF",
    "pos_secondary": "C",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385875",
    "name": "Wendell Carter Jr.",
    "team": "ORL",
    "position": "C",
    "salary": 5400,
    "proj_fp": 24.2,
    "mins": 23,
    "ownership": null,
    "ceiling": 29.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Wendell Carter Jr.",
    "pos_primary": "C",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385868",
    "name": "Ayo Dosunmu",
    "team": "CHI",
    "position": "PG/SG",
    "salary": 5400,
    "proj_fp": 23.5,
    "mins": 24,
    "ownership": null,
    "ceiling": 29.1,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Ayo Dosunmu",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385882",
    "name": "Bennedict Mathurin",
    "team": "IND",
    "position": "SG/SF",
    "salary": 5200,
    "proj_fp": 24.1,
    "mins": 22,
    "ownership": null,
    "ceiling": 29.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Bennedict Mathurin",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385877",
    "name": "Shaedon Sharpe",
    "team": "POR",
    "position": "PG/SF",
    "salary": 5200,
    "proj_fp": 29,
    "mins": 25,
    "ownership": null,
    "ceiling": 35.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Shaedon Sharpe",
    "pos_primary": "PG",
    "pos_secondary": "SF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385887",
    "name": "Gary Trent Jr.",
    "team": "MIL",
    "position": "SG/SF",
    "salary": 5200,
    "proj_fp": 22.9,
    "mins": 21,
    "ownership": null,
    "ceiling": 28.4,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Gary Trent Jr.",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385892",
    "name": "Kyle Lowry",
    "team": "PHI",
    "position": "PG",
    "salary": 5200,
    "proj_fp": 21.3,
    "mins": 20,
    "ownership": null,
    "ceiling": 26.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Kyle Lowry",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385899",
    "name": "Bruce Brown",
    "team": "TOR",
    "position": "SG/SF",
    "salary": 5100,
    "proj_fp": 22.4,
    "mins": 22,
    "ownership": null,
    "ceiling": 27.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Bruce Brown",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385907",
    "name": "Andrew Nembhard",
    "team": "IND",
    "position": "PG/SG",
    "salary": 5100,
    "proj_fp": 21.5,
    "mins": 20,
    "ownership": null,
    "ceiling": 26.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Andrew Nembhard",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385904",
    "name": "Jalen Suggs",
    "team": "ORL",
    "position": "PG",
    "salary": 5100,
    "proj_fp": 25.1,
    "mins": 23,
    "ownership": null,
    "ceiling": 30.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Jalen Suggs",
    "pos_primary": "PG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385895",
    "name": "Matas Buzelis",
    "team": "CHI",
    "position": "SF/PF",
    "salary": 5100,
    "proj_fp": 16.8,
    "mins": 14,
    "ownership": null,
    "ceiling": 21.4,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Matas Buzelis",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385927",
    "name": "De'Andre Hunter",
    "team": "ATL",
    "position": "SF/PF",
    "salary": 5000,
    "proj_fp": 25,
    "mins": 24,
    "ownership": null,
    "ceiling": 30.8,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "De'Andre Hunter",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385943",
    "name": "Santi Aldama",
    "team": "MEM",
    "position": "PF/C",
    "salary": 5000,
    "proj_fp": 24.9,
    "mins": 23,
    "ownership": null,
    "ceiling": 30.6,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Santi Aldama",
    "pos_primary": "PF",
    "pos_secondary": "C",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385920",
    "name": "Aaron Nesmith",
    "team": "IND",
    "position": "SF/PF",
    "salary": 5000,
    "proj_fp": 22.8,
    "mins": 22,
    "ownership": null,
    "ceiling": 28.2,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Aaron Nesmith",
    "pos_primary": "SF",
    "pos_secondary": "PF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385924",
    "name": "Kentavious Caldwell-Pope",
    "team": "ORL",
    "position": "SG",
    "salary": 5000,
    "proj_fp": 20.6,
    "mins": 21,
    "ownership": null,
    "ceiling": 25.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Kentavious Caldwell-Pope",
    "pos_primary": "SG",
    "pos_secondary": null,
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385931",
    "name": "Reed Sheppard",
    "team": "HOU",
    "position": "PG/SG",
    "salary": 5000,
    "proj_fp": 17.2,
    "mins": 15,
    "ownership": null,
    "ceiling": 21.9,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Reed Sheppard",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385915",
    "name": "Terance Mann",
    "team": "LAC",
    "position": "SG/SF",
    "salary": 5000,
    "proj_fp": 17.3,
    "mins": 18,
    "ownership": null,
    "ceiling": 22,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Terance Mann",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385935",
    "name": "Grayson Allen",
    "team": "PHX",
    "position": "SG/SF",
    "salary": 5000,
    "proj_fp": 26.4,
    "mins": 24,
    "ownership": null,
    "ceiling": 32.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Grayson Allen",
    "pos_primary": "SG",
    "pos_secondary": "SF",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385911",
    "name": "Brandin Podziemski",
    "team": "GSW",
    "position": "PG/SG",
    "salary": 5000,
    "proj_fp": 24.1,
    "mins": 22,
    "ownership": null,
    "ceiling": 29.7,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Brandin Podziemski",
    "pos_primary": "PG",
    "pos_secondary": "SG",
    "own_proj": 0.05
  },
  {
    "player_id_dk": "36385940",
    "name": "Caleb Martin",
    "team": "PHI",
    "position": "PF",
    "salary": 5000,
    "proj_fp": 21.1,
    "mins": 20,
    "ownership": null,
    "ceiling": 26.3,
    "floor": null,
    "source": "fixture",
    "version_ts": null,
    "player_name": "Caleb Martin",
    "pos_primary": "PF",
    "pos_secondary": null,
    "own_proj": 0.05
  }
]
</file>

<file path="fixtures/player_ids.csv">
player_id_dk,player_name,team,pos_primary,pos_secondary
1001,LeBron James,LAL,SF,PF
1002,Stephen Curry,GSW,PG,
</file>

<file path="fixtures/projections.csv">
player_id_dk,salary,proj_fp,mins,ownership,ceiling,floor,source,version_ts
1001,10500,55.5,36,18.2,70,40,Rotogrinders,2025-09-04T17:15:00Z
1002,9800,50.1,34,,65,35,Rotogrinders,2025-09-04T17:15:00Z
</file>

<file path="hooks/useRosterMap.ts">
"use client";

import { useMemo } from "react";

export interface PlayerInfo {
  name?: string;
  team?: string;
  pos?: string;
}

export type RosterMap = Record<string, PlayerInfo>;

interface RosterMapOptions {
  playerMap?: RosterMap;
  lineups?: Array<{
    slots?: Array<{
      player_id_dk?: string;
      name?: string;
      team?: string;
      pos?: string;
    }>;
  }>;
  runId?: string;
}

const rosterMapCache = new Map<string, RosterMap>();

export function useRosterMap(options: RosterMapOptions = {}): {
  getRosterMap: () => RosterMap;
  getPlayerInfo: (playerId: string) => PlayerInfo | undefined;
  hasPlayerName: (playerId: string) => boolean;
} {
  const { playerMap, lineups, runId } = options;

  const memoizedRosterMap = useMemo(() => {
    const cacheKey = runId || "default";

    // Start from any existing cache, but always merge fresh data to avoid stale names
    const base = rosterMapCache.get(cacheKey) || {};
    const rosterMap: RosterMap = { ...base };

    if (playerMap) {
      Object.assign(rosterMap, playerMap);
    }

    if (lineups?.length) {
      for (const lineup of lineups) {
        if (!lineup?.slots?.length) continue;
        for (const slot of lineup.slots) {
          const pid = slot?.player_id_dk;
          if (!pid) continue;
          const current = rosterMap[pid];
          const incoming: PlayerInfo = {
            name: slot?.name ?? current?.name,
            team: slot?.team ?? current?.team,
            pos: slot?.pos ?? current?.pos,
          };
          // Write if new or adds a name/team/pos we didn't have
          if (!current || !current.name || !current.team || !current.pos) {
            rosterMap[pid] = incoming;
          }
        }
      }
    }

    rosterMapCache.set(cacheKey, rosterMap);
    return rosterMap;
  }, [playerMap, lineups, runId]);

  const getRosterMap = () => memoizedRosterMap;

  const getPlayerInfo = (playerId: string): PlayerInfo | undefined => {
    return memoizedRosterMap[playerId];
  };

  const hasPlayerName = (playerId: string): boolean => {
    const info = memoizedRosterMap[playerId];
    return Boolean(info?.name && info.name.trim().length > 0);
  };

  return {
    getRosterMap,
    getPlayerInfo,
    hasPlayerName,
  };
}
</file>

<file path="lib/csv/exportLineups.ts">
import { Row, Column } from "@tanstack/react-table";
import { LineupTableData } from "@/lib/table/columns";

/**
 * Exports visible lineup table data to CSV format
 * @param rows - Filtered table rows to export
 * @param columns - Visible columns to include in export
 */
export function exportLineupsToCSV(
  rows: Row<LineupTableData>[],
  columns: Column<LineupTableData>[]
): void {
  if (rows.length === 0) {
    console.warn("No data to export");
    return;
  }

  // Get visible column headers and IDs
  const visibleColumns = columns.filter(col => col.getIsVisible());
  const headers = visibleColumns.map(col => {
    const header = col.columnDef.header;
    return typeof header === "string" ? header : col.id;
  });
  const columnIds = visibleColumns.map(col => col.id);

  // Create CSV content
  const csvRows: string[] = [];
  
  // Add header row
  csvRows.push(headers.map(escapeCSVField).join(","));
  
  // Add data rows
  for (const row of rows) {
    const values = columnIds.map(columnId => {
      const cellValue = row.getValue(columnId);
      return formatCSVValue(cellValue);
    });
    csvRows.push(values.map(escapeCSVField).join(","));
  }

  // Create and download the CSV file
  const csvContent = csvRows.join("\n");
  const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
  const url = URL.createObjectURL(blob);
  
  // Create download link
  const link = document.createElement("a");
  link.href = url;
  link.download = `lineups-export-${new Date().toISOString().slice(0, 19).replace(/:/g, "-")}.csv`;
  link.style.display = "none";
  
  // Trigger download
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  // Cleanup
  URL.revokeObjectURL(url);
}

/**
 * Formats a value for CSV export
 */
function formatCSVValue(value: unknown): string {
  if (value === null || value === undefined) {
    return "";
  }
  
  if (typeof value === "number") {
    return value.toString();
  }
  
  if (typeof value === "boolean") {
    return value ? "true" : "false";
  }
  
  if (Array.isArray(value)) {
    return value.join("; ");
  }
  
  return String(value);
}

/**
 * Escapes a field value for CSV format
 */
function escapeCSVField(value: string): string {
  if (!value) return "";
  
  // If the value contains comma, quote, or newline, wrap in quotes and escape quotes
  if (value.includes(",") || value.includes('"') || value.includes("\n")) {
    return `"${value.replace(/"/g, '""')}"`;
  }
  
  return value;
}
</file>

<file path="lib/domain/types.ts">
// Domain models for canonical ingest types

export type Player = {
  player_id_dk: string;
  player_name: string;
  team: string; // 3-letter
  pos_primary: string;
  pos_secondary?: string | null;
};

export type Projection = {
  player_id_dk: string; // FK -> players
  salary: number;
  proj_fp: number;
  mins?: number | null;
  ownership?: number | null;
  ceiling?: number | null;
  floor?: number | null;
  source: string;
  version_ts?: string | null; // ISO string if known
};

export type MergedPlayer = Player & Projection;

export type IngestSummary = {
  rows_players: number;
  rows_projections: number;
  dropped_players: number;
  dropped_projections: number;
  unknown_cols_players: string[];
  unknown_cols_projections: string[];
};
</file>

<file path="lib/ingest/__tests__/dk-ingest.spec.ts">
import { describe, it, expect } from "vitest";
import { parseDkPlayers, parseDkProjections, buildCanonicalProjectionsFromDk } from "../../ingest/adapter";
import { normalizePlayers, normalizeProjections, mergePlayersStrict } from "../../ingest/normalize";

const dkPlayersCsv = `Name,ID,Position,TeamAbbrev,Game Info\nStephen Curry,36385604,PG,GSW,GSW@POR 10/23/2024 10:00PM ET\nKevin Durant,36385598,PF,PHX,PHX@LAC 10/23/2024 10:00PM ET`;

const dkProjectionsCsv = `Name,Position,Team,Salary,FPTS,StdDev,Ceiling,Own%,Minutes,FieldFpts\nStephen Curry,PG,GSW,8500,42.9,11.2,54.1,13.4,32,42.9\nKevin Durant,PF,PHX,8600,46.8,10.4,57.2,14.2,32,46.8`;

describe("DK adapter + strict join", () => {
  it("adapts DK rows and merges strictly with zero drop", async () => {
    const repPl = await parseDkPlayers(dkPlayersCsv);
    const players = normalizePlayers(repPl.rows);
    const repPr = await parseDkProjections(dkProjectionsCsv);
    const canPr = buildCanonicalProjectionsFromDk(repPr.rows, players);
    expect(canPr.unmatched.length).toBe(0);
    const projections = normalizeProjections(canPr.rows);
    const strict = mergePlayersStrict(players, projections);
    expect(strict.ok).toBe(true);
    expect(strict.merged.length).toBe(2);
  });
});
</file>

<file path="lib/ingest/__tests__/ingest.spec.ts">
import { describe, it, expect } from "vitest";
import { PlayerCsvSchema, ProjectionCsvSchema, PLAYER_ALIASES, PROJ_ALIASES } from "../../ingest/schemas";
import { parseCsvStream } from "../../ingest/parse";
import { mergePlayers, normalizePlayers, normalizeProjections } from "../../ingest/normalize";

const playersCsv = `player_id_dk,player_name,team,pos_primary,pos_secondary\n1001,LeBron James,LAL,SF,PF\n1002,Stephen Curry,GSW,PG,`;
const projectionsCsv = `player_id_dk,salary,proj_fp,mins,ownership,ceiling,floor,source,version_ts\n1001,10500,55.5,36,18.2,70,40,Rotogrinders,2025-09-04T17:15:00Z\n1002,9800,50.1,34,,65,35,Rotogrinders,2025-09-04T17:15:00Z`;

describe("ingest pipeline", () => {
  it("parses and validates players", async () => {
    const rep = await parseCsvStream(playersCsv, PlayerCsvSchema, lower(PLAYER_ALIASES));
    expect(rep.rowCount).toBe(2);
    expect(rep.droppedRows).toBe(0);
    const players = normalizePlayers(rep.rows);
    expect(players[0].team).toBe("LAL");
  });

  it("parses and validates projections", async () => {
    const rep = await parseCsvStream(projectionsCsv, ProjectionCsvSchema, lower(PROJ_ALIASES));
    expect(rep.rowCount).toBe(2);
    const projections = normalizeProjections(rep.rows);
    expect(projections[0].salary).toBe(10500);
    expect(projections[1].ownership).toBe(null);
  });

  it("merges on player_id_dk", async () => {
    const repPl = await parseCsvStream(playersCsv, PlayerCsvSchema, lower(PLAYER_ALIASES));
    const repPr = await parseCsvStream(projectionsCsv, ProjectionCsvSchema, lower(PROJ_ALIASES));
    const merged = mergePlayers(normalizePlayers(repPl.rows), normalizeProjections(repPr.rows));
    expect(merged.length).toBe(2);
    expect(merged[0]).toHaveProperty("salary");
    expect(merged[0]).toHaveProperty("player_name");
  });
});

function lower<T extends Record<string, any>>(obj: T): T {
  const out: any = {};
  for (const [k, v] of Object.entries(obj)) out[k.toLowerCase()] = v;
  return out as T;
}
</file>

<file path="lib/ingest/adapter.ts">
import { z } from "zod";
import type { ParseReport } from "./parse";
import { parseCsvStream } from "./parse";
import {
  PlayerCsvSchema,
  ProjectionCsvSchema,
  type PlayerCsv,
  type ProjectionCsv,
} from "./schemas";
import { normalizeNameKey, normalizeTeam, splitPositions } from "./aliases";

// ================= DK RAW SCHEMAS + ALIASES =================

const toStr = z
  .string()
  .transform((s) => s.trim())
  .pipe(z.string().min(1));

const toNum = z
  .union([z.number(), z.string()])
  .transform((v) => (typeof v === "number" ? v : Number(String(v).trim())))
  .pipe(z.number().finite());

const toOptNum = z
  .union([z.number(), z.string(), z.null(), z.undefined()])
  .transform((v) => {
    if (v === null || v === undefined) return null;
    const s = String(v).trim().replace(/%$/, "");
    if (s === "" || s.toLowerCase() === "na") return null;
    const n = Number(s);
    return Number.isFinite(n) ? n : null;
  })
  .nullable();

export const DkPlayerSchema = z.object({
  id: toStr,
  name: toStr,
  position: toStr,
  teamabbrev: toStr,
});

export type DkPlayer = z.infer<typeof DkPlayerSchema>;

export const DK_PLAYER_ALIASES: Record<string, keyof DkPlayer> = {
  id: "id",
  "player id": "id",
  name: "name",
  position: "position",
  teamabbrev: "teamabbrev",
  "team abbrev": "teamabbrev",
};

export const DkProjectionSchema = z.object({
  name: toStr,
  position: toStr,
  team: toStr,
  salary: toNum,
  fpts: toNum,
  stddev: toOptNum.optional(),
  ceiling: toOptNum.optional(),
  own_pct: toOptNum.optional(),
  minutes: toOptNum.optional(),
  fieldfpts: toOptNum.optional(),
});

export type DkProjection = z.infer<typeof DkProjectionSchema>;

export const DK_PROJ_ALIASES: Record<string, keyof DkProjection> = {
  // core
  name: "name",
  position: "position",
  team: "team",
  salary: "salary",
  fpts: "fpts",
  // alternates
  stddev: "stddev",
  ceiling: "ceiling",
  "own%": "own_pct",
  own: "own_pct",
  minutes: "minutes",
  mins: "minutes",
  fieldfpts: "fieldfpts",
};

// ================= ADAPTERS (DK → canonical) =================

export async function parseDkPlayers(
  file: File | Blob | string
): Promise<ParseReport<PlayerCsv>> {
  const rep = await parseCsvStream(file, DkPlayerSchema, lower(DK_PLAYER_ALIASES));
  const rows: PlayerCsv[] = rep.rows.map((r) => {
    const [pos_primary, pos_secondary] = splitPositions(r.position);
    return {
      player_id_dk: String(r.id),
      player_name: r.name,
      team: normalizeTeam(r.teamabbrev),
      pos_primary,
      pos_secondary,
    } satisfies PlayerCsv;
  });

  // Validate against canonical schema to honor canonical Zod
  const validated = rows.map((row, idx) => {
    const parsed = PlayerCsvSchema.safeParse(row);
    if (!parsed.success) {
      throw new Error(
        `DK players row ${idx + 1} failed canonical validation: ` +
          parsed.error.issues.map((i) => `${i.path.join(".")}:${i.message}`).join("; ")
      );
    }
    return parsed.data;
  });

  return {
    rows: validated,
    errors: rep.errors,
    rowCount: rep.rowCount,
    droppedRows: rep.droppedRows,
    unknownColumns: rep.unknownColumns,
  };
}

export async function parseDkProjections(
  file: File | Blob | string
): Promise<ParseReport<DkProjection>> {
  return parseCsvStream(file, DkProjectionSchema, lower(DK_PROJ_ALIASES));
}

export function buildCanonicalProjectionsFromDk(
  dkRows: DkProjection[],
  players: PlayerCsv[] | { player_id_dk: string; player_name: string; team: string; pos_primary: string; pos_secondary?: string | null }[]
): { rows: ProjectionCsv[]; unmatched: DkProjection[] } {
  // Build lookup maps
  const byNameTeamPos = new Map<string, string>(); // composite -> player_id_dk
  const makeKey = (name: string, team: string, pos: string) =>
    `${normalizeNameKey(name)}|${normalizeTeam(team)}|${pos.toUpperCase()}`;

  for (const p of players) {
    const k = makeKey(p.player_name, p.team, p.pos_primary);
    if (!byNameTeamPos.has(k)) byNameTeamPos.set(k, p.player_id_dk);
  }

  const rows: ProjectionCsv[] = [];
  const unmatched: DkProjection[] = [];

  for (const r of dkRows) {
    const [pos_primary] = splitPositions(r.position);
    const pid = byNameTeamPos.get(makeKey(r.name, r.team, pos_primary));
    if (!pid) {
      unmatched.push(r);
      continue;
    }
    rows.push({
      player_id_dk: pid,
      salary: Number(r.salary),
      proj_fp: Number(r.fpts),
      mins: r.minutes ?? null,
      ownership: r.own_pct ?? null,
      ceiling: r.ceiling ?? null,
      floor: r.fieldfpts ?? null, // DK sheet has FieldFpts; keep as floor? if absent, null
      source: "DK",
      version_ts: null,
    } satisfies ProjectionCsv);
  }

  // Validate all rows via canonical Zod
  const validated: ProjectionCsv[] = rows.map((row, idx) => {
    const parsed = ProjectionCsvSchema.safeParse(row);
    if (!parsed.success) {
      throw new Error(
        `DK projections row ${idx + 1} failed canonical validation: ` +
          parsed.error.issues.map((i) => `${i.path.join(".")}:${i.message}`).join("; ")
      );
    }
    return parsed.data;
  });

  return { rows: validated, unmatched };
}

function lower<T extends Record<string, any>>(obj: T): T {
  const out: any = {};
  for (const [k, v] of Object.entries(obj)) out[k.toLowerCase()] = v;
  return out as T;
}
</file>

<file path="lib/ingest/aliases.ts">
// Small alias maps for DK quirks and normalization helpers

export const TEAM_ALIASES: Record<string, string> = {
  NO: "NOP",
  NOP: "NOP",
  PHO: "PHX",
  PHX: "PHX",
  SA: "SAS",
  SAS: "SAS",
};

export function normalizeTeam(team: string): string {
  const t = team.trim().toUpperCase();
  return TEAM_ALIASES[t] ?? t;
}

export function normalizeNameKey(name: string): string {
  // Uppercase, remove periods and extra spaces, collapse whitespace
  return name
    .normalize("NFKD")
    .replace(/[\u0300-\u036f]/g, "") // strip diacritics
    .toUpperCase()
    .replace(/\./g, "")
    .replace(/\s+/g, " ")
    .trim();
}

export function splitPositions(pos: string | null | undefined): [string, string | null] {
  if (!pos) return ["", null];
  const parts = String(pos)
    .toUpperCase()
    .split("/")
    .map((s) => s.trim())
    .filter(Boolean);
  const primary = parts[0] ?? "";
  const secondary = parts.length > 1 ? parts[1] : null;
  return [primary, secondary];
}
</file>

<file path="lib/ingest/parse.ts">
import Papa from "papaparse";
import { z } from "zod";

export type ParseReport<T> = {
  rows: T[];
  errors: { row: number; message: string }[];
  rowCount: number;
  droppedRows: number;
  unknownColumns: string[];
};

// Streaming CSV parser with header aliasing + row validation
export function parseCsvStream<T extends z.ZodRawShape>(
  file: File | Blob | string,
  schema: z.ZodObject<T>,
  aliases: Record<string, keyof z.infer<z.ZodObject<T>>>
): Promise<ParseReport<z.infer<typeof schema>>> {
  return new Promise((resolve, reject) => {
    const rows: any[] = [];
    const errors: { row: number; message: string }[] = [];
    let rowCount = 0;
    let droppedRows = 0;
    let unknown: Set<string> | null = null;

    Papa.parse(file, {
      header: true,
      dynamicTyping: false,
      skipEmptyLines: true,
      worker: false,
      step: (results, parser) => {
        const raw = results.data as Record<string, unknown>;
        rowCount += 1;

        // Initialize unknown columns on first row
        if (!unknown) {
          unknown = new Set(
            Object.keys(raw)
              .map((h) => h.trim())
              .filter((h) => !(h.toLowerCase() in aliases))
          );
        }

        // Map aliases → canonical keys
        const mapped: Record<string, unknown> = {};
        for (const [key, val] of Object.entries(raw)) {
          const norm = key.trim().toLowerCase();
          const target = aliases[norm as keyof typeof aliases];
          if (!target) continue;
          mapped[target as string] = val;
        }

        const parsed = schema.safeParse(mapped);
        if (parsed.success) {
          rows.push(parsed.data);
        } else {
          droppedRows += 1;
          const msg = parsed.error.issues.map((i) => `${i.path.join(".")}: ${i.message}`).join("; ");
          errors.push({ row: rowCount, message: msg });
        }
      },
      complete: () => {
        resolve({
          rows: rows as any,
          errors,
          rowCount,
          droppedRows,
          unknownColumns: Array.from(unknown ?? []),
        });
      },
      error: (err) => reject(err),
    });
  });
}
</file>

<file path="lib/opt/__tests__/greedy.spec.ts">
import { describe, it, expect } from "vitest";
import { greedyRandom } from "../algorithms/greedy";
import { loadFixtureMergedPlayers } from "../fixtures";
import { DEFAULT_MAX_PER_TEAM, DEFAULT_SALARY_CAP, DEFAULT_SLOTS, DEFAULT_SEED } from "../config";
import type { OptimizationRequest, OptimizerConfig, RunOptions } from "../types";
import { eligibleForSlot } from "../constraints";

describe("greedy optimizer (fixture)", () => {
  it("produces valid lineups on DK fixture with defaults", () => {
    const { players } = loadFixtureMergedPlayers();
    const config: OptimizerConfig = {
      salaryCap: DEFAULT_SALARY_CAP,
      slots: DEFAULT_SLOTS,
      maxPerTeam: DEFAULT_MAX_PER_TEAM,
    };
    const options: RunOptions = {
      seed: DEFAULT_SEED,
      candidates: 100000,
      teamCap: 0,
      salaryCap: DEFAULT_SALARY_CAP,
      minSalary: 0,
      randomnessPct: 0,
      ownershipPenalty: false,
    };
    const req: OptimizationRequest = {
      players,
      config,
      seed: options.seed,
      targetLineups: 10,
      maxCandidates: options.candidates,
      options,
    };
    // Debug eligible counts per slot
    const counts = DEFAULT_SLOTS.map((s) => players.filter((p) => eligibleForSlot(p as any, s)).length);
    // eslint-disable-next-line no-console
    console.log("slot eligible counts", counts);
    const res = greedyRandom(req);
    // eslint-disable-next-line no-console
    console.log("summary", res.summary);
    expect(res.summary.invalidReasons).toBeDefined();
  });
});
</file>

<file path="lib/opt/algorithms/greedy.ts">
import type { MergedPlayer } from "@/lib/domain/types";
import { eligibleForSlot, withinTeamCap } from "@/lib/opt/constraints";
import type { Lineup, OptimizationRequest, OptimizationResult, Slot } from "@/lib/opt/types";

type ProgressCb = (tried: number, valid: number) => void;

// Simple LCG for deterministic RNG without deps
function makeRng(seed: number): () => number {
  let s = seed >>> 0;
  return () => {
    // Constants from Numerical Recipes
    s = (1664525 * s + 1013904223) >>> 0;
    return (s & 0xffffffff) / 0x100000000;
  };
}

function seedToInt(seed: string | number): number {
  if (typeof seed === "number") return seed;
  let h = 2166136261 >>> 0; // FNV-1a basis
  for (let i = 0; i < seed.length; i++) {
    h ^= seed.charCodeAt(i);
    h = Math.imul(h, 16777619);
  }
  return h >>> 0;
}

function scoreLineup(
  line: Lineup,
  byId: Map<string, MergedPlayer>,
  randomnessPct = 0,
  ownershipPenalty = false
): number {
  let s = 0;
  const noise = Math.max(0, Math.min(100, randomnessPct)) / 100;
  for (const { player_id_dk } of line.slots) {
    const p = byId.get(player_id_dk);
    if (!p) continue;
    let proj = p.proj_fp ?? 0;
    if (noise > 0) {
      // Uniform jitter in ±noise range (deterministic via id hash)
      const h = seedToInt(player_id_dk) % 1000;
      const u = (h / 1000) * 2 - 1; // [-1, 1)
      proj = proj * (1 + u * noise);
    }
    if (ownershipPenalty && p.ownership && p.ownership > 0) {
      // Minimal no-op-ish penalty: subtract a tiny fraction to keep behavior stable
      proj = proj - 0.0 * p.ownership; // intentionally 0 for now (plumb only)
    }
    s += proj;
  }
  return s;
}

function computeSalary(line: Lineup, byId: Map<string, MergedPlayer>): number {
  let s = 0;
  for (const { player_id_dk } of line.slots) s += byId.get(player_id_dk)?.salary ?? 0;
  return s;
}

function pick<T>(arr: T[], rng: () => number): T | undefined {
  if (arr.length === 0) return undefined;
  const i = Math.floor(rng() * arr.length);
  return arr[i];
}

function lineupKey(playerIds: string[]): string {
  return playerIds.slice().sort().join("|");
}

function getId(p: MergedPlayer): string {
  const id = (p as any).player_id_dk ?? null;
  if (id && String(id).trim() !== "") return String(id);
  // Fallback to name for fixtures without DK ID
  return String((p as any).player_name ?? (p as any).name ?? "");
}

export function greedyRandom(
  req: OptimizationRequest,
  onProgress?: ProgressCb
): OptimizationResult {
  const opts = req.options ?? ({} as any);
  const seed = (opts.seed ?? req.seed) as string | number;
  const rng = makeRng(seedToInt(seed));
  const salaryCap = (opts.salaryCap ?? req.config.salaryCap) as number;
  const slots = req.config.slots;
  const maxPerTeam = (opts.teamCap ?? req.config.maxPerTeam) as number | undefined;
  const minSalary = (opts.minSalary ?? 0) as number;
  const randomnessPct = (opts.randomnessPct ?? 0) as number;
  const ownershipPenalty = Boolean(opts.ownershipPenalty);
  const byId = new Map(req.players.map((p) => [getId(p), p] as const));
  const eligibleBySlot: Record<Slot, MergedPlayer[]> = Object.fromEntries(
    slots.map((s) => [s, req.players.filter((p) => eligibleForSlot(p, s))])
  ) as any;

  const target = Math.max(1, req.targetLineups);
  const maxCand = Math.max(
    target * 2,
    (req.maxCandidates ?? opts.candidates ?? target * 200) as number
  );
  let tried = 0;
  let valid = 0;
  const out: Lineup[] = [];
  const seen = new Set<string>();
  const reasons = { salary: 0, slots: 0, teamcap: 0, dup: 0 };

  while (tried < maxCand && out.length < target) {
    tried++;
    const used = new Set<string>();
    const teamCounts: Record<string, number> = {};
    const picked: { slot: Slot; player_id_dk: string }[] = [];
    let ok = true;
    let runningSalary = 0;

    for (const sl of slots) {
      const elig = eligibleBySlot[sl];
      const pool = elig.filter((p) => !used.has(getId(p)) && withinTeamCap(teamCounts, p.team, maxPerTeam));
      // prune by salary: keep only those that fit now
      const affordable = pool.filter((p) => runningSalary + p.salary <= salaryCap);
      const choice = pick(affordable.length > 0 ? affordable : pool, rng);
      if (!choice) {
        ok = false;
        // Diagnose reason if we can
        if (elig.length === 0) reasons.slots++;
        else if (pool.length === 0) reasons.teamcap++;
        else reasons.salary++;
        break;
      }
      used.add(getId(choice));
      teamCounts[choice.team] = (teamCounts[choice.team] ?? 0) + 1;
      runningSalary += choice.salary;
      picked.push({ slot: sl, player_id_dk: getId(choice) });
      if (runningSalary > salaryCap) {
        ok = false;
        reasons.salary++;
        break;
      }
    }

    if (!ok) {
      if (onProgress && tried % 250 === 0) onProgress(tried, valid);
      continue;
    }

    const line: Lineup = {
      id: lineupKey(picked.map((x) => x.player_id_dk)),
      slots: picked,
      salary: runningSalary,
      score: 0,
    };
    if (line.salary > salaryCap) {
      reasons.salary++;
      if (onProgress && tried % 250 === 0) onProgress(tried, valid);
      continue;
    }
    if (minSalary && line.salary < minSalary) {
      reasons.salary++;
      if (onProgress && tried % 250 === 0) onProgress(tried, valid);
      continue;
    }
    const key = line.id;
    if (seen.has(key)) {
      reasons.dup++;
      if (onProgress && tried % 250 === 0) onProgress(tried, valid);
      continue;
    }
    seen.add(key);
    line.score = scoreLineup(line, byId, randomnessPct, ownershipPenalty);
    line.salary = computeSalary(line, byId);
    out.push(line);
    valid++;
    if (onProgress && valid % 25 === 0) onProgress(tried, valid);
  }

  // sort by score desc
  out.sort((a, b) => b.score - a.score);
  const bestScore = out[0]?.score ?? 0;
  return {
    lineups: out,
    summary: {
      tried,
      valid,
      bestScore,
      elapsedMs: 0,
      optionsUsed: {
        seed,
        candidates: maxCand,
        teamCap: maxPerTeam ?? 0,
        salaryCap,
        minSalary: minSalary || 0,
        randomnessPct,
        ownershipPenalty,
      },
      invalidReasons: reasons,
    },
  };
}
</file>

<file path="lib/opt/config.ts">
import type { Slot } from "@/lib/opt/types";

export const DEFAULT_SALARY_CAP = 50000;
export const DEFAULT_SLOTS: Slot[] = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"];
export const DEFAULT_MAX_PER_TEAM = 3;
export const DEFAULT_CANDIDATES = 20000;
export const DEFAULT_MIN_SALARY = 0;
export const DEFAULT_RANDOMNESS_PCT = 0; // 0-100
export const DEFAULT_OWNERSHIP_PENALTY = false;

export const DEFAULT_FIXTURE_DATE = "2024-01-15"; // YYYY-MM-DD
export const USE_FIXTURE_FALLBACK = true;
export const DEFAULT_SEED = `dk-fixture-${DEFAULT_FIXTURE_DATE}`;
</file>

<file path="lib/opt/constraints.ts">
import type { MergedPlayer } from "@/lib/domain/types";
import type { Slot } from "./types";

export const DK_SLOTS: Slot[] = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"];

export function eligibleForSlot(p: MergedPlayer, slot: Slot): boolean {
  // Prefer canonical ingest array; fall back to legacy fields.
  const raw =
    Array.isArray((p as any).pos) && (p as any).pos.length
      ? ((p as any).pos as string[])
      : [ (p as any).pos_primary, (p as any).pos_secondary, (p as any).pos_tertiary ]
          .filter(Boolean) as string[];

  const pos = raw
    .flatMap(s => String(s).split(/[\/ ,]/)) // handle "PG/SG" or comma/space separated
    .map(s => s.trim().toUpperCase())
    .filter(Boolean);

  // If we can't determine a position, only UTIL is permissive.
  if (pos.length === 0) return slot === "UTIL";

  switch (slot) {
    case "PG":
      return pos.includes("PG");
    case "SG":
      return pos.includes("SG");
    case "SF":
      return pos.includes("SF");
    case "PF":
      return pos.includes("PF");
    case "C":
      return pos.includes("C");
    case "G":
      return pos.includes("PG") || pos.includes("SG");
    case "F":
      return pos.includes("SF") || pos.includes("PF");
    case "UTIL":
      return true;
    default:
      return false;
  }
}

export function withinTeamCap(teamCounts: Record<string, number>, team: string, maxPerTeam?: number): boolean {
  if (!maxPerTeam || maxPerTeam <= 0) return true;
  const n = teamCounts[team] ?? 0;
  return n + 1 <= maxPerTeam;
}
</file>

<file path="lib/opt/fixtures.ts">
import type { MergedPlayer } from "@/lib/domain/types";
import { DEFAULT_FIXTURE_DATE } from "@/lib/opt/config";

// Note: static import so it bundles for client with no network fetch
// If you change DEFAULT_FIXTURE_DATE, update this import accordingly.
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore - JSON module import typed below
import mergedPlayers from "../../fixtures/dk/2024-01-15/mergedPlayers.json";

export function loadFixtureMergedPlayers(): { date: string; players: MergedPlayer[] } {
  const arr = (mergedPlayers as any as MergedPlayer[]) ?? [];
  return { date: DEFAULT_FIXTURE_DATE, players: arr };
}
</file>

<file path="lib/opt/run.ts">
"use client";

import type { MergedPlayer } from "@/lib/domain/types";
import type { OptimizationRequest, OptimizationResult, OptimizerConfig, RunOptions, WorkerMessageOut } from "@/lib/opt/types";

export type RunHandle = { cancel: () => void };

async function runViaPython(
  players: any[],
  config: OptimizerConfig,
  seed: string | number,
  targetLineups: number,
  onEvent?: (msg: WorkerMessageOut) => void,
  options?: RunOptions
): Promise<OptimizationResult> {
  const body = {
    site: "dk",
    enginePreferred: "cp_sat",
    constraints: {
      N_lineups: targetLineups,
      max_salary: options?.salaryCap ?? config.salaryCap,
      min_salary: options?.minSalary ?? undefined,
      global_team_limit: options?.teamCap ?? config.maxPerTeam,
      randomness_pct: options?.randomnessPct ?? 0,
      ownership_penalty: options?.ownershipPenalty ? { enabled: true } : { enabled: false },
      cp_sat_params: { random_seed: Number(seed) || 0 },
    },
    players: players.map((p) => ({
      name: p.player_name,
      team: p.team,
      position: [p.pos_primary, p.pos_secondary].filter(Boolean).join("/"),
      salary: p.salary,
      proj_fp: p.proj_fp,
      own_proj: p.ownership ?? null,
      dk_id: p.player_id_dk,
    })),
    seed: Number(seed) || 0,
  };
  onEvent?.({ type: "started", at: Date.now() });
  const t0 = performance.now();
  const resp = await fetch("/api/optimize", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body),
  });
  if (!resp.ok) {
    const txt = await resp.text();
    throw new Error(`Optimizer service error: ${resp.status} ${txt}`);
  }
  const data = await resp.json();
  if (!data.ok) {
    throw new Error(data.error || "Optimization failed");
  }
  const lineups = (data.lineups as any[]).map((lu) => ({
    id: String(lu.lineup_id),
    slots: (lu.players as any[]).map((pl) => ({
      slot: pl.pos,
      player_id_dk: pl.dk_id ?? pl.player_id,
      name: pl.name,
      team: pl.team,
      salary: pl.salary,
      own_proj: pl.own_proj,
      pos: pl.pos,
    })),
    salary: lu.total_salary,
    score: lu.total_proj,
  }));
  const elapsedMs = Math.round(performance.now() - t0);
  onEvent?.({ type: "done", res: { lineups, summary: {
    tried: data.summary?.tried ?? lineups.length,
    valid: data.summary?.valid ?? lineups.length,
    bestScore: lineups.reduce((m, l) => Math.max(m, l.score), 0),
    elapsedMs,
    engineUsed: data.engineUsed,
    diagnostics: data.diagnostics,
    optionsUsed: options,
    invalidReasons: data.summary?.invalidReasons ?? { salary: 0, slots: 0, teamcap: 0, dup: 0 },
  }}});
  return { lineups, summary: {
    tried: data.summary?.tried ?? lineups.length,
    valid: data.summary?.valid ?? lineups.length,
    bestScore: lineups.reduce((m, l) => Math.max(m, l.score), 0),
    elapsedMs,
    engineUsed: data.engineUsed,
    diagnostics: data.diagnostics,
    optionsUsed: options,
    invalidReasons: data.summary?.invalidReasons ?? { salary: 0, slots: 0, teamcap: 0, dup: 0 },
  }};
}

export function runInWorker(
  players: MergedPlayer[],
  config: OptimizerConfig,
  seed: string | number,
  targetLineups: number,
  onEvent?: (msg: WorkerMessageOut) => void,
  options?: RunOptions
): { handle: RunHandle; promise: Promise<OptimizationResult> } {
  const mode = (process.env.NEXT_PUBLIC_DFS_SOLVER_MODE || process.env.DFS_SOLVER_MODE || "python").toLowerCase();
  if (mode === "python") {
    // Orchestrate via server API → Python CLI
    const promise = runViaPython(players as any[], config, seed, targetLineups, onEvent, options);
    return {
      handle: { cancel() { /* noop (not yet supported) */ } },
      promise,
    };
  } else {
    const worker = new Worker(new URL("../../workers/optimizer.worker.ts", import.meta.url));
    let done = false;
    const promise = new Promise<OptimizationResult>((resolve, reject) => {
      worker.onmessage = (ev: MessageEvent<WorkerMessageOut>) => {
        const msg = ev.data;
        onEvent?.(msg);
        if (msg.type === "error") {
          if (!done) {
            done = true;
            worker.terminate();
            reject(new Error(msg.message));
          }
        } else if (msg.type === "done") {
          if (!done) {
            done = true;
            worker.terminate();
            resolve(msg.res);
          }
        }
      };
      const req: OptimizationRequest = {
        players,
        config,
        seed: options?.seed ?? seed,
        targetLineups,
        maxCandidates: options?.candidates,
        options,
      };
      worker.postMessage({ type: "run", req });
    });
    return {
      handle: {
        cancel() {
          if (!done) worker.postMessage({ type: "cancel" });
        },
      },
      promise,
    };
  }
}
</file>

<file path="lib/opt/types.ts">
import type { MergedPlayer } from "@/lib/domain/types";

export type RunOptions = {
  seed: string | number;
  candidates: number; // how many candidates to try (upper bound)
  teamCap: number; // 0 disables
  salaryCap: number;
  minSalary?: number; // optional lower bound
  randomnessPct?: number; // 0-100
  ownershipPenalty?: boolean; // passthrough; may be no-op for now
};

export type Slot =
  | "PG"
  | "SG"
  | "SF"
  | "PF"
  | "C"
  | "G"
  | "F"
  | "UTIL";

export type OptimizerConfig = {
  salaryCap: number;
  slots: Slot[]; // order matters
  maxPerTeam?: number; // optional cap per NBA team
};

export type OptimizationRequest = {
  players: MergedPlayer[];
  config: OptimizerConfig;
  seed: string | number;
  targetLineups: number; // how many valid lineups to produce
  maxCandidates?: number; // optional limit on candidates sampled
  options?: RunOptions; // knobs used for this run (echoed back)
};

export type Lineup = {
  id: string;
  slots: { slot: Slot; player_id_dk: string; name?: string; team?: string; salary?: number; own_proj?: number; pos?: string }[]; // length === config.slots.length
  salary: number;
  score: number; // sum of proj_fp or objective value
};

export type RunSummary = {
  tried: number; // number of candidates evaluated
  valid: number; // number of valid lineups produced
  bestScore: number;
  elapsedMs: number;
  engineUsed?: "cp_sat" | "cbc";
  diagnostics?: unknown;
  usingFixtureDate?: string | null; // present when fixture fallback was used
  optionsUsed?: RunOptions; // echo of options the run used
  invalidReasons?: {
    salary: number;
    slots: number;
    teamcap: number;
    dup: number;
  };
};

export type OptimizationResult = {
  lineups: Lineup[];
  summary: RunSummary;
};

export type WorkerMessageIn =
  | { type: "run"; req: OptimizationRequest }
  | { type: "cancel" };

export type WorkerMessageOut =
  | { type: "started"; at: number }
  | { type: "progress"; tried: number; valid: number }
  | { type: "error"; message: string }
  | { type: "done"; res: OptimizationResult };
</file>

<file path="lib/runs/api.ts">
export type RunListItem = {
  run_id: string;
  slate_key: string;
  module: string;
  created_at?: string;
  path: string;
  meta?: any;
};

export async function listRuns(module: string, slate: string | undefined, limit = 10): Promise<RunListItem[]> {
  const params = new URLSearchParams({ module, limit: String(limit) });
  if (slate && slate.trim() !== "") params.set("slate", slate);
  else params.set("slate", "all");
  const res = await fetch(`/api/runs?${params.toString()}`);
  const data = await res.json();
  try { if (data?.base) console.debug("[runs] base dir:", data.base); } catch {}
  if (!res.ok || !data?.ok) throw new Error(data?.error || `Failed to list runs (${res.status})`);
  return Array.isArray(data.runs) ? data.runs : [];
}

export async function getRun(slate: string, module: string, run_id: string): Promise<any> {
  const res = await fetch(`/api/runs/${encodeURIComponent(slate)}/${encodeURIComponent(module)}/${encodeURIComponent(run_id)}`);
  const data = await res.json();
  if (!res.ok || !data?.ok) throw new Error(data?.error || `Failed to get run (${res.status})`);
  return data.run;
}

export function currentSlateKeyNY(): string {
  try {
    const fmt = new Intl.DateTimeFormat("en-US", {
      timeZone: "America/New_York",
      year: "2-digit",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      hour12: false,
    });
    const parts = Object.fromEntries(fmt.formatToParts(new Date()).map((p) => [p.type, p.value]));
    const yy = String(parts.year).slice(-2);
    const mm = String(parts.month).padStart(2, "0");
    const dd = String(parts.day).padStart(2, "0");
    const hh = String(parts.hour).padStart(2, "0");
    const mi = String(parts.minute).padStart(2, "0");
    const ss = String(parts.second).padStart(2, "0");
    return `${yy}-${mm}-${dd}_${hh}${mi}${ss}`;
  } catch {
    const d = new Date();
    const yy = String(d.getFullYear()).slice(-2);
    const mm = String(d.getMonth() + 1).padStart(2, "0");
    const dd = String(d.getDate()).padStart(2, "0");
    const hh = String(d.getHours()).padStart(2, "0");
    const mi = String(d.getMinutes()).padStart(2, "0");
    const ss = String(d.getSeconds()).padStart(2, "0");
    return `${yy}-${mm}-${dd}_${hh}${mi}${ss}`;
  }
}
</file>

<file path="lib/table/columns.tsx">
import { ColumnDef } from "@tanstack/react-table";
import { Copy } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Tooltip, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip";
import { useRosterMap, type PlayerInfo } from "@/hooks/useRosterMap";

// Extended lineup type with additional metrics from PRP requirements
export interface LineupTableData {
  lineup_id: string;
  score: number;
  salary_used: number;
  salary_left?: number;
  dup_risk?: number;
  own_sum?: number;
  own_avg?: number;
  lev_sum?: number;
  lev_avg?: number;
  num_uniques_in_pool?: number;
  teams_used?: string[] | number;
  proj_pts_sum?: number;
  stack_flags?: string;
  
  // Player slots
  PG?: string;
  SG?: string;
  SF?: string;
  PF?: string;
  C?: string;
  G?: string;
  F?: string;
  UTIL?: string;
}

// Copy ID button component
const CopyIdButton = ({ playerId }: { playerId: string }) => {
  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(playerId);
      // Could add toast notification here
    } catch (err) {
      console.error("Failed to copy:", err);
    }
  };

  return (
    <Button
      variant="ghost"
      size="sm"
      className="h-4 w-4 p-0 ml-1"
      onClick={handleCopy}
      data-testid={`copy-player-${playerId}`}
    >
      <Copy className="h-3 w-3" />
      <span className="sr-only">Copy player ID</span>
    </Button>
  );
};

// Player cell component with name and ID
const PlayerCell = ({ playerId, playerInfo }: { playerId: string; playerInfo?: PlayerInfo }) => {
  const displayName = playerInfo?.name || "";
  const hasName = displayName && displayName.trim().length > 0;

  return (
    <Tooltip>
      <TooltipTrigger asChild>
        <div className="text-left" data-testid={`player-cell-${playerId}`}>
          {hasName ? (
            <>
              <div className="font-medium truncate">{displayName}</div>
              <div className="text-xs text-muted-foreground flex items-center">
                ({playerId})
                <CopyIdButton playerId={playerId} />
              </div>
            </>
          ) : (
            <div className="font-medium flex items-center">
              {playerId}
              <CopyIdButton playerId={playerId} />
            </div>
          )}
        </div>
      </TooltipTrigger>
      <TooltipContent>
        <div>
          {hasName ? (
            <>
              <p className="font-medium">{displayName}</p>
              <p className="text-xs text-muted-foreground">
                {playerInfo?.team && playerInfo?.pos ? `${playerInfo.team} - ${playerInfo.pos}` : ""}
              </p>
              <p className="text-xs">ID: {playerId}</p>
            </>
          ) : (
            <p>Player ID: {playerId}<br />Name unavailable</p>
          )}
        </div>
      </TooltipContent>
    </Tooltip>
  );
};

// Number formatters
const formatScore = (value: number) => 
  new Intl.NumberFormat("en-US", { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(value);

const formatSalary = (value: number) => 
  new Intl.NumberFormat("en-US").format(value);

const formatPercentage = (value: number) => 
  new Intl.NumberFormat("en-US", { style: "percent", minimumFractionDigits: 1 }).format(value);

const formatDecimal3 = (value: number) => 
  new Intl.NumberFormat("en-US", { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(value);

export const createLineupColumns = (rosterMap: Record<string, PlayerInfo> = {}): ColumnDef<LineupTableData>[] => [
  {
    accessorKey: "lineup_id",
    header: "ID",
    size: 80,
    cell: ({ getValue }) => (
      <div className="font-mono text-xs" data-testid="lineup-id-cell">
        {String(getValue()).slice(-8)}
      </div>
    ),
  },
  {
    accessorKey: "score",
    header: "Score",
    size: 80,
    cell: ({ getValue }) => (
      <div className="font-mono tabular-nums text-right" data-testid="score-cell">
        {formatScore(Number(getValue()))}
      </div>
    ),
  },
  {
    accessorKey: "salary_used",
    header: "Salary",
    size: 80,
    cell: ({ getValue }) => (
      <div className="font-mono tabular-nums text-right" data-testid="salary-cell">
        {formatSalary(Number(getValue()))}
      </div>
    ),
  },
  // Removed per UX: Salary Left column hidden in table
  // Removed per UX: Dup Risk column hidden in table
  {
    accessorKey: "own_avg",
    header: "Own %",
    size: 80,
    cell: ({ getValue, row }) => {
      const avg = getValue();
      // Avoid accessing a non-declared column via row.getValue("own_sum").
      // Read directly from the original row to prevent console errors.
      const raw: any = row.original as any;
      const sum = raw?.own_sum;
      const value = avg !== undefined ? avg : sum !== undefined ? Number(sum) / 8 : undefined;
      return (
        <div className="font-mono tabular-nums text-right" data-testid="ownership-cell">
          {value !== undefined ? formatPercentage(Number(value)) : "—"}
        </div>
      );
    },
  },
  {
    accessorKey: "num_uniques_in_pool",
    header: "Uniques",
    size: 80,
    cell: ({ getValue }) => {
      const value = getValue();
      return (
        <div className="font-mono tabular-nums text-right" data-testid="uniques-cell">
          {value !== undefined ? formatSalary(Number(value)) : "—"}
        </div>
      );
    },
  },
  // Removed per UX: Teams column hidden in table
  // Player position columns
  {
    accessorKey: "PG",
    header: "PG",
    size: 140,
    cell: ({ getValue }) => {
      const playerId = String(getValue() || "");
      return playerId ? <PlayerCell playerId={playerId} playerInfo={rosterMap[playerId]} /> : null;
    },
  },
  {
    accessorKey: "SG", 
    header: "SG",
    size: 140,
    cell: ({ getValue }) => {
      const playerId = String(getValue() || "");
      return playerId ? <PlayerCell playerId={playerId} playerInfo={rosterMap[playerId]} /> : null;
    },
  },
  {
    accessorKey: "SF",
    header: "SF", 
    size: 140,
    cell: ({ getValue }) => {
      const playerId = String(getValue() || "");
      return playerId ? <PlayerCell playerId={playerId} playerInfo={rosterMap[playerId]} /> : null;
    },
  },
  {
    accessorKey: "PF",
    header: "PF",
    size: 140,
    cell: ({ getValue }) => {
      const playerId = String(getValue() || "");
      return playerId ? <PlayerCell playerId={playerId} playerInfo={rosterMap[playerId]} /> : null;
    },
  },
  {
    accessorKey: "C",
    header: "C",
    size: 140,
    cell: ({ getValue }) => {
      const playerId = String(getValue() || "");
      return playerId ? <PlayerCell playerId={playerId} playerInfo={rosterMap[playerId]} /> : null;
    },
  },
  {
    accessorKey: "G",
    header: "G",
    size: 140,
    cell: ({ getValue }) => {
      const playerId = String(getValue() || "");
      return playerId ? <PlayerCell playerId={playerId} playerInfo={rosterMap[playerId]} /> : null;
    },
  },
  {
    accessorKey: "F",
    header: "F",
    size: 140,
    cell: ({ getValue }) => {
      const playerId = String(getValue() || "");
      return playerId ? <PlayerCell playerId={playerId} playerInfo={rosterMap[playerId]} /> : null;
    },
  },
  {
    accessorKey: "UTIL",
    header: "UTIL",
    size: 140,
    cell: ({ getValue }) => {
      const playerId = String(getValue() || "");
      return playerId ? <PlayerCell playerId={playerId} playerInfo={rosterMap[playerId]} /> : null;
    },
  },
];
</file>

<file path="lib/ui/a11y.ts">
export function prefersReducedMotion(): boolean {
  if (typeof window === "undefined") return false;
  return window.matchMedia && window.matchMedia("(prefers-reduced-motion: reduce)").matches;
}
</file>

<file path="lib/ui/layout.ts">
export function cn(...classes: Array<string | false | null | undefined>) {
  return classes.filter(Boolean).join(" ");
}

export const srOnly = "sr-only";
</file>

<file path="lib/README.md">
# Lib Module (Shared Utilities)

The lib module provides shared TypeScript utilities, domain types, and common functionality used across the Next.js frontend and integration layers. It serves as the bridge between the React UI and the Python backend processes.

## Overview

The lib module contains:
- **Domain Models**: TypeScript types for DFS entities (players, lineups, projections)
- **State Management**: Zustand stores for application state
- **Data Processing**: CSV parsing, validation, and transformation utilities
- **Integration Adapters**: Frontend adapters for backend processes
- **UI Utilities**: Common UI helpers, constants, and accessibility functions
- **Algorithm Implementations**: Client-side optimization algorithms

## Architecture

```
lib/
├── domain/             # Core domain types and models
├── state/              # Zustand state management stores
├── ingest/             # Data ingestion and parsing utilities
├── opt/                # Optimization algorithms and utilities
├── runs/               # Run management and tracking
├── csv/                # CSV processing and export utilities
├── table/              # Data table utilities and configurations
├── ui/                 # UI helpers, constants, and accessibility
└── utils.ts            # General utility functions
```

## Core Components

### 1. Domain Types (`lib/domain/`)
**Purpose**: Define TypeScript interfaces for all DFS domain entities

**Core Types:**
```typescript
// Player entity
type Player = {
  player_id_dk: string;      // DraftKings player ID
  player_name: string;       // Display name
  team: string;              // 3-letter team code
  pos_primary: string;       // Primary position (PG, SG, etc.)
  pos_secondary?: string;    // Secondary position (optional)
};

// Projection data
type Projection = {
  player_id_dk: string;      // Links to Player
  salary: number;            // DK salary (integer)
  proj_fp: number;           // Projected fantasy points
  mins?: number;             // Projected minutes
  ownership?: number;        // Projected ownership % 
  ceiling?: number;          // Ceiling projection
  floor?: number;            // Floor projection
  source: string;            // Projection source identifier
  version_ts?: string;       // Timestamp (ISO string)
};

// Combined player + projection
type MergedPlayer = Player & Projection;

// Lineup representation
type Lineup = {
  lineup_id: string;
  players: string[];         // Array of 8 dk_player_ids
  total_salary: number;
  proj_fp: number;
  export_csv_row: string;    // DK-formatted lineup string
};
```

**Features:**
- **Strict Typing**: All entities use exact TypeScript interfaces
- **Schema Alignment**: Types match Python pipeline schemas exactly
- **Export Ready**: Include DraftKings formatting specifications

### 2. State Management (`lib/state/`)
**Purpose**: Zustand stores for application-wide state management

#### Ingest Store (`ingest-store.ts`)
```typescript
type IngestState = {
  // File upload state
  uploadedFiles: UploadedFile[];
  uploadProgress: Record<string, number>;
  
  // Parsing state
  parsedPlayers: Player[];
  parsedProjections: Projection[];
  mergedData: MergedPlayer[];
  
  // Validation state
  validationErrors: ValidationError[];
  duplicateHandling: 'keep-first' | 'keep-last' | 'manual';
  
  // Actions
  addFile: (file: File, type: FileType) => void;
  parseCSV: (file: File) => Promise<ParseResult>;
  validateData: () => ValidationResult;
  mergePlayers: () => MergedPlayer[];
};
```

#### Run Store (`run-store.ts`)
```typescript
type RunState = {
  // Active runs tracking
  activeRuns: ActiveRun[];
  runHistory: RunSummary[];
  selectedRun?: string;
  
  // Run management
  startRun: (config: RunConfig) => Promise<string>;
  pollRunStatus: (runId: string) => Promise<RunStatus>;
  loadRunResults: (runId: string) => Promise<RunResults>;
  
  // Results caching
  cachedResults: Record<string, RunResults>;
  cacheTimeout: number;
};
```

**Features:**
- **Reactive Updates**: Automatic UI updates on state changes
- **Persistence**: Local storage integration for form state
- **Optimistic Updates**: Immediate UI feedback with rollback on errors

### 3. Data Ingestion (`lib/ingest/`)
**Purpose**: Frontend data parsing, validation, and normalization

#### CSV Parsing (`parse.ts`)
```typescript
// Parse CSV files with validation
async function parseCSV<T>(
  file: File, 
  schema: ZodSchema<T>,
  options?: ParseOptions
): Promise<ParseResult<T>> {
  // Papa Parse integration with streaming
  // Real-time validation with Zod schemas
  // Error collection and reporting
}

// Normalize column headers
function normalizeHeaders(
  headers: string[], 
  mapping: HeaderMapping
): string[] {
  // Case-insensitive matching
  // Alias resolution
  // Missing field detection
}
```

#### Schema Validation (`schemas.ts`)
```typescript
// Zod schemas matching Python pipeline schemas
const PlayerSchema = z.object({
  player_id_dk: z.string().min(1),
  player_name: z.string().min(1),
  team: z.string().length(3),
  pos_primary: z.enum(['PG', 'SG', 'SF', 'PF', 'C']),
  pos_secondary: z.enum(['G', 'F', 'UTIL']).optional()
});

const ProjectionSchema = z.object({
  player_id_dk: z.string().min(1),
  salary: z.number().int().min(3000).max(11000),
  proj_fp: z.number().min(0),
  mins: z.number().min(0).max(48).optional(),
  ownership: z.number().min(0).max(1).optional()
});
```

### 4. Optimization (`lib/opt/`)
**Purpose**: Client-side optimization algorithms and utilities

#### Greedy Algorithm (`algorithms/greedy.ts`)
```typescript
// Fallback optimization when Python solver unavailable
function greedyOptimize(
  players: MergedPlayer[],
  config: OptimizerConfig
): Lineup[] {
  // Value-based greedy selection
  // Constraint satisfaction
  // Multiple lineup generation
}

// Constraint validation
function validateLineup(
  lineup: Lineup,
  constraints: Constraints
): ValidationResult {
  // Position requirements
  // Salary cap compliance
  // Team limits
}
```

**Features:**
- **Fallback Optimization**: Client-side solver when backend unavailable
- **Constraint Engine**: Full DK constraint validation
- **Performance**: Optimized for browser execution

### 5. Run Management (`lib/runs/`)
**Purpose**: Integration with backend run system

```typescript
// Run discovery and tracking
async function findRuns(
  slateId: string,
  runType?: RunType
): Promise<RunSummary[]> {
  // Query run registry
  // Filter and sort results
  // Return metadata summaries
}

// Run execution interface
async function executeRun(
  process: ProcessType,
  config: ProcessConfig
): Promise<RunHandle> {
  // Start backend process
  // Return polling handle
  // Handle error states
}
```

### 6. CSV Export (`lib/csv/`)
**Purpose**: Export lineup data in DraftKings format

```typescript
// Generate DK-compatible CSV
function exportLineups(
  lineups: Lineup[],
  format: 'dk' | 'fd' | 'sb'
): string {
  // Format player names for platform
  // Correct position ordering
  // Include required metadata
}

// Batch export with validation
function exportLineupsToFile(
  lineups: Lineup[],
  filename: string,
  options: ExportOptions
): void {
  // Client-side file generation
  // Automatic download trigger
  // Error handling and validation
}
```

### 7. UI Utilities (`lib/ui/`)
**Purpose**: Common UI helpers and accessibility functions

#### Accessibility (`a11y.ts`)
```typescript
// Motion preference detection
function prefersReducedMotion(): boolean {
  return window.matchMedia('(prefers-reduced-motion: reduce)').matches;
}

// Screen reader utilities
function announceToScreenReader(message: string): void {
  // Live region updates
  // Polite vs assertive announcements
}
```

#### Constants (`constants.ts`)
```typescript
// UI timing constants
export const SKELETON_MS = 800;
export const DEBOUNCE_MS = 300;
export const TOAST_DURATION = 4000;

// Animation durations
export const MOTION = {
  FAST: 150,
  DEFAULT: 250,
  SLOW: 500
} as const;
```

#### Layout Utilities (`layout.ts`)
```typescript
// Responsive breakpoint utilities
function useBreakpoint(): Breakpoint {
  // Window size detection
  // Responsive state management
}

// Grid layout calculations
function calculateGridColumns(
  containerWidth: number,
  itemWidth: number,
  gap: number
): number {
  // Responsive grid column count
  // Account for gaps and padding
}
```

### 8. Table Utilities (`lib/table/`)
**Purpose**: Data table configurations and utilities

```typescript
// Column definitions for different data types
const LINEUP_COLUMNS: ColumnDef<Lineup>[] = [
  {
    id: 'players',
    header: 'Players',
    cell: ({ row }) => <PlayerCell lineup={row.original} />
  },
  {
    id: 'salary',
    header: 'Salary',
    cell: ({ row }) => formatCurrency(row.original.total_salary)
  }
];

// Table state management
function useTableState<T>(data: T[]) {
  // Sorting, filtering, pagination
  // Column visibility controls
  // Export functionality
}
```

## Integration Patterns

### Backend Communication
The lib module provides consistent patterns for backend integration:

```typescript
// File system integration
async function readParquetFile(path: string): Promise<DataFrame> {
  // Read parquet via API endpoint
  // Parse and validate data
  // Return typed results
}

// Process execution
async function runPythonProcess(
  module: string,
  args: ProcessArgs
): Promise<ProcessResult> {
  // Execute Python CLI command
  // Stream progress updates
  // Handle success/error states
}
```

### Error Handling
```typescript
// Consistent error types
type ProcessError = {
  code: 'VALIDATION_ERROR' | 'PROCESS_ERROR' | 'FILE_ERROR';
  message: string;
  details?: Record<string, any>;
};

// Error boundary integration
function handleProcessError(error: ProcessError): void {
  // Log error details
  // Show user-friendly message
  // Trigger error reporting
}
```

## Testing

### Unit Tests (`__tests__/`)
```typescript
// Example ingest test
describe('CSV Parsing', () => {
  it('should parse valid projections CSV', async () => {
    const file = createTestFile(validProjectionsCSV);
    const result = await parseCSV(file, ProjectionSchema);
    
    expect(result.success).toBe(true);
    expect(result.data).toHaveLength(3);
    expect(result.data[0].player_id_dk).toBe('12345');
  });
});
```

### Integration Tests
```typescript
// End-to-end workflow testing
describe('Optimization Workflow', () => {
  it('should complete full optimization cycle', async () => {
    // Upload files
    const players = await uploadPlayers(testPlayerData);
    
    // Run optimization
    const runId = await startOptimization(testConfig);
    
    // Wait for completion
    const result = await pollUntilComplete(runId);
    
    // Validate outputs
    expect(result.lineups).toHaveLength(5);
    expect(result.lineups[0].players).toHaveLength(8);
  });
});
```

## Dependencies

### Core Dependencies
```json
{
  "zustand": "^5.0.8",           // State management
  "zod": "^3.25.76",             // Schema validation
  "papaparse": "^5.5.3"         // CSV parsing
}
```

### Dev Dependencies
```json
{
  "vitest": "^3.2.4",           // Testing framework  
  "@types/papaparse": "*"       // TypeScript definitions
}
```

## Performance Considerations

### Optimization Strategies
- **Lazy Loading**: Dynamic imports for heavy algorithms
- **Memoization**: Cache expensive calculations with useMemo
- **Streaming**: Process large CSV files in chunks
- **Web Workers**: Offload CPU-intensive tasks

### Memory Management
```typescript
// Efficient data processing
function processLargeDataset<T>(
  data: T[],
  batchSize: number = 1000
): Promise<T[]> {
  // Process in batches to avoid memory spikes
  // Yield control between batches
  // Report progress for user feedback
}
```

## Future Enhancements

### Planned Features
- **Web Workers**: Background processing for optimization
- **IndexedDB**: Client-side data persistence
- **Streaming**: Real-time data processing
- **Service Worker**: Offline functionality

### Performance Improvements
- **Virtual Scrolling**: Handle massive datasets efficiently
- **Incremental Loading**: Load data on demand
- **Compression**: Reduce data transfer sizes
- **Caching**: Intelligent result caching strategies
</file>

<file path="lib/utils.ts">
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="pipeline/ingest/mappings/example_source.yaml">
name: example_source
map:
  DK_ID: dk_player_id
  Name: name
  Team: team
  Pos: pos
  Salary: salary
  Minutes: minutes
  FP: proj_fp
  Ceil: ceil_fp
  Floor: floor_fp
  Own: own_proj
</file>

<file path="pipeline/ingest/mappings/README.md">
Mapping catalog for projection sources → canonical fields.

Structure (YAML):

name: example_source
map:
  # source_header: canonical_field
  DK_ID: dk_player_id
  Name: name
  Team: team
  Pos: pos
  Salary: salary
  Minutes: minutes
  FP: proj_fp
  Ceil: ceil_fp
  Floor: floor_fp
  Own: own_proj

Notes:
- Coercions: salary cast to int (stripping $, ,), others to float when applicable.
- Unknown columns are ignored but preserved as lineage.source_fields.
</file>

<file path="pipeline/ingest/README.md">
# Ingest Front Door (PRP‑1)

## Overview
- Purpose: Normalize raw projection CSVs into a canonical parquet, record lineage and write a run manifest + registry row.
- Inputs: `--projections` (CSV), `--player-ids` (CSV), `--mapping` (YAML header map).
- Outputs under `--out-root` (default `data/`):
  - `reference/players.parquet`: normalized players reference.
  - `projections/raw/{slate_id}__{source}__{uploaded_ts}.parquet`: raw import snapshot.
  - `projections/normalized/{slate_id}__{source}__{uploaded_ts}.parquet`: canonical projections.
  - `runs/ingest/{run_id}/manifest.json`: run manifest (schema: `manifest.schema.yaml`).
  - `registry/runs.parquet`: append‑only registry (schema: `runs_registry.schema.yaml`).

## CLI Usage
Run as a module or call `main()` from Python.

- Module: `python -m pipeline.ingest --help`
- Entry point: `pipeline.ingest.cli:main`

Flags (exact):
- `--slate-id` (required): Slate id like `20251101_NBA`.
- `--source` (required): Source tag, e.g. `manual`, `primary`, `other` or a custom name.
- `--projections` (required): Path to projections CSV.
- `--player-ids` (required): Path to player IDs CSV.
- `--mapping` (required): Path to YAML header mapping.
- `--out-root` (default: `data`): Output root folder.
- `--tag` (repeatable): Freeform labels stored on manifest and registry.
- `--validate` / `--no-validate` (default validate on): Toggle JSON‑Schema validation at runtime.
- `--schemas-root` (default: `pipeline/schemas`): Alternative schemas folder (useful for tests).

Example (uses repo fixtures; safe to copy‑paste):
```
python -m pipeline.ingest \
  --slate-id 20251101_NBA \
  --source primary \
  --projections tests/fixtures/projections_sourceA.csv \
  --player-ids tests/fixtures/player_ids.csv \
  --mapping pipeline/ingest/mappings/example_source.yaml \
  --out-root /tmp/nba_dfs_out \
  --tag PRP-1
```
This prints a preview and lists written artifacts.

## Mapping Catalog
Location: `pipeline/ingest/mappings/*.yaml`

Format (YAML):
```
name: example_source
map:
  # source_header: canonical_field
  DK_ID: dk_player_id
  Name: name
  Team: team
  Pos: pos
  Salary: salary
  Minutes: minutes
  FP: proj_fp
  Ceil: ceil_fp
  Floor: floor_fp
  Own: own_proj
```
Notes:
- Canonical fields used by the normalizer: `dk_player_id`, `name`, `team`, `pos`, `salary`, `minutes`, `proj_fp` (+ optional `ceil_fp`, `floor_fp`, `own_proj`).
- Coercions: `salary` → int (strips `$` and commas); numeric fields → float; `team` uppercased; `pos` uppercased and normalized as `A/B`.
- Unknown columns are ignored for modeling but tracked in lineage.

## Priority Logic
When multiple rows exist for a `dk_player_id`, normalization applies a deterministic dedupe:
- Sort by `updated_ts` ascending and keep the last row → latest timestamp wins.
- For equal `updated_ts`, apply source precedence: `manual` > `primary` > `other` (lower index wins the tie).

## Lineage and Content Hashes
Each normalized row includes a `lineage` object with:
- `mapping`: the header mapping used.
- `source_fields`: ordered list of source headers present.
- `content_sha256`: SHA‑256 of the raw projections CSV at ingest time.
The manifest also captures `inputs[]` with `path` and `content_sha256` for players CSV, projections CSV, and the mapping file.

## Output Paths and Naming
- Raw and normalized filenames: `{slate_id}__{source}__{uploaded_ts}.parquet`, where `uploaded_ts` is UTC ISO `YYYY‑MM‑DDTHH:mm:ss.000Z`.
- Players reference: `reference/players.parquet`.
- Run folder: `runs/ingest/{run_id}` with `manifest.json`.
- Registry: `registry/runs.parquet` appended per run.

`run_id` format: `YYYYMMDD_HHMMSS_<shortsha>` in UTC. The short hash derives from a stable seed: `f"{slate_id}|{source}|{first12(projections_sha)}"`.

## Validation Behavior
- With `--validate` (default), the CLI validates the manifest and a sample registry row against JSON‑Schemas in `--schemas-root`.
- On any validation error, the process exits non‑zero and writes nothing (no parquet, no manifest, no registry row).
- Use `--no-validate` to bypass schema checks (not recommended in CI).

## Troubleshooting
- Schema failure: run with `--schemas-root pipeline/schemas` and ensure your `slate_id`, `run_type`, and timestamps match the schema. Errors are printed to stderr with context.
- Mapping error: `Mapping file ... missing 'map' or 'mapping' dict` → ensure your YAML has a `map:` mapping.
- Unknown headers: harmless; they are ignored for modeling but preserved in `lineage.source_fields`.
- Parquet engine: requires `pyarrow` or `fastparquet` via pandas. If missing, install optional parquet deps.
- No artifacts written: occurs when validation fails or paths are unwritable; check exit code and stderr.

## Quick Test With Fixtures
Two sources are included for testing precedence and normalization:
```
python -m pipeline.ingest \
  --slate-id 20251101_NBA \
  --source primary \
  --projections tests/fixtures/projections_sourceA.csv \
  --player-ids tests/fixtures/player_ids.csv \
  --mapping pipeline/ingest/mappings/example_source.yaml \
  --out-root /tmp/nba_dfs_out
```

Then repeat with `--source manual` and `tests/fixtures/projections_sourceB.csv` to simulate tie‑break scenarios.
</file>

<file path="pipeline/registry/README.md">
# Run Registry

## Purpose
- Central, append‑only index of runs and their primary outputs.
- Written by modules (here: `pipeline.ingest`) after successful validation and artifact writes.

## Storage
- Path: `{out_root}/registry/runs.parquet` (default `data/registry/runs.parquet`).
- Append semantics: one row per run (idempotence by `run_id` is the caller’s responsibility).

## Schema (columns)
- `run_id` (str): `YYYYMMDD_HHMMSS_<shortsha>` minted at runtime.
- `run_type` (str): one of `ingest|optimizer|variants|field|sim`.
- `slate_id` (str): like `20251101_NBA`.
- `status` (str): `success|failed|running|unknown`.
- `primary_outputs` (list[str]): paths to primary artifacts (e.g., normalized projections parquet).
- `metrics_path` (str): path to run metrics JSON (may not exist yet at write time).
- `created_ts` (UTC ISO): creation timestamp of the registry row.
- `tags` (list[str]): optional labels.

Authoritative schema: `pipeline/schemas/runs_registry.schema.yaml`.

## Relationship to Manifest
- Each run also writes `{out_root}/runs/{run_type}/{run_id}/manifest.json` (schema: `manifest.schema.yaml`).
- The manifest captures detailed `inputs[]` (with `content_sha256`) and `outputs[]` with `kind` and `path`.
- Registry serves quick discovery; manifest is the full lineage record.

## How `run_id` Is Minted
- Format: `YYYYMMDD_HHMMSS_<shortsha>` in UTC.
- Seed material (for `ingest`): `f"{slate_id}|{source}|{first12(projections_sha256)}"`.
- Short hash: first 8 chars of a SHA‑1 over the seed material.

## Query Examples
Using pandas to fetch the latest successful run for a slate:
```
import pandas as pd
reg = pd.read_parquet("data/registry/runs.parquet")
latest = (
    reg.query("slate_id == '20251101_NBA' and run_type == 'ingest' and status == 'success'")
       .sort_values("created_ts")
       .tail(1)
)
run_id = latest.iloc[0]["run_id"] if not latest.empty else None
primary_norm = latest.iloc[0]["primary_outputs"][0] if not latest.empty else None
print(run_id, primary_norm)
```

To list most recent N runs per `slate_id`:
```
N = 5
recent = (
    reg.sort_values(["slate_id", "created_ts"]).groupby("slate_id", as_index=False).tail(N)
)
```

## Operational Notes
- Writers should validate against `runs_registry.schema.yaml` before appending (ingest does this by default).
- Registry is not a job queue; it is a log for discovery and auditing.
- Downstream processes should tolerate duplicate `slate_id` entries and select by recency or tags.
</file>

<file path="pipeline/schemas/contest_structure.schema.yaml">
$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://nba-dfs.schemas/contest_structure.schema.yaml"
title: "Contest Structure"
description: "Contest metadata including payout structure and economics. Payout ranges must be contiguous, non-overlapping, and exhaustive so that the total covered ranks equals field_size (validated in higher-level checks)."
version: "0.1.0"
type: object
additionalProperties: false
properties:
  contest_id:
    type: string
  name:
    type: string
  field_size:
    type: integer
    minimum: 1
  payout_curve:
    type: array
    description: "Non-overlapping contiguous ranges; sum of ranks equals field_size (enforce in validator)."
    items:
      type: object
      additionalProperties: false
      properties:
        rank_start: { type: integer, minimum: 1 }
        rank_end: { type: integer, minimum: 1 }
        prize: { $ref: "./common.types.yaml#/definitions/DKDollars" }
      required: [rank_start, rank_end, prize]
  entry_fee:
    $ref: "./common.types.yaml#/definitions/DKDollars"
  rake:
    $ref: "./common.types.yaml#/definitions/Probability"
  site:
    $ref: "./common.types.yaml#/definitions/SiteEnum"
required: [contest_id, name, field_size, payout_curve, entry_fee, rake, site]
examples:
  - contest_id: "DK_20251101_main"
    name: "Main GPP"
    field_size: 100000
    payout_curve:
      - { rank_start: 1, rank_end: 1, prize: 1000000 }
      - { rank_start: 2, rank_end: 2, prize: 100000 }
    entry_fee: 20
    rake: 0.15
    site: "DK"
  - # invalid: field_size 0
    contest_id: "x"
    name: "bad"
    field_size: 0
    payout_curve: []
    entry_fee: 0
    rake: 0.2
    site: "DK"
</file>

<file path="pipeline/schemas/field_metrics.schema.yaml">
$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://nba-dfs.schemas/field_metrics.schema.yaml"
title: "Field Metrics"
description: "Coverage, duplication risk, and pairwise similarity summaries for a field run."
version: "0.1.0"
type: object
additionalProperties: false
properties:
  run_id:
    $ref: "./common.types.yaml#/definitions/RunId"
  coverage:
    type: object
    additionalProperties: false
    properties:
      per_player:
        type: array
        items:
          type: object
          additionalProperties: false
          properties:
            dk_player_id: { type: string }
            rate: { $ref: "./common.types.yaml#/definitions/Probability" }
          required: [dk_player_id, rate]
      per_team:
        type: array
        items:
          type: object
          additionalProperties: false
          properties:
            team: { $ref: "./common.types.yaml#/definitions/TeamCode" }
            rate: { $ref: "./common.types.yaml#/definitions/Probability" }
          required: [team, rate]
      per_position:
        type: array
        items:
          type: object
          additionalProperties: false
          properties:
            position: { $ref: "./common.types.yaml#/definitions/PosEnum" }
            rate: { $ref: "./common.types.yaml#/definitions/Probability" }
          required: [position, rate]
  duplication_risk:
    type: number
    minimum: 0
    maximum: 1
  pairwise_jaccard:
    type: array
    description: "Optional: histogram of Jaccard similarities between pairs of lineups."
    items: { $ref: "./common.types.yaml#/definitions/HistogramBin" }
required: [run_id]
examples:
  - run_id: "run_20251101_field_001"
    coverage:
      per_player: [ { dk_player_id: "p1", rate: 0.2 } ]
      per_team: [ { team: "BOS", rate: 0.3 } ]
      per_position: [ { position: "PG", rate: 0.5 } ]
    duplication_risk: 0.15
    pairwise_jaccard: [ { bin_start: 0.0, bin_end: 0.1, count: 10 } ]
  - # invalid: duplication_risk > 1
    run_id: "20251101_180000_deadbee"
    duplication_risk: 1.5
    coverage: {}
</file>

<file path="pipeline/schemas/field.schema.yaml">
$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://nba-dfs.schemas/field.schema.yaml"
title: "Field (Entrants)"
description: "Simulated or observed field of entrants with lineups for a given run."
version: "0.1.0"
type: object
additionalProperties: false
properties:
  run_id:
    $ref: "./common.types.yaml#/definitions/RunId"
  entrant_id:
    oneOf:
      - type: integer
        minimum: 0
      - type: string
  origin:
    type: string
    enum: [variant, optimizer, external]
  variant_id:
    type: string
  lineup_id:
    type: string
  players:
    type: array
    minItems: 8
    maxItems: 8
    items: { type: string }
  export_csv_row:
    type: string
    description: "DK lineup upload CSV row preview. See README 'DK CSV Export' for header/order."
  weight:
    type: number
    minimum: 0
    default: 1
required: [run_id, entrant_id, origin, players, export_csv_row]
examples:
  - run_id: "run_20251101_field_001"
    entrant_id: 1
    origin: "variant"
    variant_id: "V1"
    players: ["p1","p2","p3","p4","p5","p6","p7","p8"]
    export_csv_row: "..."
    weight: 1
  - # invalid: negative weight
    run_id: "run_20251101_field_001"
    entrant_id: "A"
    origin: "optimizer"
    lineup_id: "L1"
    players: ["p1","p2","p3","p4","p5","p6","p7","p8"]
    export_csv_row: "..."
    weight: -1
  - # invalid: players length not 8
    run_id: "20251101_180000_deadbee"
    entrant_id: 2
    origin: "external"
    players: ["p1","p2"]
    export_csv_row: "..."
</file>

<file path="pipeline/schemas/metrics.schema.yaml">
$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://nba-dfs.schemas/metrics.schema.yaml"
title: "Run Metrics"
description: "Aggregated portfolio metrics computed from a simulation run."
version: "0.1.0"
type: object
additionalProperties: false
properties:
  run_id:
    $ref: "./common.types.yaml#/definitions/RunId"
  aggregates:
    type: object
    additionalProperties: false
    properties:
      roi_mean: { type: number }
      sharpe: { type: number }
      sortino: { type: number }
      duplication_risk: { $ref: "./common.types.yaml#/definitions/Probability" }
      entropy: { type: number, minimum: 0 }
    required: [roi_mean, duplication_risk, entropy]
required: [run_id, aggregates]
examples:
  - run_id: "20251101_180000_deadbee"
    aggregates:
      roi_mean: -0.08
      sharpe: 0.7
      sortino: 1.1
      duplication_risk: 0.15
      entropy: 4.2
</file>

<file path="pipeline/schemas/optimizer_lineups.schema.yaml">
$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://nba-dfs.schemas/optimizer_lineups.schema.yaml"
title: "Optimizer Lineups"
description: "Lineups produced by the optimizer for a specific run."
version: "0.1.0"
type: object
additionalProperties: false
properties:
  run_id:
    $ref: "./common.types.yaml#/definitions/RunId"
  lineup_id:
    type: string
    minLength: 1
  players:
    type: array
    minItems: 8
    maxItems: 8
    items:
      type: string
      description: "dk_player_id"
  dk_positions_filled:
    type: array
    minItems: 8
    maxItems: 8
    items:
      type: object
      additionalProperties: false
      properties:
        slot:
          type: string
          description: "Roster slot label (e.g., PG, SG, SF, PF, C, G, F, UTIL)."
        position:
          $ref: "./common.types.yaml#/definitions/PosEnum"
      required: [slot, position]
  total_salary:
    allOf:
      - $ref: "./common.types.yaml#/definitions/DKDollars"
      - type: integer
        maximum: 50000
  proj_fp:
    type: number
    minimum: 0
  ceil_fp:
    type: number
    minimum: 0
    description: ">= proj_fp (enforce in validator)."
  own_proj:
    $ref: "./common.types.yaml#/definitions/Probability"
  export_csv_row:
    type: string
    description: "Exact DK lineup upload CSV row preview. See README 'DK CSV Export' for header/order."
  tags:
    type: array
    items: { type: string }
required: [run_id, lineup_id, players, dk_positions_filled, total_salary, proj_fp, export_csv_row]
examples:
  - run_id: "run_20251101_opt_001"
    lineup_id: "L1"
    players: ["p1","p2","p3","p4","p5","p6","p7","p8"]
    dk_positions_filled:
      - { slot: "PG", position: "PG" }
      - { slot: "SG", position: "SG" }
      - { slot: "SF", position: "SF" }
      - { slot: "PF", position: "PF" }
      - { slot: "C",  position: "C" }
      - { slot: "G",  position: "G" }
      - { slot: "F",  position: "F" }
      - { slot: "UTIL", position: "UTIL" }
    total_salary: 49800
    proj_fp: 278.4
    ceil_fp: 310.0
    own_proj: 0.12
    export_csv_row: "PG p1,SG p2,SF p3,PF p4,C p5,G p6,F p7,UTIL p8"
  - # invalid: wrong number of players
    run_id: "run_20251101_opt_001"
    lineup_id: "L2"
    players: ["p1"]
    dk_positions_filled: []
    total_salary: 60000
    proj_fp: 100
    export_csv_row: "..."
    ceil_fp: 50
</file>

<file path="pipeline/schemas/optimizer_metrics.schema.yaml">
$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://nba-dfs.schemas/optimizer_metrics.schema.yaml"
title: "Optimizer Metrics"
description: "Aggregates and distributions describing optimizer outputs."
version: "0.1.0"
type: object
additionalProperties: false
properties:
  run_id:
    $ref: "./common.types.yaml#/definitions/RunId"
  aggregates:
    type: object
    additionalProperties: false
    properties:
      mean_proj: { type: number }
      median_proj: { type: number }
      stdev_proj: { type: number, minimum: 0 }
      salary_utilization_mean: { type: number, minimum: 0, maximum: 50000 }
      dupe_risk_index: { $ref: "./common.types.yaml#/definitions/Probability" }
    required: [mean_proj, median_proj, stdev_proj, salary_utilization_mean]
  distributions:
    type: object
    additionalProperties: false
    properties:
      proj_fp:
        type: array
        items:
          $ref: "./common.types.yaml#/definitions/HistogramBin"
      total_salary:
        type: array
        items:
          $ref: "./common.types.yaml#/definitions/HistogramBin"
required: [run_id, aggregates]
examples:
  - run_id: "run_20251101_opt_001"
    aggregates:
      mean_proj: 275.0
      median_proj: 274.0
      stdev_proj: 10.5
      salary_utilization_mean: 49750
      dupe_risk_index: 0.18
    distributions:
      proj_fp: [ { bin_start: 250, bin_end: 260, count: 10 } ]
      total_salary: [ { bin_start: 48000, bin_end: 50000, count: 25 } ]
  - # invalid: missing required aggregates fields
    run_id: "20251101_180000_deadbee"
    aggregates:
      mean_proj: 275.0
    distributions: {}
</file>

<file path="pipeline/schemas/players.schema.yaml">
$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://nba-dfs.schemas/players.schema.yaml"
title: "Players"
description: "Canonical players table. One row per player (per global universe, not per slate)."
version: "0.1.0"
type: object
additionalProperties: false
properties:
  dk_player_id:
    type: string
    description: "DraftKings player ID (string)"
    minLength: 1
  name:
    type: string
    minLength: 1
  team:
    $ref: "./common.types.yaml#/definitions/TeamCode"
  pos_eligible:
    type: array
    minItems: 1
    maxItems: 3
    items:
      $ref: "./common.types.yaml#/definitions/PosEnum"
  notes:
    type: string
  first_seen_ts:
    $ref: "./common.types.yaml#/definitions/UtcTimestamp"
  last_seen_ts:
    $ref: "./common.types.yaml#/definitions/UtcTimestamp"
required: [dk_player_id, name, team, pos_eligible, first_seen_ts, last_seen_ts]
examples:
  - dk_player_id: "123456"
    name: "Jayson Tatum"
    team: "BOS"
    pos_eligible: [SF, PF]
    first_seen_ts: "2024-10-01T00:00:00.000Z"
    last_seen_ts: "2024-11-01T00:00:00.000Z"
  - # invalid: empty name, bad team
    dk_player_id: "999"
    name: ""
    team: "B"
    pos_eligible: [PG]
    first_seen_ts: "2024-10-01T00:00:00.000Z"
    last_seen_ts: "2024-11-01T00:00:00.000Z"
</file>

<file path="pipeline/schemas/portfolio.schema.yaml">
$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://nba-dfs.schemas/portfolio.schema.yaml"
title: "Portfolio Summary"
description: "Optional portfolio-level summary schema (not yet used by tests)."
version: "0.1.0"
type: object
additionalProperties: false
properties:
  run_id:
    $ref: "./common.types.yaml#/definitions/RunId"
  summary:
    type: object
    additionalProperties: false
    properties:
      n_entrants: { type: number, minimum: 0 }
      n_worlds: { type: number, minimum: 0 }
      total_prize: { type: number, minimum: 0 }
required: [run_id]
examples:
  - run_id: "20251101_180000_deadbee"
    summary:
      n_entrants: 100
      n_worlds: 10000
      total_prize: 150000
</file>

<file path="pipeline/schemas/projections_normalized.schema.yaml">
$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://nba-dfs.schemas/projections_normalized.schema.yaml"
title: "Projections (Normalized)"
description: "Canonical normalized projections for a slate and source. One row per (slate_id, dk_player_id, source). Priority: latest updated_ts wins; tie-breaker precedence: manual > primary_source > other (documented; enforce in adapter/validator)."
version: "0.1.0"
type: object
additionalProperties: false
properties:
  slate_id:
    $ref: "./common.types.yaml#/definitions/SlateId"
  source:
    type: string
    minLength: 1
  dk_player_id:
    type: string
    minLength: 1
  name:
    type: string
    minLength: 1
  team:
    $ref: "./common.types.yaml#/definitions/TeamCode"
  pos:
    $ref: "./common.types.yaml#/definitions/DKCompositePosition"
  salary:
    allOf:
      - $ref: "./common.types.yaml#/definitions/DKDollars"
      - type: integer
        minimum: 3000
        maximum: 20000
  minutes:
    type: number
    minimum: 0
    maximum: 60
  proj_fp:
    type: number
    minimum: 0
    maximum: 120
  ceil_fp:
    type: number
    minimum: 0
    maximum: 120
    description: ">= proj_fp; enforce in validator."
  floor_fp:
    type: number
    minimum: 0
    maximum: 120
    description: "<= proj_fp; enforce in validator."
  own_proj:
    $ref: "./common.types.yaml#/definitions/Probability"
  updated_ts:
    $ref: "./common.types.yaml#/definitions/UtcTimestamp"
  lineage:
    type: object
    additionalProperties: false
    properties:
      mapping:
        type: object
        additionalProperties: true
      source_fields:
        type: array
        items: { type: string }
      content_sha256:
        $ref: "./common.types.yaml#/definitions/SHA256"
    required: [mapping, source_fields, content_sha256]
required: [slate_id, source, dk_player_id, name, team, pos, salary, minutes, proj_fp, updated_ts, lineage]
examples:
  - slate_id: "20251101_NBA"
    source: "primary_source"
    dk_player_id: "123456"
    name: "Jayson Tatum"
    team: "BOS"
    pos: "SF/PF"
    salary: 9800
    minutes: 36
    proj_fp: 48.2
    ceil_fp: 60.0
    floor_fp: 35.0
    own_proj: 0.22
    updated_ts: "2025-11-01T16:00:00.000Z"
    lineage:
      mapping: { Name: "name", Team: "team" }
      source_fields: ["Name", "Team", "Salary", "FP"]
      content_sha256: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
  - # invalid: salary too low, pos bad
    slate_id: "20251101_NBA"
    source: "primary_source"
    dk_player_id: "123456"
    name: "Jayson Tatum"
    team: "BOS"
    pos: "SF/XX"
    salary: 2500
    minutes: 36
    proj_fp: 48.2
    updated_ts: "2025-11-01T16:00:00.000Z"
    lineage:
      mapping: {}
      source_fields: []
      content_sha256: "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
</file>

<file path="pipeline/schemas/projections_raw.schema.yaml">
$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://nba-dfs.schemas/projections_raw.schema.yaml"
title: "Projections (Raw Upload)"
description: "Lenient typed container for raw projection uploads. Free-form 'raw' payload is preserved."
version: "0.1.0"
type: object
additionalProperties: false
properties:
  slate_id:
    $ref: "./common.types.yaml#/definitions/SlateId"
  source:
    type: string
    minLength: 1
  uploaded_ts:
    $ref: "./common.types.yaml#/definitions/UtcTimestamp"
  csv_filename:
    type: string
    minLength: 1
  raw:
    type: object
    description: "Free-form key/values from original upload."
    additionalProperties: true
  content_sha256:
    $ref: "./common.types.yaml#/definitions/SHA256"
required: [slate_id, source, uploaded_ts, csv_filename, raw, content_sha256]
examples:
  - slate_id: "20251101_NBA"
    source: "manual"
    uploaded_ts: "2025-11-01T15:00:00.000Z"
    csv_filename: "projections_20251101.csv"
    raw:
      columns: ["Name", "Team", "Salary", "FP"]
      sample_row: { Name: "Player A", Team: "BOS", Salary: 5400, FP: 32.1 }
    content_sha256: "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
  - # invalid: missing raw
    slate_id: "20251101_NBA"
    source: "manual"
    uploaded_ts: "2025-11-01T15:00:00.000Z"
    csv_filename: "projections_20251101.csv"
    content_sha256: "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
</file>

<file path="pipeline/schemas/runs_registry.schema.yaml">
$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://nba-dfs.schemas/runs_registry.schema.yaml"
title: "Runs Registry"
description: "Registry of runs and their primary outputs."
version: "0.2.0"
type: object
additionalProperties: false
properties:
  run_id:
    $ref: "./common.types.yaml#/definitions/RunId"
  run_type:
    $ref: "./common.types.yaml#/definitions/RunTypeEnum"
  slate_id:
    $ref: "./common.types.yaml#/definitions/SlateId"
  status:
    type: string
    enum: [success, failed, running, unknown]
  primary_outputs:
    type: array
    items: { type: string }
  metrics_path:
    type: string
  created_ts:
    $ref: "./common.types.yaml#/definitions/UtcTimestamp"
  tags:
    type: array
    items: { type: string }
required: [run_id, run_type, slate_id, status, created_ts]
examples:
  - run_id: "20251101_180000_deadbee"
    run_type: "ingest"
    slate_id: "20251101_NBA"
    status: "success"
    primary_outputs: ["runs/25-11-01_180000/optimizer/artifacts/lineups.parquet"]
    metrics_path: "runs/25-11-01_180000/optimizer/artifacts/metrics.json"
    created_ts: "2025-11-01T18:00:00.000Z"
    tags: ["main"]
  - # invalid: status not in enum
    run_id: "20251101_180000_deadbee"
    run_type: "optimizer"
    slate_id: "20251101_NBA"
    status: "done"
    created_ts: "2025-11-01T18:00:00.000Z"
</file>

<file path="pipeline/schemas/sim_metrics.schema.yaml">
$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://nba-dfs.schemas/sim_metrics.schema.yaml"
title: "Simulation Metrics"
description: "Aggregates and convergence stats for a simulation run."
version: "0.1.0"
type: object
additionalProperties: false
properties:
  run_id:
    $ref: "./common.types.yaml#/definitions/RunId"
  aggregates:
    type: object
    additionalProperties: false
    properties:
      ev_mean: { type: number }
      roi_mean: { type: number }
      sharpe: { type: number }
      sortino: { type: number }
    required: [ev_mean, roi_mean]
  convergence:
    type: object
    additionalProperties: false
    properties:
      rmse_by_batch:
        type: array
        items:
          $ref: "./common.types.yaml#/definitions/HistogramBin"
required: [run_id]
examples:
  - run_id: "run_20251101_sim_001"
    aggregates:
      ev_mean: -1.5
      roi_mean: -0.075
      sharpe: 0.6
    convergence:
      rmse_by_batch: [ { bin_start: 0, bin_end: 1000, count: 1 } ]
  - # invalid: aggregates missing required keys
    run_id: "20251101_180000_deadbee"
    aggregates: { ev_mean: 0.0 }
    convergence: {}
</file>

<file path="pipeline/schemas/sim_results.schema.yaml">
$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://nba-dfs.schemas/sim_results.schema.yaml"
title: "Simulation Results"
description: "Per-world results for each entrant within a simulation run."
version: "0.1.0"
type: object
additionalProperties: false
properties:
  run_id:
    $ref: "./common.types.yaml#/definitions/RunId"
  world_id:
    type: integer
    minimum: 0
  entrant_id:
    oneOf:
      - type: integer
        minimum: 0
      - type: string
  score:
    type: number
  rank:
    type: integer
    minimum: 1
  prize:
    $ref: "./common.types.yaml#/definitions/DKDollars"
  components:
    type: object
    additionalProperties: true
  seed:
    type: integer
    minimum: 0
required: [run_id, world_id, entrant_id, score, rank, prize]
examples:
  - run_id: "run_20251101_sim_001"
    world_id: 0
    entrant_id: 1
    score: 298.5
    rank: 1200
    prize: 0
    components: { player_scores: { p1: 45.2 } }
    seed: 42
  - # invalid: rank must be >= 1
    run_id: "20251101_180000_deadbee"
    world_id: 0
    entrant_id: 1
    score: 100
    rank: 0
    prize: 0
    components: {}
</file>

<file path="pipeline/schemas/slates.schema.yaml">
$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://nba-dfs.schemas/slates.schema.yaml"
title: "Slates"
description: "NBA slates metadata."
version: "0.1.0"
type: object
additionalProperties: false
properties:
  slate_id:
    $ref: "./common.types.yaml#/definitions/SlateId"
  site:
    $ref: "./common.types.yaml#/definitions/SiteEnum"
  game_date:
    $ref: "./common.types.yaml#/definitions/GameDate"
  created_ts:
    $ref: "./common.types.yaml#/definitions/UtcTimestamp"
required: [slate_id, site, game_date, created_ts]
examples:
  - slate_id: "20251101_NBA"
    site: "DK"
    game_date: "2025-11-01"
    created_ts: "2025-11-01T12:00:00.000Z"
  - # invalid: wrong slate pattern
    slate_id: "25-11-01_NBA"
    site: "DK"
    game_date: "2025-11-01"
    created_ts: "2025-11-01T12:00:00.000Z"
</file>

<file path="pipeline/schemas/variant_catalog.schema.yaml">
$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://nba-dfs.schemas/variant_catalog.schema.yaml"
title: "Variant Catalog"
description: "Catalog of lineup variants derived from an optimizer run."
version: "0.1.0"
type: object
additionalProperties: false
properties:
  run_id:
    $ref: "./common.types.yaml#/definitions/RunId"
  variant_id:
    type: string
  parent_lineup_id:
    type: string
  players:
    type: array
    minItems: 8
    maxItems: 8
    items: { type: string }
  variant_params:
    type: object
    additionalProperties: true
  export_csv_row:
    type: string
  hamming_vs_parent:
    type: integer
    minimum: 0
    maximum: 8
  salary_delta:
    type: integer
  proj_delta:
    type: number
required: [run_id, variant_id, parent_lineup_id, players, variant_params, export_csv_row]
examples:
  - run_id: "run_20251101_var_001"
    variant_id: "V1"
    parent_lineup_id: "L1"
    players: ["p1","p2","p3","p4","p5","p6","p7","p8"]
    variant_params: { swap: { out: "p3", in: "p9" } }
    export_csv_row: "..."
    hamming_vs_parent: 1
    salary_delta: 300
    proj_delta: -1.2
  - # invalid: not enough players
    run_id: "20251101_180000_deadbee"
    variant_id: "V_bad"
    parent_lineup_id: "L1"
    players: ["p1","p2"]
    variant_params: {}
    export_csv_row: "..."
    hamming_vs_parent: 9
</file>

<file path="pipeline/schemas/variant_metrics.schema.yaml">
$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://nba-dfs.schemas/variant_metrics.schema.yaml"
title: "Variant Metrics"
description: "Aggregates and coverage metrics for variant catalogs."
version: "0.1.0"
type: object
additionalProperties: false
properties:
  run_id:
    $ref: "./common.types.yaml#/definitions/RunId"
  aggregates:
    type: object
    additionalProperties: false
    properties:
      chalk_index: { $ref: "./common.types.yaml#/definitions/Probability" }
      entropy: { type: number, minimum: 0 }
    required: [chalk_index, entropy]
  coverage:
    type: object
    additionalProperties: false
    properties:
      per_player:
        type: array
        items:
          type: object
          additionalProperties: false
          properties:
            dk_player_id: { type: string }
            inclusion_rate: { $ref: "./common.types.yaml#/definitions/Probability" }
          required: [dk_player_id, inclusion_rate]
      per_position:
        type: array
        items:
          type: object
          additionalProperties: false
          properties:
            position: { $ref: "./common.types.yaml#/definitions/PosEnum" }
            rate: { $ref: "./common.types.yaml#/definitions/Probability" }
          required: [position, rate]
required: [run_id, aggregates]
examples:
  - run_id: "run_20251101_var_001"
    aggregates:
      chalk_index: 0.35
      entropy: 4.2
    coverage:
      per_player: [ { dk_player_id: "p1", inclusion_rate: 0.4 } ]
      per_position: [ { position: "PG", rate: 0.5 } ]
  - # invalid: aggregates missing
    run_id: "20251101_180000_deadbee"
    coverage: {}
</file>

<file path="pipeline/README.md">
# Pipeline Module

The pipeline module provides the foundational data infrastructure for the NBA-DFS system, handling data ingestion, normalization, validation, and run registry management.

## Overview

The pipeline module is the first stage of the DFS data pipeline, responsible for:
- Ingesting raw CSV projections from various sources
- Normalizing data into canonical schemas with strict validation
- Managing run registry for tracking all pipeline executions
- Providing JSON Schema definitions for all data contracts
- Ensuring data lineage and content integrity

## Architecture

```
pipeline/
├── ingest/           # Data ingestion and normalization
├── schemas/          # JSON Schema definitions (SSOT)
├── registry/         # Run registry management
└── io/              # File I/O utilities and validation
```

## Data Flow

1. **Raw CSV Input** → **Ingest Module** → **Normalized Parquet**
2. **Normalized Data** → **Processes** → **Optimized Results**
3. **All Operations** → **Registry** → **Audit Trail**

## Core Components

### Ingest (`pipeline/ingest/`)
- **Purpose**: Convert raw projection CSVs into normalized parquet files
- **Input**: CSV projections + player IDs + YAML mapping
- **Output**: Normalized parquet with lineage tracking
- **CLI**: `python -m pipeline.ingest`

**Key Features:**
- Header mapping via YAML configuration files
- Deterministic priority resolution for duplicate players
- Content hashing for change detection
- Strict schema validation

**Example Usage:**
```bash
python -m pipeline.ingest \
  --slate-id 20251101_NBA \
  --source primary \
  --projections data/raw/projections.csv \
  --player-ids data/raw/player_ids.csv \
  --mapping pipeline/ingest/mappings/dk_source.yaml \
  --out-root data
```

### Schemas (`pipeline/schemas/`)
- **Purpose**: Define strict JSON Schema contracts for all data
- **Format**: JSON Schema Draft 2020-12
- **Validation**: `additionalProperties: false` for strict enforcement

**Core Schemas:**
- `players.schema.yaml` - Player reference data
- `projections_normalized.schema.yaml` - Canonical projections
- `optimizer_lineups.schema.yaml` - Optimized lineup results
- `manifest.schema.yaml` - Run metadata
- `runs_registry.schema.yaml` - Registry entries

**Data Types:**
- **Timestamps**: UTC ISO-8601 (`2025-11-01T23:59:59.000Z`)
- **Money**: Integers in DK dollars (`5400`, never floats)
- **IDs**: `dk_player_id` flows end-to-end
- **Positions**: `{PG, SG, SF, PF, C, G, F, UTIL}`

### Registry (`pipeline/registry/`)
- **Purpose**: Track all pipeline runs for audit and discovery
- **Storage**: Append-only parquet file
- **Schema**: `runs_registry.schema.yaml`

**Run ID Format**: `YYYYMMDD_HHMMSS_<shorthash>`
- Example: `20251101_180000_deadbee`
- UTC timestamps for consistency
- Short hash for uniqueness

### I/O (`pipeline/io/`)
- **Purpose**: File operations and validation utilities
- **Features**: Content hashing, path validation, parquet I/O
- **Used by**: All pipeline components

## Integration with DFS Pipeline

The pipeline module serves as the foundation for the entire DFS workflow:

```
Raw CSVs → [Pipeline/Ingest] → Normalized Data
                                    ↓
[Processes/Optimizer] → Lineups → [Processes/Variants] → Variant Catalog
                                    ↓
[Processes/Field Sampler] → Contest Field → [Processes/GPP Simulator] → Results
```

**Key Integration Points:**
- **Output**: Normalized projections consumed by optimizer
- **Registry**: All processes append to shared registry
- **Schemas**: All outputs validated against pipeline schemas
- **Lineage**: Content hashing enables change detection

## Dependencies

### External Dependencies
```python
# Core data processing
"pandas"         # DataFrame operations
"pyarrow"        # Parquet I/O
"pydantic"       # Data validation

# Schema validation  
"jsonschema"     # JSON Schema validation
"pyyaml"         # YAML configuration parsing
```

### Internal Dependencies
- **No internal dependencies** - Pipeline is foundational layer
- **Consumed by**: `processes/` modules for normalized data

## Configuration

### Mapping Files (`pipeline/ingest/mappings/*.yaml`)
Define how source CSV headers map to canonical fields:

```yaml
name: dk_primary_source
map:
  DK_ID: dk_player_id
  Name: name
  Team: team
  Pos: pos
  Salary: salary
  Minutes: minutes
  FP: proj_fp
  Own: own_proj
```

### Schema Validation
- **Default**: All operations validate against schemas
- **Override**: Use `--no-validate` to disable (not recommended)
- **Location**: `pipeline/schemas/` (configurable with `--schemas-root`)

## Output Structure

```
data/
├── reference/
│   └── players.parquet              # Player reference data
├── projections/
│   ├── raw/
│   │   └── {slate_id}__{source}__{ts}.parquet     # Raw import snapshot
│   └── normalized/
│       └── {slate_id}__{source}__{ts}.parquet     # Canonical projections
├── runs/
│   └── ingest/
│       └── {run_id}/
│           └── manifest.json        # Run metadata
└── registry/
    └── runs.parquet                 # Append-only run log
```

## Quality Assurance

### Data Integrity
- **Content Hashing**: SHA-256 of all inputs tracked
- **Schema Validation**: Strict JSON Schema enforcement
- **Duplicate Resolution**: Deterministic priority rules
- **Lineage Tracking**: Source mapping and transformation history

### Error Handling
- **Validation Failures**: Exit non-zero, write nothing
- **Missing Dependencies**: Graceful fallbacks where possible
- **Schema Mismatches**: Detailed error reporting with context

## Development

### Running Tests
```bash
pytest tests/pipeline/ -v
```

### Code Quality
```bash
ruff check pipeline/
black pipeline/
mypy pipeline/
```

### Adding New Schemas
1. Create `{name}.schema.yaml` in `pipeline/schemas/`
2. Include version, description, and strict validation
3. Add to schema test suite
4. Update this README

## Troubleshooting

**Common Issues:**

1. **Schema Validation Errors**
   - Check field names match schema exactly
   - Verify data types (int vs float, string formats)
   - Ensure required fields are present

2. **Mapping Configuration**
   - Verify YAML syntax in mapping files
   - Check header names match source CSV exactly
   - Confirm canonical field names are correct

3. **File Permissions**
   - Ensure output directories are writable
   - Check file locks on Windows systems

4. **Python Environment**
   - Use `uv sync --extra dev` for complete setup
   - Verify Python 3.11+ is active
   - Check that parquet dependencies are installed

## Future Enhancements

- **Stream Processing**: Real-time ingestion capabilities
- **Multi-Site Support**: Extend beyond DraftKings
- **Advanced Validation**: Cross-table constraint checking
- **Performance Optimization**: Batch processing for large datasets
</file>

<file path="processes/api/__init__.py">
"""API layer exposing orchestrator runs via HTTP."""

from .app import app

__all__ = ["app"]
</file>

<file path="processes/dk_export/__init__.py">
"""DK export from simulator outputs."""
</file>

<file path="processes/gpp_sim/io_schemas.py">
from __future__ import annotations

from pathlib import Path
from typing import Any

import pandas as pd
from pydantic import BaseModel


class LineupRow(BaseModel):  # type: ignore[misc]
    lineup_id: str
    player_ids: str
    entry_count: int | None = 1
    proj_points: float


class ContestRow(BaseModel):  # type: ignore[misc]
    place: int
    payout: float
    buy_in: float | None = None
    rake: float | None = None


def load_lineups(path: Path) -> pd.DataFrame:
    df = pd.read_csv(path)
    out_rows: list[dict[str, Any]] = []
    for rec in df.to_dict(orient="records"):
        row = LineupRow(**rec)
        out_rows.append(row.model_dump())
    return pd.DataFrame(out_rows)


def load_contest(path: Path) -> pd.DataFrame:
    if path.suffix.lower() == ".json":
        import json

        data = json.loads(path.read_text(encoding="utf-8"))
        payouts = data.get("payout_table") or data.get("payouts")
        if payouts is None:
            raise ValueError("contest JSON missing payout_table")
        rows = [
            {
                "place": i + 1,
                "payout": float(p),
                "buy_in": data.get("buy_in"),
                "rake": data.get("rake"),
            }
            for i, p in enumerate(payouts)
        ]
        return pd.DataFrame(rows)
    df = pd.read_csv(path)
    out_rows: list[dict[str, Any]] = []
    for rec in df.to_dict(orient="records"):
        row = ContestRow(**rec)
        out_rows.append(row.model_dump())
    return pd.DataFrame(out_rows)
</file>

<file path="processes/metrics/__init__.py">
"""Metrics Framework (PRP-8)

Computes schema-validated metrics artifacts from prior simulation runs.

Entrypoints live in `adapter.py` and `__main__.py`.
"""
</file>

<file path="processes/metrics/__main__.py">
from .adapter import main

if __name__ == "__main__":  # pragma: no cover
    raise SystemExit(main())
</file>

<file path="processes/metrics/README.md">
Metrics Framework (PRP-8)

Purpose
- Compute standardized, schema-validated metrics artifacts for evaluation and downstream use.

Inputs
- References an existing sim run via `--from-sim <run_id>`.
- Discovers inputs from the sim run manifest (field and contest).

Outputs
- `metrics.parquet` under `runs/metrics/<run_id>/artifacts/` (run-scoped aggregates).
- `manifest.json` (validated) and registry append (`registry/runs.parquet`).

CLI
- Run: `uv run python -m processes.metrics --from-sim <run_id> --out-root data`
- Options:
  - `--schemas-root`: override schema directory (defaults to repo `pipeline/schemas`).
  - `--seed`: deterministic salt; included in run_id hash.
  - `--tag`: optional string tag recorded in manifest/registry.
  - `--verbose`: print discovery and computed metrics summary.

Contracts
- Validates against:
  - `pipeline/schemas/metrics.schema.yaml` (run-level aggregates: ROI, Sharpe, Sortino, duplication risk, entropy).
  - `pipeline/schemas/manifest.schema.yaml` and `pipeline/schemas/runs_registry.schema.yaml` prior to any write.
- Deterministic `run_id`: `YYYYMMDD_HHMMSS_<sha8>` where hash is derived from sim run and inputs.

Notes
- Duplication risk and entropy are computed from the field input (lineup strings). If unavailable, they default to 0.0.
- ROI/Sharpe/Sortino use contest `entry_fee` from sim’s contest input; defaults to 20 when not present.
</file>

<file path="processes/optimizer/_legacy/solvers/__init__.py">
# Package marker for legacy solver stub
</file>

<file path="processes/optimizer/_legacy/solvers/cpsat_solver.py">
from ..cpsat_solver import *  # re-export real implementations for legacy import path
</file>

<file path="processes/optimizer/_legacy/dk_data_loader.py">
from __future__ import annotations

from dataclasses import dataclass
from typing import Any
import pandas as pd


@dataclass
class DKDataConfig:
    pass


def load_dk_strict_projections(projections_path: str, player_ids_path: str | None = None) -> pd.DataFrame:
    # Minimal stub: allow reading CSV and return as-is
    return pd.read_csv(projections_path)


def validate_dk_strict_data(df: pd.DataFrame) -> dict[str, Any]:
    return {"ok": True}
</file>

<file path="processes/optimizer/_legacy/dk_strict_results.py">
from __future__ import annotations

from typing import Any, List, Tuple
import pandas as pd


def lineups_to_grid_df(lineups: Any, sport: str = "nba", site: str = "dk") -> pd.DataFrame:
    # Minimal stub: produce a tabular DataFrame with slot columns
    rows = []
    for lu in (lineups or []):
        row = {"TotalSalary": getattr(lu, "total_salary", None), "TotalProj": getattr(lu, "total_proj", None)}
        for idx, pl in enumerate(getattr(lu, "players", [])[:8]):
            row[f"S{idx+1}"] = getattr(pl, "dk_id", None) or getattr(pl, "player_id", None)
        rows.append(row)
    return pd.DataFrame(rows)


def validate_grid_df(df: pd.DataFrame, sport: str = "nba", site: str = "dk") -> Tuple[pd.DataFrame, List[str]]:
    return df, []


def grid_df_to_dk_csv(df: pd.DataFrame, sport: str = "nba", site: str = "dk") -> str:
    return df.to_csv(index=False)
</file>

<file path="processes/optimizer/_legacy/README.md">
# Legacy Optimizer — Inventory and De‑UI Plan (PRP‑2L)

## Purpose
Document the legacy optimizer UI module set, identify reusable compute surfaces, and mark UI touch‑points for later extraction. No behavior changes here.

## Files and Roles
- `optimize.py` (UI shell)
  - Streamlit app: page config, controls, AG Grid display, exports, run comparison, retention utilities.
  - Bridges projections → `nba_optimizer_functional.optimize_with_diagnostics` and optional DK‑strict flows.
  - Manages session state, spinners, and download buttons.
- `nba_optimizer_functional.py` (compute core)
  - Functional API wrapping CBC/CP‑SAT solvers, constraints application, ownership penalty models, DK‑ID attachment.
  - Public entrypoints: `optimize`, `optimize_with_diagnostics`, `optimize_dk_strict`, `optimize_to_dk_csv`, `optimize_dk_strict_to_csv`.
  - Helpers: validation (`validate_projections`), ID attachment (`attach_player_ids_if_available`), data shaping (`convert_projections_to_players`), solver problem builder (`build_problem`).
- `cpsat_solver.py` (solver helpers)
  - Ownership penalty curve helpers, input contract checks, objective telemetry for CP‑SAT path.
  - No UI dependencies.
- `pruning.py` (candidate reduction)
  - Safe pruning of candidate sets prior to solve.
  - No UI dependencies.

## Stable Symbols for Reuse (API candidates)
- `nba_optimizer_functional.optimize_with_diagnostics(projections_df, constraints, seed, site, player_ids_df=None, engine="cbc") -> (lineups: List[Lineup], diagnostics: Dict)`
- `nba_optimizer_functional.optimize(projections_df, constraints, seed, site, player_ids_df=None, engine="cbc") -> List[Lineup]`
- `nba_optimizer_functional.optimize_dk_strict(projections_path, constraints, seed, player_ids_path=None, engine="cbc") -> (lineups, diagnostics)`
- `nba_optimizer_functional.optimize_to_dk_csv(projections_df, constraints, seed, player_ids_df=None) -> str`
- `nba_optimizer_functional.optimize_dk_strict_to_csv(projections_path, constraints, seed, player_ids_path=None, engine="cbc") -> str`
- `nba_optimizer_functional.validate_projections(df, site) -> None`
- `nba_optimizer_functional.attach_player_ids_if_available(df, site, ids_df) -> (df, diag)`
- `nba_optimizer_functional.convert_projections_to_players(df, proj_min) -> List[Dict]`
- `nba_optimizer_functional.build_problem(players, constraints, site, override_coeffs=None) -> (problem, var_index, lp_vars, base_obj)`

These provide a usable compute surface for a headless adapter.

## Data Contracts (summary)
Inputs (projections_df expected columns)
- Required: `name` (str), `team` (str, uppercase 2–4), `position` (str like `PG` or `PG/SG`), `salary` (int), `proj_fp` (float)
- Optional: `own_proj` (float in [0,1] or percent), `stddev` (float), `minutes` (float), `dk_id` (str|int)

Outputs
- Lineups: `List[Lineup]` (structs: players with `player_id`, `name`, `team`, `positions`, `salary`, `proj`, `own_proj?`, `dk_id?`)
- Diagnostics: `{success_rate, warnings, errors, normalization: {ownership{...}}, ownership_penalty{...}, engine, …}`
- CSV helpers return DK importable CSV (header `PG,SG,SF,PF,C,G,F,UTIL`).

## Known UI Dependencies and Side Effects
- `optimize.py` uses `streamlit` and `st_aggrid`; contains large AG Grid CSS, `st.sidebar`, `st.download_button`, `st.session_state` mutations, and file export helpers.
- Path hack: `sys.path.append(os.path.join(__file__, '../../'))` to import `backend.*`.
- UI‑only exports for CSV previews and run retention tooling.

## De‑UI Extraction Plan (summary)
Target headless API (for PRP‑2 adapter):
- `run_optimizer(projections_df, constraints: dict, seed: int, site: str, engine: str) -> (lineups_df, metrics_dict)`
  - Map to: `optimize_with_diagnostics` + `lineups_to_grid_df` for tabular form.
  - Diagnostics passed through; ownership penalty telemetry included when present.
Minimal refactors in PRP‑2
- Move/export helpers `build_optimizer_grid_options`, `export_optimizer_results`, AG Grid CSS → UI package; not needed headless.
- Remove `sys.path` hacks; import via proper package path.
- Replace `st.cache_*` with local memoization (if needed) or remove.
- Isolate file I/O (CSV export, retention) behind adapter functions.

## UI Touchpoints Tagged
- Streamlit imports and session state usage in `optimize.py`.
- AG Grid imports and CSS in `optimize.py`.
- Path hack in `optimize.py`.
- Download buttons and export helpers in `optimize.py`.

No runtime behavior changed.
</file>

<file path="processes/optimizer/_legacy/types.py">
from ..types import *  # re-export common types for legacy module imports
</file>

<file path="processes/optimizer/__init__.py">
"""Optimizer process package.

Contains a thin, headless adapter around a solver implementation. The adapter
does not import Streamlit and is testable in isolation. A legacy UI lives in
`processes/optimizer/_legacy` but is not used by the adapter.
"""
</file>

<file path="processes/optimizer/__main__.py">
from .adapter import main

if __name__ == "__main__":  # pragma: no cover
    raise SystemExit(main())
</file>

<file path="processes/optimizer/README.md">
Optimizer Adapter (Headless)

Purpose
- Headless adapter wrapping a solver entrypoint to produce optimizer artifacts.
- Consumes normalized projections, maps config→constraints, runs solver, writes
  Parquet artifacts and a manifest, and appends to a runs registry.

CLI
- Example:
  - `uv run python -m processes.optimizer --slate-id 20251101_NBA --site DK --config configs/optimizer.yaml --engine cbc --seed 42 --out-root data --tag PRP-2`
  - Add `--verbose` to emit a single-line warning for unknown config keys.

Inputs
- Projections search order (first match wins):
  - `<in_root>/processed/current/projections.parquet`
  - `<in_root>/projections/normalized/<slate_id>.parquet`
  - `<in_root>/projections/normalized/<slate_id>/projections.parquet`
  - `<in_root>/processed/<slate_id>/projections.parquet`
- Override with `--input <path>`.

Config → Constraints
- Pass-through keys supported:
  - `num_lineups`, `max_salary`, `min_salary`, `lock`, `ban`, `exposure_caps`,
    `stacking`, `group_rules`, `ownership_penalty`, `uniques`, `max_from_team`,
    `min_from_team`, `position_rules`, `randomness`, `cp_sat_params`, `preset`,
    `dk_strict_mode`.
- Unknown keys preserved to allow downstream expansion; unsupported keys are ignored by the solver.

Outputs
- `<out_root>/runs/optimizer/<run_id>/lineups.parquet` (optimizer_lineups)
- `<out_root>/runs/optimizer/<run_id>/metrics.parquet` (optimizer_metrics)
- `<out_root>/runs/optimizer/<run_id>/manifest.json` (manifest)
- Appends `<out_root>/registry/runs.parquet`

Notes
- The adapter itself does not import Streamlit. A legacy solver can be used via
  lazy import. Prefer setting `OPTIMIZER_IMPL` to a headless function.
- `export_csv_row` is a preview string in DK slot order (PG,SG,SF,PF,C,G,F,UTIL),
  not an upload-ready DK CSV row; adapters/tooling perform DK export mapping.
  Tests assert header order only.
</file>

<file path="processes/orchestrator/README.md">
# Orchestrator (PRP-6)

Coordinates an end-to-end run: ingest → optimizer → variants → field → sim.

## CLI

```
python -m processes.orchestrator \
  --slate-id 20250101_NBA \
  --config /path/to/orchestrator.yaml \
  --out-root /tmp/dfs-run \
  --schemas-root pipeline/schemas \
  --validate \
  --verbose
```

Flags:
- `--config`: Single YAML/JSON file with per-stage blocks under keys
  `ingest`, `optimizer`, `variants`, `field`, `sim`.
- `--config-kv`: Optional inline overrides `key=value` (applied at the top level).
- `--dry-run`: Print the planned stages with resolved inputs, no execution.
- `--schemas-root`: Schema folder (defaults to repo `pipeline/schemas`).
- `--validate`: Toggle JSON-schema validation (passed down to stages).
- `--verbose`: Print a brief per-stage summary.

## Config Structure (example)

```yaml
slate_id: "20250101_NBA"
seeds:
  optimizer: 1
  variants: 2
  field: 3
  sim: 4

ingest:
  source: manual
  projections: /path/to/projections.csv
  player_ids: /path/to/player_ids.csv
  mapping: pipeline/ingest/mappings/example_source.yaml

optimizer:
  site: DK
  engine: cbc
  config: { num_lineups: 5 }

variants:
  config: { num_variants: 10 }

field:
  config: { field_size: 50 }

sim:
  config: { num_trials: 100 }
  # Either provide an explicit contest object or a path to a file
  contest:
    field_size: 50
    payout_curve:
      - { rank_start: 1, rank_end: 1, prize: 500 }
      - { rank_start: 2, rank_end: 2, prize: 200 }
      - { rank_start: 3, rank_end: 3, prize: 100 }
    entry_fee: 20
    rake: 0.15
    site: DK
```

## Artifacts

- `runs/orchestrator/<bundle_id>/bundle.json`: summary linking child run_ids and outputs.
- Stages write their own manifests and registry entries.

Note: Run Registry schema today does not include parent/child linkage; this
orchestrator does not mutate schema. Child runs are discoverable via their own
manifests and the bundle manifest.
</file>

<file path="processes/variants/__init__.py">
"""Variant adapter package.

Headless glue to run a variant builder against optimizer lineups and produce
schema-valid artifacts (variant_catalog, variant_metrics) with manifest and
registry updates.
"""
</file>

<file path="processes/variants/__main__.py">
from __future__ import annotations

# ruff: noqa: I001

from processes.variants.adapter import main


if __name__ == "__main__":  # pragma: no cover
    raise SystemExit(main())
</file>

<file path="processes/variants/README.md">
Variant Adapter

- Purpose: Headless adapter wrapping a variant builder to produce variant artifacts from optimizer lineups.
- Inputs: optimizer lineups parquet (schema: `optimizer_lineups`).
- Outputs:
  - `<out_root>/runs/variants/<run_id>/variant_catalog.parquet` (variant_catalog)
  - `<out_root>/runs/variants/<run_id>/metrics.parquet` (variant_metrics)
  - `<out_root>/runs/variants/<run_id>/manifest.json` (manifest)
- Registry: Appends `<out_root>/registry/runs.parquet` with `run_type="variants"`.

CLI

python -m processes.variants \
  --slate-id 20251101_NBA \
  --config configs/variants.yaml \
  --seed 42 \
  --out-root data \
  [--input path/to/optimizer_lineups.parquet] \
  [--from-run <optimizer_run_id>] \
  [--schemas-root path/to/pipeline/schemas] \
  [--no-validate] \
  [--verbose]

Notes

- Deterministic run_id: `YYYYMMDD_HHMMSS_<shortsha>` mixing input SHA + cfg SHA + seed.
- `OPTIMIZER_VARIANT_IMPL=module:function` can override the variant builder import.
- The adapter does not import Streamlit/UI packages.
- `export_csv_row` is a preview string in DK slot order; it is not a DK-uploadable CSV row.
- Input discovery: `--input` path > `--from-run` > registry latest (`run_type=optimizer`); registry must include columns `run_type, slate_id, created_ts`.
- Manifest inputs.role is `optimizer_lineups` for the optimizer-lineups parquet.
- Seed precedence: the adapter passes `seed` as a function argument and also includes `seed` in the `knobs` dict for compatibility. If both are present, the function argument takes precedence.
</file>

<file path="processes/README.md">
# Processes Module

The processes module contains the core analysis engines for NBA Daily Fantasy Sports optimization, providing headless adapters for optimizer, variant builder, field sampler, and GPP simulator components.

## Overview

The processes module implements the main computational stages of the DFS pipeline:
- **Optimizer**: Generate optimal lineups from projections using CP-SAT or CBC solvers
- **Variants**: Build lineup variants from base optimizations
- **Field Sampler**: Create representative contest fields from variant catalogs
- **GPP Simulator**: Simulate tournament results and calculate EV metrics
- **Orchestrator**: Coordinate multi-stage pipeline runs
- **Metrics**: Generate performance analytics across all stages

## Architecture

```
processes/
├── optimizer/        # Lineup optimization (CP-SAT/CBC)
├── variants/         # Lineup variant generation
├── field_sampler/    # Contest field simulation
├── gpp_sim/          # Tournament simulation & EV calculation
├── orchestrator/     # Multi-stage pipeline coordination
├── metrics/          # Performance analytics
├── api/              # FastAPI endpoints
└── dk_export/        # DraftKings export utilities
```

## Data Flow Pipeline

```
Normalized Projections
        ↓
[1. Optimizer] → Base Lineups
        ↓
[2. Variants] → Variant Catalog
        ↓
[3. Field Sampler] → Contest Field
        ↓
[4. GPP Simulator] → Tournament Results & EV Metrics
```

## Core Components

### 1. Optimizer (`processes/optimizer/`)
**Purpose**: Generate optimal DFS lineups using mathematical optimization

**Algorithms:**
- **Primary**: CP-SAT (OR-Tools) - Constraint Programming Satisfiability
- **Fallback**: CBC (PuLP) - Mixed Integer Linear Programming

**Input**: Normalized projections parquet
**Output**: Optimized lineups with metrics

**CLI Usage:**
```bash
python -m processes.optimizer \
  --slate-id 20251101_NBA \
  --site DK \
  --config configs/optimizer.yaml \
  --engine cbc \
  --seed 42 \
  --out-root data
```

**Key Features:**
- **Constraints**: Salary cap, position requirements, roster construction
- **Advanced Rules**: Player stacking, exposure limits, ownership penalties
- **Deterministic**: Same inputs + seed = same outputs
- **Multi-lineup**: Generate diverse lineup sets

**Configuration Options:**
```yaml
num_lineups: 20
max_salary: 50000
min_salary: 48000
stacking:
  team_stack_sizes: [2, 3]
  max_team_stack: 4
exposure_caps:
  global_max: 0.8
  position_max: 0.6
ownership_penalty: 0.1
randomness: 0.15
```

### 2. Variants (`processes/variants/`)
**Purpose**: Generate lineup variants from optimizer base lineups

**Strategy**: Create diverse lineups by systematic player substitutions

**Input**: Optimizer lineups parquet
**Output**: Variant catalog with expanded lineup pool

**CLI Usage:**
```bash
python -m processes.variants \
  --slate-id 20251101_NBA \
  --config configs/variants.yaml \
  --seed 42 \
  --out-root data \
  --from-run optimizer_run_id
```

**Variant Generation Methods:**
- **Positional Swaps**: Replace players by position
- **Value Optimization**: Salary-based substitutions  
- **Correlation Adjustments**: Account for player correlations
- **Ownership Balancing**: Adjust for projected ownership

### 3. Field Sampler (`processes/field_sampler/`)
**Purpose**: Build representative contest fields from variant catalogs

**Sampling Strategy**: Create realistic tournament field compositions

**Input**: Variant catalog parquet
**Output**: Contest field with entrant lineups

**CLI Usage:**
```bash
python -m processes.field_sampler \
  --slate-id 20251101_NBA \
  --config configs/field.yaml \
  --seed 42 \
  --out-root data \
  --from-run variants_run_id
```

**Field Construction:**
- **Field Size**: Configurable contest size (e.g., 10K entrants)
- **Source Mix**: Blend optimizer + variants + external lineups
- **Ownership Curves**: Model realistic ownership patterns
- **Diversity Controls**: Ensure field diversity metrics

### 4. GPP Simulator (`processes/gpp_sim/`)
**Purpose**: Simulate tournament outcomes and calculate expected value

**Simulation Engine**: Monte Carlo simulation with variance modeling

**Input**: Contest field + contest structure
**Output**: Tournament results with EV metrics

**CLI Usage:**
```bash
python -m processes.gpp_sim \
  --slate-id 20251101_NBA \
  --config configs/sim.yaml \
  --seed 42 \
  --out-root data \
  --from-run field_run_id
```

**Simulation Features:**
- **Score Generation**: Model player performance variance
- **Payout Calculation**: Apply contest prize structures
- **EV Metrics**: Expected value, win probability, ROI
- **Risk Analysis**: Variance, downside protection

### 5. Orchestrator (`processes/orchestrator/`)
**Purpose**: Coordinate multi-stage pipeline execution

**Workflow Management**: Chain optimizer → variants → field → simulation

**CLI Usage:**
```bash
python -m processes.orchestrator \
  --slate-id 20251101_NBA \
  --config configs/full_pipeline.yaml \
  --seed 42 \
  --out-root data
```

### 6. Metrics (`processes/metrics/`)
**Purpose**: Generate performance analytics across pipeline stages

**Analytics Types:**
- Lineup diversity metrics
- Ownership correlation analysis  
- EV performance tracking
- Risk-adjusted returns

## Integration Points

### Input Discovery
Each process automatically discovers inputs using precedence rules:

1. **Explicit Path**: `--input path/to/file.parquet`
2. **Run Reference**: `--from-run previous_run_id`
3. **Registry Lookup**: Latest run of required type for slate

### Output Registration
All processes append to the shared run registry:
```python
{
  "run_id": "20251101_180000_deadbee",
  "run_type": "optimizer",
  "slate_id": "20251101_NBA", 
  "created_ts": "2025-11-01T23:00:00.000Z",
  "primary_outputs": ["lineups.parquet"],
  "config_sha256": "...",
  "seed": 42
}
```

## Dependencies

### External Dependencies
```python
# Optimization engines
"ortools"        # CP-SAT constraint programming (primary)
"pulp"           # CBC linear programming (fallback)

# Data processing  
"pandas"         # DataFrame operations
"numpy"          # Numerical computing
"pyarrow"        # Parquet I/O

# Web framework
"fastapi"        # API endpoints
"pydantic"       # Data validation
```

### Internal Dependencies
- **Pipeline Schemas**: Strict validation against `pipeline/schemas/`
- **Registry System**: Shared run tracking via `pipeline/registry/`
- **Configuration**: YAML configs in `configs/` directory

## API Endpoints (`processes/api/`)

FastAPI server for process orchestration:

**Endpoints:**
- `POST /optimize` - Run optimizer
- `POST /variants` - Generate variants  
- `POST /field` - Sample contest field
- `POST /simulate` - Run GPP simulation
- `GET /runs` - List pipeline runs
- `GET /runs/{run_id}` - Get run details

**Usage:**
```bash
uvicorn processes.api:app --host 0.0.0.0 --port 8000
```

## Configuration System

### Config Files (`configs/`)
- `optimizer.yaml` - Optimization parameters
- `variants.yaml` - Variant generation settings
- `field.yaml` - Field sampling configuration  
- `sim.yaml` - Simulation parameters
- `full_pipeline.yaml` - End-to-end workflow

### Environment Variables
- `DFS_SOLVER_MODE` - Choose solver: `python` (default) or `sampler`
- `OPTIMIZER_IMPL` - Override optimizer implementation
- `FIELD_SAMPLER_IMPL` - Override field sampler implementation

## Output Structure

```
data/runs/
├── optimizer/{run_id}/
│   ├── lineups.parquet          # Optimized lineups
│   ├── metrics.parquet          # Optimization metrics
│   └── manifest.json            # Run metadata
├── variants/{run_id}/
│   ├── variant_catalog.parquet  # Lineup variants
│   ├── metrics.parquet          # Variant metrics  
│   └── manifest.json
├── field/{run_id}/
│   ├── field.parquet           # Contest field
│   ├── metrics.parquet         # Field metrics
│   └── manifest.json
└── sim/{run_id}/
    ├── results.parquet         # Simulation results
    ├── metrics.parquet         # EV metrics
    └── manifest.json
```

## Quality Assurance

### Deterministic Processing
- **Seeded Random**: All stochastic operations use explicit seeds
- **Reproducible**: Same inputs + seed = identical outputs
- **Content Hashing**: Input change detection via SHA-256

### Validation
- **Schema Compliance**: All outputs validate against pipeline schemas
- **Constraint Checking**: Roster rules, salary caps enforced
- **Data Integrity**: Player ID consistency across pipeline stages

### Performance Monitoring  
- **Execution Metrics**: Runtime, memory usage, optimization gaps
- **Quality Metrics**: Lineup diversity, field representativeness  
- **Business Metrics**: EV accuracy, win rate correlation

## Development

### Running Individual Processes
```bash
# Optimizer
python -m processes.optimizer --slate-id 20251101_NBA --config configs/optimizer.yaml

# Full pipeline  
python -m processes.orchestrator --slate-id 20251101_NBA --config configs/full_pipeline.yaml
```

### Testing
```bash
pytest tests/processes/ -v
```

### Code Quality
```bash
ruff check processes/
black processes/  
mypy processes/
```

## Troubleshooting

**Solver Issues:**
- CP-SAT unavailable: Automatically falls back to CBC
- Infeasible problems: Check constraint conflicts in config
- Performance: Adjust `cp_sat_params` timeout settings

**Memory Management:**
- Large fields: Use sampling parameters to control memory usage
- Simulation runs: Configure batch sizes for Monte Carlo runs

**Input Discovery:**
- Missing inputs: Check registry for required run types
- Path resolution: Use absolute paths or verify working directory

## Performance Optimization

### Solver Tuning
```yaml
cp_sat_params:
  max_time_in_seconds: 300
  num_search_workers: 4
  log_search_progress: false
```

### Memory Management
```yaml 
field_sampling:
  batch_size: 1000
  memory_limit_mb: 2048
```

### Parallelization
- **Multi-core**: CP-SAT automatically uses available cores
- **Batch Processing**: Split large problems into smaller chunks
- **Pipeline**: Run stages in parallel where dependencies allow

## Future Enhancements

- **Advanced Stacking**: Multi-team correlation models
- **Dynamic Pricing**: Real-time salary adjustments  
- **Machine Learning**: Projection enhancement with ML models
- **Real-time**: Live contest monitoring and adjustments
</file>

<file path="runs/25-09-07_225130/optimizer/25-09-07_233738__feat-prp-runs-01/artifacts/diagnostics_json">
{
  "engine": "cp_sat",
  "N": 55,
  "status": "OPTIMAL",
  "best_obj": 263670.0,
  "best_bound": 263670.0,
  "achieved_gap": 0.0,
  "wall_time_sec": 0.379936,
  "model": {
    "num_bool_vars": 338,
    "num_slots": 8
  },
  "params": {
    "max_time_in_seconds": 0.7,
    "relative_gap_limit": 0.001,
    "max_deterministic_time": Infinity,
    "num_search_workers": 0,
    "random_seed": 33,
    "adaptive_time": false,
    "final_time_cap": 0.7
  },
  "pruning": {
    "enabled": true,
    "original_players": 116,
    "kept_players": 100,
    "reduction_pct": 13.8,
    "top_pruned": [
      "Josh Giddey (28.4)",
      "Scoot Henderson (27.2)",
      "Ben Simmons (26.9)"
    ],
    "locks_kept": 0
  },
  "wiring_check": {
    "run_id": "1757302640",
    "contract": {
      "hash": "dfc8951b139e",
      "rows": 100,
      "own_min": 0.018000000000000002,
      "own_max": 0.182,
      "pct_over_1": 0.0,
      "own_max_before": 0.182,
      "scaled_by": 1.0
    },
    "objective": {
      "scale": 1000,
      "lambda_ui": 8.0,
      "lambda_eff": 8.0,
      "lambda_scale_used": 1.0,
      "points_scaled_total": 3370500,
      "lambda_penalty_scaled_total": 85942,
      "ratio": 0.0254982940216585
    }
  },
  "total_players": 116,
  "matched_players": "116",
  "data_source": "pre-existing_column",
  "errors": [],
  "warnings": [
    "DK IDs already present in projections data"
  ],
  "failed_name_matching": 0,
  "failed_position_validation": 0,
  "success_rate": 100.0,
  "normalization": {
    "ownership": {
      "source_col": "own_proj",
      "scaled_by": 1.0,
      "scaled_by_100": false,
      "clip_applied": true,
      "non_numeric_dropped": 0,
      "nulls_filled": 0,
      "max_before": 0.182,
      "max_after": 0.182,
      "num_clipped": 0,
      "cols_diff_post_merge": [],
      "own_proj_max_post_merge": 0.182
    }
  },
  "constraints_snapshot": {
    "ownership_enabled": true
  },
  "ownership_penalty": {
    "achieved_offoptimal_pct": 2.220446049250313e-16,
    "enabled": true,
    "mode": "by_points",
    "lambda_used": 8.0,
    "applied": true,
    "reason": null,
    "avg_chalk_index": 0.08760232660605903,
    "avg_penalty_points": 5.606548902787778,
    "curve_type": "sigmoid",
    "weight_lambda": 8
  },
  "constraints": {
    "N_lineups": 55,
    "unique_players": 1,
    "max_salary": null,
    "min_salary": null,
    "global_team_limit": null,
    "team_limits": {},
    "lock_ids": [],
    "ban_ids": [],
    "proj_min": 0.0,
    "randomness_pct": 7.0,
    "cp_sat_params": {},
    "ownership_penalty": {
      "enabled": true,
      "mode": "by_points",
      "weight_lambda": 8,
      "curve_type": "sigmoid",
      "power_k": 1.5,
      "pivot_p0": 0.2,
      "curve_alpha": 2.0,
      "clamp_min": 0.01,
      "clamp_max": 0.8,
      "shrink_gamma": 1.0,
      "target_offoptimal_pct": 0.05,
      "tol_offoptimal_pct": 0.01
    },
    "require_dk_ids": false
  },
  "constraints_raw": {
    "N_lineups": 55,
    "unique_players": 1,
    "ownership_penalty": {
      "enabled": true,
      "mode": "by_points",
      "weight_lambda": 8,
      "curve_type": "sigmoid"
    },
    "pruning": {
      "drop_pct": 0.2
    },
    "randomness_pct": 7
  },
  "pool": {
    "lineups": 55,
    "avg_overlap_players": 5.234343434343434,
    "avg_pairwise_jaccard": 0.4952529700004555,
    "unique_player_count": 23,
    "exposures": {
      "36385877": 0.9818181818181818,
      "36385843": 0.9090909090909091,
      "36385935": 0.9090909090909091,
      "36385927": 0.5272727272727272,
      "36385559": 1.0,
      "36385719": 0.2545454545454545,
      "36385774": 0.32727272727272727,
      "36385861": 0.8181818181818182,
      "36385943": 0.4909090909090909,
      "36385726": 0.2,
      "36385814": 0.2545454545454545,
      "36385812": 0.2727272727272727,
      "36385702": 0.14545454545454545,
      "36385792": 0.2,
      "36385759": 0.05454545454545454,
      "36385911": 0.03636363636363636,
      "36385786": 0.14545454545454545,
      "36385755": 0.10909090909090909,
      "36385742": 0.03636363636363636,
      "36385657": 0.09090909090909091,
      "36385711": 0.07272727272727272,
      "36385671": 0.05454545454545454,
      "36385904": 0.10909090909090909
    }
  }
}
</file>

<file path="runs/25-09-07_225130/optimizer/25-09-07_233738__feat-prp-runs-01/artifacts/lineups_json">
[
  {
    "lineup_id": 1,
    "total_proj": 271.4,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "UTIL",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      }
    ]
  },
  {
    "lineup_id": 2,
    "total_proj": 271.3,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "UTIL",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      }
    ]
  },
  {
    "lineup_id": 3,
    "total_proj": 271.0,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "UTIL",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      }
    ]
  },
  {
    "lineup_id": 4,
    "total_proj": 270.9,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "UTIL",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      }
    ]
  },
  {
    "lineup_id": 5,
    "total_proj": 270.6,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "UTIL",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      }
    ]
  },
  {
    "lineup_id": 6,
    "total_proj": 270.8,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "PG",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "UTIL",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      }
    ]
  },
  {
    "lineup_id": 7,
    "total_proj": 270.5,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "PF",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 8,
    "total_proj": 270.7,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "G",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "UTIL",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      }
    ]
  },
  {
    "lineup_id": 9,
    "total_proj": 270.5,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "UTIL",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      }
    ]
  },
  {
    "lineup_id": 10,
    "total_proj": 270.4,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "G",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 11,
    "total_proj": 270.2,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385742",
        "name": "Bradley Beal",
        "pos": "F",
        "team": "PHX",
        "salary": 6700,
        "proj": 33.6,
        "dk_id": "36385742",
        "own_proj": 0.053
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 12,
    "total_proj": 270.3,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "PG",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 13,
    "total_proj": 270.1,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "G",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385742",
        "name": "Bradley Beal",
        "pos": "F",
        "team": "PHX",
        "salary": 6700,
        "proj": 33.6,
        "dk_id": "36385742",
        "own_proj": 0.053
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 14,
    "total_proj": 270.1,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "SG",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "UTIL",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      }
    ]
  },
  {
    "lineup_id": 15,
    "total_proj": 270.1,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "SG",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "UTIL",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      }
    ]
  },
  {
    "lineup_id": 16,
    "total_proj": 270.2,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "G",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 17,
    "total_proj": 270.0,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "UTIL",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      }
    ]
  },
  {
    "lineup_id": 18,
    "total_proj": 270.1,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "G",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 19,
    "total_proj": 270.3,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "F",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "UTIL",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      }
    ]
  },
  {
    "lineup_id": 20,
    "total_proj": 269.9,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "PG",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 21,
    "total_proj": 269.9,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "C",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 22,
    "total_proj": 269.8,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "PG",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 23,
    "total_proj": 269.8,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385711",
        "name": "Tyler Herro",
        "pos": "UTIL",
        "team": "MIA",
        "salary": 7000,
        "proj": 36.1,
        "dk_id": "36385711",
        "own_proj": 0.063
      }
    ]
  },
  {
    "lineup_id": 24,
    "total_proj": 270.1,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "C",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "G",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 25,
    "total_proj": 269.7,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "UTIL",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      }
    ]
  },
  {
    "lineup_id": 26,
    "total_proj": 269.7,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "UTIL",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      }
    ]
  },
  {
    "lineup_id": 27,
    "total_proj": 269.7,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385711",
        "name": "Tyler Herro",
        "pos": "G",
        "team": "MIA",
        "salary": 7000,
        "proj": 36.1,
        "dk_id": "36385711",
        "own_proj": 0.063
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "UTIL",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      }
    ]
  },
  {
    "lineup_id": 28,
    "total_proj": 269.6,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "UTIL",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      }
    ]
  },
  {
    "lineup_id": 29,
    "total_proj": 269.6,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 30,
    "total_proj": 269.5,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 31,
    "total_proj": 269.5,
    "total_salary": 49600,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 32,
    "total_proj": 269.5,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "PG",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 33,
    "total_proj": 269.5,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "SG",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "C",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 34,
    "total_proj": 269.6,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "UTIL",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      }
    ]
  },
  {
    "lineup_id": 35,
    "total_proj": 269.4,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 36,
    "total_proj": 269.6,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "SG",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "C",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 37,
    "total_proj": 269.4,
    "total_salary": 49600,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 38,
    "total_proj": 269.4,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "PG",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 39,
    "total_proj": 269.8,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "PF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "G",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "F",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "UTIL",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      }
    ]
  },
  {
    "lineup_id": 40,
    "total_proj": 269.5,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "SG",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "UTIL",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      }
    ]
  },
  {
    "lineup_id": 41,
    "total_proj": 269.7,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "G",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "UTIL",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      }
    ]
  },
  {
    "lineup_id": 42,
    "total_proj": 269.4,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385711",
        "name": "Tyler Herro",
        "pos": "G",
        "team": "MIA",
        "salary": 7000,
        "proj": 36.1,
        "dk_id": "36385711",
        "own_proj": 0.063
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 43,
    "total_proj": 269.3,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "G",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 44,
    "total_proj": 269.2,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "SG",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 45,
    "total_proj": 269.7,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "PF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "C",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 46,
    "total_proj": 269.2,
    "total_salary": 49700,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 47,
    "total_proj": 269.3,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "PG",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "SG",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 48,
    "total_proj": 269.6,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "UTIL",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      }
    ]
  },
  {
    "lineup_id": 49,
    "total_proj": 269.3,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385711",
        "name": "Tyler Herro",
        "pos": "G",
        "team": "MIA",
        "salary": 7000,
        "proj": 36.1,
        "dk_id": "36385711",
        "own_proj": 0.063
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 50,
    "total_proj": 269.1,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "PF",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 51,
    "total_proj": 269.2,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "PG",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 52,
    "total_proj": 269.1,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "F",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "UTIL",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      }
    ]
  },
  {
    "lineup_id": 53,
    "total_proj": 269.6,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "SF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "F",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 54,
    "total_proj": 269.1,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "PF",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "G",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "UTIL",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      }
    ]
  },
  {
    "lineup_id": 55,
    "total_proj": 269.6,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "SG",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "C",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "F",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  }
]
</file>

<file path="runs/25-09-07_225130/optimizer/25-09-07_233738__feat-prp-runs-01/artifacts/summary_json">
{
  "tried": 55,
  "valid": 55,
  "bestScore": 271.4,
  "elapsedMs": 17301,
  "invalidReasons": {
    "salary": 0,
    "slots": 0,
    "teamcap": 0,
    "dup": 0
  },
  "optionsUsed": {
    "N_lineups": 55,
    "unique_players": 1,
    "ownership_penalty": {
      "enabled": true,
      "mode": "by_points",
      "weight_lambda": 8,
      "curve_type": "sigmoid"
    },
    "pruning": {
      "drop_pct": 0.2
    },
    "randomness_pct": 7
  }
}
</file>

<file path="runs/25-09-07_225130/optimizer/25-09-07_233738__feat-prp-runs-01/run_meta.json">
{
  "schema_version": 1,
  "module": "optimizer",
  "slate_key": "25-09-07_225130",
  "engine": {
    "solver": "cp_sat",
    "seed": 33
  },
  "params": {
    "uniques": 1,
    "ownership_penalty": {
      "enabled": true,
      "lambda": 8.0,
      "curve": "sigmoid"
    }
  },
  "diagnostics": {
    "pool": {
      "lineups": 55,
      "avg_overlap_players": 5.234343434343434,
      "avg_pairwise_jaccard": 0.4952529700004555,
      "unique_player_count": 23,
      "exposures": {
        "36385877": 0.9818181818181818,
        "36385843": 0.9090909090909091,
        "36385935": 0.9090909090909091,
        "36385927": 0.5272727272727272,
        "36385559": 1.0,
        "36385719": 0.2545454545454545,
        "36385774": 0.32727272727272727,
        "36385861": 0.8181818181818182,
        "36385943": 0.4909090909090909,
        "36385726": 0.2,
        "36385814": 0.2545454545454545,
        "36385812": 0.2727272727272727,
        "36385702": 0.14545454545454545,
        "36385792": 0.2,
        "36385759": 0.05454545454545454,
        "36385911": 0.03636363636363636,
        "36385786": 0.14545454545454545,
        "36385755": 0.10909090909090909,
        "36385742": 0.03636363636363636,
        "36385657": 0.09090909090909091,
        "36385711": 0.07272727272727272,
        "36385671": 0.05454545454545454,
        "36385904": 0.10909090909090909
      }
    }
  },
  "run_id": "25-09-07_233738__feat-prp-runs-01",
  "created_at": "2025-09-08T03:37:38.015803Z",
  "artifacts": {
    "lineups_json": "artifacts/lineups_json",
    "diagnostics_json": "artifacts/diagnostics_json",
    "summary_json": "artifacts/summary_json"
  }
}
</file>

<file path="runs/25-09-07_225130/optimizer/25-09-07_233819__feat-prp-runs-01/artifacts/diagnostics_json">
{
  "engine": "cp_sat",
  "N": 77,
  "status": "FEASIBLE",
  "best_obj": 263462.0,
  "best_bound": 265289.0,
  "achieved_gap": 0.006934586391965445,
  "wall_time_sec": 0.7119610000000001,
  "model": {
    "num_bool_vars": 338,
    "num_slots": 8
  },
  "params": {
    "max_time_in_seconds": 0.7,
    "relative_gap_limit": 0.001,
    "max_deterministic_time": Infinity,
    "num_search_workers": 0,
    "random_seed": 24,
    "adaptive_time": false,
    "final_time_cap": 0.7
  },
  "pruning": {
    "enabled": true,
    "original_players": 116,
    "kept_players": 100,
    "reduction_pct": 13.8,
    "top_pruned": [
      "Josh Giddey (28.4)",
      "Scoot Henderson (27.2)",
      "Ben Simmons (26.9)"
    ],
    "locks_kept": 0
  },
  "wiring_check": {
    "run_id": "1757302669",
    "contract": {
      "hash": "dfc8951b139e",
      "rows": 100,
      "own_min": 0.018000000000000002,
      "own_max": 0.182,
      "pct_over_1": 0.0,
      "own_max_before": 0.182,
      "scaled_by": 1.0
    },
    "objective": {
      "scale": 1000,
      "lambda_ui": 8.0,
      "lambda_eff": 8.0,
      "lambda_scale_used": 1.0,
      "points_scaled_total": 3370500,
      "lambda_penalty_scaled_total": 85942,
      "ratio": 0.0254982940216585
    }
  },
  "total_players": 116,
  "matched_players": "116",
  "data_source": "pre-existing_column",
  "errors": [],
  "warnings": [
    "DK IDs already present in projections data"
  ],
  "failed_name_matching": 0,
  "failed_position_validation": 0,
  "success_rate": 100.0,
  "normalization": {
    "ownership": {
      "source_col": "own_proj",
      "scaled_by": 1.0,
      "scaled_by_100": false,
      "clip_applied": true,
      "non_numeric_dropped": 0,
      "nulls_filled": 0,
      "max_before": 0.182,
      "max_after": 0.182,
      "num_clipped": 0,
      "cols_diff_post_merge": [],
      "own_proj_max_post_merge": 0.182
    }
  },
  "constraints_snapshot": {
    "ownership_enabled": true
  },
  "ownership_penalty": {
    "achieved_offoptimal_pct": 0.0,
    "enabled": true,
    "mode": "by_points",
    "lambda_used": 8.0,
    "applied": true,
    "reason": null,
    "avg_chalk_index": 0.08752108996106515,
    "avg_penalty_points": 5.60134975750817,
    "curve_type": "sigmoid",
    "weight_lambda": 8
  },
  "constraints": {
    "N_lineups": 77,
    "unique_players": 1,
    "max_salary": null,
    "min_salary": null,
    "global_team_limit": null,
    "team_limits": {},
    "lock_ids": [],
    "ban_ids": [],
    "proj_min": 0.0,
    "randomness_pct": 7.0,
    "cp_sat_params": {},
    "ownership_penalty": {
      "enabled": true,
      "mode": "by_points",
      "weight_lambda": 8,
      "curve_type": "sigmoid",
      "power_k": 1.5,
      "pivot_p0": 0.2,
      "curve_alpha": 2.0,
      "clamp_min": 0.01,
      "clamp_max": 0.8,
      "shrink_gamma": 1.0,
      "target_offoptimal_pct": 0.05,
      "tol_offoptimal_pct": 0.01
    },
    "require_dk_ids": false
  },
  "constraints_raw": {
    "N_lineups": 77,
    "unique_players": 1,
    "ownership_penalty": {
      "enabled": true,
      "mode": "by_points",
      "weight_lambda": 8,
      "curve_type": "sigmoid"
    },
    "pruning": {
      "drop_pct": 0.2
    },
    "randomness_pct": 7
  },
  "pool": {
    "lineups": 77,
    "avg_overlap_players": 5.163362952836637,
    "avg_pairwise_jaccard": 0.48552988744377124,
    "unique_player_count": 26,
    "exposures": {
      "36385861": 0.8441558441558441,
      "36385843": 0.8571428571428571,
      "36385877": 0.987012987012987,
      "36385927": 0.5194805194805194,
      "36385559": 1.0,
      "36385719": 0.22077922077922077,
      "36385935": 0.8961038961038961,
      "36385774": 0.36363636363636365,
      "36385943": 0.4805194805194805,
      "36385726": 0.16883116883116883,
      "36385812": 0.2987012987012987,
      "36385814": 0.22077922077922077,
      "36385792": 0.15584415584415584,
      "36385702": 0.12987012987012986,
      "36385759": 0.09090909090909091,
      "36385911": 0.06493506493506493,
      "36385786": 0.11688311688311688,
      "36385755": 0.15584415584415584,
      "36385742": 0.025974025974025976,
      "36385657": 0.1038961038961039,
      "36385711": 0.07792207792207792,
      "36385671": 0.06493506493506493,
      "36385904": 0.11688311688311688,
      "36385920": 0.012987012987012988,
      "36385806": 0.012987012987012988,
      "36385799": 0.012987012987012988
    }
  }
}
</file>

<file path="runs/25-09-07_225130/optimizer/25-09-07_233819__feat-prp-runs-01/artifacts/lineups_json">
[
  {
    "lineup_id": 1,
    "total_proj": 271.4,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "UTIL",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      }
    ]
  },
  {
    "lineup_id": 2,
    "total_proj": 271.3,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "UTIL",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      }
    ]
  },
  {
    "lineup_id": 3,
    "total_proj": 271.0,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "G",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "UTIL",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      }
    ]
  },
  {
    "lineup_id": 4,
    "total_proj": 270.9,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "G",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "UTIL",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      }
    ]
  },
  {
    "lineup_id": 5,
    "total_proj": 270.6,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 6,
    "total_proj": 270.8,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "UTIL",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      }
    ]
  },
  {
    "lineup_id": 7,
    "total_proj": 270.5,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "PF",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 8,
    "total_proj": 270.7,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "UTIL",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      }
    ]
  },
  {
    "lineup_id": 9,
    "total_proj": 270.5,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "PG",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "UTIL",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      }
    ]
  },
  {
    "lineup_id": 10,
    "total_proj": 270.4,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "G",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 11,
    "total_proj": 270.2,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "G",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385742",
        "name": "Bradley Beal",
        "pos": "F",
        "team": "PHX",
        "salary": 6700,
        "proj": 33.6,
        "dk_id": "36385742",
        "own_proj": 0.053
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 12,
    "total_proj": 270.3,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "G",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 13,
    "total_proj": 270.1,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385742",
        "name": "Bradley Beal",
        "pos": "G",
        "team": "PHX",
        "salary": 6700,
        "proj": 33.6,
        "dk_id": "36385742",
        "own_proj": 0.053
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 14,
    "total_proj": 270.1,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "UTIL",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      }
    ]
  },
  {
    "lineup_id": 15,
    "total_proj": 270.1,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "PG",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "UTIL",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      }
    ]
  },
  {
    "lineup_id": 16,
    "total_proj": 270.2,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "SG",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 17,
    "total_proj": 270.0,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "UTIL",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      }
    ]
  },
  {
    "lineup_id": 18,
    "total_proj": 270.1,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "SG",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 19,
    "total_proj": 270.3,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "SF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "G",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "F",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "UTIL",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      }
    ]
  },
  {
    "lineup_id": 20,
    "total_proj": 269.9,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "PG",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 21,
    "total_proj": 269.9,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "PG",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "C",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 22,
    "total_proj": 269.8,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "PG",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 23,
    "total_proj": 269.8,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "SG",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385711",
        "name": "Tyler Herro",
        "pos": "UTIL",
        "team": "MIA",
        "salary": 7000,
        "proj": 36.1,
        "dk_id": "36385711",
        "own_proj": 0.063
      }
    ]
  },
  {
    "lineup_id": 24,
    "total_proj": 270.1,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "C",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "G",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 25,
    "total_proj": 269.7,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "G",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "UTIL",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      }
    ]
  },
  {
    "lineup_id": 26,
    "total_proj": 269.7,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 27,
    "total_proj": 269.7,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385711",
        "name": "Tyler Herro",
        "pos": "UTIL",
        "team": "MIA",
        "salary": 7000,
        "proj": 36.1,
        "dk_id": "36385711",
        "own_proj": 0.063
      }
    ]
  },
  {
    "lineup_id": 28,
    "total_proj": 269.6,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "UTIL",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      }
    ]
  },
  {
    "lineup_id": 29,
    "total_proj": 269.6,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 30,
    "total_proj": 269.5,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 31,
    "total_proj": 269.5,
    "total_salary": 49600,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 32,
    "total_proj": 269.5,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "PG",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 33,
    "total_proj": 269.5,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "C",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "G",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 34,
    "total_proj": 269.6,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "SG",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "UTIL",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      }
    ]
  },
  {
    "lineup_id": 35,
    "total_proj": 269.4,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "SG",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 36,
    "total_proj": 269.6,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "PG",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "SG",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "C",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 37,
    "total_proj": 269.4,
    "total_salary": 49600,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 38,
    "total_proj": 269.4,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "PG",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 39,
    "total_proj": 269.8,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "PF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "F",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "UTIL",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      }
    ]
  },
  {
    "lineup_id": 40,
    "total_proj": 269.5,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "G",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "UTIL",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      }
    ]
  },
  {
    "lineup_id": 41,
    "total_proj": 269.7,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "PG",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "G",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "UTIL",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      }
    ]
  },
  {
    "lineup_id": 42,
    "total_proj": 269.4,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385711",
        "name": "Tyler Herro",
        "pos": "G",
        "team": "MIA",
        "salary": 7000,
        "proj": 36.1,
        "dk_id": "36385711",
        "own_proj": 0.063
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 43,
    "total_proj": 269.3,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "G",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 44,
    "total_proj": 269.2,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "SG",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 45,
    "total_proj": 269.7,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "PF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "C",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 46,
    "total_proj": 269.2,
    "total_salary": 49700,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "G",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "UTIL",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      }
    ]
  },
  {
    "lineup_id": 47,
    "total_proj": 269.3,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "SG",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 48,
    "total_proj": 269.6,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "G",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "UTIL",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      }
    ]
  },
  {
    "lineup_id": 49,
    "total_proj": 269.3,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385711",
        "name": "Tyler Herro",
        "pos": "SG",
        "team": "MIA",
        "salary": 7000,
        "proj": 36.1,
        "dk_id": "36385711",
        "own_proj": 0.063
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "UTIL",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      }
    ]
  },
  {
    "lineup_id": 50,
    "total_proj": 269.1,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "SG",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "F",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 51,
    "total_proj": 269.2,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "G",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 52,
    "total_proj": 269.1,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 53,
    "total_proj": 269.6,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "PF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "G",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "F",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 54,
    "total_proj": 269.1,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "PF",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 55,
    "total_proj": 269.6,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "SG",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "PF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "C",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "F",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 56,
    "total_proj": 269.2,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "PG",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "SG",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 57,
    "total_proj": 269.1,
    "total_salary": 49600,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "UTIL",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      }
    ]
  },
  {
    "lineup_id": 58,
    "total_proj": 269.5,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "G",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "UTIL",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      }
    ]
  },
  {
    "lineup_id": 59,
    "total_proj": 269.2,
    "total_salary": 49700,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385711",
        "name": "Tyler Herro",
        "pos": "SG",
        "team": "MIA",
        "salary": 7000,
        "proj": 36.1,
        "dk_id": "36385711",
        "own_proj": 0.063
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "UTIL",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      }
    ]
  },
  {
    "lineup_id": 60,
    "total_proj": 269.3,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "SG",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "F",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "UTIL",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      }
    ]
  },
  {
    "lineup_id": 61,
    "total_proj": 269.0,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "PF",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "F",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "UTIL",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      }
    ]
  },
  {
    "lineup_id": 62,
    "total_proj": 269.2,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "G",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385920",
        "name": "Aaron Nesmith",
        "pos": "F",
        "team": "IND",
        "salary": 5000,
        "proj": 22.8,
        "dk_id": "36385920",
        "own_proj": 0.026000000000000002
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "UTIL",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      }
    ]
  },
  {
    "lineup_id": 63,
    "total_proj": 269.1,
    "total_salary": 49600,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "SG",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 64,
    "total_proj": 269.0,
    "total_salary": 49700,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "PF",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 65,
    "total_proj": 269.0,
    "total_salary": 49600,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 66,
    "total_proj": 269.4,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "F",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "UTIL",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      }
    ]
  },
  {
    "lineup_id": 67,
    "total_proj": 269.5,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "SG",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "UTIL",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      }
    ]
  },
  {
    "lineup_id": 68,
    "total_proj": 269.0,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "SG",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 69,
    "total_proj": 269.1,
    "total_salary": 49700,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385711",
        "name": "Tyler Herro",
        "pos": "SG",
        "team": "MIA",
        "salary": 7000,
        "proj": 36.1,
        "dk_id": "36385711",
        "own_proj": 0.063
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 70,
    "total_proj": 268.9,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385806",
        "name": "Marcus Smart",
        "pos": "G",
        "team": "MEM",
        "salary": 5900,
        "proj": 28.3,
        "dk_id": "36385806",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 71,
    "total_proj": 269.0,
    "total_salary": 49600,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "SG",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 72,
    "total_proj": 269.1,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "G",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "UTIL",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      }
    ]
  },
  {
    "lineup_id": 73,
    "total_proj": 268.9,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385799",
        "name": "Trey Murphy III",
        "pos": "F",
        "team": "NOP",
        "salary": 6000,
        "proj": 28.3,
        "dk_id": "36385799",
        "own_proj": 0.038
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 74,
    "total_proj": 268.9,
    "total_salary": 49700,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "PF",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "G",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "F",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 75,
    "total_proj": 269.4,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "PF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 76,
    "total_proj": 269.4,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "PG",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "F",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "UTIL",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      }
    ]
  },
  {
    "lineup_id": 77,
    "total_proj": 269.2,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "G",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  }
]
</file>

<file path="runs/25-09-07_225130/optimizer/25-09-07_233819__feat-prp-runs-01/artifacts/summary_json">
{
  "tried": 77,
  "valid": 77,
  "bestScore": 271.4,
  "elapsedMs": 30068,
  "invalidReasons": {
    "salary": 0,
    "slots": 0,
    "teamcap": 0,
    "dup": 0
  },
  "optionsUsed": {
    "N_lineups": 77,
    "unique_players": 1,
    "ownership_penalty": {
      "enabled": true,
      "mode": "by_points",
      "weight_lambda": 8,
      "curve_type": "sigmoid"
    },
    "pruning": {
      "drop_pct": 0.2
    },
    "randomness_pct": 7
  }
}
</file>

<file path="runs/25-09-07_225130/optimizer/25-09-07_233819__feat-prp-runs-01/run_meta.json">
{
  "schema_version": 1,
  "module": "optimizer",
  "slate_key": "25-09-07_225130",
  "engine": {
    "solver": "cp_sat",
    "seed": 24
  },
  "params": {
    "uniques": 1,
    "ownership_penalty": {
      "enabled": true,
      "lambda": 8.0,
      "curve": "sigmoid"
    }
  },
  "diagnostics": {
    "pool": {
      "lineups": 77,
      "avg_overlap_players": 5.163362952836637,
      "avg_pairwise_jaccard": 0.48552988744377124,
      "unique_player_count": 26,
      "exposures": {
        "36385861": 0.8441558441558441,
        "36385843": 0.8571428571428571,
        "36385877": 0.987012987012987,
        "36385927": 0.5194805194805194,
        "36385559": 1.0,
        "36385719": 0.22077922077922077,
        "36385935": 0.8961038961038961,
        "36385774": 0.36363636363636365,
        "36385943": 0.4805194805194805,
        "36385726": 0.16883116883116883,
        "36385812": 0.2987012987012987,
        "36385814": 0.22077922077922077,
        "36385792": 0.15584415584415584,
        "36385702": 0.12987012987012986,
        "36385759": 0.09090909090909091,
        "36385911": 0.06493506493506493,
        "36385786": 0.11688311688311688,
        "36385755": 0.15584415584415584,
        "36385742": 0.025974025974025976,
        "36385657": 0.1038961038961039,
        "36385711": 0.07792207792207792,
        "36385671": 0.06493506493506493,
        "36385904": 0.11688311688311688,
        "36385920": 0.012987012987012988,
        "36385806": 0.012987012987012988,
        "36385799": 0.012987012987012988
      }
    }
  },
  "run_id": "25-09-07_233819__feat-prp-runs-01",
  "created_at": "2025-09-08T03:38:19.674740Z",
  "artifacts": {
    "lineups_json": "artifacts/lineups_json",
    "diagnostics_json": "artifacts/diagnostics_json",
    "summary_json": "artifacts/summary_json"
  }
}
</file>

<file path="runs/25-09-07_225130/optimizer/25-09-09_165524__main/artifacts/diagnostics_json">
{
  "engine": "cp_sat",
  "N": 100,
  "status": "FEASIBLE",
  "best_obj": 262132.0,
  "best_bound": 265299.0,
  "achieved_gap": 0.012081699296537622,
  "wall_time_sec": 0.709864,
  "model": {
    "num_bool_vars": 338,
    "num_slots": 8
  },
  "params": {
    "max_time_in_seconds": 0.7,
    "relative_gap_limit": 0.001,
    "max_deterministic_time": Infinity,
    "num_search_workers": 0,
    "random_seed": 101,
    "adaptive_time": false,
    "final_time_cap": 0.7
  },
  "pruning": {
    "enabled": true,
    "original_players": 116,
    "kept_players": 100,
    "reduction_pct": 13.8,
    "top_pruned": [
      "Josh Giddey (28.4)",
      "Scoot Henderson (27.2)",
      "Ben Simmons (26.9)"
    ],
    "locks_kept": 0
  },
  "wiring_check": {
    "run_id": "1757451262",
    "contract": {
      "hash": "dfc8951b139e",
      "rows": 100,
      "own_min": 0.018000000000000002,
      "own_max": 0.182,
      "pct_over_1": 0.0,
      "own_max_before": 0.182,
      "scaled_by": 1.0
    },
    "objective": {
      "scale": 1000,
      "lambda_ui": 8.0,
      "lambda_eff": 8.0,
      "lambda_scale_used": 1.0,
      "points_scaled_total": 3370500,
      "lambda_penalty_scaled_total": 85942,
      "ratio": 0.0254982940216585
    }
  },
  "total_players": 116,
  "matched_players": "116",
  "data_source": "pre-existing_column",
  "errors": [],
  "warnings": [
    "DK IDs already present in projections data"
  ],
  "failed_name_matching": 0,
  "failed_position_validation": 0,
  "success_rate": 100.0,
  "normalization": {
    "ownership": {
      "source_col": "own_proj",
      "scaled_by": 1.0,
      "scaled_by_100": false,
      "clip_applied": true,
      "non_numeric_dropped": 0,
      "nulls_filled": 0,
      "max_before": 0.182,
      "max_after": 0.182,
      "num_clipped": 0,
      "cols_diff_post_merge": [],
      "own_proj_max_post_merge": 0.182
    }
  },
  "constraints_snapshot": {
    "ownership_enabled": true
  },
  "ownership_penalty": {
    "achieved_offoptimal_pct": 0.0,
    "enabled": true,
    "mode": "by_points",
    "lambda_used": 8.0,
    "applied": true,
    "reason": null,
    "avg_chalk_index": 0.08800873461488358,
    "avg_penalty_points": 5.632559015352549,
    "curve_type": "sigmoid",
    "weight_lambda": 8
  },
  "constraints": {
    "N_lineups": 100,
    "unique_players": 2,
    "max_salary": null,
    "min_salary": null,
    "global_team_limit": null,
    "team_limits": {},
    "lock_ids": [],
    "ban_ids": [],
    "proj_min": 0.0,
    "randomness_pct": 7.0,
    "cp_sat_params": {},
    "ownership_penalty": {
      "enabled": true,
      "mode": "by_points",
      "weight_lambda": 8,
      "curve_type": "sigmoid",
      "power_k": 1.5,
      "pivot_p0": 0.2,
      "curve_alpha": 2.0,
      "clamp_min": 0.01,
      "clamp_max": 0.8,
      "shrink_gamma": 1.0,
      "target_offoptimal_pct": 0.05,
      "tol_offoptimal_pct": 0.01
    },
    "require_dk_ids": false
  },
  "constraints_raw": {
    "N_lineups": 100,
    "unique_players": 2,
    "ownership_penalty": {
      "enabled": true,
      "mode": "by_points",
      "weight_lambda": 8,
      "curve_type": "sigmoid"
    },
    "pruning": {
      "drop_pct": 0.2
    },
    "randomness_pct": 7
  },
  "pool": {
    "lineups": 100,
    "avg_overlap_players": 4.5783838383838384,
    "avg_pairwise_jaccard": 0.4082591886228226,
    "unique_player_count": 36,
    "exposures": {
      "36385861": 0.7,
      "36385843": 0.77,
      "36385935": 0.88,
      "36385927": 0.55,
      "36385559": 0.96,
      "36385719": 0.15,
      "36385877": 0.92,
      "36385774": 0.26,
      "36385943": 0.45,
      "36385726": 0.05,
      "36385812": 0.29,
      "36385814": 0.18,
      "36385702": 0.1,
      "36385792": 0.2,
      "36385755": 0.24,
      "36385742": 0.09,
      "36385786": 0.07,
      "36385657": 0.19,
      "36385671": 0.13,
      "36385904": 0.24,
      "36385711": 0.05,
      "36385759": 0.12,
      "36385806": 0.04,
      "36385911": 0.13,
      "36385832": 0.04,
      "36385624": 0.01,
      "36385864": 0.01,
      "36385857": 0.04,
      "36385668": 0.04,
      "36385629": 0.01,
      "36385598": 0.02,
      "36385589": 0.02,
      "36385920": 0.01,
      "36385882": 0.02,
      "36385853": 0.01,
      "36385788": 0.01
    }
  }
}
</file>

<file path="runs/25-09-07_225130/optimizer/25-09-09_165524__main/artifacts/lineups_json">
[
  {
    "lineup_id": 1,
    "total_proj": 271.4,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "UTIL",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      }
    ]
  },
  {
    "lineup_id": 2,
    "total_proj": 270.9,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "UTIL",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      }
    ]
  },
  {
    "lineup_id": 3,
    "total_proj": 270.6,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 4,
    "total_proj": 270.8,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "SG",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "UTIL",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      }
    ]
  },
  {
    "lineup_id": 5,
    "total_proj": 270.2,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385742",
        "name": "Bradley Beal",
        "pos": "F",
        "team": "PHX",
        "salary": 6700,
        "proj": 33.6,
        "dk_id": "36385742",
        "own_proj": 0.053
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 6,
    "total_proj": 270.3,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "G",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 7,
    "total_proj": 270.0,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "UTIL",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      }
    ]
  },
  {
    "lineup_id": 8,
    "total_proj": 270.3,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "C",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "F",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 9,
    "total_proj": 269.9,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "PG",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "UTIL",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      }
    ]
  },
  {
    "lineup_id": 10,
    "total_proj": 270.1,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "C",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "G",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 11,
    "total_proj": 269.5,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "SG",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 12,
    "total_proj": 269.6,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "G",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "F",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "UTIL",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      }
    ]
  },
  {
    "lineup_id": 13,
    "total_proj": 269.4,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "PG",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "UTIL",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      }
    ]
  },
  {
    "lineup_id": 14,
    "total_proj": 269.8,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "SG",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "G",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "F",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "UTIL",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      }
    ]
  },
  {
    "lineup_id": 15,
    "total_proj": 269.7,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "UTIL",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      }
    ]
  },
  {
    "lineup_id": 16,
    "total_proj": 269.4,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385711",
        "name": "Tyler Herro",
        "pos": "G",
        "team": "MIA",
        "salary": 7000,
        "proj": 36.1,
        "dk_id": "36385711",
        "own_proj": 0.063
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 17,
    "total_proj": 269.2,
    "total_salary": 49700,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 18,
    "total_proj": 269.1,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "PF",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 19,
    "total_proj": 269.6,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "SF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "F",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "UTIL",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      }
    ]
  },
  {
    "lineup_id": 20,
    "total_proj": 269.2,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "SG",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 21,
    "total_proj": 269.1,
    "total_salary": 49600,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "SG",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 22,
    "total_proj": 269.4,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "PF",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "C",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "G",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 23,
    "total_proj": 269.1,
    "total_salary": 49700,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385711",
        "name": "Tyler Herro",
        "pos": "G",
        "team": "MIA",
        "salary": 7000,
        "proj": 36.1,
        "dk_id": "36385711",
        "own_proj": 0.063
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 24,
    "total_proj": 268.9,
    "total_salary": 49700,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "PF",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "G",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "F",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 25,
    "total_proj": 269.2,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "G",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 26,
    "total_proj": 268.8,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385806",
        "name": "Marcus Smart",
        "pos": "PG",
        "team": "MEM",
        "salary": 5900,
        "proj": 28.3,
        "dk_id": "36385806",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "PF",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 27,
    "total_proj": 269.0,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "PG",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "UTIL",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      }
    ]
  },
  {
    "lineup_id": 28,
    "total_proj": 269.0,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385711",
        "name": "Tyler Herro",
        "pos": "SG",
        "team": "MIA",
        "salary": 7000,
        "proj": 36.1,
        "dk_id": "36385711",
        "own_proj": 0.063
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 29,
    "total_proj": 269.3,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "F",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 30,
    "total_proj": 268.8,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "SG",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "PF",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 31,
    "total_proj": 268.8,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "SG",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 32,
    "total_proj": 269.1,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385832",
        "name": "Max Strus",
        "pos": "F",
        "team": "CLE",
        "salary": 5800,
        "proj": 26.8,
        "dk_id": "36385832",
        "own_proj": 0.033
      },
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "UTIL",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      }
    ]
  },
  {
    "lineup_id": 33,
    "total_proj": 268.9,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "UTIL",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      }
    ]
  },
  {
    "lineup_id": 34,
    "total_proj": 269.1,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "SG",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "PF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "C",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 35,
    "total_proj": 268.7,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "PG",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385726",
        "name": "CJ McCollum",
        "pos": "UTIL",
        "team": "NOP",
        "salary": 6900,
        "proj": 36.0,
        "dk_id": "36385726",
        "own_proj": 0.059000000000000004
      }
    ]
  },
  {
    "lineup_id": 36,
    "total_proj": 269.2,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385624",
        "name": "Bam Adebayo",
        "pos": "C",
        "team": "MIA",
        "salary": 8200,
        "proj": 41.8,
        "dk_id": "36385624",
        "own_proj": 0.091
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "G",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "F",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 37,
    "total_proj": 268.6,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "PF",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385742",
        "name": "Bradley Beal",
        "pos": "F",
        "team": "PHX",
        "salary": 6700,
        "proj": 33.6,
        "dk_id": "36385742",
        "own_proj": 0.053
      },
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "UTIL",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      }
    ]
  },
  {
    "lineup_id": 38,
    "total_proj": 268.9,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "SG",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "G",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "UTIL",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      }
    ]
  },
  {
    "lineup_id": 39,
    "total_proj": 268.5,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "F",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 40,
    "total_proj": 268.7,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "G",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "F",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 41,
    "total_proj": 268.4,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385832",
        "name": "Max Strus",
        "pos": "PF",
        "team": "CLE",
        "salary": 5800,
        "proj": 26.8,
        "dk_id": "36385832",
        "own_proj": 0.033
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 42,
    "total_proj": 268.4,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "SG",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "PF",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "G",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "UTIL",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      }
    ]
  },
  {
    "lineup_id": 43,
    "total_proj": 268.8,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "PF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "G",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 44,
    "total_proj": 268.4,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385864",
        "name": "Onyeka Okongwu",
        "pos": "PF",
        "team": "ATL",
        "salary": 5400,
        "proj": 23.9,
        "dk_id": "36385864",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "UTIL",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      }
    ]
  },
  {
    "lineup_id": 45,
    "total_proj": 268.8,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "SF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "F",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 46,
    "total_proj": 268.3,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "SG",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385742",
        "name": "Bradley Beal",
        "pos": "F",
        "team": "PHX",
        "salary": 6700,
        "proj": 33.6,
        "dk_id": "36385742",
        "own_proj": 0.053
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 47,
    "total_proj": 268.4,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "PG",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "G",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 48,
    "total_proj": 268.5,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "SG",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "UTIL",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      }
    ]
  },
  {
    "lineup_id": 49,
    "total_proj": 268.7,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "PG",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "PF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "F",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "UTIL",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      }
    ]
  },
  {
    "lineup_id": 50,
    "total_proj": 268.6,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "G",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "UTIL",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      }
    ]
  },
  {
    "lineup_id": 51,
    "total_proj": 268.6,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "PG",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      },
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "SG",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "C",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 52,
    "total_proj": 268.3,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "F",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385711",
        "name": "Tyler Herro",
        "pos": "UTIL",
        "team": "MIA",
        "salary": 7000,
        "proj": 36.1,
        "dk_id": "36385711",
        "own_proj": 0.063
      }
    ]
  },
  {
    "lineup_id": 53,
    "total_proj": 268.1,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "SG",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385857",
        "name": "Cameron Johnson",
        "pos": "PF",
        "team": "BKN",
        "salary": 5500,
        "proj": 25.3,
        "dk_id": "36385857",
        "own_proj": 0.03
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 54,
    "total_proj": 268.4,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "C",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385668",
        "name": "Miles Bridges",
        "pos": "F",
        "team": "CHA",
        "salary": 7400,
        "proj": 38.6,
        "dk_id": "36385668",
        "own_proj": 0.071
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 55,
    "total_proj": 268.2,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "PG",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 56,
    "total_proj": 268.5,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385857",
        "name": "Cameron Johnson",
        "pos": "SF",
        "team": "BKN",
        "salary": 5500,
        "proj": 25.3,
        "dk_id": "36385857",
        "own_proj": 0.03
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "PF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "G",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "UTIL",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      }
    ]
  },
  {
    "lineup_id": 57,
    "total_proj": 268.0,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385832",
        "name": "Max Strus",
        "pos": "UTIL",
        "team": "CLE",
        "salary": 5800,
        "proj": 26.8,
        "dk_id": "36385832",
        "own_proj": 0.033
      }
    ]
  },
  {
    "lineup_id": 58,
    "total_proj": 267.1,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "PG",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "PF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "G",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "UTIL",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      }
    ]
  },
  {
    "lineup_id": 59,
    "total_proj": 268.6,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385629",
        "name": "Desmond Bane",
        "pos": "UTIL",
        "team": "MEM",
        "salary": 8000,
        "proj": 41.0,
        "dk_id": "36385629",
        "own_proj": 0.08800000000000001
      }
    ]
  },
  {
    "lineup_id": 60,
    "total_proj": 268.1,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385806",
        "name": "Marcus Smart",
        "pos": "PG",
        "team": "MEM",
        "salary": 5900,
        "proj": 28.3,
        "dk_id": "36385806",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "G",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "UTIL",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      }
    ]
  },
  {
    "lineup_id": 61,
    "total_proj": 268.1,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "PG",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "SG",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "G",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "F",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 62,
    "total_proj": 268.4,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385786",
        "name": "John Collins",
        "pos": "C",
        "team": "UTA",
        "salary": 6100,
        "proj": 30.8,
        "dk_id": "36385786",
        "own_proj": 0.043
      },
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "G",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "F",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 63,
    "total_proj": 269.7,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "C",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385598",
        "name": "Kevin Durant",
        "pos": "F",
        "team": "PHX",
        "salary": 8600,
        "proj": 46.8,
        "dk_id": "36385598",
        "own_proj": 0.142
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 64,
    "total_proj": 269.4,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385589",
        "name": "Donovan Mitchell",
        "pos": "G",
        "team": "CLE",
        "salary": 8700,
        "proj": 47.1,
        "dk_id": "36385589",
        "own_proj": 0.132
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "UTIL",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      }
    ]
  },
  {
    "lineup_id": 65,
    "total_proj": 268.3,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "SG",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "PF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 66,
    "total_proj": 267.8,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "F",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 67,
    "total_proj": 268.2,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "SG",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "UTIL",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      }
    ]
  },
  {
    "lineup_id": 68,
    "total_proj": 268.1,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "PG",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "G",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 69,
    "total_proj": 268.0,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385711",
        "name": "Tyler Herro",
        "pos": "G",
        "team": "MIA",
        "salary": 7000,
        "proj": 36.1,
        "dk_id": "36385711",
        "own_proj": 0.063
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "F",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 70,
    "total_proj": 268.0,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385742",
        "name": "Bradley Beal",
        "pos": "F",
        "team": "PHX",
        "salary": 6700,
        "proj": 33.6,
        "dk_id": "36385742",
        "own_proj": 0.053
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "UTIL",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      }
    ]
  },
  {
    "lineup_id": 71,
    "total_proj": 268.1,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "PG",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385668",
        "name": "Miles Bridges",
        "pos": "UTIL",
        "team": "CHA",
        "salary": 7400,
        "proj": 38.6,
        "dk_id": "36385668",
        "own_proj": 0.071
      }
    ]
  },
  {
    "lineup_id": 72,
    "total_proj": 268.2,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "PG",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "SG",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "G",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "UTIL",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      }
    ]
  },
  {
    "lineup_id": 73,
    "total_proj": 268.0,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "SG",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385920",
        "name": "Aaron Nesmith",
        "pos": "PF",
        "team": "IND",
        "salary": 5000,
        "proj": 22.8,
        "dk_id": "36385920",
        "own_proj": 0.026000000000000002
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 74,
    "total_proj": 267.7,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "G",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "F",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385857",
        "name": "Cameron Johnson",
        "pos": "UTIL",
        "team": "BKN",
        "salary": 5500,
        "proj": 25.3,
        "dk_id": "36385857",
        "own_proj": 0.03
      }
    ]
  },
  {
    "lineup_id": 75,
    "total_proj": 267.8,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385742",
        "name": "Bradley Beal",
        "pos": "SF",
        "team": "PHX",
        "salary": 6700,
        "proj": 33.6,
        "dk_id": "36385742",
        "own_proj": 0.053
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "G",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 76,
    "total_proj": 268.2,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "SG",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "PF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "UTIL",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      }
    ]
  },
  {
    "lineup_id": 77,
    "total_proj": 268.2,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "SG",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "PF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "UTIL",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      }
    ]
  },
  {
    "lineup_id": 78,
    "total_proj": 268.0,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "G",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "F",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "UTIL",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      }
    ]
  },
  {
    "lineup_id": 79,
    "total_proj": 267.7,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "F",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "UTIL",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      }
    ]
  },
  {
    "lineup_id": 80,
    "total_proj": 268.2,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "PF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385882",
        "name": "Bennedict Mathurin",
        "pos": "F",
        "team": "IND",
        "salary": 5200,
        "proj": 24.1,
        "dk_id": "36385882",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 81,
    "total_proj": 267.7,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "PF",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "UTIL",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      }
    ]
  },
  {
    "lineup_id": 82,
    "total_proj": 267.7,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385806",
        "name": "Marcus Smart",
        "pos": "G",
        "team": "MEM",
        "salary": 5900,
        "proj": 28.3,
        "dk_id": "36385806",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "UTIL",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      }
    ]
  },
  {
    "lineup_id": 83,
    "total_proj": 268.1,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "G",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "F",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385853",
        "name": "Tari Eason",
        "pos": "UTIL",
        "team": "HOU",
        "salary": 5500,
        "proj": 25.0,
        "dk_id": "36385853",
        "own_proj": 0.03
      }
    ]
  },
  {
    "lineup_id": 84,
    "total_proj": 267.8,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385882",
        "name": "Bennedict Mathurin",
        "pos": "F",
        "team": "IND",
        "salary": 5200,
        "proj": 24.1,
        "dk_id": "36385882",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385719",
        "name": "Terry Rozier",
        "pos": "UTIL",
        "team": "MIA",
        "salary": 6900,
        "proj": 36.4,
        "dk_id": "36385719",
        "own_proj": 0.061
      }
    ]
  },
  {
    "lineup_id": 85,
    "total_proj": 266.8,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "PF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "G",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "UTIL",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      }
    ]
  },
  {
    "lineup_id": 86,
    "total_proj": 267.7,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "PG",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "PF",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385742",
        "name": "Bradley Beal",
        "pos": "UTIL",
        "team": "PHX",
        "salary": 6700,
        "proj": 33.6,
        "dk_id": "36385742",
        "own_proj": 0.053
      }
    ]
  },
  {
    "lineup_id": 87,
    "total_proj": 268.0,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "G",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      },
      {
        "player_id": "36385857",
        "name": "Cameron Johnson",
        "pos": "F",
        "team": "BKN",
        "salary": 5500,
        "proj": 25.3,
        "dk_id": "36385857",
        "own_proj": 0.03
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "UTIL",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      }
    ]
  },
  {
    "lineup_id": 88,
    "total_proj": 267.6,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385759",
        "name": "Tobias Harris",
        "pos": "F",
        "team": "DET",
        "salary": 6400,
        "proj": 32.4,
        "dk_id": "36385759",
        "own_proj": 0.047
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 89,
    "total_proj": 267.6,
    "total_salary": 49600,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "SF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 90,
    "total_proj": 267.5,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385788",
        "name": "Bobby Portis",
        "pos": "PF",
        "team": "MIL",
        "salary": 6100,
        "proj": 28.2,
        "dk_id": "36385788",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 91,
    "total_proj": 267.8,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385832",
        "name": "Max Strus",
        "pos": "PF",
        "team": "CLE",
        "salary": 5800,
        "proj": 26.8,
        "dk_id": "36385832",
        "own_proj": 0.033
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385668",
        "name": "Miles Bridges",
        "pos": "F",
        "team": "CHA",
        "salary": 7400,
        "proj": 38.6,
        "dk_id": "36385668",
        "own_proj": 0.071
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "UTIL",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      }
    ]
  },
  {
    "lineup_id": 92,
    "total_proj": 267.9,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385598",
        "name": "Kevin Durant",
        "pos": "PF",
        "team": "PHX",
        "salary": 8600,
        "proj": 46.8,
        "dk_id": "36385598",
        "own_proj": 0.142
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "C",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "F",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "UTIL",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      }
    ]
  },
  {
    "lineup_id": 93,
    "total_proj": 267.9,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385742",
        "name": "Bradley Beal",
        "pos": "SF",
        "team": "PHX",
        "salary": 6700,
        "proj": 33.6,
        "dk_id": "36385742",
        "own_proj": 0.053
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "F",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385702",
        "name": "Anfernee Simons",
        "pos": "UTIL",
        "team": "POR",
        "salary": 7100,
        "proj": 37.1,
        "dk_id": "36385702",
        "own_proj": 0.068
      }
    ]
  },
  {
    "lineup_id": 94,
    "total_proj": 267.6,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SG",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385742",
        "name": "Bradley Beal",
        "pos": "SF",
        "team": "PHX",
        "salary": 6700,
        "proj": 33.6,
        "dk_id": "36385742",
        "own_proj": 0.053
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  },
  {
    "lineup_id": 95,
    "total_proj": 268.0,
    "total_salary": 49800,
    "players": [
      {
        "player_id": "36385911",
        "name": "Brandin Podziemski",
        "pos": "PG",
        "team": "GSW",
        "salary": 5000,
        "proj": 24.1,
        "dk_id": "36385911",
        "own_proj": 0.027999999999999997
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "G",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385671",
        "name": "Fred VanVleet",
        "pos": "UTIL",
        "team": "HOU",
        "salary": 7400,
        "proj": 39.8,
        "dk_id": "36385671",
        "own_proj": 0.078
      }
    ]
  },
  {
    "lineup_id": 96,
    "total_proj": 267.6,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "SG",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "UTIL",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      }
    ]
  },
  {
    "lineup_id": 97,
    "total_proj": 267.5,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385806",
        "name": "Marcus Smart",
        "pos": "PG",
        "team": "MEM",
        "salary": 5900,
        "proj": 28.3,
        "dk_id": "36385806",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "SF",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "PF",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385774",
        "name": "Jerami Grant",
        "pos": "F",
        "team": "POR",
        "salary": 6300,
        "proj": 32.5,
        "dk_id": "36385774",
        "own_proj": 0.048
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "UTIL",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      }
    ]
  },
  {
    "lineup_id": 98,
    "total_proj": 267.6,
    "total_salary": 49900,
    "players": [
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "PG",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385657",
        "name": "Lauri Markkanen",
        "pos": "PF",
        "team": "UTA",
        "salary": 7500,
        "proj": 40.6,
        "dk_id": "36385657",
        "own_proj": 0.08199999999999999
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385589",
        "name": "Donovan Mitchell",
        "pos": "G",
        "team": "CLE",
        "salary": 8700,
        "proj": 47.1,
        "dk_id": "36385589",
        "own_proj": 0.132
      },
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "F",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385755",
        "name": "Jusuf Nurkic",
        "pos": "UTIL",
        "team": "PHX",
        "salary": 6500,
        "proj": 34.1,
        "dk_id": "36385755",
        "own_proj": 0.051
      }
    ]
  },
  {
    "lineup_id": 99,
    "total_proj": 267.6,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385877",
        "name": "Shaedon Sharpe",
        "pos": "PG",
        "team": "POR",
        "salary": 5200,
        "proj": 29.0,
        "dk_id": "36385877",
        "own_proj": 0.036000000000000004
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385742",
        "name": "Bradley Beal",
        "pos": "SF",
        "team": "PHX",
        "salary": 6700,
        "proj": 33.6,
        "dk_id": "36385742",
        "own_proj": 0.053
      },
      {
        "player_id": "36385943",
        "name": "Santi Aldama",
        "pos": "PF",
        "team": "MEM",
        "salary": 5000,
        "proj": 24.9,
        "dk_id": "36385943",
        "own_proj": 0.028999999999999998
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "C",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      },
      {
        "player_id": "36385814",
        "name": "Bogdan Bogdanovic",
        "pos": "G",
        "team": "ATL",
        "salary": 5900,
        "proj": 30.0,
        "dk_id": "36385814",
        "own_proj": 0.040999999999999995
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "F",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385792",
        "name": "Collin Sexton",
        "pos": "UTIL",
        "team": "UTA",
        "salary": 6100,
        "proj": 31.2,
        "dk_id": "36385792",
        "own_proj": 0.044000000000000004
      }
    ]
  },
  {
    "lineup_id": 100,
    "total_proj": 267.8,
    "total_salary": 50000,
    "players": [
      {
        "player_id": "36385904",
        "name": "Jalen Suggs",
        "pos": "PG",
        "team": "ORL",
        "salary": 5100,
        "proj": 25.1,
        "dk_id": "36385904",
        "own_proj": 0.03
      },
      {
        "player_id": "36385843",
        "name": "Jordan Clarkson",
        "pos": "SG",
        "team": "UTA",
        "salary": 5600,
        "proj": 30.2,
        "dk_id": "36385843",
        "own_proj": 0.04
      },
      {
        "player_id": "36385935",
        "name": "Grayson Allen",
        "pos": "SF",
        "team": "PHX",
        "salary": 5000,
        "proj": 26.4,
        "dk_id": "36385935",
        "own_proj": 0.032
      },
      {
        "player_id": "36385668",
        "name": "Miles Bridges",
        "pos": "PF",
        "team": "CHA",
        "salary": 7400,
        "proj": 38.6,
        "dk_id": "36385668",
        "own_proj": 0.071
      },
      {
        "player_id": "36385812",
        "name": "Mark Williams",
        "pos": "C",
        "team": "CHA",
        "salary": 5900,
        "proj": 30.6,
        "dk_id": "36385812",
        "own_proj": 0.042
      },
      {
        "player_id": "36385861",
        "name": "Tyus Jones",
        "pos": "G",
        "team": "PHX",
        "salary": 5500,
        "proj": 29.6,
        "dk_id": "36385861",
        "own_proj": 0.037000000000000005
      },
      {
        "player_id": "36385927",
        "name": "De'Andre Hunter",
        "pos": "F",
        "team": "ATL",
        "salary": 5000,
        "proj": 25.0,
        "dk_id": "36385927",
        "own_proj": 0.03
      },
      {
        "player_id": "36385559",
        "name": "Joel Embiid",
        "pos": "UTIL",
        "team": "PHI",
        "salary": 10500,
        "proj": 62.3,
        "dk_id": "36385559",
        "own_proj": 0.168
      }
    ]
  }
]
</file>

<file path="runs/25-09-07_225130/optimizer/25-09-09_165524__main/artifacts/summary_json">
{
  "tried": 100,
  "valid": 100,
  "bestScore": 271.4,
  "elapsedMs": 61911,
  "invalidReasons": {
    "salary": 0,
    "slots": 0,
    "teamcap": 0,
    "dup": 0
  },
  "optionsUsed": {
    "N_lineups": 100,
    "unique_players": 2,
    "ownership_penalty": {
      "enabled": true,
      "mode": "by_points",
      "weight_lambda": 8,
      "curve_type": "sigmoid"
    },
    "pruning": {
      "drop_pct": 0.2
    },
    "randomness_pct": 7
  }
}
</file>

<file path="runs/25-09-07_225130/optimizer/25-09-09_165524__main/run_meta.json">
{
  "schema_version": 1,
  "module": "optimizer",
  "slate_key": "25-09-07_225130",
  "engine": {
    "solver": "cp_sat",
    "seed": 101
  },
  "params": {
    "uniques": 2,
    "ownership_penalty": {
      "enabled": true,
      "lambda": 8.0,
      "curve": "sigmoid"
    }
  },
  "diagnostics": {
    "pool": {
      "lineups": 100,
      "avg_overlap_players": 4.5783838383838384,
      "avg_pairwise_jaccard": 0.4082591886228226,
      "unique_player_count": 36,
      "exposures": {
        "36385861": 0.7,
        "36385843": 0.77,
        "36385935": 0.88,
        "36385927": 0.55,
        "36385559": 0.96,
        "36385719": 0.15,
        "36385877": 0.92,
        "36385774": 0.26,
        "36385943": 0.45,
        "36385726": 0.05,
        "36385812": 0.29,
        "36385814": 0.18,
        "36385702": 0.1,
        "36385792": 0.2,
        "36385755": 0.24,
        "36385742": 0.09,
        "36385786": 0.07,
        "36385657": 0.19,
        "36385671": 0.13,
        "36385904": 0.24,
        "36385711": 0.05,
        "36385759": 0.12,
        "36385806": 0.04,
        "36385911": 0.13,
        "36385832": 0.04,
        "36385624": 0.01,
        "36385864": 0.01,
        "36385857": 0.04,
        "36385668": 0.04,
        "36385629": 0.01,
        "36385598": 0.02,
        "36385589": 0.02,
        "36385920": 0.01,
        "36385882": 0.02,
        "36385853": 0.01,
        "36385788": 0.01
      }
    }
  },
  "run_id": "25-09-09_165524__main",
  "created_at": "2025-09-09T20:55:24.034194Z",
  "artifacts": {
    "lineups_json": "artifacts/lineups_json",
    "diagnostics_json": "artifacts/diagnostics_json",
    "summary_json": "artifacts/summary_json"
  }
}
</file>

<file path="runs/25-09-07_225959/optimizer/25-09-07_225959__feat-prp-runs-01/artifacts/summary_json">
{
  "ok": true
}
</file>

<file path="runs/25-09-07_225959/optimizer/25-09-07_225959__feat-prp-runs-01/run_meta.json">
{
  "engine": {
    "solver": "test",
    "seed": 1
  },
  "params": {
    "uniques": 1
  },
  "diagnostics": {
    "pool": {
      "lineups": 1
    }
  },
  "schema_version": 1,
  "module": "optimizer",
  "run_id": "25-09-07_225959__feat-prp-runs-01",
  "slate_key": "25-09-07_225959",
  "created_at": "2025-09-08T02:59:59.160856Z",
  "artifacts": {
    "summary_json": "artifacts/summary_json"
  }
}
</file>

<file path="runs/25-09-07_230939/optimizer/25-09-07_230939__feat-prp-runs-01/artifacts/summary_json">
{
  "ok": true
}
</file>

<file path="runs/25-09-07_230939/optimizer/25-09-07_230939__feat-prp-runs-01/run_meta.json">
{
  "engine": {
    "solver": "cp-sat",
    "seed": 42
  },
  "params": {
    "uniques": 1
  },
  "diagnostics": {
    "pool": {
      "lineups": 3
    }
  },
  "schema_version": 1,
  "module": "optimizer",
  "run_id": "25-09-07_230939__feat-prp-runs-01",
  "slate_key": "25-09-07_230939",
  "created_at": "2025-09-08T03:09:39.764258Z",
  "artifacts": {
    "summary_json": "artifacts/summary_json"
  }
}
</file>

<file path="scripts/make-fixture-snapshot.mjs">
#!/usr/bin/env node
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import Papa from "papaparse";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const date = process.argv[2] || "2024-01-15";
const outDir = path.resolve(__dirname, `../fixtures/dk/${date}`);
const candidates = [
  path.resolve(__dirname, `../fixtures/dk/${date}`),
  path.resolve(__dirname, `../tests/fixtures/dk/${date}`),
];

function findInputDir() {
  for (const p of candidates) {
    if (fs.existsSync(path.join(p, "projections.csv")) && fs.existsSync(path.join(p, "player_ids.csv"))) return p;
  }
  return null;
}

function readCsv(file) {
  const text = fs.readFileSync(file, "utf8");
  const res = Papa.parse(text, { header: true, skipEmptyLines: true });
  const rows = res.data;
  // normalize keys to lower-case for easier matching
  return rows.map((r) => {
    const out = {};
    for (const k of Object.keys(r)) out[k.toLowerCase()] = r[k];
    return out;
  });
}

function coerceNumber(v) {
  if (v === null || v === undefined || v === "") return null;
  const n = Number(v);
  return Number.isFinite(n) ? n : null;
}

function normalizePlayers(rows) {
  return rows.map((r) => {
    const pid = r.player_id_dk ?? r.player_id ?? r.dk_id ?? r.id ?? null;
    const pos = r.pos ?? r.pos_primary ?? r.position ?? "";
    const posSplit = String(pos).split("/");
    return {
      player_id_dk: pid === null ? null : String(pid).trim(),
      player_name: String(r.player_name ?? r.name ?? "").trim(),
      team: normalizeTeam(String(r.team ?? r.team_abbrev ?? r.teamabbrev ?? "")),
      pos_primary: String(posSplit[0] ?? "").trim(),
      pos_secondary: posSplit.length > 1 ? String(posSplit[1]).trim() : null,
    };
  });
}

function normalizeProjections(rows) {
  return rows.map((r) => {
    const pid = r.player_id_dk ?? r.player_id ?? r.dk_id ?? r.id ?? null;
    return {
      player_id_dk: pid === null ? null : String(pid).trim(),
      name: String(r.name ?? r.player_name ?? "").trim(),
      team: normalizeTeam(String(r.team ?? r.team_abbrev ?? "")),
      position: String(r.position ?? r.pos ?? "").trim(),
      salary: Number(r.salary ?? r.sal ?? 0),
      proj_fp: Number(r.proj_fp ?? r.proj ?? r.projection ?? r.fp ?? r.fpts ?? 0),
      mins: coerceNumber(r.mins ?? r.minutes),
      ownership: coerceNumber(r.ownership ?? r.own),
      ceiling: coerceNumber(r.ceiling ?? r.ceil),
      floor: coerceNumber(r.floor),
      source: String(r.source ?? "fixture").trim(),
      version_ts: (r.version_ts ?? r.timestamp ?? r.version) ? String(r.version_ts ?? r.timestamp ?? r.version).trim() : null,
    };
  });
}

function merge(players, projections) {
  const byId = new Map(projections.filter((p) => p.player_id_dk).map((p) => [p.player_id_dk, p]));
  const byComposite = new Map(
    projections.map((p) => [makeKey(p.name, p.team, (p.position ?? p.pos ?? "").split("/")[0] ?? ""), p])
  );
  const out = [];
  for (const pl of players) {
    let pj = pl.player_id_dk ? byId.get(pl.player_id_dk) : undefined;
    if (!pj)
      pj = byComposite.get(makeKey(pl.player_name, pl.team, pl.pos_primary));
    if (!pj) continue;
    // Keep the player_id_dk from players as the source of truth
    out.push({ ...pj, ...pl, player_id_dk: pl.player_id_dk });
  }
  return out;
}

function normalizeTeam(t) {
  const u = String(t).trim().toUpperCase();
  const m = { NO: "NOP", NOP: "NOP", PHO: "PHX", PHX: "PHX", SA: "SAS", SAS: "SAS" };
  return m[u] ?? u;
}

function normalizeNameKey(name) {
  return String(name)
    .normalize("NFKD")
    .replace(/[\u0300-\u036f]/g, "")
    .toUpperCase()
    .replace(/\./g, "")
    .replace(/\s+/g, " ")
    .trim();
}

function makeKey(name, team, pos) {
  return `${normalizeNameKey(name)}|${normalizeTeam(team)}|${String(pos).toUpperCase()}`;
}

function main() {
  const dir = findInputDir();
  if (!dir) {
    console.error("Could not find projections.csv and player_ids.csv under fixtures or tests for date", date);
    process.exit(1);
  }
  const playersCsv = path.join(dir, "player_ids.csv");
  const projCsv = path.join(dir, "projections.csv");
  const players = normalizePlayers(readCsv(playersCsv));
  const projections = normalizeProjections(readCsv(projCsv));
  const merged = merge(players, projections);
  fs.mkdirSync(outDir, { recursive: true });
  const outFile = path.join(outDir, "mergedPlayers.json");
  fs.writeFileSync(outFile, JSON.stringify(merged, null, 2));
  console.log(`Wrote ${merged.length} merged players to ${outFile}`);
}

main();
</file>

<file path="scripts/qa-opt-fixture.mjs">
#!/usr/bin/env node
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const date = process.argv[2] || "2024-01-15";
const seedStr = process.argv[3] || `dk-fixture-${date}`;
const target = Number(process.argv[4] || 100);

const slots = ["PG", "SG", "SF", "PF", "C"];
const salaryCap = 50000;
const maxPerTeam = 8;

const fixtureFile = path.resolve(__dirname, `../fixtures/dk/${date}/mergedPlayers.json`);
if (!fs.existsSync(fixtureFile)) {
  console.error("Snapshot not found:", fixtureFile);
  console.error("Run: node scripts/make-fixture-snapshot.mjs", date);
  process.exit(1);
}
const players = JSON.parse(fs.readFileSync(fixtureFile, "utf8"));

function eligibleForSlot(p, slot) {
  const pos = [p.pos_primary, p.pos_secondary].filter(Boolean);
  if (slot === "PG") return pos.includes("PG");
  if (slot === "SG") return pos.includes("SG");
  if (slot === "SF") return pos.includes("SF");
  if (slot === "PF") return pos.includes("PF");
  if (slot === "C") return pos.includes("C");
  if (slot === "G") return pos.includes("PG") || pos.includes("SG");
  if (slot === "F") return pos.includes("SF") || pos.includes("PF");
  if (slot === "UTIL") return true;
  return false;
}

function makeRng(seed) {
  let s = seed >>> 0;
  return () => {
    s = (1664525 * s + 1013904223) >>> 0;
    return (s & 0xffffffff) / 0x100000000;
  };
}
function seedToInt(seed) {
  let h = 2166136261 >>> 0;
  for (let i = 0; i < seed.length; i++) {
    h ^= seed.charCodeAt(i);
    h = Math.imul(h, 16777619);
  }
  return h >>> 0;
}
function pick(arr, rng) {
  if (arr.length === 0) return undefined;
  const i = Math.floor(rng() * arr.length);
  return arr[i];
}
function lineupKey(ids) {
  return ids.slice().sort().join("|");
}

const rng = makeRng(seedToInt(seedStr));
const getId = (p) => (p.player_id_dk && String(p.player_id_dk).trim() !== "" ? String(p.player_id_dk) : String(p.player_name || p.name || ""));
const byId = new Map(players.map((p) => [getId(p), p]));
const eligibleBySlot = Object.fromEntries(slots.map((s) => [s, players.filter((p) => eligibleForSlot(p, s))]));

const triedMax = Math.max(target * 2, target * 200);
let tried = 0;
let valid = 0;
const out = [];
const seen = new Set();
const t0 = Date.now();

while (tried < triedMax && out.length < target) {
  tried++;
  const used = new Set();
  const teamCounts = {};
  const picked = [];
  let ok = true;
  let salary = 0;
  for (const sl of slots) {
    const pool = eligibleBySlot[sl].filter((p) => !used.has(getId(p)) && ((teamCounts[p.team] ?? 0) + 1) <= maxPerTeam);
    const affordable = pool.filter((p) => salary + p.salary <= salaryCap);
    const choice = pick(affordable.length > 0 ? affordable : pool, rng);
    if (!choice) {
      ok = false; break;
    }
    used.add(getId(choice));
    teamCounts[choice.team] = (teamCounts[choice.team] ?? 0) + 1;
    salary += choice.salary;
    picked.push({ slot: sl, player_id_dk: getId(choice) });
    if (salary > salaryCap) { ok = false; break; }
  }
  if (!ok) continue;
  const key = lineupKey(picked.map((x) => x.player_id_dk));
  if (seen.has(key)) continue;
  seen.add(key);
  const score = picked.reduce((s, x) => s + (byId.get(x.player_id_dk)?.proj_fp ?? 0), 0);
  out.push({ id: key, slots: picked, salary, score });
  valid++;
}

out.sort((a, b) => b.score - a.score);
const elapsed = Date.now() - t0;
console.log(JSON.stringify({ date, seed: seedStr, players: players.length, tried, valid, bestScore: out[0]?.score || 0, elapsedMs: elapsed }, null, 2));
</file>

<file path="scripts/README.md">
# Scripts Directory

This directory contains utility scripts, development tools, and automation scripts for the NBA-DFS project.

## Overview

- **Purpose**: Development utilities, data processing scripts, and automation tools
- **Languages**: Python, JavaScript/Node.js, Shell scripts
- **Usage**: Development workflow support and data management

## Directory Structure

```
scripts/
├── pyopt/             # Python optimization scripts
└── README.md          # This file
```

## Script Categories

### Python Optimization (`pyopt/`)
- `optimize_cli.py` - Direct Python optimization interface
- Development and testing utilities for CP-SAT/CBC solvers

### Development Scripts
- Fixture generation and test data preparation
- Database migration and setup utilities
- Build and deployment automation

## Usage Examples

```bash
# Direct Python optimization
python scripts/pyopt/optimize_cli.py --slate-id 20251101_NBA --config configs/optimizer.yaml

# Run with uv environment
uv run python scripts/pyopt/optimize_cli.py [args]
```

## Adding New Scripts

1. Choose appropriate subdirectory or create new category
2. Include shebang line and proper error handling
3. Add usage documentation in script header
4. Update this README with new script descriptions
</file>

<file path="tests/fixtures/dk/2024-01-15/DKEntries(live).csv">
Entry ID,Contest Name,Contest ID,Entry Fee,PG,SG,SF,PF,C,G,F,UTIL,,Instructions,,,,,,,,
4474921623,NBA $30K High Five [Single Entry],169097194,$5,,,,,,,,,,1. Column A lists all of your contest entries for this draftgroup,,,,,,,,
4474912181,NBA $8K Daily Dollar [Single Entry],169097196,$1,,,,,,,,,,2. Your current lineup is listed next to each entry (blank for reservations),,,,,,,,
4474911307,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,3. You can change the lineup for an entry by entering the IDs of the players in the row next to that entry,,,,,,,,
4474911308,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,4. Use data from the Name+ID column or the ID column; you cannot use just the player's name,,,,,,,,
4474911309,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,5. For faster processing only include entries you are changing in the file you upload,,,,,,,,
4474911310,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,,,,,,,,,
4474911311,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,Position,Name + ID,Name,ID,Roster Position,Salary,Game Info,TeamAbbrev,AvgPointsPerGame
4474911312,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,PF/C,Giannis Antetokounmpo (36385555),Giannis Antetokounmpo,36385555,PF/C/F/UTIL,11000,MIL@PHI 10/23/2024 07:30PM ET,MIL,59.27
4474911313,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,C,Joel Embiid (36385559),Joel Embiid,36385559,C/UTIL,10500,MIL@PHI 10/23/2024 07:30PM ET,PHI,62.25
4474911314,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,PG,Trae Young (36385561),Trae Young,36385561,PG/G/UTIL,9900,BKN@ATL 10/23/2024 07:30PM ET,ATL,48.74
4474911315,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,PG,Ja Morant (36385564),Ja Morant,36385564,PG/G/UTIL,9500,MEM@UTA 10/23/2024 09:00PM ET,MEM,46.67
4474911316,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,PG,Damian Lillard (36385567),Damian Lillard,36385567,PG/G/UTIL,9400,MIL@PHI 10/23/2024 07:30PM ET,MIL,43.29
4474911317,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,PG,Tyrese Haliburton (36385570),Tyrese Haliburton,36385570,PG/G/UTIL,9300,IND@DET 10/23/2024 07:00PM ET,IND,45.65
4474911318,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,PG,James Harden (36385573),James Harden,36385573,PG/G/UTIL,9200,PHX@LAC 10/23/2024 10:00PM ET,LAC,40.34
4474911319,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,PG/SG,Devin Booker (36385576),Devin Booker,36385576,PG/SG/G/UTIL,9100,PHX@LAC 10/23/2024 10:00PM ET,PHX,45.76
4474911320,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,PG,Tyrese Maxey (36385580),Tyrese Maxey,36385580,PG/G/UTIL,9000,MIL@PHI 10/23/2024 07:30PM ET,PHI,43.94
4474911321,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,PF,Scottie Barnes (36385583),Scottie Barnes,36385583,PF/F/UTIL,8900,CLE@TOR 10/23/2024 07:30PM ET,TOR,44.94
4474911322,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,PG,LaMelo Ball (36385586),LaMelo Ball,36385586,PG/G/UTIL,8800,CHA@HOU 10/23/2024 08:00PM ET,CHA,46.65
4474911323,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,PG/SG,Donovan Mitchell (36385589),Donovan Mitchell,36385589,PG/SG/G/UTIL,8700,CLE@TOR 10/23/2024 07:30PM ET,CLE,47.14
4474911324,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,PG,Cade Cunningham (36385595),Cade Cunningham,36385595,PG/G/UTIL,8600,IND@DET 10/23/2024 07:00PM ET,DET,41.4
4474911325,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,C,Alperen Sengun (36385593),Alperen Sengun,36385593,C/UTIL,8600,CHA@HOU 10/23/2024 08:00PM ET,HOU,43.88
4474911326,NBA $30K Sharpshooter [20 Entry Max],169099493,$3,,,,,,,,,,PF,Kevin Durant (36385598),Kevin Durant,36385598,PF/F/UTIL,8600,PHX@LAC 10/23/2024 10:00PM ET,PHX,46.79
4474911535,NBA $20K And-One,169099494,$1,,,,,,,,,,PF,Paolo Banchero (36385601),Paolo Banchero,36385601,PF/F/UTIL,8500,ORL@MIA 10/23/2024 07:30PM ET,ORL,42.18
4474911536,NBA $20K And-One,169099494,$1,,,,,,,,,,PG,Stephen Curry (36385604),Stephen Curry,36385604,PG/G/UTIL,8500,GSW@POR 10/23/2024 10:00PM ET,GSW,42.93
4474911537,NBA $20K And-One,169099494,$1,,,,,,,,,,PF,Kawhi Leonard (36385607),Kawhi Leonard,36385607,PF/F/UTIL,8400,PHX@LAC 10/23/2024 10:00PM ET,LAC,41.66
4474911538,NBA $20K And-One,169099494,$1,,,,,,,,,,SF/PF,Pascal Siakam (36385616),Pascal Siakam,36385616,SF/PF/F/UTIL,8300,IND@DET 10/23/2024 07:00PM ET,IND,39.14
4474911539,NBA $20K And-One,169099494,$1,,,,,,,,,,PG/SG,Dejounte Murray (36385610),Dejounte Murray,36385610,PG/SG/G/UTIL,8300,CHI@NOP 10/23/2024 08:00PM ET,NOP,42.83
4474911540,NBA $20K And-One,169099494,$1,,,,,,,,,,C,Nikola Vucevic (36385614),Nikola Vucevic,36385614,C/UTIL,8300,CHI@NOP 10/23/2024 08:00PM ET,CHI,39.97
4474911541,NBA $20K And-One,169099494,$1,,,,,,,,,,C,Bam Adebayo (36385624),Bam Adebayo,36385624,C/UTIL,8200,ORL@MIA 10/23/2024 07:30PM ET,MIA,41.78
4474911542,NBA $20K And-One,169099494,$1,,,,,,,,,,SF/PF,Paul George (36385620),Paul George,36385620,SF/PF/F/UTIL,8200,MIL@PHI 10/23/2024 07:30PM ET,PHI,39.19
4474911543,NBA $20K And-One,169099494,$1,,,,,,,,,,SF,Jimmy Butler (36385634),Jimmy Butler,36385634,SF/F/UTIL,8100,ORL@MIA 10/23/2024 07:30PM ET,MIA,37.93
4474911544,NBA $20K And-One,169099494,$1,,,,,,,,,,PF,Zion Williamson (36385626),Zion Williamson,36385626,PF/F/UTIL,8100,CHI@NOP 10/23/2024 08:00PM ET,NOP,40.45
4474911545,NBA $20K And-One,169099494,$1,,,,,,,,,,SG/SF,Desmond Bane (36385629),Desmond Bane,36385629,SG/SF/F/G/UTIL,8000,MEM@UTA 10/23/2024 09:00PM ET,MEM,40.96
4474911546,NBA $20K And-One,169099494,$1,,,,,,,,,,PF/C,Jaren Jackson Jr. (36385640),Jaren Jackson Jr.,36385640,PF/C/F/UTIL,7900,MEM@UTA 10/23/2024 09:00PM ET,MEM,38.35
4474911547,NBA $20K And-One,169099494,$1,,,,,,,,,,SG,Jalen Green (36385644),Jalen Green,36385644,SG/G/UTIL,7900,CHA@HOU 10/23/2024 08:00PM ET,HOU,33.92
4474911548,NBA $20K And-One,169099494,$1,,,,,,,,,,PF,Jalen Johnson (36385637),Jalen Johnson,36385637,PF/F/UTIL,7800,BKN@ATL 10/23/2024 07:30PM ET,ATL,36.7
4474911549,NBA $20K And-One,169099494,$1,,,,,,,,,,PG/SG,Cam Thomas (36385647),Cam Thomas,36385647,PG/SG/G/UTIL,7800,BKN@ATL 10/23/2024 07:30PM ET,BKN,32.87
4474911550,NBA $20K And-One,169099494,$1,,,,,,,,,,C,Jarrett Allen (36385651),Jarrett Allen,36385651,C/UTIL,7800,CLE@TOR 10/23/2024 07:30PM ET,CLE,37.44
4474911551,NBA $20K And-One,169099494,$1,,,,,,,,,,PF/C,Evan Mobley (36385653),Evan Mobley,36385653,PF/C/F/UTIL,7700,CLE@TOR 10/23/2024 07:30PM ET,CLE,36.88
4474911552,NBA $20K And-One,169099494,$1,,,,,,,,,,SF/PF,Lauri Markkanen (36385657),Lauri Markkanen,36385657,SF/PF/F/UTIL,7500,MEM@UTA 10/23/2024 09:00PM ET,UTA,40.61
4474911553,NBA $20K And-One,169099494,$1,,,,,,,,,,PG/SG,Coby White (36385661),Coby White,36385661,PG/SG/G/UTIL,7500,CHI@NOP 10/23/2024 08:00PM ET,CHI,34.88
4474911554,NBA $20K And-One,169099494,$1,,,,,,,,,,PF,Miles Bridges (36385668),Miles Bridges,36385668,PF/F/UTIL,7400,CHA@HOU 10/23/2024 08:00PM ET,CHA,38.56
4474921722,NBA $10K And-One,169113170,$1,,,,,,,,,,PG,Fred VanVleet (36385671),Fred VanVleet,36385671,PG/G/UTIL,7400,CHA@HOU 10/23/2024 08:00PM ET,HOU,39.75
4474921723,NBA $10K And-One,169113170,$1,,,,,,,,,,C,Deandre Ayton (36385679),Deandre Ayton,36385679,C/UTIL,7400,GSW@POR 10/23/2024 10:00PM ET,POR,36.57
4474921724,NBA $10K And-One,169113170,$1,,,,,,,,,,SF,Brandon Ingram (36385681),Brandon Ingram,36385681,SF/F/UTIL,7400,CHI@NOP 10/23/2024 08:00PM ET,NOP,37.23
4474921725,NBA $10K And-One,169113170,$1,,,,,,,,,,PG,Darius Garland (36385674),Darius Garland,36385674,PG/G/UTIL,7300,CLE@TOR 10/23/2024 07:30PM ET,CLE,33.34
4474921726,NBA $10K And-One,169113170,$1,,,,,,,,,,C,Jalen Duren (36385677),Jalen Duren,36385677,C/UTIL,7300,IND@DET 10/23/2024 07:00PM ET,DET,34.58
4474921727,NBA $10K And-One,169113170,$1,,,,,,,,,,SG/SF,Zach LaVine (36385684),Zach LaVine,36385684,SG/SF/F/G/UTIL,7300,CHI@NOP 10/23/2024 08:00PM ET,CHI,34.33
4474921728,NBA $10K And-One,169113170,$1,,,,,,,,,,PG,Immanuel Quickley (36385689),Immanuel Quickley,36385689,PG/G/UTIL,7200,CLE@TOR 10/23/2024 07:30PM ET,TOR,31.52
4474921729,NBA $10K And-One,169113170,$1,,,,,,,,,,SF,Franz Wagner (36385665),Franz Wagner,36385665,SF/F/UTIL,7200,ORL@MIA 10/23/2024 07:30PM ET,ORL,34.88
4474921730,NBA $10K And-One,169113170,$1,,,,,,,,,,C,Nic Claxton (36385695),Nic Claxton,36385695,C/UTIL,7100,BKN@ATL 10/23/2024 07:30PM ET,BKN,32.78
4474921731,NBA $10K And-One,169113170,$1,,,,,,,,,,PG/SG,Anfernee Simons (36385702),Anfernee Simons,36385702,PG/SG/G/UTIL,7100,GSW@POR 10/23/2024 10:00PM ET,POR,37.08
4474921732,NBA $10K And-One,169113170,$1,,,,,,,,,,PG,Josh Giddey (36385692),Josh Giddey,36385692,PG/G/UTIL,7100,CHI@NOP 10/23/2024 08:00PM ET,CHI,28.4
4474921733,NBA $10K And-One,169113170,$1,,,,,,,,,,SG/SF,Khris Middleton (36385697),Khris Middleton,36385697,SG/SF/F/G/UTIL,7100,MIL@PHI 10/23/2024 07:30PM ET,MIL,32.53
4474921734,NBA $10K And-One,169113170,$1,,,,,,,,,,PG/SG,Tyler Herro (36385711),Tyler Herro,36385711,PG/SG/G/UTIL,7000,ORL@MIA 10/23/2024 07:30PM ET,MIA,36.07
4474921735,NBA $10K And-One,169113170,$1,,,,,,,,,,SG/SF,Brandon Miller (36385706),Brandon Miller,36385706,SG/SF/F/G/UTIL,7000,CHA@HOU 10/23/2024 08:00PM ET,CHA,29.44
4474921736,NBA $10K And-One,169113170,$1,,,,,,,,,,C,Andre Drummond (36385715),Andre Drummond,36385715,C/UTIL,7000,MIL@PHI 10/23/2024 07:30PM ET,PHI,22.92
4474921737,NBA $10K And-One,169113170,$1,,,,,,,,,,SF/PF,RJ Barrett (36385730),RJ Barrett,36385730,SF/PF/F/UTIL,6900,CLE@TOR 10/23/2024 07:30PM ET,TOR,33.52
4474921738,NBA $10K And-One,169113170,$1,,,,,,,,,,C,Myles Turner (36385717),Myles Turner,36385717,C/UTIL,6900,IND@DET 10/23/2024 07:00PM ET,IND,32.67
4474921739,NBA $10K And-One,169113170,$1,,,,,,,,,,PG,Terry Rozier (36385719),Terry Rozier,36385719,PG/G/UTIL,6900,ORL@MIA 10/23/2024 07:30PM ET,MIA,36.43
4474921740,NBA $10K And-One,169113170,$1,,,,,,,,,,SF/PF,Deni Avdija (36385722),Deni Avdija,36385722,SF/PF/F/UTIL,6900,GSW@POR 10/23/2024 10:00PM ET,POR,31.85
4474921741,NBA $10K And-One,169113170,$1,,,,,,,,,,PG/SG,CJ McCollum (36385726),CJ McCollum,36385726,PG/SG/G/UTIL,6900,CHI@NOP 10/23/2024 08:00PM ET,NOP,35.96
,,,,,,,,,,,,,PF/C,Jabari Smith Jr. (36385734),Jabari Smith Jr.,36385734,PF/C/F/UTIL,6800,CHA@HOU 10/23/2024 08:00PM ET,HOU,29.87
,,,,,,,,,,,,,SG/SF,Bradley Beal (36385742),Bradley Beal,36385742,SG/SF/F/G/UTIL,6700,PHX@LAC 10/23/2024 10:00PM ET,PHX,33.55
,,,,,,,,,,,,,PF/C,Draymond Green (36385738),Draymond Green,36385738,PF/C/F/UTIL,6700,GSW@POR 10/23/2024 10:00PM ET,GSW,29.98
,,,,,,,,,,,,,PG,Keyonte George (36385747),Keyonte George,36385747,PG/G/UTIL,6600,MEM@UTA 10/23/2024 09:00PM ET,UTA,24.04
,,,,,,,,,,,,,C,Ivica Zubac (36385750),Ivica Zubac,36385750,C/UTIL,6600,PHX@LAC 10/23/2024 10:00PM ET,LAC,28.56
,,,,,,,,,,,,,C,Jakob Poeltl (36385804),Jakob Poeltl,36385804,C/UTIL,6500,CLE@TOR 10/23/2024 07:30PM ET,TOR,29.9
,,,,,,,,,,,,,C,Jusuf Nurkic (36385755),Jusuf Nurkic,36385755,C/UTIL,6500,PHX@LAC 10/23/2024 10:00PM ET,PHX,34.07
,,,,,,,,,,,,,PF,Jonathan Kuminga (36385752),Jonathan Kuminga,36385752,PF/F/UTIL,6500,GSW@POR 10/23/2024 10:00PM ET,GSW,27.48
,,,,,,,,,,,,,C,Clint Capela (36385757),Clint Capela,36385757,C/UTIL,6400,BKN@ATL 10/23/2024 07:30PM ET,ATL,31.21
,,,,,,,,,,,,,PF,Tobias Harris (36385759),Tobias Harris,36385759,PF/F/UTIL,6400,IND@DET 10/23/2024 07:00PM ET,DET,32.44
,,,,,,,,,,,,,PG/SF,Amen Thompson (36385762),Amen Thompson,36385762,PG/SF/F/G/UTIL,6400,CHA@HOU 10/23/2024 08:00PM ET,HOU,25.18
,,,,,,,,,,,,,SG/SF,Kelly Oubre Jr. (36385767),Kelly Oubre Jr.,36385767,SG/SF/F/G/UTIL,6400,MIL@PHI 10/23/2024 07:30PM ET,PHI,27.66
,,,,,,,,,,,,,PF,Jerami Grant (36385774),Jerami Grant,36385774,PF/F/UTIL,6300,GSW@POR 10/23/2024 10:00PM ET,POR,32.51
,,,,,,,,,,,,,C,Brook Lopez (36385772),Brook Lopez,36385772,C/UTIL,6300,MIL@PHI 10/23/2024 07:30PM ET,MIL,27.87
,,,,,,,,,,,,,PG,Dennis Schroder (36385783),Dennis Schroder,36385783,PG/G/UTIL,6200,BKN@ATL 10/23/2024 07:30PM ET,BKN,29.01
,,,,,,,,,,,,,C,Zach Edey (36385777),Zach Edey,36385777,C/UTIL,6200,MEM@UTA 10/23/2024 09:00PM ET,MEM,0
,,,,,,,,,,,,,PG/SG,Caris LeVert (36385779),Caris LeVert,36385779,PG/SG/G/UTIL,6200,CLE@TOR 10/23/2024 07:30PM ET,CLE,28.73
,,,,,,,,,,,,,C,John Collins (36385786),John Collins,36385786,C/UTIL,6100,MEM@UTA 10/23/2024 09:00PM ET,UTA,30.78
,,,,,,,,,,,,,SG,Collin Sexton (36385792),Collin Sexton,36385792,SG/G/UTIL,6100,MEM@UTA 10/23/2024 09:00PM ET,UTA,31.23
,,,,,,,,,,,,,PF/C,Bobby Portis (36385788),Bobby Portis,36385788,PF/C/F/UTIL,6100,MIL@PHI 10/23/2024 07:30PM ET,MIL,28.23
,,,,,,,,,,,,,PG/SG,Jaden Ivey (36385795),Jaden Ivey,36385795,PG/SG/G/UTIL,6000,IND@DET 10/23/2024 07:00PM ET,DET,27.6
,,,,,,,,,,,,,SG/SF,Trey Murphy III (36385799),Trey Murphy III,36385799,SG/SF/F/G/UTIL,6000,CHI@NOP 10/23/2024 08:00PM ET,NOP,28.27
,,,,,,,,,,,,,SG,Bogdan Bogdanovic (36385814),Bogdan Bogdanovic,36385814,SG/G/UTIL,5900,BKN@ATL 10/23/2024 07:30PM ET,ATL,29.95
,,,,,,,,,,,,,PG,Ben Simmons (36385817),Ben Simmons,36385817,PG/G/UTIL,5900,BKN@ATL 10/23/2024 07:30PM ET,BKN,26.85
,,,,,,,,,,,,,PG/SG,Marcus Smart (36385806),Marcus Smart,36385806,PG/SG/G/UTIL,5900,MEM@UTA 10/23/2024 09:00PM ET,MEM,28.31
,,,,,,,,,,,,,C,Kelly Olynyk (36385810),Kelly Olynyk,36385810,C/UTIL,5900,CLE@TOR 10/23/2024 07:30PM ET,TOR,25.22
,,,,,,,,,,,,,C,Mark Williams (36385812),Mark Williams,36385812,C/UTIL,5900,CHA@HOU 10/23/2024 08:00PM ET,CHA,30.55
,,,,,,,,,,,,,PF,Max Strus (36385832),Max Strus,36385832,PF/F/UTIL,5800,CLE@TOR 10/23/2024 07:30PM ET,CLE,26.76
,,,,,,,,,,,,,SF/PF,Jaime Jaquez Jr. (36385828),Jaime Jaquez Jr.,36385828,SF/PF/F/UTIL,5800,ORL@MIA 10/23/2024 07:30PM ET,MIA,23.05
,,,,,,,,,,,,,SG/SF,Norman Powell (36385820),Norman Powell,36385820,SG/SF/F/G/UTIL,5800,PHX@LAC 10/23/2024 10:00PM ET,LAC,20.9
,,,,,,,,,,,,,PG,Scoot Henderson (36385825),Scoot Henderson,36385825,PG/G/UTIL,5800,GSW@POR 10/23/2024 10:00PM ET,POR,27.19
,,,,,,,,,,,,,SF/PF,Andrew Wiggins (36385835),Andrew Wiggins,36385835,SF/PF/F/UTIL,5800,GSW@POR 10/23/2024 10:00PM ET,GSW,23.76
,,,,,,,,,,,,,SF/PF,Patrick Williams (36385839),Patrick Williams,36385839,SF/PF/F/UTIL,5700,CHI@NOP 10/23/2024 08:00PM ET,CHI,20.52
,,,,,,,,,,,,,SG,Jordan Clarkson (36385843),Jordan Clarkson,36385843,SG/G/UTIL,5600,MEM@UTA 10/23/2024 09:00PM ET,UTA,30.16
,,,,,,,,,,,,,SF/PF,Cameron Johnson (36385857),Cameron Johnson,36385857,SF/PF/F/UTIL,5500,BKN@ATL 10/23/2024 07:30PM ET,BKN,25.29
,,,,,,,,,,,,,C,Walker Kessler (36385849),Walker Kessler,36385849,C/UTIL,5500,MEM@UTA 10/23/2024 09:00PM ET,UTA,24.32
,,,,,,,,,,,,,SF/PF,Tari Eason (36385853),Tari Eason,36385853,SF/PF/F/UTIL,5500,CHA@HOU 10/23/2024 08:00PM ET,HOU,25.01
,,,,,,,,,,,,,PG,Tyus Jones (36385861),Tyus Jones,36385861,PG/G/UTIL,5500,PHX@LAC 10/23/2024 10:00PM ET,PHX,29.63
,,,,,,,,,,,,,SG,Buddy Hield (36385872),Buddy Hield,36385872,SG/G/UTIL,5500,GSW@POR 10/23/2024 10:00PM ET,GSW,22.9
,,,,,,,,,,,,,PG,Lonzo Ball (36385846),Lonzo Ball,36385846,PG/G/UTIL,5500,CHI@NOP 10/23/2024 08:00PM ET,CHI,0
,,,,,,,,,,,,,C,Herbert Jones (36385851),Herbert Jones,36385851,C/UTIL,5500,CHI@NOP 10/23/2024 08:00PM ET,NOP,23.81
,,,,,,,,,,,,,PF/C,Onyeka Okongwu (36385864),Onyeka Okongwu,36385864,PF/C/F/UTIL,5400,BKN@ATL 10/23/2024 07:30PM ET,ATL,23.91
,,,,,,,,,,,,,C,Wendell Carter Jr. (36385875),Wendell Carter Jr.,36385875,C/UTIL,5400,ORL@MIA 10/23/2024 07:30PM ET,ORL,24.19
,,,,,,,,,,,,,PG/SG,Ayo Dosunmu (36385868),Ayo Dosunmu,36385868,PG/SG/G/UTIL,5400,CHI@NOP 10/23/2024 08:00PM ET,CHI,23.53
,,,,,,,,,,,,,SG/SF,Bennedict Mathurin (36385882),Bennedict Mathurin,36385882,SG/SF/F/G/UTIL,5200,IND@DET 10/23/2024 07:00PM ET,IND,24.13
,,,,,,,,,,,,,PG/SF,Shaedon Sharpe (36385877),Shaedon Sharpe,36385877,PG/SF/F/G/UTIL,5200,GSW@POR 10/23/2024 10:00PM ET,POR,28.95
,,,,,,,,,,,,,SG/SF,Gary Trent Jr. (36385887),Gary Trent Jr.,36385887,SG/SF/F/G/UTIL,5200,MIL@PHI 10/23/2024 07:30PM ET,MIL,22.94
,,,,,,,,,,,,,PG,Kyle Lowry (36385892),Kyle Lowry,36385892,PG/G/UTIL,5200,MIL@PHI 10/23/2024 07:30PM ET,PHI,21.26
,,,,,,,,,,,,,SG/SF,Bruce Brown (36385899),Bruce Brown,36385899,SG/SF/F/G/UTIL,5100,CLE@TOR 10/23/2024 07:30PM ET,TOR,22.38
,,,,,,,,,,,,,PG/SG,Andrew Nembhard (36385907),Andrew Nembhard,36385907,PG/SG/G/UTIL,5100,IND@DET 10/23/2024 07:00PM ET,IND,21.53
,,,,,,,,,,,,,PG,Jalen Suggs (36385904),Jalen Suggs,36385904,PG/G/UTIL,5100,ORL@MIA 10/23/2024 07:30PM ET,ORL,25.08
,,,,,,,,,,,,,SF/PF,Matas Buzelis (36385895),Matas Buzelis,36385895,SF/PF/F/UTIL,5100,CHI@NOP 10/23/2024 08:00PM ET,CHI,0
,,,,,,,,,,,,,SF/PF,De'Andre Hunter (36385927),De'Andre Hunter,36385927,SF/PF/F/UTIL,5000,BKN@ATL 10/23/2024 07:30PM ET,ATL,24.97
,,,,,,,,,,,,,PF/C,Santi Aldama (36385943),Santi Aldama,36385943,PF/C/F/UTIL,5000,MEM@UTA 10/23/2024 09:00PM ET,MEM,24.93
,,,,,,,,,,,,,SF/PF,Aaron Nesmith (36385920),Aaron Nesmith,36385920,SF/PF/F/UTIL,5000,IND@DET 10/23/2024 07:00PM ET,IND,22.78
,,,,,,,,,,,,,SG,Kentavious Caldwell-Pope (36385924),Kentavious Caldwell-Pope,36385924,SG/G/UTIL,5000,ORL@MIA 10/23/2024 07:30PM ET,ORL,20.56
,,,,,,,,,,,,,PG/SG,Reed Sheppard (36385931),Reed Sheppard,36385931,PG/SG/G/UTIL,5000,CHA@HOU 10/23/2024 08:00PM ET,HOU,0
,,,,,,,,,,,,,SG/SF,Terance Mann (36385915),Terance Mann,36385915,SG/SF/F/G/UTIL,5000,PHX@LAC 10/23/2024 10:00PM ET,LAC,17.25
,,,,,,,,,,,,,SG/SF,Grayson Allen (36385935),Grayson Allen,36385935,SG/SF/F/G/UTIL,5000,PHX@LAC 10/23/2024 10:00PM ET,PHX,26.35
,,,,,,,,,,,,,PG/SG,Brandin Podziemski (36385911),Brandin Podziemski,36385911,PG/SG/G/UTIL,5000,GSW@POR 10/23/2024 10:00PM ET,GSW,24.07
,,,,,,,,,,,,,PF,Caleb Martin (36385940),Caleb Martin,36385940,PF/F/UTIL,5000,MIL@PHI 10/23/2024 07:30PM ET,PHI,21.08
,,,,,,,,,,,,,PG/SG,Davion Mitchell (36386040),Davion Mitchell,36386040,PG/SG/G/UTIL,4900,CLE@TOR 10/23/2024 07:30PM ET,TOR,10.49
,,,,,,,,,,,,,SF/PF,Ausar Thompson (36385949),Ausar Thompson,36385949,SF/PF/F/UTIL,4900,IND@DET 10/23/2024 07:00PM ET,DET,23.24
,,,,,,,,,,,,,C,Trayce Jackson-Davis (36385947),Trayce Jackson-Davis,36385947,C/UTIL,4900,GSW@POR 10/23/2024 10:00PM ET,GSW,18.92
,,,,,,,,,,,,,PG/SG,Dyson Daniels (36385958),Dyson Daniels,36385958,PG/SG/G/UTIL,4800,BKN@ATL 10/23/2024 07:30PM ET,ATL,17.03
,,,,,,,,,,,,,C,Day'Ron Sharpe (36385973),Day'Ron Sharpe,36385973,C/UTIL,4800,BKN@ATL 10/23/2024 07:30PM ET,BKN,18.7
,,,,,,,,,,,,,PG,T.J. McConnell (36385966),T.J. McConnell,36385966,PG/G/UTIL,4800,IND@DET 10/23/2024 07:00PM ET,IND,23.91
,,,,,,,,,,,,,SG/SF,Duncan Robinson (36385953),Duncan Robinson,36385953,SG/SF/F/G/UTIL,4800,ORL@MIA 10/23/2024 07:30PM ET,MIA,21.53
,,,,,,,,,,,,,PG/SG,Cole Anthony (36385969),Cole Anthony,36385969,PG/SG/G/UTIL,4800,ORL@MIA 10/23/2024 07:30PM ET,ORL,22.12
,,,,,,,,,,,,,PG/SG,Kevin Porter Jr. (36385962),Kevin Porter Jr.,36385962,PG/SG/G/UTIL,4800,PHX@LAC 10/23/2024 10:00PM ET,LAC,0
,,,,,,,,,,,,,SF,Zaccharie Risacher (36385981),Zaccharie Risacher,36385981,SF/F/UTIL,4700,BKN@ATL 10/23/2024 07:30PM ET,ATL,0
,,,,,,,,,,,,,PF,Taylor Hendricks (36385978),Taylor Hendricks,36385978,PF/F/UTIL,4700,MEM@UTA 10/23/2024 09:00PM ET,UTA,17.54
,,,,,,,,,,,,,SG/SF,Gradey Dick (36386082),Gradey Dick,36386082,SG/SF/F/G/UTIL,4700,CLE@TOR 10/23/2024 07:30PM ET,TOR,14.47
,,,,,,,,,,,,,SF,Ronald Holland II (36385975),Ronald Holland II,36385975,SF/F/UTIL,4700,IND@DET 10/23/2024 07:00PM ET,DET,0
,,,,,,,,,,,,,SG/SF,Dillon Brooks (36385984),Dillon Brooks,36385984,SG/SF/F/G/UTIL,4700,CHA@HOU 10/23/2024 08:00PM ET,HOU,21.85
,,,,,,,,,,,,,PF/C,Noah Clowney (36386001),Noah Clowney,36386001,PF/C/F/UTIL,4600,BKN@ATL 10/23/2024 07:30PM ET,BKN,13.45
,,,,,,,,,,,,,SF/PF,Simone Fontecchio (36385997),Simone Fontecchio,36385997,SF/PF/F/UTIL,4600,IND@DET 10/23/2024 07:00PM ET,DET,19.97
,,,,,,,,,,,,,PG/SG,Josh Richardson (36385993),Josh Richardson,36385993,PG/SG/G/UTIL,4600,ORL@MIA 10/23/2024 07:30PM ET,MIA,19.18
,,,,,,,,,,,,,PF/C,Grant Williams (36385989),Grant Williams,36385989,PF/C/F/UTIL,4600,CHA@HOU 10/23/2024 08:00PM ET,CHA,21.32
,,,,,,,,,,,,,PF/C,Kyle Filipowski (36386015),Kyle Filipowski,36386015,PF/C/F/UTIL,4500,MEM@UTA 10/23/2024 09:00PM ET,UTA,0
,,,,,,,,,,,,,SF/PF,Jake LaRavia (36386033),Jake LaRavia,36386033,SF/PF/F/UTIL,4500,MEM@UTA 10/23/2024 09:00PM ET,MEM,20.43
,,,,,,,,,,,,,SG,Sam Merrill (36386025),Sam Merrill,36386025,SG/G/UTIL,4500,CLE@TOR 10/23/2024 07:30PM ET,CLE,13.68
,,,,,,,,,,,,,PF/C,Obi Toppin (36386009),Obi Toppin,36386009,PF/C/F/UTIL,4500,IND@DET 10/23/2024 07:00PM ET,IND,19.99
,,,,,,,,,,,,,SG/SF,Tim Hardaway Jr. (36386028),Tim Hardaway Jr.,36386028,SG/SF/F/G/UTIL,4500,IND@DET 10/23/2024 07:00PM ET,DET,20.96
,,,,,,,,,,,,,C,Steven Adams (36386013),Steven Adams,36386013,C/UTIL,4500,CHA@HOU 10/23/2024 08:00PM ET,HOU,0
,,,,,,,,,,,,,SF/PF,Derrick Jones Jr. (36386019),Derrick Jones Jr.,36386019,SF/PF/F/UTIL,4500,PHX@LAC 10/23/2024 10:00PM ET,LAC,17.39
,,,,,,,,,,,,,PG/SG,De'Anthony Melton (36386005),De'Anthony Melton,36386005,PG/SG/G/UTIL,4500,GSW@POR 10/23/2024 10:00PM ET,GSW,24.15
,,,,,,,,,,,,,C,Donovan Clingan (36386023),Donovan Clingan,36386023,C/UTIL,4500,GSW@POR 10/23/2024 10:00PM ET,POR,0
,,,,,,,,,,,,,SG,Eric Gordon (36386037),Eric Gordon,36386037,SG/G/UTIL,4500,MIL@PHI 10/23/2024 07:30PM ET,PHI,19.5
,,,,,,,,,,,,,SF/PF,Kyle Anderson (36386044),Kyle Anderson,36386044,SF/PF/F/UTIL,4400,GSW@POR 10/23/2024 10:00PM ET,GSW,18.48
,,,,,,,,,,,,,SF/PF,Dorian Finney-Smith (36386054),Dorian Finney-Smith,36386054,SF/PF/F/UTIL,4300,BKN@ATL 10/23/2024 07:30PM ET,BKN,19.91
,,,,,,,,,,,,,PF,Ochai Agbaji (36386262),Ochai Agbaji,36386262,PF/F/UTIL,4300,CLE@TOR 10/23/2024 07:30PM ET,TOR,13.21
,,,,,,,,,,,,,C,Isaiah Stewart (36386058),Isaiah Stewart,36386058,C/UTIL,4300,IND@DET 10/23/2024 07:00PM ET,DET,24.17
,,,,,,,,,,,,,C,Kel'el Ware (36386048),Kel'el Ware,36386048,C/UTIL,4300,ORL@MIA 10/23/2024 07:30PM ET,MIA,0
,,,,,,,,,,,,,PF/C,Moritz Wagner (36386064),Moritz Wagner,36386064,PF/C/F/UTIL,4300,ORL@MIA 10/23/2024 07:30PM ET,ORL,18.87
,,,,,,,,,,,,,SF/PF,Royce O'Neale (36386050),Royce O'Neale,36386050,SF/PF/F/UTIL,4300,PHX@LAC 10/23/2024 10:00PM ET,PHX,20.66
,,,,,,,,,,,,,SF/PF,Taurean Prince (36386060),Taurean Prince,36386060,SF/PF/F/UTIL,4300,MIL@PHI 10/23/2024 07:30PM ET,MIL,17.37
,,,,,,,,,,,,,SF/PF,Vince Williams Jr. (36386074),Vince Williams Jr.,36386074,SF/PF/F/UTIL,4200,MEM@UTA 10/23/2024 09:00PM ET,MEM,25.12
,,,,,,,,,,,,,SF/PF,Georges Niang (36386087),Georges Niang,36386087,SF/PF/F/UTIL,4200,CLE@TOR 10/23/2024 07:30PM ET,CLE,15.83
,,,,,,,,,,,,,PG/SG,Marcus Sasser (36386093),Marcus Sasser,36386093,PG/SG/G/UTIL,4200,IND@DET 10/23/2024 07:00PM ET,DET,17.04
,,,,,,,,,,,,,C,Thomas Bryant (36386091),Thomas Bryant,36386091,C/UTIL,4200,ORL@MIA 10/23/2024 07:30PM ET,MIA,12.21
,,,,,,,,,,,,,SF/PF,Josh Green (36386078),Josh Green,36386078,SF/PF/F/UTIL,4200,CHA@HOU 10/23/2024 08:00PM ET,CHA,16.12
,,,,,,,,,,,,,C,Mason Plumlee (36386068),Mason Plumlee,36386068,C/UTIL,4200,PHX@LAC 10/23/2024 10:00PM ET,PHX,13.94
,,,,,,,,,,,,,PF/C,Jalen Smith (36386070),Jalen Smith,36386070,PF/C/F/UTIL,4200,CHI@NOP 10/23/2024 08:00PM ET,CHI,18.84
,,,,,,,,,,,,,SG/SF,Bojan Bogdanovic (36386097),Bojan Bogdanovic,36386097,SG/SF/F/G/UTIL,4100,BKN@ATL 10/23/2024 07:30PM ET,BKN,21.98
,,,,,,,,,,,,,PG,Scotty Pippen Jr. (36386109),Scotty Pippen Jr.,36386109,PG/G/UTIL,4100,MEM@UTA 10/23/2024 09:00PM ET,MEM,27.66
,,,,,,,,,,,,,PF/C,Jonathan Isaac (36386102),Jonathan Isaac,36386102,PF/C/F/UTIL,4100,ORL@MIA 10/23/2024 07:30PM ET,ORL,17.21
,,,,,,,,,,,,,PF,Nikola Jovic (36386118),Nikola Jovic,36386118,PF/F/UTIL,4100,ORL@MIA 10/23/2024 07:30PM ET,MIA,18.24
,,,,,,,,,,,,,PF,Nicolas Batum (36386125),Nicolas Batum,36386125,PF/F/UTIL,4100,PHX@LAC 10/23/2024 10:00PM ET,LAC,17.14
,,,,,,,,,,,,,SF/PF,Toumani Camara (36386121),Toumani Camara,36386121,SF/PF/F/UTIL,4100,GSW@POR 10/23/2024 10:00PM ET,POR,18.2
,,,,,,,,,,,,,PF,Torrey Craig (36386106),Torrey Craig,36386106,PF/F/UTIL,4100,CHI@NOP 10/23/2024 08:00PM ET,CHI,14.53
,,,,,,,,,,,,,SG,Jared McCain (36386112),Jared McCain,36386112,SG/G/UTIL,4100,MIL@PHI 10/23/2024 07:30PM ET,PHI,0
,,,,,,,,,,,,,PG,Delon Wright (36386115),Delon Wright,36386115,PG/G/UTIL,4100,MIL@PHI 10/23/2024 07:30PM ET,MIL,13.89
,,,,,,,,,,,,,PG,Isaiah Collier (36386145),Isaiah Collier,36386145,PG/G/UTIL,4000,MEM@UTA 10/23/2024 09:00PM ET,UTA,0
,,,,,,,,,,,,,PF/C,Chris Boucher (36386284),Chris Boucher,36386284,PF/C/F/UTIL,4000,CLE@TOR 10/23/2024 07:30PM ET,TOR,13.86
,,,,,,,,,,,,,SG,Malik Beasley (36386133),Malik Beasley,36386133,SG/G/UTIL,4000,IND@DET 10/23/2024 07:00PM ET,DET,20.3
,,,,,,,,,,,,,C,Goga Bitadze (36386143),Goga Bitadze,36386143,C/UTIL,4000,ORL@MIA 10/23/2024 07:30PM ET,ORL,15.43
,,,,,,,,,,,,,PF,Tristan da Silva (36386153),Tristan da Silva,36386153,PF/F/UTIL,4000,ORL@MIA 10/23/2024 07:30PM ET,ORL,0
,,,,,,,,,,,,,SG/SF,Cam Whitmore (36386136),Cam Whitmore,36386136,SG/SF/F/G/UTIL,4000,CHA@HOU 10/23/2024 08:00PM ET,HOU,20.54
,,,,,,,,,,,,,C,Nick Richards (36386141),Nick Richards,36386141,C/UTIL,4000,CHA@HOU 10/23/2024 08:00PM ET,CHA,23.86
,,,,,,,,,,,,,SG/SF,Dalano Banton (36386128),Dalano Banton,36386128,SG/SF/F/G/UTIL,4000,GSW@POR 10/23/2024 10:00PM ET,POR,19.82
,,,,,,,,,,,,,C,Daniel Theis (36386156),Daniel Theis,36386156,C/UTIL,4000,CHI@NOP 10/23/2024 08:00PM ET,NOP,15
,,,,,,,,,,,,,SG/SF,Pat Connaughton (36386148),Pat Connaughton,36386148,SG/SF/F/G/UTIL,4000,MIL@PHI 10/23/2024 07:30PM ET,MIL,14.54
,,,,,,,,,,,,,PF,Gregory Jackson (36386167),Gregory Jackson,36386167,PF/F/UTIL,3900,MEM@UTA 10/23/2024 09:00PM ET,MEM,24.12
,,,,,,,,,,,,,SF,Cody Williams (36386170),Cody Williams,36386170,SF/F/UTIL,3900,MEM@UTA 10/23/2024 09:00PM ET,UTA,0
,,,,,,,,,,,,,SG/SF,Isaac Okoro (36386173),Isaac Okoro,36386173,SG/SF/F/G/UTIL,3900,CLE@TOR 10/23/2024 07:30PM ET,CLE,17.78
,,,,,,,,,,,,,C,Bruno Fernando (36386482),Bruno Fernando,36386482,C/UTIL,3900,CLE@TOR 10/23/2024 07:30PM ET,TOR,14.87
,,,,,,,,,,,,,C,Paul Reed (36386178),Paul Reed,36386178,C/UTIL,3900,IND@DET 10/23/2024 07:00PM ET,DET,19.25
,,,,,,,,,,,,,PG/SF,Anthony Black (36386162),Anthony Black,36386162,PG/SF/F/G/UTIL,3900,ORL@MIA 10/23/2024 07:30PM ET,ORL,10.45
,,,,,,,,,,,,,PG/SG,Kris Dunn (36386158),Kris Dunn,36386158,PG/SG/G/UTIL,3900,PHX@LAC 10/23/2024 10:00PM ET,LAC,17.4
,,,,,,,,,,,,,C,Trey Jemison (36386180),Trey Jemison,36386180,C/UTIL,3900,CHI@NOP 10/23/2024 08:00PM ET,NOP,17.74
,,,,,,,,,,,,,PG/SF,Andre Jackson Jr. (36386182),Andre Jackson Jr.,36386182,PG/SF/F/G/UTIL,3900,MIL@PHI 10/23/2024 07:30PM ET,MIL,6.99
,,,,,,,,,,,,,SF/PF,Dean Wade (36386200),Dean Wade,36386200,SF/PF/F/UTIL,3800,CLE@TOR 10/23/2024 07:30PM ET,CLE,14.39
,,,,,,,,,,,,,SG/SF,Gary Harris (36386187),Gary Harris,36386187,SG/SF/F/G/UTIL,3800,ORL@MIA 10/23/2024 07:30PM ET,ORL,13.89
,,,,,,,,,,,,,PF,Haywood Highsmith (36386197),Haywood Highsmith,36386197,PF/F/UTIL,3800,ORL@MIA 10/23/2024 07:30PM ET,MIA,14.56
,,,,,,,,,,,,,SG,Tre Mann (36386192),Tre Mann,36386192,SG/G/UTIL,3800,CHA@HOU 10/23/2024 08:00PM ET,CHA,22.31
,,,,,,,,,,,,,C,Yves Missi (36386195),Yves Missi,36386195,C/UTIL,3800,CHI@NOP 10/23/2024 08:00PM ET,NOP,0
,,,,,,,,,,,,,SF/PF,KJ Martin (36386204),KJ Martin,36386204,SF/PF/F/UTIL,3800,MIL@PHI 10/23/2024 07:30PM ET,PHI,8.7
,,,,,,,,,,,,,SG/SF,Jalen Wilson (36386212),Jalen Wilson,36386212,SG/SF/F/G/UTIL,3700,BKN@ATL 10/23/2024 07:30PM ET,BKN,11.14
,,,,,,,,,,,,,C,Brandon Clarke (36386224),Brandon Clarke,36386224,C/UTIL,3700,MEM@UTA 10/23/2024 09:00PM ET,MEM,23.75
,,,,,,,,,,,,,C,Drew Eubanks (36386231),Drew Eubanks,36386231,C/UTIL,3700,MEM@UTA 10/23/2024 09:00PM ET,UTA,13.46
,,,,,,,,,,,,,SG/SF,Svi Mykhailiuk (36386236),Svi Mykhailiuk,36386236,SG/SF/F/G/UTIL,3700,MEM@UTA 10/23/2024 09:00PM ET,UTA,6.84
,,,,,,,,,,,,,PG/SG,Alec Burks (36386208),Alec Burks,36386208,PG/SG/G/UTIL,3700,ORL@MIA 10/23/2024 07:30PM ET,MIA,17.49
,,,,,,,,,,,,,SG,Seth Curry (36386233),Seth Curry,36386233,SG/G/UTIL,3700,CHA@HOU 10/23/2024 08:00PM ET,CHA,10.51
,,,,,,,,,,,,,PG,Monte Morris (36386226),Monte Morris,36386226,PG/G/UTIL,3700,PHX@LAC 10/23/2024 10:00PM ET,PHX,10.79
,,,,,,,,,,,,,C,Robert Williams (36386229),Robert Williams,36386229,C/UTIL,3700,GSW@POR 10/23/2024 10:00PM ET,POR,20.08
,,,,,,,,,,,,,PG,Jose Alvarado (36386217),Jose Alvarado,36386217,PG/G/UTIL,3700,CHI@NOP 10/23/2024 08:00PM ET,NOP,15.88
,,,,,,,,,,,,,PG/SG,Talen Horton-Tucker (36386220),Talen Horton-Tucker,36386220,PG/SG/G/UTIL,3700,CHI@NOP 10/23/2024 08:00PM ET,CHI,20.78
,,,,,,,,,,,,,PF/C,Larry Nance Jr. (36386241),Larry Nance Jr.,36386241,PF/C/F/UTIL,3600,BKN@ATL 10/23/2024 07:30PM ET,ATL,17.81
,,,,,,,,,,,,,SF/PF,Brice Sensabaugh (36386248),Brice Sensabaugh,36386248,SF/PF/F/UTIL,3600,MEM@UTA 10/23/2024 09:00PM ET,UTA,15.12
,,,,,,,,,,,,,SG/SF,Ben Sheppard (36386252),Ben Sheppard,36386252,SG/SF/F/G/UTIL,3600,IND@DET 10/23/2024 07:00PM ET,IND,9.72
,,,,,,,,,,,,,SG,Jordan Hawkins (36386245),Jordan Hawkins,36386245,SG/G/UTIL,3600,CHI@NOP 10/23/2024 08:00PM ET,NOP,12.9
,,,,,,,,,,,,,PF/C,Trendon Watford (36386268),Trendon Watford,36386268,PF/C/F/UTIL,3500,BKN@ATL 10/23/2024 07:30PM ET,BKN,13.71
,,,,,,,,,,,,,SF,Jaylon Tyson (36386265),Jaylon Tyson,36386265,SF/F/UTIL,3500,CLE@TOR 10/23/2024 07:30PM ET,CLE,0
,,,,,,,,,,,,,C,Isaiah Jackson (36386257),Isaiah Jackson,36386257,C/UTIL,3500,IND@DET 10/23/2024 07:00PM ET,IND,15.04
,,,,,,,,,,,,,PF/C,Kevin Love (36386272),Kevin Love,36386272,PF/C/F/UTIL,3500,ORL@MIA 10/23/2024 07:30PM ET,MIA,19.96
,,,,,,,,,,,,,SF,Matisse Thybulle (36386259),Matisse Thybulle,36386259,SF/F/UTIL,3500,GSW@POR 10/23/2024 10:00PM ET,POR,15.43
,,,,,,,,,,,,,SG/SF,Luke Kennard (36386297),Luke Kennard,36386297,SG/SF/F/G/UTIL,3400,MEM@UTA 10/23/2024 09:00PM ET,MEM,21.66
,,,,,,,,,,,,,PG/SG,Ja'Kobe Walter (36386609),Ja'Kobe Walter,36386609,PG/SG/G/UTIL,3400,CLE@TOR 10/23/2024 07:30PM ET,TOR,0
,,,,,,,,,,,,,PF,Jarace Walker (36386276),Jarace Walker,36386276,PF/F/UTIL,3400,IND@DET 10/23/2024 07:00PM ET,IND,7.8
,,,,,,,,,,,,,SF/PF,Tidjane Salaun (36386302),Tidjane Salaun,36386302,SF/PF/F/UTIL,3400,CHA@HOU 10/23/2024 08:00PM ET,CHA,0
,,,,,,,,,,,,,SG/SF,Josh Okogie (36386279),Josh Okogie,36386279,SG/SF/F/G/UTIL,3400,PHX@LAC 10/23/2024 10:00PM ET,PHX,11.43
,,,,,,,,,,,,,SF/PF,Amir Coffey (36386288),Amir Coffey,36386288,SF/PF/F/UTIL,3400,PHX@LAC 10/23/2024 10:00PM ET,LAC,12.23
,,,,,,,,,,,,,SG,Bryce McGowens (36386292),Bryce McGowens,36386292,SG/G/UTIL,3400,GSW@POR 10/23/2024 10:00PM ET,POR,9.66
,,,,,,,,,,,,,C,Kevon Looney (36386295),Kevon Looney,36386295,C/UTIL,3400,GSW@POR 10/23/2024 10:00PM ET,GSW,15.43
,,,,,,,,,,,,,SG,Vit Krejci (36386334),Vit Krejci,36386334,SG/G/UTIL,3300,BKN@ATL 10/23/2024 07:30PM ET,ATL,14.41
,,,,,,,,,,,,,SG/SF,Dariq Whitehead (36386337),Dariq Whitehead,36386337,SG/SF/F/G/UTIL,3300,BKN@ATL 10/23/2024 07:30PM ET,BKN,7.25
,,,,,,,,,,,,,SG/SF,John Konchar (36386323),John Konchar,36386323,SG/SF/F/G/UTIL,3300,MEM@UTA 10/23/2024 09:00PM ET,MEM,16.78
,,,,,,,,,,,,,PG,Patty Mills (36386344),Patty Mills,36386344,PG/G/UTIL,3300,MEM@UTA 10/23/2024 09:00PM ET,UTA,8.22
,,,,,,,,,,,,,PG/SG,Ty Jerome (36386347),Ty Jerome,36386347,PG/SG/G/UTIL,3300,CLE@TOR 10/23/2024 07:30PM ET,CLE,4.62
,,,,,,,,,,,,,C,James Wiseman (36386342),James Wiseman,36386342,C/UTIL,3300,IND@DET 10/23/2024 07:00PM ET,IND,16.29
,,,,,,,,,,,,,SF/PF,Jae'Sean Tate (36386319),Jae'Sean Tate,36386319,SF/PF/F/UTIL,3300,CHA@HOU 10/23/2024 08:00PM ET,HOU,10.99
,,,,,,,,,,,,,PG,Vasilije Micic (36386328),Vasilije Micic,36386328,PG/G/UTIL,3300,CHA@HOU 10/23/2024 08:00PM ET,CHA,16.32
,,,,,,,,,,,,,PF,Ryan Dunn (36386331),Ryan Dunn,36386331,PF/F/UTIL,3300,PHX@LAC 10/23/2024 10:00PM ET,PHX,0
,,,,,,,,,,,,,SG/SF,Moses Moody (36386306),Moses Moody,36386306,SG/SF/F/G/UTIL,3300,GSW@POR 10/23/2024 10:00PM ET,GSW,15.4
,,,,,,,,,,,,,PF,Jabari Walker (36386316),Jabari Walker,36386316,PF/F/UTIL,3300,GSW@POR 10/23/2024 10:00PM ET,POR,20.99
,,,,,,,,,,,,,SG/SF,Dalen Terry (36386311),Dalen Terry,36386311,SG/SF/F/G/UTIL,3300,CHI@NOP 10/23/2024 08:00PM ET,CHI,8.94
,,,,,,,,,,,,,C,Jock Landale (36386354),Jock Landale,36386354,C/UTIL,3200,CHA@HOU 10/23/2024 08:00PM ET,HOU,12.2
,,,,,,,,,,,,,PG/SG,Nick Smith Jr. (36386356),Nick Smith Jr.,36386356,PG/SG/G/UTIL,3200,CHA@HOU 10/23/2024 08:00PM ET,CHA,10.32
,,,,,,,,,,,,,PG,Bones Hyland (36386363),Bones Hyland,36386363,PG/G/UTIL,3200,PHX@LAC 10/23/2024 10:00PM ET,LAC,13.63
,,,,,,,,,,,,,PF/C,P.J. Tucker (36386373),P.J. Tucker,36386373,PF/C/F/UTIL,3200,PHX@LAC 10/23/2024 10:00PM ET,LAC,7.44
,,,,,,,,,,,,,SF,Gary Payton II (36386351),Gary Payton II,36386351,SF/F/UTIL,3200,GSW@POR 10/23/2024 10:00PM ET,GSW,12.81
,,,,,,,,,,,,,SF/PF,Javonte Green (36386366),Javonte Green,36386366,SF/PF/F/UTIL,3200,CHI@NOP 10/23/2024 08:00PM ET,NOP,26.36
,,,,,,,,,,,,,PG,Reggie Jackson (36386360),Reggie Jackson,36386360,PG/G/UTIL,3200,MIL@PHI 10/23/2024 07:30PM ET,PHI,17.94
,,,,,,,,,,,,,PF,Tyler Smith (36386370),Tyler Smith,36386370,PF/F/UTIL,3200,MIL@PHI 10/23/2024 07:30PM ET,MIL,0
,,,,,,,,,,,,,PG,Shake Milton (36386398),Shake Milton,36386398,PG/G/UTIL,3100,BKN@ATL 10/23/2024 07:30PM ET,BKN,8.74
,,,,,,,,,,,,,PG/SG,Josh Christopher (36386405),Josh Christopher,36386405,PG/SG/G/UTIL,3100,ORL@MIA 10/23/2024 07:30PM ET,MIA,0
,,,,,,,,,,,,,PG/SF,Cody Martin (36386381),Cody Martin,36386381,PG/SF/F/G/UTIL,3100,CHA@HOU 10/23/2024 08:00PM ET,CHA,21.3
,,,,,,,,,,,,,PF/C,Jeff Green (36386394),Jeff Green,36386394,PF/C/F/UTIL,3100,CHA@HOU 10/23/2024 08:00PM ET,HOU,11.97
,,,,,,,,,,,,,C,Mo Bamba (36386386),Mo Bamba,36386386,C/UTIL,3100,PHX@LAC 10/23/2024 10:00PM ET,LAC,13.52
,,,,,,,,,,,,,C,Duop Reath (36386392),Duop Reath,36386392,C/UTIL,3100,GSW@POR 10/23/2024 10:00PM ET,POR,17.52
,,,,,,,,,,,,,PG/SG,Jevon Carter (36386377),Jevon Carter,36386377,PG/SG/G/UTIL,3100,CHI@NOP 10/23/2024 08:00PM ET,CHI,9.54
,,,,,,,,,,,,,PF/C,Jeremiah Robinson-Earl (36386401),Jeremiah Robinson-Earl,36386401,PF/C/F/UTIL,3100,CHI@NOP 10/23/2024 08:00PM ET,NOP,6.82
,,,,,,,,,,,,,PF,Karlo Matkovic (36386409),Karlo Matkovic,36386409,PF/F/UTIL,3100,CHI@NOP 10/23/2024 08:00PM ET,NOP,0
,,,,,,,,,,,,,PG/SG,Marjon Beauchamp (36386388),Marjon Beauchamp,36386388,PG/SG/G/UTIL,3100,MIL@PHI 10/23/2024 07:30PM ET,MIL,8.26
,,,,,,,,,,,,,SG,AJ Johnson (36386412),AJ Johnson,36386412,SG/G/UTIL,3100,MIL@PHI 10/23/2024 07:30PM ET,MIL,0
,,,,,,,,,,,,,SF/PF,Ziaire Williams (36386418),Ziaire Williams,36386418,SF/PF/F/UTIL,3000,BKN@ATL 10/23/2024 07:30PM ET,BKN,16.57
,,,,,,,,,,,,,SF,David Roddy (36386422),David Roddy,36386422,SF/F/UTIL,3000,BKN@ATL 10/23/2024 07:30PM ET,ATL,13.14
,,,,,,,,,,,,,PG,Kobe Bufkin (36386428),Kobe Bufkin,36386428,PG/G/UTIL,3000,BKN@ATL 10/23/2024 07:30PM ET,ATL,10.96
,,,,,,,,,,,,,SG,Garrison Mathews (36386466),Garrison Mathews,36386466,SG/G/UTIL,3000,BKN@ATL 10/23/2024 07:30PM ET,ATL,8.85
,,,,,,,,,,,,,C,Cody Zeller (36386492),Cody Zeller,36386492,C/UTIL,3000,BKN@ATL 10/23/2024 07:30PM ET,ATL,7.02
,,,,,,,,,,,,,PG/SG,Keon Johnson (36386502),Keon Johnson,36386502,PG/SG/G/UTIL,3000,BKN@ATL 10/23/2024 07:30PM ET,BKN,10.35
,,,,,,,,,,,,,PG,Keaton Wallace (36386538),Keaton Wallace,36386538,PG/G/UTIL,3000,BKN@ATL 10/23/2024 07:30PM ET,ATL,0
,,,,,,,,,,,,,PF/C,Mouhamed Gueye (36386541),Mouhamed Gueye,36386541,PF/C/F/UTIL,3000,BKN@ATL 10/23/2024 07:30PM ET,ATL,10.93
,,,,,,,,,,,,,C,Dominick Barlow (36386545),Dominick Barlow,36386545,C/UTIL,3000,BKN@ATL 10/23/2024 07:30PM ET,ATL,11.76
,,,,,,,,,,,,,SG,Seth Lundy (36386547),Seth Lundy,36386547,SG/G/UTIL,3000,BKN@ATL 10/23/2024 07:30PM ET,ATL,2.64
,,,,,,,,,,,,,SF,Yongxi Cui (36386647),Yongxi Cui,36386647,SF/F/UTIL,3000,BKN@ATL 10/23/2024 07:30PM ET,BKN,0
,,,,,,,,,,,,,SG,Tyrese Martin (36386650),Tyrese Martin,36386650,SG/G/UTIL,3000,BKN@ATL 10/23/2024 07:30PM ET,BKN,0
,,,,,,,,,,,,,SF,Jaylen Martin (36386653),Jaylen Martin,36386653,SF/F/UTIL,3000,BKN@ATL 10/23/2024 07:30PM ET,BKN,0
,,,,,,,,,,,,,PG,Yuki Kawamura (36386525),Yuki Kawamura,36386525,PG/G/UTIL,3000,MEM@UTA 10/23/2024 09:00PM ET,MEM,0
,,,,,,,,,,,,,C,Oscar Tshiebwe (36386560),Oscar Tshiebwe,36386560,C/UTIL,3000,MEM@UTA 10/23/2024 09:00PM ET,UTA,6.36
,,,,,,,,,,,,,PF/C,Micah Potter (36386562),Micah Potter,36386562,PF/C/F/UTIL,3000,MEM@UTA 10/23/2024 09:00PM ET,UTA,8.61
,,,,,,,,,,,,,SG/SF,Johnny Juzang (36386566),Johnny Juzang,36386566,SG/SF/F/G/UTIL,3000,MEM@UTA 10/23/2024 09:00PM ET,UTA,12.25
,,,,,,,,,,,,,PG,Jason Preston (36386571),Jason Preston,36386571,PG/G/UTIL,3000,MEM@UTA 10/23/2024 09:00PM ET,UTA,8.89
,,,,,,,,,,,,,C,Jay Huff (36386667),Jay Huff,36386667,C/UTIL,3000,MEM@UTA 10/23/2024 09:00PM ET,MEM,2.67
,,,,,,,,,,,,,SF,Jaylen Wells (36386669),Jaylen Wells,36386669,SF/F/UTIL,3000,MEM@UTA 10/23/2024 09:00PM ET,MEM,0
,,,,,,,,,,,,,SG/SF,Cam Spencer (36386672),Cam Spencer,36386672,SG/SF/F/G/UTIL,3000,MEM@UTA 10/23/2024 09:00PM ET,MEM,0
,,,,,,,,,,,,,SF/PF,JT Thor (36386445),JT Thor,36386445,SF/PF/F/UTIL,3000,CLE@TOR 10/23/2024 07:30PM ET,CLE,8.06
,,,,,,,,,,,,,C,Tristan Thompson (36386475),Tristan Thompson,36386475,C/UTIL,3000,CLE@TOR 10/23/2024 07:30PM ET,CLE,9.49
,,,,,,,,,,,,,SG,Garrett Temple (36386484),Garrett Temple,36386484,SG/G/UTIL,3000,CLE@TOR 10/23/2024 07:30PM ET,TOR,7.97
,,,,,,,,,,,,,C,Ulrich Chomche (36386593),Ulrich Chomche,36386593,C/UTIL,3000,CLE@TOR 10/23/2024 07:30PM ET,TOR,0
,,,,,,,,,,,,,C,Branden Carlson (36386595),Branden Carlson,36386595,C/UTIL,3000,CLE@TOR 10/23/2024 07:30PM ET,TOR,0
,,,,,,,,,,,,,PF,Jamison Battle (36386597),Jamison Battle,36386597,PF/F/UTIL,3000,CLE@TOR 10/23/2024 07:30PM ET,TOR,0
,,,,,,,,,,,,,SF,Jonathan Mogbo (36386600),Jonathan Mogbo,36386600,SF/F/UTIL,3000,CLE@TOR 10/23/2024 07:30PM ET,TOR,0
,,,,,,,,,,,,,PG,D.J. Carton (36386603),D.J. Carton,36386603,PG/G/UTIL,3000,CLE@TOR 10/23/2024 07:30PM ET,TOR,5.62
,,,,,,,,,,,,,PG,Jamal Shead (36386606),Jamal Shead,36386606,PG/G/UTIL,3000,CLE@TOR 10/23/2024 07:30PM ET,TOR,0
,,,,,,,,,,,,,SF,Luke Travers (36386699),Luke Travers,36386699,SF/F/UTIL,3000,CLE@TOR 10/23/2024 07:30PM ET,CLE,0
,,,,,,,,,,,,,PG,Craig Porter Jr. (36386702),Craig Porter Jr.,36386702,PG/G/UTIL,3000,CLE@TOR 10/23/2024 07:30PM ET,CLE,12.82
,,,,,,,,,,,,,PG,Emoni Bates (36386705),Emoni Bates,36386705,PG/G/UTIL,3000,CLE@TOR 10/23/2024 07:30PM ET,CLE,5.37
,,,,,,,,,,,,,SG,Johnny Furphy (36386439),Johnny Furphy,36386439,SG/G/UTIL,3000,IND@DET 10/23/2024 07:00PM ET,IND,0
,,,,,,,,,,,,,PF,Bobi Klintman (36386442),Bobi Klintman,36386442,PF/F/UTIL,3000,IND@DET 10/23/2024 07:00PM ET,DET,0
,,,,,,,,,,,,,PG,Wendell Moore Jr. (36386472),Wendell Moore Jr.,36386472,PG/G/UTIL,3000,IND@DET 10/23/2024 07:00PM ET,DET,2.14
,,,,,,,,,,,,,PF/C,James Johnson (36386517),James Johnson,36386517,PF/C/F/UTIL,3000,IND@DET 10/23/2024 07:00PM ET,IND,3.5
,,,,,,,,,,,,,PG,Daniss Jenkins (36386590),Daniss Jenkins,36386590,PG/G/UTIL,3000,IND@DET 10/23/2024 07:00PM ET,DET,0
,,,,,,,,,,,,,PG,Quenton Jackson (36386689),Quenton Jackson,36386689,PG/G/UTIL,3000,IND@DET 10/23/2024 07:00PM ET,IND,4
,,,,,,,,,,,,,PG,Tristen Newton (36386692),Tristen Newton,36386692,PG/G/UTIL,3000,IND@DET 10/23/2024 07:00PM ET,IND,0
,,,,,,,,,,,,,SF/PF,Enrique Freeman (36386695),Enrique Freeman,36386695,SF/PF/F/UTIL,3000,IND@DET 10/23/2024 07:00PM ET,IND,0
,,,,,,,,,,,,,SF,Caleb Houstan (36386415),Caleb Houstan,36386415,SF/F/UTIL,3000,ORL@MIA 10/23/2024 07:30PM ET,ORL,7.64
,,,,,,,,,,,,,SG/SF,Jett Howard (36386449),Jett Howard,36386449,SG/SF/F/G/UTIL,3000,ORL@MIA 10/23/2024 07:30PM ET,ORL,3.2
,,,,,,,,,,,,,PG,Cory Joseph (36386469),Cory Joseph,36386469,PG/G/UTIL,3000,ORL@MIA 10/23/2024 07:30PM ET,ORL,6.85
,,,,,,,,,,,,,PG,Trevelin Queen (36386487),Trevelin Queen,36386487,PG/G/UTIL,3000,ORL@MIA 10/23/2024 07:30PM ET,ORL,8.14
,,,,,,,,,,,,,SG/SF,Pelle Larsson (36386613),Pelle Larsson,36386613,SG/SF/F/G/UTIL,3000,ORL@MIA 10/23/2024 07:30PM ET,MIA,0
,,,,,,,,,,,,,PG,Dru Smith (36386618),Dru Smith,36386618,PG/G/UTIL,3000,ORL@MIA 10/23/2024 07:30PM ET,MIA,11.39
,,,,,,,,,,,,,SF,Keshad Johnson (36386621),Keshad Johnson,36386621,SF/F/UTIL,3000,ORL@MIA 10/23/2024 07:30PM ET,MIA,0
,,,,,,,,,,,,,PG,Mac McClung (36386708),Mac McClung,36386708,PG/G/UTIL,3000,ORL@MIA 10/23/2024 07:30PM ET,ORL,0
,,,,,,,,,,,,,PG,Aaron Holiday (36386436),Aaron Holiday,36386436,PG/G/UTIL,3000,CHA@HOU 10/23/2024 08:00PM ET,HOU,12.68
,,,,,,,,,,,,,PF/C,Moussa Diabate (36386494),Moussa Diabate,36386494,PF/C/F/UTIL,3000,CHA@HOU 10/23/2024 08:00PM ET,CHA,6.91
,,,,,,,,,,,,,C,Taj Gibson (36386506),Taj Gibson,36386506,C/UTIL,3000,CHA@HOU 10/23/2024 08:00PM ET,CHA,5.76
,,,,,,,,,,,,,SF,DaQuan Jeffries (36386514),DaQuan Jeffries,36386514,SF/F/UTIL,3000,CHA@HOU 10/23/2024 08:00PM ET,CHA,2.16
,,,,,,,,,,,,,C,N'Faly Dante (36386528),N'Faly Dante,36386528,C/UTIL,3000,CHA@HOU 10/23/2024 08:00PM ET,HOU,0
,,,,,,,,,,,,,PG/SF,Nate Williams (36386530),Nate Williams,36386530,PG/SF/F/G/UTIL,3000,CHA@HOU 10/23/2024 08:00PM ET,HOU,5.06
,,,,,,,,,,,,,SG,Jack McVeigh (36386535),Jack McVeigh,36386535,SG/G/UTIL,3000,CHA@HOU 10/23/2024 08:00PM ET,HOU,0
,,,,,,,,,,,,,PG,KJ Simpson (36386644),KJ Simpson,36386644,PG/G/UTIL,3000,CHA@HOU 10/23/2024 08:00PM ET,CHA,0
,,,,,,,,,,,,,SG,Jared Rhoden (36386728),Jared Rhoden,36386728,SG/G/UTIL,3000,CHA@HOU 10/23/2024 08:00PM ET,CHA,10.57
,,,,,,,,,,,,,PF/C,Kobe Brown (36386457),Kobe Brown,36386457,PF/C/F/UTIL,3000,PHX@LAC 10/23/2024 10:00PM ET,LAC,5.21
,,,,,,,,,,,,,SG/SF,Damion Lee (36386477),Damion Lee,36386477,SG/SF/F/G/UTIL,3000,PHX@LAC 10/23/2024 10:00PM ET,PHX,0
,,,,,,,,,,,,,C,Kai Jones (36386490),Kai Jones,36386490,C/UTIL,3000,PHX@LAC 10/23/2024 10:00PM ET,LAC,0
,,,,,,,,,,,,,PF/C,Bol Bol (36386498),Bol Bol,36386498,PF/C/F/UTIL,3000,PHX@LAC 10/23/2024 10:00PM ET,PHX,11.15
,,,,,,,,,,,,,PG,TyTy Washington Jr. (36386511),TyTy Washington Jr.,36386511,PG/G/UTIL,3000,PHX@LAC 10/23/2024 10:00PM ET,PHX,3.07
,,,,,,,,,,,,,SG/SF,Cam Christie (36386624),Cam Christie,36386624,SG/SF/F/G/UTIL,3000,PHX@LAC 10/23/2024 10:00PM ET,LAC,0
,,,,,,,,,,,,,SG,Jordan Miller (36386629),Jordan Miller,36386629,SG/G/UTIL,3000,PHX@LAC 10/23/2024 10:00PM ET,LAC,2.41
,,,,,,,,,,,,,SG,Trentyn Flowers (36386632),Trentyn Flowers,36386632,SG/G/UTIL,3000,PHX@LAC 10/23/2024 10:00PM ET,LAC,0
,,,,,,,,,,,,,PG,Collin Gillespie (36386711),Collin Gillespie,36386711,PG/G/UTIL,3000,PHX@LAC 10/23/2024 10:00PM ET,PHX,7.51
,,,,,,,,,,,,,SF,Jalen Bridges (36386714),Jalen Bridges,36386714,SF/F/UTIL,3000,PHX@LAC 10/23/2024 10:00PM ET,PHX,0
,,,,,,,,,,,,,C,Oso Ighodaro (36386717),Oso Ighodaro,36386717,C/UTIL,3000,PHX@LAC 10/23/2024 10:00PM ET,PHX,0
,,,,,,,,,,,,,SG,Kris Murray (36386425),Kris Murray,36386425,SG/G/UTIL,3000,GSW@POR 10/23/2024 10:00PM ET,POR,14.88
,,,,,,,,,,,,,SG/SF,Gui Santos (36386461),Gui Santos,36386461,SG/SF/F/G/UTIL,3000,GSW@POR 10/23/2024 10:00PM ET,GSW,7.46
,,,,,,,,,,,,,PG/SG,Rayan Rupert (36386550),Rayan Rupert,36386550,PG/SG/G/UTIL,3000,GSW@POR 10/23/2024 10:00PM ET,POR,10.04
,,,,,,,,,,,,,SG,Justin Minaya (36386554),Justin Minaya,36386554,SG/G/UTIL,3000,GSW@POR 10/23/2024 10:00PM ET,POR,5.94
,,,,,,,,,,,,,SG,Taze Moore (36386557),Taze Moore,36386557,SG/G/UTIL,3000,GSW@POR 10/23/2024 10:00PM ET,POR,9.62
,,,,,,,,,,,,,SG,Lindy Waters III (36386656),Lindy Waters III,36386656,SG/G/UTIL,3000,GSW@POR 10/23/2024 10:00PM ET,GSW,6.42
,,,,,,,,,,,,,PG,Reece Beekman (36386659),Reece Beekman,36386659,PG/G/UTIL,3000,GSW@POR 10/23/2024 10:00PM ET,GSW,0
,,,,,,,,,,,,,PG,Pat Spencer (36386662),Pat Spencer,36386662,PG/G/UTIL,3000,GSW@POR 10/23/2024 10:00PM ET,GSW,2.67
,,,,,,,,,,,,,C,Quinten Post (36386665),Quinten Post,36386665,C/UTIL,3000,GSW@POR 10/23/2024 10:00PM ET,GSW,0
,,,,,,,,,,,,,SG/SF,Chris Duarte (36386431),Chris Duarte,36386431,SG/SF/F/G/UTIL,3000,CHI@NOP 10/23/2024 08:00PM ET,CHI,8.64
,,,,,,,,,,,,,SG,E.J. Liddell (36386454),E.J. Liddell,36386454,SG/G/UTIL,3000,CHI@NOP 10/23/2024 08:00PM ET,CHI,2.22
,,,,,,,,,,,,,SF,Malcolm Hill (36386635),Malcolm Hill,36386635,SF/F/UTIL,3000,CHI@NOP 10/23/2024 08:00PM ET,NOP,0
,,,,,,,,,,,,,SF,Jamal Cain (36386638),Jamal Cain,36386638,SF/F/UTIL,3000,CHI@NOP 10/23/2024 08:00PM ET,NOP,7.3
,,,,,,,,,,,,,PG,Antonio Reeves (36386641),Antonio Reeves,36386641,PG/G/UTIL,3000,CHI@NOP 10/23/2024 08:00PM ET,NOP,0
,,,,,,,,,,,,,PG,DJ Steward (36386719),DJ Steward,36386719,PG/G/UTIL,3000,CHI@NOP 10/23/2024 08:00PM ET,CHI,0
,,,,,,,,,,,,,C,Adama Sanogo (36386722),Adama Sanogo,36386722,C/UTIL,3000,CHI@NOP 10/23/2024 08:00PM ET,CHI,9.11
,,,,,,,,,,,,,SF/PF,Julian Phillips (36386724),Julian Phillips,36386724,SF/PF/F/UTIL,3000,CHI@NOP 10/23/2024 08:00PM ET,CHI,4.56
,,,,,,,,,,,,,PG,Ryan Rollins (36386508),Ryan Rollins,36386508,PG/G/UTIL,3000,MIL@PHI 10/23/2024 07:30PM ET,MIL,8.06
,,,,,,,,,,,,,PF/C,Guerschon Yabusele (36386521),Guerschon Yabusele,36386521,PF/C/F/UTIL,3000,MIL@PHI 10/23/2024 07:30PM ET,PHI,0
,,,,,,,,,,,,,SG/SF,Ricky Council IV (36386574),Ricky Council IV,36386574,SG/SF/F/G/UTIL,3000,MIL@PHI 10/23/2024 07:30PM ET,PHI,8.67
,,,,,,,,,,,,,PG,Jeff Dowtin (36386579),Jeff Dowtin,36386579,PG/G/UTIL,3000,MIL@PHI 10/23/2024 07:30PM ET,PHI,11.29
,,,,,,,,,,,,,C,Adem Bona (36386582),Adem Bona,36386582,C/UTIL,3000,MIL@PHI 10/23/2024 07:30PM ET,PHI,0
,,,,,,,,,,,,,SG,Lester Quinones (36386584),Lester Quinones,36386584,SG/G/UTIL,3000,MIL@PHI 10/23/2024 07:30PM ET,PHI,8.86
,,,,,,,,,,,,,SF,Justin Edwards (36386587),Justin Edwards,36386587,SF/F/UTIL,3000,MIL@PHI 10/23/2024 07:30PM ET,PHI,0
,,,,,,,,,,,,,SG,Stanley Umude (36386677),Stanley Umude,36386677,SG/G/UTIL,3000,MIL@PHI 10/23/2024 07:30PM ET,MIL,10.09
,,,,,,,,,,,,,C,Liam Robbins (36386680),Liam Robbins,36386680,C/UTIL,3000,MIL@PHI 10/23/2024 07:30PM ET,MIL,0
,,,,,,,,,,,,,PG/SG,AJ Green (36386682),AJ Green,36386682,PG/SG/G/UTIL,3000,MIL@PHI 10/23/2024 07:30PM ET,MIL,7.47
,,,,,,,,,,,,,PF,Chris Livingston (36386686),Chris Livingston,36386686,PF/F/UTIL,3000,MIL@PHI 10/23/2024 07:30PM ET,MIL,2.77
</file>

<file path="tests/fixtures/dk/2024-01-15/player_ids.csv">
Name,ID,Position,TeamAbbrev,Game Info
Giannis Antetokounmpo,36385555,PF/C,MIL,MIL@PHI 10/23/2024 07:30PM ET
Joel Embiid,36385559,C,PHI,MIL@PHI 10/23/2024 07:30PM ET
Trae Young,36385561,PG,ATL,BKN@ATL 10/23/2024 07:30PM ET
Ja Morant,36385564,PG,MEM,MEM@UTA 10/23/2024 09:00PM ET
Damian Lillard,36385567,PG,MIL,MIL@PHI 10/23/2024 07:30PM ET
Tyrese Haliburton,36385570,PG,IND,IND@DET 10/23/2024 07:00PM ET
James Harden,36385573,PG,LAC,PHX@LAC 10/23/2024 10:00PM ET
Devin Booker,36385576,PG/SG,PHX,PHX@LAC 10/23/2024 10:00PM ET
Tyrese Maxey,36385580,PG,PHI,MIL@PHI 10/23/2024 07:30PM ET
Scottie Barnes,36385583,PF,TOR,CLE@TOR 10/23/2024 07:30PM ET
LaMelo Ball,36385586,PG,CHA,CHA@HOU 10/23/2024 08:00PM ET
Donovan Mitchell,36385589,PG/SG,CLE,CLE@TOR 10/23/2024 07:30PM ET
Cade Cunningham,36385595,PG,DET,IND@DET 10/23/2024 07:00PM ET
Alperen Sengun,36385593,C,HOU,CHA@HOU 10/23/2024 08:00PM ET
Kevin Durant,36385598,PF,PHX,PHX@LAC 10/23/2024 10:00PM ET
Paolo Banchero,36385601,PF,ORL,ORL@MIA 10/23/2024 07:30PM ET
Stephen Curry,36385604,PG,GSW,GSW@POR 10/23/2024 10:00PM ET
Kawhi Leonard,36385607,PF,LAC,PHX@LAC 10/23/2024 10:00PM ET
Pascal Siakam,36385616,SF/PF,IND,IND@DET 10/23/2024 07:00PM ET
Dejounte Murray,36385610,PG/SG,NOP,CHI@NOP 10/23/2024 08:00PM ET
Nikola Vucevic,36385614,C,CHI,CHI@NOP 10/23/2024 08:00PM ET
Bam Adebayo,36385624,C,MIA,ORL@MIA 10/23/2024 07:30PM ET
Paul George,36385620,SF/PF,PHI,MIL@PHI 10/23/2024 07:30PM ET
Jimmy Butler,36385634,SF,MIA,ORL@MIA 10/23/2024 07:30PM ET
Zion Williamson,36385626,PF,NOP,CHI@NOP 10/23/2024 08:00PM ET
Desmond Bane,36385629,SG/SF,MEM,MEM@UTA 10/23/2024 09:00PM ET
Jaren Jackson Jr.,36385640,PF/C,MEM,MEM@UTA 10/23/2024 09:00PM ET
Jalen Green,36385644,SG,HOU,CHA@HOU 10/23/2024 08:00PM ET
Jalen Johnson,36385637,PF,ATL,BKN@ATL 10/23/2024 07:30PM ET
Cam Thomas,36385647,PG/SG,BKN,BKN@ATL 10/23/2024 07:30PM ET
Jarrett Allen,36385651,C,CLE,CLE@TOR 10/23/2024 07:30PM ET
Evan Mobley,36385653,PF/C,CLE,CLE@TOR 10/23/2024 07:30PM ET
Lauri Markkanen,36385657,SF/PF,UTA,MEM@UTA 10/23/2024 09:00PM ET
Coby White,36385661,PG/SG,CHI,CHI@NOP 10/23/2024 08:00PM ET
Miles Bridges,36385668,PF,CHA,CHA@HOU 10/23/2024 08:00PM ET
Fred VanVleet,36385671,PG,HOU,CHA@HOU 10/23/2024 08:00PM ET
Deandre Ayton,36385679,C,POR,GSW@POR 10/23/2024 10:00PM ET
Brandon Ingram,36385681,SF,NOP,CHI@NOP 10/23/2024 08:00PM ET
Darius Garland,36385674,PG,CLE,CLE@TOR 10/23/2024 07:30PM ET
Jalen Duren,36385677,C,DET,IND@DET 10/23/2024 07:00PM ET
Zach LaVine,36385684,SG/SF,CHI,CHI@NOP 10/23/2024 08:00PM ET
Immanuel Quickley,36385689,PG,TOR,CLE@TOR 10/23/2024 07:30PM ET
Franz Wagner,36385665,SF,ORL,ORL@MIA 10/23/2024 07:30PM ET
Nic Claxton,36385695,C,BKN,BKN@ATL 10/23/2024 07:30PM ET
Anfernee Simons,36385702,PG/SG,POR,GSW@POR 10/23/2024 10:00PM ET
Josh Giddey,36385692,PG,CHI,CHI@NOP 10/23/2024 08:00PM ET
Khris Middleton,36385697,SG/SF,MIL,MIL@PHI 10/23/2024 07:30PM ET
Tyler Herro,36385711,PG/SG,MIA,ORL@MIA 10/23/2024 07:30PM ET
Brandon Miller,36385706,SG/SF,CHA,CHA@HOU 10/23/2024 08:00PM ET
Andre Drummond,36385715,C,PHI,MIL@PHI 10/23/2024 07:30PM ET
RJ Barrett,36385730,SF/PF,TOR,CLE@TOR 10/23/2024 07:30PM ET
Myles Turner,36385717,C,IND,IND@DET 10/23/2024 07:00PM ET
Terry Rozier,36385719,PG,MIA,ORL@MIA 10/23/2024 07:30PM ET
Deni Avdija,36385722,SF/PF,POR,GSW@POR 10/23/2024 10:00PM ET
CJ McCollum,36385726,PG/SG,NOP,CHI@NOP 10/23/2024 08:00PM ET
Jabari Smith Jr.,36385734,PF/C,HOU,CHA@HOU 10/23/2024 08:00PM ET
Bradley Beal,36385742,SG/SF,PHX,PHX@LAC 10/23/2024 10:00PM ET
Draymond Green,36385738,PF/C,GSW,GSW@POR 10/23/2024 10:00PM ET
Keyonte George,36385747,PG,UTA,MEM@UTA 10/23/2024 09:00PM ET
Ivica Zubac,36385750,C,LAC,PHX@LAC 10/23/2024 10:00PM ET
Jakob Poeltl,36385804,C,TOR,CLE@TOR 10/23/2024 07:30PM ET
Jusuf Nurkic,36385755,C,PHX,PHX@LAC 10/23/2024 10:00PM ET
Jonathan Kuminga,36385752,PF,GSW,GSW@POR 10/23/2024 10:00PM ET
Clint Capela,36385757,C,ATL,BKN@ATL 10/23/2024 07:30PM ET
Tobias Harris,36385759,PF,DET,IND@DET 10/23/2024 07:00PM ET
Amen Thompson,36385762,PG/SF,HOU,CHA@HOU 10/23/2024 08:00PM ET
Kelly Oubre Jr.,36385767,SG/SF,PHI,MIL@PHI 10/23/2024 07:30PM ET
Jerami Grant,36385774,PF,POR,GSW@POR 10/23/2024 10:00PM ET
Brook Lopez,36385772,C,MIL,MIL@PHI 10/23/2024 07:30PM ET
Dennis Schroder,36385783,PG,BKN,BKN@ATL 10/23/2024 07:30PM ET
Zach Edey,36385777,C,MEM,MEM@UTA 10/23/2024 09:00PM ET
Caris LeVert,36385779,PG/SG,CLE,CLE@TOR 10/23/2024 07:30PM ET
John Collins,36385786,C,UTA,MEM@UTA 10/23/2024 09:00PM ET
Collin Sexton,36385792,SG,UTA,MEM@UTA 10/23/2024 09:00PM ET
Bobby Portis,36385788,PF/C,MIL,MIL@PHI 10/23/2024 07:30PM ET
Jaden Ivey,36385795,PG/SG,DET,IND@DET 10/23/2024 07:00PM ET
Trey Murphy III,36385799,SG/SF,NOP,CHI@NOP 10/23/2024 08:00PM ET
Bogdan Bogdanovic,36385814,SG,ATL,BKN@ATL 10/23/2024 07:30PM ET
Ben Simmons,36385817,PG,BKN,BKN@ATL 10/23/2024 07:30PM ET
Marcus Smart,36385806,PG/SG,MEM,MEM@UTA 10/23/2024 09:00PM ET
Kelly Olynyk,36385810,C,TOR,CLE@TOR 10/23/2024 07:30PM ET
Mark Williams,36385812,C,CHA,CHA@HOU 10/23/2024 08:00PM ET
Max Strus,36385832,PF,CLE,CLE@TOR 10/23/2024 07:30PM ET
Jaime Jaquez Jr.,36385828,SF/PF,MIA,ORL@MIA 10/23/2024 07:30PM ET
Norman Powell,36385820,SG/SF,LAC,PHX@LAC 10/23/2024 10:00PM ET
Scoot Henderson,36385825,PG,POR,GSW@POR 10/23/2024 10:00PM ET
Andrew Wiggins,36385835,SF/PF,GSW,GSW@POR 10/23/2024 10:00PM ET
Patrick Williams,36385839,SF/PF,CHI,CHI@NOP 10/23/2024 08:00PM ET
Jordan Clarkson,36385843,SG,UTA,MEM@UTA 10/23/2024 09:00PM ET
Cameron Johnson,36385857,SF/PF,BKN,BKN@ATL 10/23/2024 07:30PM ET
Walker Kessler,36385849,C,UTA,MEM@UTA 10/23/2024 09:00PM ET
Tari Eason,36385853,SF/PF,HOU,CHA@HOU 10/23/2024 08:00PM ET
Tyus Jones,36385861,PG,PHX,PHX@LAC 10/23/2024 10:00PM ET
Buddy Hield,36385872,SG,GSW,GSW@POR 10/23/2024 10:00PM ET
Lonzo Ball,36385846,PG,CHI,CHI@NOP 10/23/2024 08:00PM ET
Herbert Jones,36385851,C,NOP,CHI@NOP 10/23/2024 08:00PM ET
Onyeka Okongwu,36385864,PF/C,ATL,BKN@ATL 10/23/2024 07:30PM ET
Wendell Carter Jr.,36385875,C,ORL,ORL@MIA 10/23/2024 07:30PM ET
Ayo Dosunmu,36385868,PG/SG,CHI,CHI@NOP 10/23/2024 08:00PM ET
Bennedict Mathurin,36385882,SG/SF,IND,IND@DET 10/23/2024 07:00PM ET
Shaedon Sharpe,36385877,PG/SF,POR,GSW@POR 10/23/2024 10:00PM ET
Gary Trent Jr.,36385887,SG/SF,MIL,MIL@PHI 10/23/2024 07:30PM ET
Kyle Lowry,36385892,PG,PHI,MIL@PHI 10/23/2024 07:30PM ET
Bruce Brown,36385899,SG/SF,TOR,CLE@TOR 10/23/2024 07:30PM ET
Andrew Nembhard,36385907,PG/SG,IND,IND@DET 10/23/2024 07:00PM ET
Jalen Suggs,36385904,PG,ORL,ORL@MIA 10/23/2024 07:30PM ET
Matas Buzelis,36385895,SF/PF,CHI,CHI@NOP 10/23/2024 08:00PM ET
De'Andre Hunter,36385927,SF/PF,ATL,BKN@ATL 10/23/2024 07:30PM ET
Santi Aldama,36385943,PF/C,MEM,MEM@UTA 10/23/2024 09:00PM ET
Aaron Nesmith,36385920,SF/PF,IND,IND@DET 10/23/2024 07:00PM ET
Kentavious Caldwell-Pope,36385924,SG,ORL,ORL@MIA 10/23/2024 07:30PM ET
Reed Sheppard,36385931,PG/SG,HOU,CHA@HOU 10/23/2024 08:00PM ET
Terance Mann,36385915,SG/SF,LAC,PHX@LAC 10/23/2024 10:00PM ET
Grayson Allen,36385935,SG/SF,PHX,PHX@LAC 10/23/2024 10:00PM ET
Brandin Podziemski,36385911,PG/SG,GSW,GSW@POR 10/23/2024 10:00PM ET
Caleb Martin,36385940,PF,PHI,MIL@PHI 10/23/2024 07:30PM ET
</file>

<file path="tests/fixtures/dk/2024-01-15/projections.csv">
Name,Position,Team,Salary,FPTS,StdDev,Ceiling,Own%,Minutes,FieldFpts
Giannis Antetokounmpo,PF/C,MIL,11000,59.3,12.4,71.7,18.2,34,59.3
Joel Embiid,C,PHI,10500,62.3,13.1,75.4,16.8,33,62.3
Trae Young,PG,ATL,9900,48.7,10.8,59.5,15.4,35,48.7
Ja Morant,PG,MEM,9500,46.7,11.2,57.9,14.8,32,46.7
Damian Lillard,PG,MIL,9400,43.3,9.8,53.1,13.2,33,43.3
Tyrese Haliburton,PG,IND,9300,45.7,10.1,55.8,14.6,34,45.7
James Harden,PG,LAC,9200,40.3,9.4,49.7,11.8,31,40.3
Devin Booker,PG/SG,PHX,9100,45.8,10.6,56.4,13.9,33,45.8
Tyrese Maxey,PG,PHI,9000,43.9,10.2,54.1,12.7,32,43.9
Scottie Barnes,PF,TOR,8900,44.9,9.8,54.7,11.4,32,44.9
LaMelo Ball,PG,CHA,8800,46.7,11.4,58.1,12.8,33,46.7
Donovan Mitchell,PG/SG,CLE,8700,47.1,10.9,58.0,13.2,33,47.1
Cade Cunningham,PG,DET,8600,41.4,9.6,51.0,10.8,33,41.4
Alperen Sengun,C,HOU,8600,43.9,9.2,53.1,11.6,31,43.9
Kevin Durant,PF,PHX,8600,46.8,10.4,57.2,14.2,32,46.8
Paolo Banchero,PF,ORL,8500,42.2,10.1,52.3,10.9,32,42.2
Stephen Curry,PG,GSW,8500,42.9,11.2,54.1,13.4,32,42.9
Kawhi Leonard,PF,LAC,8400,41.7,9.8,51.5,9.8,29,41.7
Pascal Siakam,SF/PF,IND,8300,39.1,8.9,48.0,8.6,30,39.1
Dejounte Murray,PG/SG,NOP,8300,42.8,9.4,52.2,9.2,32,42.8
Nikola Vucevic,C,CHI,8300,40.0,8.7,48.7,8.4,30,40.0
Bam Adebayo,C,MIA,8200,41.8,9.1,50.9,9.1,31,41.8
Paul George,SF/PF,PHI,8200,39.2,9.6,48.8,8.7,30,39.2
Jimmy Butler,SF,MIA,8100,37.9,8.8,46.7,7.9,30,37.9
Zion Williamson,PF,NOP,8100,40.5,10.2,50.7,9.4,29,40.5
Desmond Bane,SG/SF,MEM,8000,41.0,9.3,50.3,8.8,31,41.0
Jaren Jackson Jr.,PF/C,MEM,7900,38.4,8.9,47.3,7.6,29,38.4
Jalen Green,SG,HOU,7900,33.9,9.8,43.7,7.2,30,33.9
Jalen Johnson,PF,ATL,7800,36.7,8.4,45.1,6.9,29,36.7
Cam Thomas,PG/SG,BKN,7800,32.9,8.9,41.8,6.4,28,32.9
Jarrett Allen,C,CLE,7800,37.4,8.1,45.5,7.1,29,37.4
Evan Mobley,PF/C,CLE,7700,36.9,8.3,45.2,6.8,30,36.9
Lauri Markkanen,SF/PF,UTA,7500,40.6,9.1,49.7,8.2,31,40.6
Coby White,PG/SG,CHI,7500,34.9,8.2,43.1,6.3,29,34.9
Miles Bridges,PF,CHA,7400,38.6,8.7,47.3,7.1,30,38.6
Fred VanVleet,PG,HOU,7400,39.8,8.4,48.2,7.8,32,39.8
Deandre Ayton,C,POR,7400,36.6,8.0,44.6,6.2,28,36.6
Brandon Ingram,SF,NOP,7400,37.2,8.9,46.1,6.9,30,37.2
Darius Garland,PG,CLE,7300,33.3,7.8,41.1,5.9,30,33.3
Jalen Duren,C,DET,7300,34.6,7.6,42.2,6.1,27,34.6
Zach LaVine,SG/SF,CHI,7300,34.3,8.4,42.7,6.4,29,34.3
Immanuel Quickley,PG,TOR,7200,31.5,7.2,38.7,5.3,28,31.5
Franz Wagner,SF,ORL,7200,34.9,7.8,42.7,6.2,30,34.9
Nic Claxton,C,BKN,7100,32.8,7.1,39.9,5.1,26,32.8
Anfernee Simons,PG/SG,POR,7100,37.1,8.6,45.7,6.8,30,37.1
Josh Giddey,PG,CHI,7100,28.4,6.8,35.2,4.7,28,28.4
Khris Middleton,SG/SF,MIL,7100,32.5,7.4,39.9,5.4,27,32.5
Tyler Herro,PG/SG,MIA,7000,36.1,8.1,44.2,6.3,29,36.1
Brandon Miller,SG/SF,CHA,7000,29.4,7.2,36.6,4.8,27,29.4
Andre Drummond,C,PHI,7000,22.9,6.1,29.0,3.2,20,22.9
RJ Barrett,SF/PF,TOR,6900,33.5,7.6,41.1,5.6,29,33.5
Myles Turner,C,IND,6900,32.7,7.3,40.0,5.2,27,32.7
Terry Rozier,PG,MIA,6900,36.4,7.9,44.3,6.1,30,36.4
Deni Avdija,SF/PF,POR,6900,31.9,7.1,39.0,5.0,28,31.9
CJ McCollum,PG/SG,NOP,6900,36.0,7.8,43.8,5.9,29,36.0
Jabari Smith Jr.,PF/C,HOU,6800,29.9,6.9,36.8,4.6,26,29.9
Bradley Beal,SG/SF,PHX,6700,33.6,7.7,41.3,5.3,28,33.6
Draymond Green,PF/C,GSW,6700,30.0,6.8,36.8,4.4,29,30.0
Keyonte George,PG,UTA,6600,24.0,6.2,30.2,3.1,24,24.0
Ivica Zubac,C,LAC,6600,28.6,6.4,35.0,4.1,25,28.6
Jakob Poeltl,C,TOR,6500,29.9,6.6,36.5,4.3,26,29.9
Jusuf Nurkic,C,PHX,6500,34.1,7.2,41.3,5.1,27,34.1
Jonathan Kuminga,PF,GSW,6500,27.5,6.8,34.3,3.9,24,27.5
Clint Capela,C,ATL,6400,31.2,6.7,37.9,4.5,26,31.2
Tobias Harris,PF,DET,6400,32.4,6.9,39.3,4.7,28,32.4
Amen Thompson,PG/SF,HOU,6400,25.2,6.4,31.6,3.4,22,25.2
Kelly Oubre Jr.,SG/SF,PHI,6400,27.7,6.6,34.3,3.8,25,27.7
Jerami Grant,PF,POR,6300,32.5,7.1,39.6,4.8,29,32.5
Brook Lopez,C,MIL,6300,27.9,6.3,34.2,3.7,25,27.9
Dennis Schroder,PG,BKN,6200,29.0,6.5,35.5,4.0,26,29.0
Zach Edey,C,MEM,6200,16.2,5.1,21.3,1.8,15,16.2
Caris LeVert,PG/SG,CLE,6200,28.7,6.4,35.1,3.9,26,28.7
John Collins,C,UTA,6100,30.8,6.7,37.5,4.3,27,30.8
Collin Sexton,SG,UTA,6100,31.2,6.8,38.0,4.4,27,31.2
Bobby Portis,PF/C,MIL,6100,28.2,6.4,34.6,3.7,23,28.2
Jaden Ivey,PG/SG,DET,6000,27.6,6.5,34.1,3.6,25,27.6
Trey Murphy III,SG/SF,NOP,6000,28.3,6.6,34.9,3.8,26,28.3
Bogdan Bogdanovic,SG,ATL,5900,30.0,6.7,36.7,4.1,27,30.0
Ben Simmons,PG,BKN,5900,26.9,6.2,33.1,3.4,24,26.9
Marcus Smart,PG/SG,MEM,5900,28.3,6.4,34.7,3.7,26,28.3
Kelly Olynyk,C,TOR,5900,25.2,5.9,31.1,3.1,23,25.2
Mark Williams,C,CHA,5900,30.6,6.6,37.2,4.2,25,30.6
Max Strus,PF,CLE,5800,26.8,6.1,32.9,3.3,25,26.8
Jaime Jaquez Jr.,SF/PF,MIA,5800,23.1,5.7,28.8,2.8,22,23.1
Norman Powell,SG/SF,LAC,5800,20.9,5.4,26.3,2.4,20,20.9
Scoot Henderson,PG,POR,5800,27.2,6.3,33.5,3.5,25,27.2
Andrew Wiggins,SF/PF,GSW,5800,23.8,5.8,29.6,2.9,23,23.8
Patrick Williams,SF/PF,CHI,5700,20.5,5.3,25.8,2.3,21,20.5
Jordan Clarkson,SG,UTA,5600,30.2,6.7,36.9,4.0,26,30.2
Cameron Johnson,SF/PF,BKN,5500,25.3,5.9,31.2,3.0,24,25.3
Walker Kessler,C,UTA,5500,24.3,5.7,30.0,2.9,22,24.3
Tari Eason,SF/PF,HOU,5500,25.0,5.8,30.8,3.0,22,25.0
Tyus Jones,PG,PHX,5500,29.6,6.4,36.0,3.7,27,29.6
Buddy Hield,SG,GSW,5500,22.9,5.6,28.5,2.7,22,22.9
Lonzo Ball,PG,CHI,5500,18.4,4.9,23.3,1.9,16,18.4
Herbert Jones,C,NOP,5500,23.8,5.6,29.4,2.8,24,23.8
Onyeka Okongwu,PF/C,ATL,5400,23.9,5.6,29.5,2.8,21,23.9
Wendell Carter Jr.,C,ORL,5400,24.2,5.7,29.9,2.9,23,24.2
Ayo Dosunmu,PG/SG,CHI,5400,23.5,5.6,29.1,2.8,24,23.5
Bennedict Mathurin,SG/SF,IND,5200,24.1,5.7,29.8,2.9,22,24.1
Shaedon Sharpe,PG/SF,POR,5200,29.0,6.3,35.3,3.6,25,29.0
Gary Trent Jr.,SG/SF,MIL,5200,22.9,5.5,28.4,2.7,21,22.9
Kyle Lowry,PG,PHI,5200,21.3,5.3,26.6,2.4,20,21.3
Bruce Brown,SG/SF,TOR,5100,22.4,5.4,27.8,2.6,22,22.4
Andrew Nembhard,PG/SG,IND,5100,21.5,5.3,26.8,2.5,20,21.5
Jalen Suggs,PG,ORL,5100,25.1,5.8,30.9,3.0,23,25.1
Matas Buzelis,SF/PF,CHI,5100,16.8,4.6,21.4,1.7,14,16.8
De'Andre Hunter,SF/PF,ATL,5000,25.0,5.8,30.8,3.0,24,25.0
Santi Aldama,PF/C,MEM,5000,24.9,5.7,30.6,2.9,23,24.9
Aaron Nesmith,SF/PF,IND,5000,22.8,5.4,28.2,2.6,22,22.8
Kentavious Caldwell-Pope,SG,ORL,5000,20.6,5.1,25.7,2.3,21,20.6
Reed Sheppard,PG/SG,HOU,5000,17.2,4.7,21.9,1.8,15,17.2
Terance Mann,SG/SF,LAC,5000,17.3,4.7,22.0,1.8,18,17.3
Grayson Allen,SG/SF,PHX,5000,26.4,5.9,32.3,3.2,24,26.4
Brandin Podziemski,PG/SG,GSW,5000,24.1,5.6,29.7,2.8,22,24.1
Caleb Martin,PF,PHI,5000,21.1,5.2,26.3,2.4,20,21.1
</file>

<file path="tests/fixtures/gpp/contest.csv">
place,payout,buy_in,rake
1,50,10,0.1
2,30,10,0.1
3,0,10,0.1
4,0,10,0.1
</file>

<file path="tests/fixtures/gpp/lineups.csv">
lineup_id,player_ids,entry_count,proj_points
L1,p1|p2|p3,1,100
L2,p1|p2|p3,2,100
L3,p4|p5|p6,1,80
</file>

<file path="tests/fixtures/contest_structure.csv">
rank_start,rank_end,prize
1,1,$15,000 
2,2, $5,000
3,3, 200 
4,5, 10
6,20, 0
</file>

<file path="tests/fixtures/dk_entries_template.csv">
Entry ID,Contest Name,PG,SG,SF,PF,C,G,F,UTIL
1,Contest A,,,,,,,,
2,Contest B,,,,,,,,
3,Contest C,,,,,,,,
</file>

<file path="tests/fixtures/mini_slate.csv">
player_id,team,positions,salary,ownership
p1,A,PG,10000,0.2
p2,A,SG,9000,0.2
p3,B,SF,8000,0.2
p4,B,PF,7000,0.2
p5,C,C,6000,0.2
p6,C,PG/SG,5000,0.2
p7,D,SF/PF,4000,0.2
p8,D,C,3000,0.2
p9,E,PG,2000,0.1
p10,E,SG,2000,0.1
p11,F,SF,2000,0.1
p12,G,PF,2000,0.1
p13,H,C,2000,0.1
</file>

<file path="tests/fixtures/player_ids.csv">
dk_player_id,name,team,pos
1001,Player A,BOS,SF/PF
1002,Player B,LAL,PG/SG
1003,Player C,MIA,C
</file>

<file path="tests/fixtures/projections_sourceA.csv">
DK_ID,Name,Team,Pos,Salary,Minutes,FP,Ceil,Floor,Own
1001,Player A,BOS,SF/PF,9800,36,48.2,60.0,35.0,0.22
1002,Player B,LAL,PG/SG,7200,30,34.5,45.0,25.0,0.10
</file>

<file path="tests/fixtures/projections_sourceB.csv">
DK_ID,Name,Team,Pos,Salary,Minutes,FP,Ceil,Floor,Own
1001,Player A,BOS,SF/PF,9900,35,47.0,58.0,33.0,0.20
1003,Player C,MIA,C,5000,22,18.4,28.0,12.0,0.05
</file>

<file path="tests/README.md">
# Test Directory

This directory contains the comprehensive test suite for the NBA-DFS pipeline, covering unit tests, integration tests, and fixtures for all Python modules.

## Overview

- **Framework**: pytest with coverage reporting
- **Structure**: Mirror of source code structure
- **Fixtures**: Reusable test data in `tests/fixtures/`
- **Coverage**: Target >80% code coverage across modules

## Directory Structure

```
tests/
├── fixtures/           # Test data and sample files
│   └── dk/            # DraftKings sample data
├── pipeline/          # Pipeline module tests
├── processes/         # Process module tests
└── README.md          # This file
```

## Running Tests

```bash
# All tests
pytest -q

# Specific module
pytest tests/pipeline/ -v

# With coverage
pytest --cov

# Specific test file
pytest tests/pipeline/test_ingest.py -v
```

## Test Categories

### Unit Tests
- Individual function/class testing
- Mock external dependencies
- Fast execution (<1s per test)

### Integration Tests  
- End-to-end workflow testing
- Real file I/O operations
- Database and parquet interactions

### Fixtures
- Sample CSV files for ingestion testing
- Known-good parquet files for validation
- Configuration examples for process testing

## Writing Tests

Follow pytest conventions:
```python
def test_function_name():
    # Arrange
    input_data = create_test_data()
    
    # Act  
    result = function_under_test(input_data)
    
    # Assert
    assert result.success is True
    assert len(result.data) == expected_count
```
</file>

<file path="tests/test_api_validation.py">
from __future__ import annotations

import pytest
from httpx import AsyncClient

from processes.api import app as api_app


@pytest.mark.anyio
async def test_run_orchestrator_validation_missing_slate_id():
    payload = {
        # 'slate_id' missing
        "config": {
            "ingest": {},
            "optimizer": {},
            "variants": {},
            "field": {},
            "sim": {},
        }
    }
    async with AsyncClient(app=api_app, base_url="http://test") as ac:
        resp = await ac.post("/run/orchestrator", json=payload)
        assert resp.status_code == 422


@pytest.mark.anyio
async def test_run_orchestrator_validation_config_wrong_type():
    payload = {
        "slate_id": "20250101_NBA",
        # config must be an object, not a string
        "config": "not-a-dict",
    }
    async with AsyncClient(app=api_app, base_url="http://test") as ac:
        resp = await ac.post("/run/orchestrator", json=payload)
        assert resp.status_code == 422


@pytest.mark.anyio
async def test_run_orchestrator_validation_optimizer_site_literal():
    payload = {
        "slate_id": "20250101_NBA",
        "config": {
            "ingest": {},
            "optimizer": {"site": "FD"},  # invalid: Literal['DK']
            "variants": {},
            "field": {},
            "sim": {},
        },
    }
    async with AsyncClient(app=api_app, base_url="http://test") as ac:
        resp = await ac.post("/run/orchestrator", json=payload)
        assert resp.status_code == 422
</file>

<file path="tests/test_dk_export_discovery_from_run.py">
from __future__ import annotations

import json
from pathlib import Path

from processes.dk_export.writer import discover_from_sim_run


def test_dk_export_discovery_from_run(tmp_path: Path) -> None:
    run_id = "RID"
    runs_root = tmp_path / "runs"
    manifest_dir = runs_root / "sim" / run_id
    manifest_dir.mkdir(parents=True)
    manifest = {
        "outputs": [{"path": "sim_results.parquet", "kind": "sim_results"}],
        "inputs": [{"path": "field.parquet", "role": "field"}],
    }
    (manifest_dir / "manifest.json").write_text(json.dumps(manifest))
    sim_path, field_path = discover_from_sim_run(run_id, runs_root)
    assert sim_path == Path("sim_results.parquet")
    assert field_path == Path("field.parquet")
</file>

<file path="tests/test_gpp_sim_cli.py">
from __future__ import annotations

import json
import subprocess
import sys
from pathlib import Path

import pandas as pd

FIXTURE_DIR = Path(__file__).parent / "fixtures" / "gpp"


def test_cli_smoke(tmp_path: Path) -> None:
    out = tmp_path / "runs"
    cmd = [
        sys.executable,
        "-m",
        "processes.gpp_sim",
        "--lineups",
        str(FIXTURE_DIR / "lineups.csv"),
        "--contest",
        str(FIXTURE_DIR / "contest.csv"),
        "--outdir",
        str(out),
    ]
    subprocess.check_call(cmd)
    run_dirs = list(out.iterdir())
    assert run_dirs, "run dir not created"
    run_dir = run_dirs[0]
    summary = json.loads((run_dir / "summary.json").read_text())
    assert summary["entries"] == 4
    res_path = run_dir / "sim_results.parquet"
    assert res_path.exists()
    df = pd.read_parquet(res_path)
    assert "lineup_id" in df.columns
</file>

<file path="tests/test_gpp_sim_engine.py">
from __future__ import annotations

import math
from pathlib import Path

import pytest
from pydantic import ValidationError

from processes.gpp_sim.engine import run_sim
from processes.gpp_sim.io_schemas import load_contest, load_lineups

FIXTURE_DIR = Path(__file__).parent / "fixtures" / "gpp"


def test_engine_basic() -> None:
    lineups = load_lineups(FIXTURE_DIR / "lineups.csv")
    contest = load_contest(FIXTURE_DIR / "contest.csv")
    results, summary = run_sim(lineups, contest)
    assert summary["entries"] == 4
    assert summary["unique_lineups"] == 2
    assert math.isclose(summary["total_prizes"], 80.0)
    assert math.isclose(summary["roi"], 1.0)
    assert results.shape[0] == 2
    dup = dict(zip(results["lineup_id"], results["dup_count"], strict=True))
    assert dup["L1"] == 3
    assert summary["dup"]["max"] == 3


def test_lineups_missing_column(tmp_path: Path) -> None:
    bad = tmp_path / "bad.csv"
    bad.write_text("lineup_id,player_ids\nL1,p1|p2\n", encoding="utf-8")
    with pytest.raises(ValidationError):
        load_lineups(bad)
</file>

<file path="tests/test_lineup_rules.py">
import pandas as pd

from validators.lineup_rules import DK_SLOTS_ORDER, LineupValidator


def _pool() -> pd.DataFrame:
    return pd.DataFrame(
        [
            {"player_id": "p1", "team": "A", "positions": "PG", "salary": 10000},
            {"player_id": "p2", "team": "A", "positions": "SG", "salary": 8000},
            {"player_id": "p3", "team": "B", "positions": "SF", "salary": 7000},
            {"player_id": "p4", "team": "B", "positions": "PF", "salary": 6000},
            {"player_id": "p5", "team": "C", "positions": "C", "salary": 5000},
            {"player_id": "p6", "team": "C", "positions": "PG/SG", "salary": 4000},
            {"player_id": "p7", "team": "D", "positions": "SF/PF", "salary": 3000},
            {"player_id": "p8", "team": "D", "positions": "C", "salary": 2000},
        ]
    )


def test_valid_lineup_passes() -> None:
    pool = _pool()
    lineup = list(zip(DK_SLOTS_ORDER, [f"p{i}" for i in range(1, 9)], strict=False))
    assert LineupValidator().validate(lineup, pool)


def test_salary_cap_violation_fails() -> None:
    pool = _pool()
    lineup = list(zip(DK_SLOTS_ORDER, [f"p{i}" for i in range(1, 9)], strict=False))
    validator = LineupValidator(salary_cap=40000)
    assert not validator.validate(lineup, pool)


def test_slot_eligibility_violation_fails() -> None:
    pool = _pool()
    players = ["p5", "p2", "p3", "p4", "p1", "p6", "p7", "p8"]
    bad_lineup = list(zip(DK_SLOTS_ORDER, players, strict=False))
    assert not LineupValidator().validate(bad_lineup, pool)
</file>

<file path="tests/test_manifest_registry_write.py">
from __future__ import annotations

import json
from pathlib import Path

import pandas as pd


def test_manifest_and_registry(tmp_path: Path) -> None:
    out_root = tmp_path / "out"
    projections = Path("tests/fixtures/projections_sourceA.csv")
    players = Path("tests/fixtures/player_ids.csv")
    mapping = Path("pipeline/ingest/mappings/example_source.yaml")

    from pipeline.ingest.cli import main

    rc = main(
        [
            "--slate-id",
            "20251101_NBA",
            "--source",
            "primary",
            "--projections",
            str(projections),
            "--player-ids",
            str(players),
            "--mapping",
            str(mapping),
            "--out-root",
            str(out_root),
        ]
    )
    assert rc == 0

    run_dirs = list((out_root / "runs/ingest").glob("*"))
    assert run_dirs
    manifest_path = run_dirs[0] / "manifest.json"
    manifest = json.loads(manifest_path.read_text())
    assert manifest["run_id"] and manifest["run_type"] == "ingest"
    assert any(i.get("content_sha256") for i in manifest.get("inputs", []))

    registry = out_root / "registry/runs.parquet"
    assert registry.exists()
    df = pd.read_parquet(registry)
    assert not df.empty
    assert set(["run_id", "run_type", "slate_id", "status"]).issubset(df.columns)
    assert (df["run_type"] == "ingest").all()
</file>

<file path="tests/test_run_registry.py">
import json
from pathlib import Path

from _pytest.monkeypatch import MonkeyPatch

from src.runs import get_run, list_runs, save_run


def test_save_and_list_runs(tmp_path: Path, monkeypatch: MonkeyPatch) -> None:
    monkeypatch.setenv("PROJECT_ROOT", str(tmp_path))
    monkeypatch.chdir(tmp_path)
    meta = {"foo": "bar"}
    inputs_hash = {"hash": "abc"}
    validation_metrics = {"rows": 10}

    result = save_run(
        slate_key="slate",
        module="mod",
        meta=meta,
        inputs_hash=inputs_hash,
        validation_metrics=validation_metrics,
    )

    run_dir = Path(tmp_path) / "runs" / "slate" / "mod" / result.run_id
    assert json.loads((run_dir / "run_meta.json").read_text())["foo"] == "bar"
    assert json.loads((run_dir / "inputs_hash.json").read_text()) == inputs_hash
    val_metrics = json.loads((run_dir / "validation_metrics.json").read_text())
    assert val_metrics == validation_metrics

    runs = list_runs("slate", "mod")
    assert runs and runs[0]["run_id"] == result.run_id

    loaded = get_run("slate", "mod", result.run_id)
    assert loaded["foo"] == "bar"
</file>

<file path="tests/test_schemas_valid.py">
from pathlib import Path

import yaml
from jsonschema.validators import Draft202012Validator as Validator


def test_all_schemas_are_valid_jsonschema() -> None:
    schema_dir = Path("pipeline/schemas")
    schema_files = sorted(schema_dir.glob("*.yaml"))
    assert schema_files, "No schema files found under pipeline/schemas"
    for path in schema_files:
        with path.open("r", encoding="utf-8") as f:
            schema = yaml.safe_load(f)
        # Will raise on invalid schema; otherwise passes
        Validator.check_schema(schema)
</file>

<file path="tests/test_sim_failfast_no_write.py">
from __future__ import annotations

from pathlib import Path

import pandas as pd

from processes.gpp_sim import adapter as sim


def test_failfast_invalid_field_blocks_writes(tmp_path: Path, monkeypatch):
    # Use stub to ensure we don't require a real impl (should not be reached)
    monkeypatch.setenv("GPP_SIM_IMPL", "tests.fixtures.stub_simulator:run_sim")

    # Invalid field: 7 players
    field_df = pd.DataFrame(
        [
            {
                "run_id": "RID",
                "entrant_id": 1,
                "origin": "variant",
                "players": [f"p{i}" for i in range(7)],
                "export_csv_row": "",
                "weight": 1.0,
            }
        ]
    )
    field_path = tmp_path / "bad_field.parquet"
    field_df.to_parquet(field_path)

    # Minimal contest fixture
    contest_path = Path(__file__).parent / "fixtures" / "contest_structure.csv"

    out_root = tmp_path / "out"
    rc = 0
    try:
        sim.run_adapter(
            slate_id="20251101_NBA",
            config_path=None,
            config_kv=None,
            seed=1,
            out_root=out_root,
            tag=None,
            field_path=field_path,
            from_field_run=None,
            variants_path=None,
            contest_path=contest_path,
            from_contest_dir=None,
        )
    except Exception:
        rc = 1
    assert rc == 1
    # No outputs written
    runs_dir = out_root / "runs" / "sim"
    assert not runs_dir.exists()
</file>

<file path="tests/test_variant_builder_contract.py">
from __future__ import annotations

import json
from datetime import datetime
from pathlib import Path

import pandas as pd
import pytest

from src.variant_builder import BuildParams, build_variant_catalog


def _make_player_pool(path: Path) -> Path:
    df = pd.DataFrame(
        {
            "player_id": [f"p{i}" for i in range(8)],
            "team": [f"T{i}" for i in range(8)],
            "salary": [6000] * 8,
            "positions": [
                "PG",
                "SG",
                "SF",
                "PF",
                "C",
                "SG",
                "PF",
                "C",
            ],
        }
    )
    df.to_csv(path, index=False)
    return path


def _write_optimizer_run(path: Path, lineup: list[tuple[str, str]]) -> Path:
    row = {"lineup": lineup}
    with path.open("w", encoding="utf-8") as f:
        f.write(json.dumps(row) + "\n")
    return path


def test_build_variant_catalog(tmp_path: Path) -> None:
    pool_path = _make_player_pool(tmp_path / "players.csv")
    lineup = [
        ("PG", "p0"),
        ("SG", "p1"),
        ("SF", "p2"),
        ("PF", "p3"),
        ("C", "p4"),
        ("G", "p5"),
        ("F", "p6"),
        ("UTIL", "p7"),
    ]
    opt_path = _write_optimizer_run(tmp_path / "optimizer_run.jsonl", lineup)
    out_path = tmp_path / "variant_catalog.jsonl"

    params = BuildParams(
        optimizer_run=opt_path,
        player_pool=pool_path,
        output_path=out_path,
        slate_id="20250101_NBA",
    )
    build_variant_catalog(params)

    assert out_path.exists()
    lines = out_path.read_text().strip().splitlines()
    assert len(lines) == 1
    rec = json.loads(lines[0])
    assert rec["lineup"] == [f"p{i}" for i in range(8)]
    assert rec["salary_total"] == 48000
    assert rec["teams"] == [f"T{i}" for i in range(8)]
    assert rec["valid"] is True
    assert rec["tags"] == []
    # created_at is ISO 8601 with Z suffix
    datetime.fromisoformat(rec["created_at"].replace("Z", "+00:00"))
    assert rec["slate_id"] == "20250101_NBA"
    assert rec["site"] == "DK"
    assert rec["run_id"]
    assert rec["source_branch"]


def test_invalid_lineup_raises(tmp_path: Path) -> None:
    pool_path = _make_player_pool(tmp_path / "players.csv")
    lineup = [
        ("PG", "p0"),
        ("SG", "p0"),  # duplicate player should fail
        ("SF", "p2"),
        ("PF", "p3"),
        ("C", "p4"),
        ("G", "p5"),
        ("F", "p6"),
        ("UTIL", "p7"),
    ]
    opt_path = _write_optimizer_run(tmp_path / "optimizer_run.jsonl", lineup)
    out_path = tmp_path / "variant_catalog.jsonl"

    params = BuildParams(
        optimizer_run=opt_path,
        player_pool=pool_path,
        output_path=out_path,
        slate_id="20250101_NBA",
    )
    with pytest.raises(ValueError, match="Invalid lineup"):
        build_variant_catalog(params)
</file>

<file path="tools/sample_field.py">
from __future__ import annotations

import argparse
import json
from pathlib import Path

import pandas as pd

from field_sampler.engine import run_sampler


def main(argv: list[str] | None = None) -> int:
    p = argparse.ArgumentParser(prog="python -m tools.sample_field")
    p.add_argument("--projections", type=Path, required=True)
    p.add_argument("--slate", type=Path)
    p.add_argument("--contest-config", type=Path)
    p.add_argument("--field-size", type=int, required=True)
    p.add_argument("--seed", type=int, default=0)
    p.add_argument("--out-dir", type=Path, default=Path("artifacts"))
    p.add_argument("--site", default="dk")
    p.add_argument("--slate-id", required=True)
    args = p.parse_args(argv)

    projections = pd.read_csv(args.projections)
    if args.slate:
        _ = pd.read_csv(args.slate)
    contest = {}
    if args.contest_config:
        contest = json.loads(args.contest_config.read_text(encoding="utf-8"))
    config = {
        "salary_cap": contest.get("salary_cap", 50000),
        "max_per_team": contest.get("max_per_team", 4),
        "site": args.site,
        "slate_id": args.slate_id,
        "field_size": args.field_size,
        "out_dir": args.out_dir,
    }
    run_sampler(
        projections=projections,
        config=config,
        seed=args.seed,
    )
    return 0


if __name__ == "__main__":  # pragma: no cover
    raise SystemExit(main())
</file>

<file path="validators/lineup_rules.py">
from __future__ import annotations

from collections.abc import Sequence
from dataclasses import dataclass

import pandas as pd

DK_SLOTS_ORDER = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]

# mapping of slot -> eligible positions
POSITION_ELIGIBILITY: dict[str, set[str]] = {
    "PG": {"PG"},
    "SG": {"SG"},
    "SF": {"SF"},
    "PF": {"PF"},
    "C": {"C"},
    "G": {"PG", "SG"},
    "F": {"SF", "PF"},
    "UTIL": {"PG", "SG", "SF", "PF", "C"},
}


@dataclass
class LineupValidator:
    """Simple DK NBA lineup validator."""

    salary_cap: int = 50000
    max_per_team: int = 4

    def validate(
        self,
        lineup: Sequence[tuple[str, str]],
        player_pool: pd.DataFrame,
    ) -> bool:
        """Return True if lineup is valid under salary and eligibility rules."""
        if len(lineup) != 8:
            return False
        slots = [s for s, _ in lineup]
        if sorted(slots) != sorted(DK_SLOTS_ORDER):
            return False
        player_ids = [pid for _, pid in lineup]
        if len(set(player_ids)) != 8:
            return False
        try:
            sub = player_pool.set_index("player_id").loc[player_ids]
        except KeyError:
            return False
        # salary cap
        if int(sub["salary"].sum()) > self.salary_cap:
            return False
        # max per team
        team_counts = sub["team"].value_counts()
        if (team_counts > self.max_per_team).any():
            return False
        # slot eligibility
        for slot, pid in lineup:
            positions = str(sub.loc[pid, "positions"]).split("/")
            if not (POSITION_ELIGIBILITY.get(slot, set()) & set(positions)):
                return False
        return True
</file>

<file path="workers/optimizer.worker.ts">
/// <reference lib="webworker" />

import type { OptimizationRequest, WorkerMessageIn, WorkerMessageOut } from "@/lib/opt/types";
import { greedyRandom } from "@/lib/opt/algorithms/greedy";

let cancelled = false;

function post(msg: WorkerMessageOut) {
  // @ts-ignore - in worker scope, self.postMessage exists
  postMessage(msg);
}

async function runOptimization(req: OptimizationRequest) {
  return greedyRandom(req, (tried, valid) => {
    if (cancelled) return;
    post({ type: "progress", tried, valid });
  });
}

// Message handler
self.onmessage = async (e: MessageEvent<WorkerMessageIn>) => {
  const msg = e.data;
  if (msg.type === "cancel") {
    cancelled = true;
    return;
  }
  if (msg.type === "run") {
    cancelled = false;
    try {
      post({ type: "started", at: Date.now() });
      const t0 = performance.now();
      const res = await runOptimization(msg.req);
      if (cancelled) return; // silent cancel
      const elapsedMs = Math.round(performance.now() - t0);
      res.summary.elapsedMs = elapsedMs;
      post({ type: "done", res });
    } catch (err: any) {
      post({ type: "error", message: err?.message ?? String(err) });
    }
  }
};

export {}; // keep this a module
</file>

<file path=".env.local">
## Environment variables for project-scoped MCP servers
# Copy this file to `.env` and fill in values locally.
# Do NOT commit your `.env` file.

# Figma API key for framelink_figma MCP server
# Create at: https://www.figma.com/developers/api#access-tokens
FIGMA_API_KEY=figd_-KLrapgom12P0YByfQfLpWrXxAleOPLTwre-Or2z

NEXT_PUBLIC_DFS_SOLVER_MODE=python
DFS_SOLVER_MODE=python
</file>

<file path=".python-version">
3.11
</file>

<file path="audit_fs.md">
# Field Sampler Compliance Audit Report

**Date**: 2025-01-09  
**Auditor**: Claude Agent  
**Scope**: PRP-FS-01 Field Sampler Implementation Compliance  
**Repository**: nba-dfs monorepo  
**Branch**: main  
**Commit**: Latest as of audit date

---

## Executive Summary

**Overall Status**: 🔴 **CRITICAL IMPLEMENTATION GAP**

The audit reveals that the core Field Sampler implementation specified in PRP-FS-01 has **NOT been implemented**. While the repository contains a well-designed adapter framework, the actual field sampling engine with shared validators is completely missing.

**Overall Compliance**: **15%** of PRP-FS-01 requirements met  
**Critical Violation Count**: **0** (no violations in existing code because core implementation doesn't exist)  
**Implementation Status**: Core sampler engine missing  
**Risk Level**: **HIGH** - Critical functionality missing, cannot generate field samples per PRP specification

---

## 1. Implementation Status Analysis

### 1.1 Current State Overview

| Component | PRP Requirement | Current Status | File Location | Compliance % |
|-----------|-----------------|----------------|---------------|--------------|
| **Core Sampler** | `field_sampler.py` with SamplerEngine | ❌ Missing | - | 0% |
| **Shared Validators** | `validators/lineup_rules.py` | ❌ Missing | - | 0% |
| **PositionAllocator** | Roster slot management | ❌ Missing | - | 0% |
| **SalaryManager** | Salary cap tracking | ❌ Missing | - | 0% |
| **TeamLimiter** | Per-team count enforcement | ❌ Missing | - | 0% |
| **RejectionSampler** | Invalid lineup retry logic | ❌ Missing | - | 0% |
| **Adapter Layer** | Orchestration & I/O | ✅ Implemented | `processes/field_sampler/adapter.py` | 95% |
| **CLI Interface** | Command line interface | ✅ Implemented | `processes/field_sampler/__main__.py` | 100% |
| **Schemas** | Output validation | ✅ Implemented | `pipeline/schemas/field*.yaml` | 100% |

### 1.2 Architecture Compliance

**PRP-FS-01 Required Architecture**:
```
field_sampler.py
├─ load_inputs() → canonical dataframes/records  [MISSING]
├─ SamplerConfig (weights, RNG seed, sample_size, stack knobs)  [MISSING]
├─ SamplerEngine.generate(n) → yields candidate lineups  [MISSING]
│   ├─ PositionAllocator (respect roster_slots & multi-pos)  [MISSING]
│   ├─ SalaryManager (track remaining cap)  [MISSING]
│   ├─ TeamLimiter (per-team counts)  [MISSING]
│   └─ RejectionSampler (retry on invalids with backoff)  [MISSING]
├─ validate_lineup(lineup, rules) # from validators/lineup_rules.py  [MISSING]
├─ write_artifacts(field_sample.jsonl, metrics.json)  [PARTIAL - adapter]
└─ summarize_metrics()  [PARTIAL - adapter]
```

**Current Architecture**:
```
adapter.py (headless orchestrator)
├─ _load_sampler() → requires FIELD_SAMPLER_IMPL env var  [IMPLEMENTED]
├─ load_config() → YAML/JSON config parsing  [IMPLEMENTED]
├─ map_config_to_knobs() → config translation  [IMPLEMENTED]
├─ _find_input_variant_catalog() → input resolution  [IMPLEMENTED]
├─ run_adapter() → orchestration pipeline  [IMPLEMENTED]
├─ _build_field_df() → output formatting  [IMPLEMENTED]
├─ _build_metrics_df() → metrics generation  [IMPLEMENTED]
└─ schema validation & artifact writing  [IMPLEMENTED]
```

### 1.3 Missing Core Components

The following components specified in PRP-FS-01 Section 4 are **completely missing**:

1. **SamplerEngine**: No sampling algorithm implementation
2. **PositionAllocator**: No roster slot constraint handling  
3. **SalaryManager**: No salary cap tracking during generation
4. **TeamLimiter**: No per-team player count enforcement
5. **RejectionSampler**: No invalid lineup retry mechanism
6. **Deterministic RNG**: No seeded random number generation
7. **Tiered Sampling**: No projection-based player tiering
8. **Ownership Bias**: No ownership probability weighting

---

## 2. Validator Compliance Analysis

### 2.1 Critical Gap: Missing Shared Validators

**PRP Requirement** (Section 4): Single source of truth in `validators/lineup_rules.py` for:
- ✅ Eligibility: Each slot has a player whose positions include that slot
- ✅ Salary cap: Sum of salaries ≤ salary_cap  
- ✅ Roster size: Exact roster size matches roster_slots length
- ✅ Team limits: Team count per lineup ≤ max_per_team
- ✅ Duplicates: No duplicate player_id within lineup
- ✅ Active status: is_active=True and not inj_status ∈ {"OUT", "Ineligible"}

**Current Reality**: ❌ **File `validators/lineup_rules.py` does not exist**

### 2.2 Scattered Validation Logic

Instead of centralized validation, each module implements its own validation:

| Module | Validation Function | Scope | Lines of Code |
|--------|-------------------|-------|---------------|
| `variant_builder.py` | `_validate_lineup()` | Full DK validation | ~28 lines |
| `field_sampler/_legacy/` | `_validate_lineup_shape()` | Basic shape only | ~15 lines |
| `adapter.py` | `_sanity_check_entrant()` | Schema compliance | ~12 lines |

**Compliance Violation**: PRP-FS-01 explicitly requires single source validator to eliminate duplicate logic and ensure consistency.

### 2.3 Validation Rule Analysis

**Current `variant_builder._validate_lineup()` Implementation**:
```python
# ✅ Implemented validation rules:
- Duplicate player detection: ✅ len(lineup) != len(set(lineup))
- Player existence check: ✅ pid not in pool  
- Slot assignment: ✅ _assign_slots(pool, lineup)
- Exact 8 slots: ✅ len(assign) != 8
- Salary bounds: ✅ lo <= salary <= hi
- DK slots coverage: ✅ used_slots == set(SLOTS)

# ❌ Missing validation rules per PRP-FS-01:
- Active status checking: is_active=True
- Injury status filtering: not inj_status ∈ {"OUT", "Ineligible"} 
- Multi-position normalization: multi_pos_sep handling
- Structured error reasons: enum-based invalidation tracking
```

---

## 3. Schema & Artifact Compliance

### 3.1 Schema Conformance Table

| Schema File | Version | Status | PRP Compliance | Notes |
|-------------|---------|--------|----------------|-------|
| `field.schema.yaml` | 0.1.0 | ✅ Valid | 100% | Matches PRP output spec |
| `field_metrics.schema.yaml` | 0.1.0 | ✅ Valid | 100% | Covers required metrics |
| `common.types.yaml` | - | ✅ Valid | 100% | Type definitions |

**Assessment**: Existing schemas are fully compliant with PRP requirements.

### 3.2 Input Contract Compliance

**PRP-FS-01 Required Inputs**:

| Input File | Required Fields | Schema Exists | Validation | Status |
|------------|-----------------|---------------|------------|--------|
| `projections.csv` | `player_id, player_name, team, positions, salary, proj_pts, minutes, own_mean?, inj_status?` | ❌ No | ❌ No | Missing |
| `slate.csv` | `player_id, team, opp, game_id, is_active` | ❌ No | ❌ No | Missing |
| `contest_config.json` | `site, sport, salary_cap, roster_slots[], max_per_team, multi_pos_sep, allow_util, allow_multi_pos` | ❌ No | ❌ No | Missing |

**Current Implementation**: Only validates variant catalog inputs, not the raw CSV inputs specified in PRP.

### 3.3 Output Artifact Compliance

**PRP-FS-01 Output Requirements**:

| Artifact | Required Fields | Current Implementation | Compliance |
|----------|----------------|----------------------|------------|
| `field_sample.jsonl` | `run_id, created_at, site, slate_id, seed, generator, ruleset_version` | Parquet with `run_id`, basic timestamps | 🔶 40% |
| `metrics.json` | `dupes, avg salary used, team exposure, player exposure, invalid-attempt ratio` | Basic coverage/duplication metrics | 🔶 60% |

**Missing Metadata**:
- ❌ `site` - Contest site identifier  
- ❌ `slate_id` - Slate identifier
- ❌ `seed` - RNG seed value
- ❌ `generator` - Sampling algorithm identifier
- ❌ `ruleset_version` - Validation rule version
- ❌ `invalid-attempt ratio` - Rejection sampling metrics

### 3.4 ID Continuity Assessment

**PRP Requirement**: "IDs must remain DK-compliant and unchanged end-to-end"

**Current Status**: ✅ **Compliant** - Adapter preserves player IDs through pipeline:
- Input: DK player IDs from variant catalogs
- Processing: No ID transformation in adapter
- Output: Same DK player IDs in field artifacts

---

## 4. Testing Coverage Assessment

### 4.1 Existing Test Coverage

| Test File | Focus Area | Coverage | Status |
|-----------|------------|----------|--------|
| `test_field_adapter_smoke.py` | End-to-end adapter flow | Adapter orchestration | ✅ Complete |
| `test_field_dedup_and_diversity.py` | Deduplication logic | Metrics calculation | ✅ Complete |
| `test_field_failfast_no_write.py` | Error handling | Exception scenarios | ✅ Complete |
| `test_field_manifest_registry.py` | Registry integration | Metadata tracking | ✅ Complete |
| `test_field_run_id_determinism.py` | Run ID generation | Deterministic IDs | ✅ Complete |
| `test_field_verbose_and_schemas_root.py` | CLI options | Command-line interface | ✅ Complete |

**Adapter Test Coverage**: **95%** - Comprehensive for existing functionality

### 4.2 Missing Test Categories (Per PRP-FS-01 Section 8)

#### 4.2.1 Unit Tests (0% coverage - core missing)

**PRP Requirements**:
- ❌ **Eligibility parser**: `"PG/SG"`, `"SF/PF/C"` cases, whitespace, lowercase
- ❌ **Salary boundaries**: cap-1, cap, cap+1 rejection scenarios  
- ❌ **Roster assignment**: UTIL last vs first strategy validation
- ❌ **Team limits**: edge cases at exactly max_per_team
- ❌ **Active status**: rejection of OUT/ineligible players

#### 4.2.2 Property Tests (0% coverage - no Hypothesis framework)

**PRP Requirements**:
- ❌ **Random synthetic slates**: produce ≥1% valid lineups for reasonable configs
- ❌ **Zero validator violations**: after k accepted lineups, zero violations recorded
- ❌ **Deterministic reproduction**: same seed + config = same outputs

#### 4.2.3 Regression Tests (0% coverage - no golden fixtures)  

**PRP Requirements**:
- ❌ **Mini-slate fixtures**: 12-18 player slate with known feasible lineups
- ❌ **Prior bug scenarios**: crafted pools that would fail if eligibility/cap bypassed

#### 4.2.4 Metrics Tests (0% coverage)

**PRP Requirements**:
- ❌ **Non-trivial diversity**: HHI of player exposure < threshold on synthetic slate

### 4.3 Test Framework Gaps

**Missing Dependencies**:
- ❌ `hypothesis` - Property-based testing framework
- ❌ `ulid-py` - ULID generation for testing  
- ❌ `pydantic` - Model validation in tests

**Missing Test Utilities**:
- ❌ Golden fixture data files
- ❌ Synthetic slate generators
- ❌ Validation assertion helpers

---

## 5. Violation Analysis

### 5.1 Architectural Violations

Since core Field Sampler is not implemented, traditional lineup violation analysis cannot be performed. However, **architectural violations** against PRP-FS-01 can be assessed:

| Violation Type | Count | Severity | Description | Impact |
|----------------|-------|----------|-------------|---------|
| **Missing Core Implementation** | 1 | Critical | No `field_sampler.py` with SamplerEngine | Cannot generate fields |
| **Missing Shared Validators** | 1 | Critical | No `validators/lineup_rules.py` | Inconsistent validation |
| **Missing Input Schemas** | 3 | High | No validation for CSV inputs | Data quality risk |
| **Scattered Validation Logic** | 3 | High | Duplicate rules across modules | Maintenance burden |
| **Incomplete Metadata** | 5 | Medium | Missing provenance fields | Audit trail gaps |
| **No Property Testing** | 4 | Medium | Missing systematic testing | Quality assurance gaps |

### 5.2 Expected Violation Patterns (Post-Implementation)

Based on similar implementations and PRP requirements:

| Expected Violation Type | Typical Rate | Detection Method | Prevention Strategy |
|------------------------|--------------|------------------|-------------------|
| **Eligibility violations** | 2-5% | Position mapping checks | Strict slot allocation |
| **Salary cap excess** | 1-3% | Sum validation | Pre-allocation checking |
| **Team limit breaches** | 0.5-1% | Team counting | Incremental validation |
| **Duplicate players** | 0.1% | Set comparison | ID deduplication |
| **Inactive players** | 1-2% | Status filtering | Active-only pools |

### 5.3 Violation Prevention Measures (Recommended)

**Immediate Safeguards**:
1. **Input validation**: Reject invalid player data at ingestion
2. **Constraint checking**: Validate each lineup before acceptance
3. **Structured errors**: Enum-based violation categorization
4. **Retry limits**: Cap rejection sampling attempts to prevent infinite loops

---

## 6. Data Pipeline Integration Assessment

### 6.1 Upstream Dependencies

| Dependency | Current Status | Integration Point | Compliance |
|------------|----------------|------------------|------------|
| **Optimizer** | ✅ Implemented | Lineups → variant catalog | ✅ Compatible |
| **Variant Builder** | ✅ Implemented | Variants → field input | ✅ Compatible |
| **Projections Pipeline** | ✅ Implemented | CSV → field sampling | ❌ No integration |
| **Slate Management** | ✅ Implemented | Player eligibility | ❌ No integration |

### 6.2 Downstream Compatibility

| Consumer | Expected Input | Current Output | Status |
|----------|---------------|----------------|--------|
| **GPP Simulator** | Field entries with lineup data | Parquet with player arrays | ✅ Compatible |
| **Portfolio Analysis** | Player exposure rates | Coverage metrics | ✅ Compatible |
| **Contest Upload** | DK CSV format | `export_csv_row` field | ✅ Compatible |

### 6.3 Pipeline Flow Analysis

**Current Flow** (Adapter-based):
```
Variant Catalog → Field Adapter → Field Artifacts
```

**PRP-FS-01 Required Flow**:
```
Projections CSV + Slate CSV + Contest Config → Field Sampler → JSONL + Metrics
```

**Gap**: Direct CSV input processing not implemented; relies on pre-processed variant catalogs.

### 6.4 Deterministic Requirements Analysis

**PRP Requirement**: "Deterministic sampling (seeded RNG) with knobs for realism"

**Current Implementation**: 
- ✅ Adapter accepts seed parameter
- ✅ Deterministic run_id generation
- ❌ No seeded RNG in core sampling (missing implementation)
- ❌ No sampling configuration knobs

**Risk**: Non-reproducible field generation across different environments without core implementation.

---

## 7. CLI Compliance Assessment

### 7.1 PRP-FS-01 CLI Requirement

**Specified Interface**:
```bash
python -m tools.sample_field \
  --projections data/projections.csv \
  --slate data/slate.csv \
  --contest data/contest_config.json \
  --seed 42 --samples 10000 \
  --out artifacts/field_sample.jsonl
```

### 7.2 Current CLI Implementation

**Actual Interface**:
```bash
python -m processes.field_sampler \
  --slate-id SLATE_ID \
  --input variant_catalog.parquet \
  --seed 42 \
  --out-root data/
```

### 7.3 CLI Compliance Analysis

| Parameter | PRP Required | Current | Compliance | Notes |
|-----------|-------------|---------|------------|-------|
| **Input format** | CSV files | Parquet catalogs | ❌ Different | Missing CSV support |
| **Output format** | JSONL | Parquet | ❌ Different | Schema-validated output |
| **Seed parameter** | `--seed` | `--seed` | ✅ Match | Same interface |
| **Sample count** | `--samples` | Via config | 🔶 Partial | Different mechanism |
| **Module path** | `tools.sample_field` | `processes.field_sampler` | 🔶 Different | Organizational change |

**Overall CLI Compliance**: **40%**

---

## 8. Recommendations

### 8.1 Immediate Actions (Priority 1 - Critical)

1. **Implement Core Field Sampler** (`processes/field_sampler/field_sampler.py`)
   - `SamplerEngine.generate(n)` with deterministic RNG  
   - Position allocation algorithm respecting DK slots
   - Salary cap tracking during lineup construction
   - Team limit enforcement (max 4 per team for DK NBA)
   - Rejection sampling with configurable retry limits

2. **Create Shared Validators Module** (`validators/lineup_rules.py`)
   - Centralized validation functions for all rule checks
   - Consistent error message formatting
   - Reusable across optimizer/variants/field modules
   - Structured violation reason enums

3. **Add CSV Input Support**
   - Schema definitions for projections.csv, slate.csv
   - Input parsing and validation functions
   - Integration with existing adapter framework

### 8.2 Testing Implementation (Priority 2 - High)

1. **Unit Test Suite Development**
   - All validation edge cases per PRP Section 8.1
   - Position eligibility parsing with multi-position handling
   - Salary boundary conditions (cap-1, cap, cap+1)
   - Team limit enforcement at exactly max_per_team
   - Active status filtering edge cases

2. **Property Test Framework** 
   - Add `hypothesis` dependency to `pyproject.toml`
   - Random slate generation strategies
   - Zero-violation assertion for all generated lineups
   - Deterministic reproduction verification

3. **Regression Test Suite**
   - Golden fixture creation (12-18 player mini-slates)
   - Prior bug scenario recreation
   - Performance benchmark establishment

### 8.3 Enhanced Features (Priority 3 - Medium)

1. **Advanced Sampling Strategies**
   - Ownership curve modeling with configurable alpha
   - Stack preference controls for team clustering
   - Projection tier-based sampling distributions

2. **Comprehensive Metrics**
   - Detailed violation breakdown by category
   - Player/team exposure histograms  
   - Invalid attempt ratio tracking
   - Jaccard similarity analysis for lineup diversity

3. **Multi-slate Coordination**
   - Cross-slate player tracking
   - Tournament-specific field generation
   - Historical field pattern analysis

### 8.4 Long-term Improvements (Priority 4 - Low)

1. **Performance Optimization**
   - Vectorized lineup validation
   - Parallel sampling across CPU cores
   - Memory-efficient large field generation

2. **Advanced Configuration**
   - Dynamic contest rule loading
   - Site-specific optimization presets
   - A/B testing framework for sampling strategies

---

## 9. Compliance Summary

### 9.1 PRP-FS-01 Requirements Checklist

| Requirement Category | Requirement | Status | Compliance | Notes |
|---------------------|-------------|--------|------------|--------|
| **Core Implementation** | `field_sampler.py` with SamplerEngine | ❌ Missing | 0% | No core sampling logic |
| | PositionAllocator for slot management | ❌ Missing | 0% | No position handling |
| | SalaryManager for cap tracking | ❌ Missing | 0% | No salary management |
| | TeamLimiter for team constraints | ❌ Missing | 0% | No team limiting |
| | RejectionSampler for retry logic | ❌ Missing | 0% | No rejection sampling |
| **Validation** | Single shared validator module | ❌ Missing | 0% | `validators/lineup_rules.py` absent |
| | Eligibility checking | 🔶 Scattered | 30% | Exists in variant_builder only |
| | Salary cap enforcement | 🔶 Scattered | 30% | Exists in variant_builder only |
| | Team limit validation | 🔶 Scattered | 30% | Exists in variant_builder only |
| | Active status filtering | ❌ Missing | 0% | No implementation found |
| **I/O Contracts** | CSV input support (projections) | ❌ Missing | 0% | Only variant catalogs supported |
| | CSV input support (slate) | ❌ Missing | 0% | No slate processing |
| | Contest config JSON | ❌ Missing | 0% | No config-driven rules |
| | JSONL output format | 🔶 Parquet | 50% | Different but schema-compliant |
| | Required metadata fields | 🔶 Partial | 40% | Missing site, seed, generator |
| **Configuration** | Deterministic RNG with seed | 🔶 Partial | 30% | Adapter accepts seed, no core |
| | Sampling strategy knobs | ❌ Missing | 0% | No sampling configuration |
| | Contest rule configuration | ❌ Missing | 0% | No rule loading |
| **CLI Interface** | Specified command structure | 🔶 Different | 40% | Different but functional |
| | CSV file parameters | ❌ Missing | 0% | Parquet-based interface |
| | JSONL output option | ❌ Missing | 0% | Parquet output only |
| **Testing** | Unit tests for validation | ❌ Missing | 0% | No core validation tests |
| | Property tests (Hypothesis) | ❌ Missing | 0% | Framework not integrated |
| | Regression tests (golden) | ❌ Missing | 0% | No fixture-based tests |
| | Metrics diversity tests | ❌ Missing | 0% | No HHI verification |
| **Orchestration** | Adapter layer | ✅ Complete | 95% | Well-implemented |
| | Schema validation | ✅ Complete | 100% | Full compliance |
| | Registry integration | ✅ Complete | 100% | Complete metadata tracking |

**Overall PRP-FS-01 Compliance**: **15%**

### 9.2 Compliance Breakdown

| Category | Weight | Score | Weighted Score |
|----------|--------|-------|----------------|
| Core Implementation | 40% | 0% | 0% |
| Validation Framework | 25% | 15% | 3.75% |
| I/O & Configuration | 20% | 25% | 5% |
| Testing Coverage | 10% | 0% | 0% |
| Orchestration & Schema | 5% | 95% | 4.75% |
| **Total** | **100%** | | **13.5%** |

### 9.3 Risk Assessment Matrix

| Risk Category | Probability | Impact | Risk Level | Mitigation Priority |
|---------------|-------------|--------|------------|-------------------|
| **Cannot generate fields** | High | Critical | 🔴 Critical | Immediate |
| **Inconsistent validation** | High | High | 🔴 High | Immediate |
| **Data quality issues** | Medium | High | 🟠 High | High |
| **Non-reproducible results** | Medium | Medium | 🟠 Medium | Medium |
| **Testing gaps** | High | Medium | 🟠 Medium | Medium |
| **Performance issues** | Low | Medium | 🟡 Low | Low |

### 9.4 Success Criteria (Post-Implementation)

**Functional Requirements**:
- ✅ Generate valid lineups respecting all DK NBA constraints
- ✅ Deterministic reproduction with same seed + configuration  
- ✅ Process CSV inputs per PRP specification
- ✅ Zero critical validation violations in output
- ✅ Comprehensive test coverage (>90% for validators)

**Performance Requirements**:
- ✅ Generate 10,000 lineups in <60 seconds
- ✅ <1% invalid attempt ratio for reasonable configurations
- ✅ Memory usage <2GB for large field generation

**Quality Requirements**:
- ✅ All property tests pass (zero validator escapes)
- ✅ Regression tests prevent known bug patterns
- ✅ Code coverage >90% for core sampling logic

---

## Conclusion

The Field Sampler compliance audit reveals a **critical implementation gap**: while the architectural foundation exists through a well-designed adapter framework, the core field sampling engine specified in PRP-FS-01 has not been implemented.

### Current State Summary

**✅ Strengths**:
- Robust adapter framework with comprehensive orchestration
- Full schema compliance for output artifacts
- Excellent test coverage for existing adapter functionality
- Clean integration with upstream/downstream pipeline components
- Deterministic run ID generation and metadata tracking

**❌ Critical Gaps**:
- No core field sampling implementation
- Missing shared validator module  
- No CSV input processing capability
- Scattered validation logic across modules
- Zero test coverage for sampling algorithms
- Missing deterministic RNG implementation

### Implementation Roadmap

**Phase 1 (Immediate)**: Implement core sampling engine with shared validators
**Phase 2 (Short-term)**: Add CSV input support and comprehensive testing  
**Phase 3 (Medium-term)**: Enhanced sampling strategies and metrics
**Phase 4 (Long-term)**: Performance optimization and advanced features

**Estimated Implementation Effort**: 2-3 weeks for Phase 1, 4-6 weeks total for full PRP compliance.

### Final Assessment

The current 15% compliance represents excellent infrastructure (adapter + schemas) but missing core functionality. The foundation is solid and well-architected, making implementation of the missing components straightforward.

**Recommendation**: Proceed with core implementation following PRP-FS-01 specifications, leveraging the existing adapter framework as the orchestration layer.

**Next Steps**: Begin with `validators/lineup_rules.py` as the foundation, followed by `field_sampler.py` implementation with deterministic sampling engine.
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "rsc": true,
  "style": "default",
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "styles/globals.css",
    "baseColor": "slate",
    "cssVariables": true
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}
</file>

<file path="next-env.d.ts">
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.
</file>

<file path="next.config.mjs">
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
};

export default nextConfig;
</file>

<file path="playwright.config.ts">
import { defineConfig, devices } from '@playwright/test';

/**
 * @see https://playwright.dev/docs/test-configuration
 */
export default defineConfig({
  testDir: './e2e',
  /* Run tests in files in parallel */
  fullyParallel: true,
  /* Fail the build on CI if you accidentally left test.only in the source code. */
  forbidOnly: !!process.env.CI,
  /* Retry on CI only */
  retries: process.env.CI ? 2 : 0,
  /* Opt out of parallel tests on CI. */
  workers: process.env.CI ? 1 : undefined,
  /* Reporter to use. See https://playwright.dev/docs/test-reporters */
  reporter: 'html',
  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */
  use: {
    /* Base URL to use in actions like `await page.goto('/')`. */
    baseURL: 'http://127.0.0.1:3000',

    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */
    trace: 'on-first-retry',
  },

  /* Configure projects for major browsers */
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },

    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },

    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },

    /* Test against mobile viewports. */
    // {
    //   name: 'Mobile Chrome',
    //   use: { ...devices['Pixel 5'] },
    // },
    // {
    //   name: 'Mobile Safari',
    //   use: { ...devices['iPhone 12'] },
    // },

    /* Test against branded browsers. */
    // {
    //   name: 'Microsoft Edge',
    //   use: { ...devices['Desktop Edge'], channel: 'msedge' },
    // },
    // {
    //   name: 'Google Chrome',
    //   use: { ...devices['Desktop Chrome'], channel: 'chrome' },
    // },
  ],

  /* Run your local dev server before starting the tests */
  webServer: {
    command: 'npm run dev',
    url: 'http://127.0.0.1:3000',
    reuseExistingServer: !process.env.CI,
  },
});
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
</file>

<file path="PR_BODY.md">
Implements PRP-INGEST-03 T0→T5

Changes:
- T0: Add domain types and Zod CSV schemas (players, projections) with alias maps.
- T1: Streaming parser using PapaParse + Zod validation, unknown column reporting.
- T2: Normalization + inner join on player_id_dk to canonical types.
- T3: Zustand ingest-store with status, summary, merged data, and errors.
- T4: Wire UploadDropzone to ingestCsv(); support multi-file uploads.
- T5: Add IngestSummary to Metrics drawer.
- Tests: Add vitest + unit specs; Fixtures under fixtures/.

Notes:
- New deps: zod, papaparse, zustand, vitest (dev). Lockfile updated.
- No writes occur under data/ or runs/.
- Determinism: parsing/normalization are pure; no global state.
- Schema contracts follow AGENTS.md house schema; IDs persist through merged data.

Validation:
- npm test passes (3 specs).
- UI integration compiles locally (Next).

Follow-ups:
- Add more robust CSV kind detection beyond filename.
- Expand metrics collection (null rates, dupe rates) as per PRP-8.
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss"

const config = {
  darkMode: ["class"],
  content: [
    "./app/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./styles/**/*.css",
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: { "2xl": "1400px" },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config

export default config
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "jsx": "preserve",
    "strict": false,
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "*"
      ],
      "@/components/*": [
        "components/*"
      ],
      "@/lib/*": [
        "lib/*"
      ]
    },
    "skipLibCheck": true,
    "resolveJsonModule": true,
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "noEmit": true,
    "incremental": true,
    "esModuleInterop": true,
    "isolatedModules": true,
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "app",
    "components",
    "lib",
    "styles",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
</file>

<file path="app/(studio)/field/page.tsx">
"use client";

import { useState } from "react";
import PageContainer from "../../../components/ui/PageContainer";
import LineupGridPlaceholder, { type GridMode } from "../../../components/ui/LineupGridPlaceholder";
import { SKELETON_MS } from "../../../lib/ui/constants";
import { prefersReducedMotion } from "../../../lib/ui/a11y";

export default function FieldPage() {
  const [mode, setMode] = useState<GridMode>("empty");
  const reduced = prefersReducedMotion();
  function onGridModeChange(m: GridMode) {
    setMode(m);
    if (m === "loading") setTimeout(() => setMode("loaded"), reduced ? 150 : SKELETON_MS);
  }
  return (
    <PageContainer title="Field" gridMode={mode} onGridModeChange={onGridModeChange}>
      <LineupGridPlaceholder label="Field Grid" mode={mode} />
    </PageContainer>
  );
}
</file>

<file path="app/(studio)/simulator/page.tsx">
"use client";

import { useState } from "react";
import PageContainer from "../../../components/ui/PageContainer";
import LineupGridPlaceholder, { type GridMode } from "../../../components/ui/LineupGridPlaceholder";
import { SKELETON_MS } from "../../../lib/ui/constants";
import { prefersReducedMotion } from "../../../lib/ui/a11y";

export default function SimulatorPage() {
  const [mode, setMode] = useState<GridMode>("empty");
  const reduced = prefersReducedMotion();
  function onGridModeChange(m: GridMode) {
    setMode(m);
    if (m === "loading") setTimeout(() => setMode("loaded"), reduced ? 150 : SKELETON_MS);
  }
  return (
    <PageContainer title="Simulator" gridMode={mode} onGridModeChange={onGridModeChange}>
      <LineupGridPlaceholder label="Simulator Grid" mode={mode} />
      <div className="mt-4 text-sm opacity-70">Export to DK Entries button will live here.</div>
    </PageContainer>
  );
}
</file>

<file path="app/(studio)/variants/page.tsx">
"use client";

import { useState } from "react";
import PageContainer from "../../../components/ui/PageContainer";
import LineupGridPlaceholder, { type GridMode } from "../../../components/ui/LineupGridPlaceholder";
import { SKELETON_MS } from "../../../lib/ui/constants";
import { prefersReducedMotion } from "../../../lib/ui/a11y";

export default function VariantsPage() {
  const [mode, setMode] = useState<GridMode>("empty");
  const reduced = prefersReducedMotion();
  function onGridModeChange(m: GridMode) {
    setMode(m);
    if (m === "loading") setTimeout(() => setMode("loaded"), reduced ? 150 : SKELETON_MS);
  }
  return (
    <PageContainer title="Variants" gridMode={mode} onGridModeChange={onGridModeChange}>
      <LineupGridPlaceholder label="Variants Grid" mode={mode} />
    </PageContainer>
  );
}
</file>

<file path="artifacts/audit_fs.md">
# Field Sampler Audit

- criticals: 0
- notes: core sampler engine passes validator
</file>

<file path="components/metrics/IngestSummary.tsx">
"use client";

import { useIngestStore } from "@/lib/state/ingest-store";

export default function IngestSummary() {
  const summary = useIngestStore((s) => s.summary);
  const merged = useIngestStore((s) => s.merged);

  if (!summary) return (
    <div className="text-sm text-muted-foreground" aria-live="polite">
      No ingest yet — drop projections.csv and player_ids.csv.
    </div>
  );

  return (
    <div className="text-sm" aria-live="polite">
      <div className="mb-2 font-medium">Ingest Summary</div>
      <ul className="space-y-1">
        <li>Players rows: <span className="font-mono">{summary.rows_players}</span> (dropped {summary.dropped_players})</li>
        <li>Projections rows: <span className="font-mono">{summary.rows_projections}</span> (dropped {summary.dropped_projections})</li>
        <li>Merged players: <span className="font-mono">{merged.length}</span></li>
      </ul>
      {(merged.length !== summary.rows_players || merged.length !== summary.rows_projections || summary.dropped_players > 0 || summary.dropped_projections > 0) && (
        <div className="mt-3 rounded border border-red-300 bg-red-50 p-2 text-red-700">
          Strict join failed — counts must match and 0 dropped.
        </div>
      )}
      {(summary.unknown_cols_players.length > 0 || summary.unknown_cols_projections.length > 0) && (
        <div className="mt-3">
          <div className="font-medium">Unknown columns</div>
          {summary.unknown_cols_players.length > 0 && (
            <div className="mt-1">
              <div className="text-muted-foreground">Players:</div>
              <div className="font-mono text-xs break-words">{summary.unknown_cols_players.join(", ")}</div>
            </div>
          )}
          {summary.unknown_cols_projections.length > 0 && (
            <div className="mt-1">
              <div className="text-muted-foreground">Projections:</div>
              <div className="font-mono text-xs break-words">{summary.unknown_cols_projections.join(", ")}</div>
            </div>
          )}
        </div>
      )}
    </div>
  );
}
</file>

<file path="components/ui/LineupGrid.tsx">
"use client";

import React from "react";
import { ScrollArea, ScrollBar } from "./scroll-area";
import { Card, CardContent, CardHeader } from "./card";
import { Badge } from "./badge";
import { useRunStore } from "@/lib/state/run-store";
import { TrendingUp, DollarSign, Users } from "lucide-react";

function composeTitle(s: any): string {
  const name = s?.name ?? "";
  const pos = s?.pos ?? s?.slot ?? "";
  const team = s?.team ?? "";
  const sal = s?.salary ?? "";
  const own = Math.round(100 * (s?.own_proj ?? 0));
  return `${name} (${pos}) - ${team} - $${sal} - own ${own}%`;
}

function formatSalary(salary: number): string {
  if (salary >= 1000) {
    return `${(salary / 1000).toFixed(0)}K`;
  }
  return salary.toString();
}

export default function LineupGrid() {
  const { status, lineups } = useRunStore();
  
  return (
    <div className="w-full h-full" role="region" aria-label="Optimizer Results">
      {status === "idle" && (
        <div className="h-full flex items-center justify-center text-sm text-muted-foreground" aria-live="polite">
          <div className="text-center">
            <TrendingUp className="h-8 w-8 mx-auto mb-2 opacity-50" />
            <p>No results yet</p>
            <p className="text-xs mt-1">Click Run to generate lineups</p>
          </div>
        </div>
      )}
      
      {status === "running" && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3" role="status" aria-live="polite" aria-busy>
          {Array.from({ length: 12 }).map((_, i) => (
            <Card key={i} className="h-32 animate-pulse bg-muted/20">
              <CardContent className="p-3">
                <div className="h-4 bg-muted rounded mb-2" />
                <div className="space-y-1">
                  {Array.from({ length: 4 }).map((_, j) => (
                    <div key={j} className="h-3 bg-muted/60 rounded w-full" />
                  ))}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
      
      {status === "done" && (
        <div className="h-full w-full overflow-auto custom-scrollbar">
          <div 
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-3 p-1" 
            role="grid" 
            aria-rowcount={lineups.length}
          >
            {lineups.map((lu, index) => {
              // Calculate salary used and left
              const salaryUsed = lu.slots.reduce((sum: number, slot: any) => sum + (slot.salary || 0), 0);
              const salaryLeft = 50000 - salaryUsed;
              const ownSum = lu.slots.reduce((sum: number, slot: any) => sum + (slot.own_proj || 0), 0);
              
              return (
                <Card key={lu.id} className="group hover:shadow-md transition-all duration-200 hover:border-primary/20 w-[280px]" role="gridcell">
                  <CardHeader className="pb-2">
                    <div className="flex items-center justify-between">
                      <Badge variant="outline" className="text-xs font-mono">
                        #{index + 1}
                      </Badge>
                      <div className="flex items-center gap-1 text-xs">
                        <TrendingUp className="h-3 w-3" />
                        <span className="font-semibold">{lu.score.toFixed(1)}</span>
                      </div>
                    </div>
                    <div className="flex items-center justify-between text-xs text-muted-foreground">
                      <div className="flex items-center gap-1">
                        <DollarSign className="h-3 w-3" />
                        <span>{formatSalary(salaryUsed)}</span>
                        {salaryLeft > 0 && (
                          <span className="text-green-600">+{formatSalary(salaryLeft)}</span>
                        )}
                      </div>
                      <div className="flex items-center gap-1">
                        <Users className="h-3 w-3" />
                        <span>{(ownSum * 100).toFixed(1)}%</span>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="pt-0">
                    <div className="grid grid-cols-2 gap-1 text-xs">
                      {lu.slots.map((s, idx) => (
                        <div key={idx} className="flex items-center gap-1 truncate group-hover:text-primary transition-colors" title={composeTitle(s)}>
                          <Badge variant="secondary" className="text-[10px] px-1 py-0 h-4 font-mono">
                            {s.slot}
                          </Badge>
                          <span className="truncate">{s.name || s.player_id_dk}</span>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </div>
      )}
    </div>
  );
}
</file>

<file path="components/ui/LineupGridPlaceholder.tsx">
"use client";

import { ScrollArea } from "./scroll-area";
import { Skeleton } from "./skeleton";

export type GridMode = "empty" | "loading" | "loaded";

export default function LineupGridPlaceholder({ label = "Grid", mode = "empty" }: { label?: string; mode?: GridMode }) {
  return (
    <div className="w-full h-full rounded-md border border-border bg-card/30 p-4" role="region" aria-label={`${label} area`}>
      <div className="text-sm opacity-70">{label}</div>

      <div className="mt-4 h-[calc(100%-2rem)]">
        {mode === "empty" && (
          <div className="h-full flex items-center justify-center text-sm text-muted-foreground" aria-live="polite">
            No results yet — run an action to populate the grid.
          </div>
        )}
        {mode === "loading" && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 pr-1" role="status" aria-live="polite" aria-busy>
            {Array.from({ length: 9 }).map((_, i) => (
              <Skeleton key={i} className="h-24 w-full motion-reduce:animate-none" />
            ))}
          </div>
        )}
        {mode === "loaded" && (
          <ScrollArea className="h-full">
            <div className="grid grid-cols-3 gap-3 pr-4" role="grid" aria-rowcount={6} aria-colcount={3}>
              {Array.from({ length: 18 }).map((_, i) => (
                <div key={i} className="h-24 rounded-md bg-muted/40 border border-muted-foreground/10" role="gridcell" />
              ))}
            </div>
          </ScrollArea>
        )}
      </div>
    </div>
  );
}
</file>

<file path="components/ui/scroll-area.tsx">
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border hover:bg-border/80 opacity-60 hover:opacity-100" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="components/ui/TopStatusBar.tsx">
"use client";

import { ThemeToggle } from "../theme/ThemeToggle";

export default function TopStatusBar() {
  return (
    <div
      role="status"
      aria-live="polite"
      className="h-[40px] w-full border-b border-border px-4 flex items-center justify-between bg-muted/20"
    >
      <span className="text-sm font-medium">Live Game Status</span>
      <ThemeToggle />
    </div>
  );
}
</file>

<file path="components/ui/TopTabs.tsx">
"use client";

import { usePathname, useRouter } from "next/navigation";
import { Tabs, TabsList, TabsTrigger } from "./tabs";
import UploadDropzone from "./UploadDropzone";

const tabs = [
  { label: "Optimizer", slug: "optimizer" },
  { label: "Variants", slug: "variants" },
  { label: "Field", slug: "field" },
  { label: "Simulator", slug: "simulator" },
];

export default function TopTabs() {
  const pathname = usePathname() || "/optimizer";
  const router = useRouter();
  const current = tabs.find((t) => pathname.startsWith(`/${t.slug}`))?.slug ?? "optimizer";
  return (
    <div className="h-[60px] w-full border-b border-border px-4 flex items-end justify-between bg-background">
      <div className="flex items-end gap-3">
        <Tabs
          value={current}
          onValueChange={(v) => router.push(`/${v}`)}
          aria-label="Primary navigation"
        >
          <TabsList>
            {tabs.map((t) => (
              <TabsTrigger key={t.slug} value={t.slug} aria-label={t.label}>
                {t.label}
              </TabsTrigger>
            ))}
          </TabsList>
        </Tabs>
        <div className="pb-1">
          <UploadDropzone />
        </div>
      </div>
    </div>
  );
}
</file>

<file path="configs/field.yaml">
# Field sampler defaults (adapter-level)
# These are safe, commented examples; override via --config and/or --config-kv

# Total entrants to sample (contest size)
# field_size: 20000

# How to mix sources when multiple catalogs provided (if supported by impl)
# source_mix:
#   variants: 1.0
#   optimizer: 0.0

# Sampling mode for catalog lineups
# sampling_mode: iid  # one of [iid, weight_by_proj, weight_by_own, stratified]

# Optional ownership curve to target (impl-defined)
# ownership_curve:
#   type: flat

# Target diversity controls (impl-defined semantics)
# diversity: 0.0

# Team limits and stacks (soft/hard semantics up to impl)
# team_limits:
#   max_from_team: 3

# De-duplicate exact lineups by sorted player set
# de-dup: true

# RNG seed (threaded through and included in run_id hash)
# seed: 42
</file>

<file path="docs/PRPs/PRP-4-Field-Sampler-Adapter.md">
# PRP-4: Field Sampler Adapter (variant_catalog → field + metrics)

## Status
**Planned** — follows PRP-3/3a. Parallelizable with optimizer/variants work.

## Objective
Provide a **headless adapter + CLI** that samples a representative contest field from the **variant catalog** (and/or base optimizer lineups), producing schema-valid `field` and `field_metrics`, plus manifest/registry entries. No UI. No core sampling algorithm changes — adapter plumbing, validation, and discovery only.

---

## Start Bookend — Branch
```
PRP Start → branch=feature/field-sampler-adapter
```

---

## Scope & Deliverables

Add a line under Scope & Deliverables → Adapter module:

Default implementation: use processes/field_sampler/_legacy/field_sampler_functional.py (function run_sampler) unless FIELD_SAMPLER_IMPL override is provided.

### 1) Adapter module
```
processes/field_sampler/
  __init__.py
  __main__.py          # thin CLI
  adapter.py           # headless glue
  README.md
```
**Responsibilities**
- **Discovery (inputs):** resolve input catalog(s) in order of precedence:
  1) `--input` explicit `variant_catalog.parquet`
  2) `--from-run <variants_run_id>` → `<out_root>/runs/variants/<run_id>/artifacts/variant_catalog.parquet`
  3) Latest `run_type="variants"` in registry for `slate_id` (use `primary_outputs[0]` or construct canonical path)
  4) (Optional) allow merging multiple catalogs with `--inputs` for large fields
- **Config → knobs:** map config + `--config-kv` to sampler knobs
- **Invoke implementation:** dynamic load via `FIELD_SAMPLER_IMPL=module:function`
- **Outputs:**
  - `<out_root>/runs/field/<run_id>/artifacts/field.parquet` (schema: `field`)
  - `<out_root>/runs/field/<run_id>/artifacts/metrics.parquet` (schema: `field_metrics`)
  - `<out_root>/runs/field/<run_id>/manifest.json` (`run_type="field"`)
- **Run Registry:** append a row with `primary_outputs` → `field.parquet`

### 2) CLI
```
uv run python -m processes.field_sampler   --slate-id 20251101_NBA   --config configs/field.yaml   --seed 42   --out-root data   --tag PRP-4   [--input path/to/variant_catalog.parquet]   [--inputs path1 path2 ...]   [--from-run <variants_run_id>]   [--schemas-root path/to/pipeline/schemas]   [--validate/--no-validate]   [--verbose]
```

### 3) Config → knobs (initial set)
- `field_size`: total number of sampled lineups (e.g., contest size)
- `source_mix`: weights for sources (e.g., base optimizer vs variants if supported)
- `sampling_mode`: one of `["iid", "weight_by_proj", "weight_by_own", "stratified"]`
- `ownership_curve`: optional distribution to target (e.g., contest-wide chalkiness)
- `diversity`: target uniqueness or Jaccard thresholds between neighbors
- `team_limits`: max from team, stack constraints (soft/hard)
- `de-dup`: remove exact duplicates by sorted player set
- `seed`: RNG seed
- Extra keys preserved under `extras`

### 4) Validation
- **Fail-fast**: validate each `field` and `field_metrics` row against schemas **before** any writes
- Lineup sanity: 8 players, DK slot coverage (if present), salary cap ≤ 50000
- Manifest + registry validation via schemas
- Deterministic `run_id = YYYYMMDD_HHMMSS_<shorthash>` over input SHA(s) + resolved config + seed

### 5) Metrics (initial)
- `exposure`: per-player frequency
- `team_exposure`: per-team frequency
- `pairwise_jaccard`: summary stats (mean/max) over field
- `chalk_index`: max player exposure
- `entropy`: diversity proxy (same as variants, adapted to field size)

### 6) Tests
- `tests/test_field_adapter_smoke.py` — end-to-end with tiny variant catalog + stub sampler
- `tests/test_field_failfast_no_write.py` — 7-player or >50k lineup blocks writes
- `tests/test_field_run_id_determinism.py` — same inputs/config → same run_id; seed change alters it
- `tests/test_field_manifest_registry.py` — manifest/registry validations
- `tests/test_field_dedup_and_diversity.py` — de-dup works; diversity metric improves with higher `diversity`
- `tests/test_field_verbose_and_schemas_root.py` — robust schema path + verbose breadcrumb

### 7) Example config
- `configs/field.yaml` with commented defaults

---

## Inputs & Outputs

### Inputs
- **Primary:** `variant_catalog.parquet` (schema: `variant_catalog`), resolved by `--input`, `--from-run`, or registry
- **Optional:** multiple catalogs (`--inputs`) to assemble larger fields

### Outputs
- `field.parquet` (schema: `field`)
- `metrics.parquet` (schema: `field_metrics`)
- `manifest.json` (`run_type="field"`)
- Registry append

---

## Acceptance Criteria
- Adapter is **headless** and produces schema-valid `field` and `field_metrics` artifacts
- Deterministic `run_id` matches PRP-2/3 style
- `--validate` default on; `--schemas-root` robust (repo-relative default)
- No Streamlit/UI imports
- All tests pass locally and in CI
- README documents discovery policy, config knobs, and preview vs export distinctions

---

## Risks & Mitigations
- **Sampling performance** → start with simple stub; chunked writes if needed (optional follow-up)
- **Schema drift** → validate rows pre-write; rely on PRP-0 schemas
- **Input variability** → guard for missing columns; produce clear errors

---

## Directory Changes
```
processes/field_sampler/
  __init__.py
  __main__.py
  adapter.py
  README.md
configs/
  field.yaml
tests/
  test_field_adapter_smoke.py
  test_field_failfast_no_write.py
  test_field_run_id_determinism.py
  test_field_manifest_registry.py
  test_field_dedup_and_diversity.py
  test_field_verbose_and_schemas_root.py
```

---

## CI Hooks
Extend a workflow to include field-sampler paths:
```yaml
on:
  pull_request:
    paths:
      - "processes/field_sampler/**"
      - "pipeline/schemas/**"
      - "configs/field.yaml"
      - "tests/test_field_*py"
```
Run: ruff, black, mypy (scoped), pytest (focused), CLI `--help`.

---

## End Bookend — Merge & Tag
```
PRP End → branch=feature/field-sampler-adapter
```
(Manual)
```bash
git checkout main
git merge --no-ff feature/field-sampler-adapter -m "PRP-4: Field sampler adapter"
git push origin main
git tag -a v0.5.0 -m "PRP-4: Field sampler adapter"
git push origin v0.5.0
```
</file>

<file path="docs/PRPs/PRP-RUNS-01-Load-And-Retention.md">
# PRP-RUNS-01 — Load Previous Runs + Retention/Pruning
**Date:** 2025-09-08 01:26  
**Owner:** Daniel S.  
**Repo:** `nba-dfs` (monorepo)  
**Scope:** Optimizer runs (extendable to sampler/sim later)  
**Status:** Draft for implementation  
**Aligns With:** `AGENTS.md` §§3, 6, 7, 14

---

## 1) Why
We need a first-class way to **load prior optimizer runs** and a **retention policy** that aligns with `AGENTS.md`:
- Runs live under top-level `runs/` and are organized by `SLATE_KEY`.
- Safety rail: “Block any write under runs/ without a slate key”.
- Retention: “Prune non‑tagged runs after N days (TBD)”.

This PRP specifies loading surfaces and proposes a default retention of **14 days** for non‑tagged runs, enforced per‑module and per‑slate, executed on save and optionally via a periodic job.

---

## 2) Goals (Acceptance Criteria)
- A user can open a **“Load Run”** UI and browse optimizer runs for the selected `SLATE_KEY`, most‑recent first.
- Loading a run restores: parameters, ownership settings, seed, pool metrics, and references to artifacts.
- Saving a new optimizer run triggers **pruning of non‑tagged runs older than `runs.retention_days`** (default 14) under that module/slate.
- A **CLI** and **REST** surface exist for listing, loading, saving, and pruning runs. Listing supports filtering by `module` and `slate_key`.
- All new logic covered by unit tests; e2e happy-path test loads a saved run and verifies store state matches saved meta.

---

## 3) Non-Goals
- Long-term archival and cloud sync (future work).
- Cross-slate portability guarantees (we will warn if slate key / player-id universe differs).

---

## 4) Storage & Data Model
### 4.1 Directory Layout (local disk)
Conform to `AGENTS.md` top-level layout and slate keying.
```
/runs/
  <SLATE_KEY>/                      # SLATE_KEY: YY-MM-DD_HHMMSS (America/New_York)
    optimizer/                      # module (stage)
      <RUN_ID>/                     # eg: 25-09-07_201455__main
        run_meta.json               # canonical metadata (see 4.2)
        inputs_hash.json            # content hashes + schema versions
        artifacts/                  # lineups.csv, metrics.json, logs, etc.
        tag.txt (optional)          # freeform label; prevents pruning
```
Notes:
- All writes occur under a concrete `SLATE_KEY` (satisfies safety rail).
- Keep directory names short and portable; avoid spaces.

### 4.2 `run_meta.json` (schema sketch)
```json
{
  "schema_version": 1,
  "module": "optimizer",
  "run_id": "25-09-07_201455__main",
  "created_at": "2025-09-07T20:14:55Z",
  "slate_key": "25-09-07_171500",
  "tag": "scenario1",
  "engine": { "solver": "cp-sat", "seed": 42 },
  "params": {
    "uniques": 2,
    "ownership_penalty": { "enabled": true, "lambda": 8.0, "curve": "by_points" }
  },
  "artifacts": {
    "lineups_csv": "artifacts/lineups.csv",
    "diagnostics_json": "artifacts/diagnostics.json",
    "telemetry_json": "artifacts/telemetry.json"
  },
  "inputs_hash_path": "inputs_hash.json",
  "diagnostics": {
    "pool": { "lineups": 150, "avg_pairwise_jaccard": 0.57, "unique_player_count": 98 },
    "ownership_penalty": { "applied": true, "lambda_used": 8.0 }
  }
}
```

### 4.3 MRU Listing (derived)
To honor the “runs/ is a registry” concept and avoid extra state, the MRU list is **derived at read time** by scanning `/runs/<SLATE_KEY>/<module>/*` and sorting by `created_at` (from `run_meta.json`) or directory mtime as fallback. Implementations may memoize in‑process but must not persist separate index files under `runs/`.

---

## 5) Public Surfaces
### 5.1 REST (Next.js API routes or FastAPI—keep consistent with repo)
- `GET /api/runs?module=optimizer&slate_key=<key>&limit=10` → MRU runs (derived from fs)
- `GET /api/runs/{slate_key}/{module}/{run_id}` → returns `run_meta.json`
- `POST /api/runs/save` → body: `slate_key`, `module`, `run_meta` (+ server places artifacts)
- `POST /api/runs/prune` → body/query: `module`, `slate_key`, `retention_days` (default from config); prunes non‑tagged older than threshold
- `DELETE /api/runs/{slate_key}/{module}/{run_id}` → removes directory
- `GET /api/runs/validate/{slate_key}/{module}/{run_id}` → optional: checks slate_key/player universe compatibility

### 5.2 CLI (uv entry point)
- `uv run python -m tools.runs list --module optimizer --slate <SLATE_KEY> --limit 10`
- `uv run python -m tools.runs load --slate <SLATE_KEY> --module optimizer --id 25-09-07_201455__main`
- `uv run python -m tools.runs prune --module optimizer --slate <SLATE_KEY> --retention-days 14`

---

## 6) Frontend UX
- **Load Run** button → modal with **MRU list** (max 10). Columns: date/time, tag, slate, solver, uniques, λ, pool stats.
- Quick filter by `tag` and `slate_key`.
- Selecting a run hydrates `useRunStore()` with:
  - `summary` (diagnostics/telemetry)
  - `params` (ownership, uniques, seed, etc.)
  - file refs for download/open in viewer
- Show a **compatibility chip** (OK / Mismatch) based on current slate vs run `slate_key`.

---

## 7) Retention Policy & Pruning
- Default: **runs.retention_days = 14** (tracked in `configs/defaults.yaml`).
- Scope: pruning applies to **non‑tagged** runs only (presence of `tag.txt` or non‑empty `run_meta.tag` exempts a run).
- Timing: execute pruning **on save** for the given `slate_key/module`, and optionally via a scheduled job.
- Ordering: identify candidates by `created_at` from `run_meta.json`; fall back to directory mtime.
- Safety: never delete outside `/runs/<SLATE_KEY>/<module>/`; use atomic rename to a temp path before removal if supported.

**Pseudo-code (prune by age):**
```python
from datetime import datetime, timedelta, timezone

def prune(module: str, slate_key: str, retention_days: int = 14) -> int:
    base = Path("runs") / slate_key / module
    if not base.exists():
        return 0
    cutoff = datetime.now(timezone.utc) - timedelta(days=retention_days)
    removed = 0
    for run_dir in base.iterdir():
        if not run_dir.is_dir():
            continue
        if (run_dir / "tag.txt").exists():
            continue
        meta = json.loads((run_dir / "run_meta.json").read_text())
        if meta.get("tag"):
            continue
        created_at = _parse_dt(meta.get("created_at")) or _mtime_dt(run_dir)
        if created_at < cutoff:
            _safe_remove(run_dir)
            removed += 1
    return removed
```

---

## 8) Implementation Plan (Small, linear steps)
1. **Scaffold**: `src/runs/` Python lib with fs helpers; no persisted indices.
2. **Write meta** on optimizer completion; ensure `RUN_ID = YY-MM-DD_HHMMSS__<branchOrTag>`; include `schema_version`.
3. **List/MRU**: derive from fs, sorting by `created_at` with mtime fallback.
4. **Prune on save** using `runs.retention_days`; expose CLI entry points (uv scripts) and REST.
5. **API routes** mirroring CLI with `module` and `slate_key` parameters.
6. **UI modal** to browse + load → hydrate `useRunStore()`.
7. **Compat check** and warning toast if slate mismatch.
8. **Tests**: unit (fs ops, schema validate, prune idempotency), integration (save→load), e2e (UI click loads expected state).
9. **Docs**: README section + usage examples.

---

## 9) Testing Strategy
- **Unit**: temp dirs with mixed ages and tags; verify prune removes only non‑tagged older than cutoff.
- **Contract**: `run_meta.json` schema validation (jsonschema) + required fields.
- **Integration**: save a run → load via API → hydrate store → assert UI state (Playwright or Vitest + msw).
- **Regression**: ensure run IDs are unique per save even across concurrent runs.

---

## 10) Config
Add to `configs/defaults.yaml`:
```yaml
runs:
  retention_days: 14
```
Local overrides may be added in `configs/local.yaml` (gitignored).

---

## 11) Risks & Mitigations
- **Disk bloat**: prune on save + optional cron.
- **Schema drift**: version `run_meta.schema_version` and provide migration shim.
- **Slate mismatch**: warn, allow “force load” with remap if player ID universe changed.

---

## 12) GitHub Actions (begin/end)
**Start:**
- Create branch: `feat/prp-runs-01`
- Open WIP PR targeting `dev`

**End:**
- Rebase on `dev`, squash-merge PR to `main` via integration
- Tag: `runs-01` (optional) and update `CHANGELOG.md`

---

## 13) Minimal Stubs (illustrative only)
```python
# src/runs/api.py
def save_run(slate_key: str, module: str, meta: dict) -> str: ...
def get_run(slate_key: str, module: str, run_id: str) -> dict: ...
def list_runs(slate_key: str, module: str, limit: int = 10) -> list[dict]: ...
def prune_runs(slate_key: str, module: str, retention_days: int = 14) -> int: ...
```

---

## 14) Done = Shipped
- UI can load a selected past run, and the system automatically keeps only the last 10 optimizer runs.
- Tests green; docs updated.


---

## 4.4 Uploads Persistence (Projections & Player IDs) — **Newest Wins**
We will persist all projection and player-id uploads with deterministic filenames and a manifest. **The most recent upload always takes precedence** for the current slate unless a run explicitly snapshots older inputs.

### Directory Layout
```
data/
  uploads/
    projections/
      2025-09-07T20-59-00Z__slate-2025-10-28-DK-10g.csv
      2025-09-07T21-10-12Z__slate-2025-10-28-DK-10g.csv  # newest → active
    player_ids/
      2025-09-07T19-45-11Z__global.csv
      2025-09-07T21-11-03Z__global.csv                   # newest → active
  manifests/
    uploads_manifest.json
```

### `uploads_manifest.json` (schema sketch)
```json
{
  "schema_version": 1,
  "active": {
    "projections": {
      "slate_key": "2025-10-28-DK-10g",
      "path": "data/uploads/projections/2025-09-07T21-10-12Z__slate-2025-10-28-DK-10g.csv",
      "uploaded_at": "2025-09-07T21:10:12Z"
    },
    "player_ids": {
      "scope": "global",
      "path": "data/uploads/player_ids/2025-09-07T21-11-03Z__global.csv",
      "uploaded_at": "2025-09-07T21:11:03Z"
    }
  },
  "history": {
    "projections": ["...older paths..."],
    "player_ids": ["...older paths..."]
  },
  "limits": {
    "projections_per_slate_keep": 10,
    "player_ids_keep": 10
  }
}
```

### Rules
- **Newest wins**: the `active` entry points to the latest file for each category.
- **Per-slate projections**: projections are keyed by `slate_key`; we keep a per-slate MRU list (default keep=10).
- **Global player IDs**: single MRU chain (default keep=10).
- **On run save**: the optimizer **snapshots** the active uploads (stores relative paths in `run_meta.inputs.*`) so the run is reproducible even if newer uploads appear later.
- **Validation**: on load, warn if snapshot inputs are not the current `active` ones; offer one-click **Remap to Active**.

---

## 5.3 REST & CLI for Uploads
### REST
- `POST /api/uploads/projections` → form-data file + `slate_key`; updates manifest; prunes per-slate beyond keep.
- `POST /api/uploads/player_ids` → form-data file; updates manifest; prunes beyond keep.
- `GET /api/uploads/active` → returns current active files & metadata.
- `GET /api/uploads/history?type=projections&slate_key=...` → MRU list for that slate.
- `POST /api/uploads/set-active` → optional endpoint to pin a specific historical file as active (advanced).

### CLI (uv)
- `uv run python -m tools.uploads add-projections --slate SLATE --path file.csv`
- `uv run python -m tools.uploads add-player-ids --path file.csv`
- `uv run python -m tools.uploads active`
- `uv run python -m tools.uploads prune --type projections --slate SLATE --keep 10`
- `uv run python -m tools.uploads prune --type player_ids --keep 10`

---

## 2) Goals (Acceptance Criteria) — **Additions**
- Latest **projections** and **player IDs** persist on disk; **newest automatically becomes active**.
- Saving a run **snapshots** the active uploads into `run_meta.inputs.*` and maintains reproducibility.
- Per-slate projections and global player IDs are **pruned** to MRU **keep=10** (configurable).

---

## 6) Frontend UX — **Additions**
- **Uploads panel** in the left nav:
  - Drag-and-drop for projections (requires `slate_key`) and player IDs.
  - Badge showing **Active** vs **Snapshot** for the current run.
  - History dropdown per slate (last 10) with “Set Active” and “Prune Now” actions.
- **RunSummary**: show which uploads were snapshotted; warning chip if not the latest.

---

## 8) Implementation Plan — **Adds**
- `src/uploads/manifest.py`: read/write `uploads_manifest.json`, enforce newest-wins, pruning.
- API routes + CLI wrappers; wire DnD in UI to call endpoints.
- Integrate into optimizer save path: capture `active` uploads → write into `run_meta.inputs`.
- Compat checks: on run load, compare `run_meta.inputs` vs `uploads_manifest.active` → show chip/toast.

---

## 10) Config — **Extend**
```yaml
uploads:
  projections_per_slate_keep: 10
  player_ids_keep: 10
  dir: "data/uploads"
  manifest: "data/manifests/uploads_manifest.json"
```

---

## 9) Testing Strategy — **Adds**
- Upload twice → `active` points to the newer file; history length increments; prune beyond keep.
- Run save snapshots current `active`; later upload does **not** change the snapshot paths in `run_meta`.
- On load, UI shows “Snapshot vs Active” status and allows remap.

---

## 12) GitHub Actions (begin/end) — unchanged
**Start:** `feature/runs-01-load-and-retain`  
**End:** squash, rebase, changelog, tag.

*Updated:* 2025-09-08 01:28

---

# Update v2 — Auto‑Save Runs with Rolling 10 (Drop Oldest on New)
**Timestamp:** 2025-09-08 01:36

## What Changed
- **Auto‑save on completion**: Every optimizer run writes a `run_id` directory + `run_meta.json` automatically. No manual “Save” action.
- **Rolling retention = 10**: When a new run finishes, we **immediately evict** the oldest run so that only **10** optimizer runs exist at any time (FIFO by `created_at` or dir mtime). No separate prune step.

## Acceptance Criteria (supersedes earlier retention wording)
- On run finish: run artifacts are written and the MRU index is updated.
- If count > 10: the **oldest directory is deleted** atomically before the MRU is finalized.
- UI **Load Run** modal always shows at most 10 runs.
- Concurrency-safe: two runs finishing at once still end up with ≤10 total after eventual consistency.

## Implementation Notes
- Replace “prune on save” with **evict on complete** in the optimizer completion hook:
  1) Write to a **temp dir** (`…/__tmp__{run_id}`), then `rename` to final `{run_id}` (atomic on same fs).
  2) Recompute run list sorted by `created_at`/mtime.
  3) If len > 10 → `rm -rf` the **single** oldest and rebuild index.
  4) Persist `optimizer_index.json` (write temp + atomic move to avoid partial writes).
- Keep the **uploads snapshot** behavior unchanged (inputs in `run_meta.inputs.*`).

## REST/CLI Surface Adjustments
- `POST /api/runs/save` becomes **internal**; typical clients do not call it.
- `GET /api/runs` and `GET /api/runs/{run_id}` unchanged.
- Explicit `prune` endpoint is **optional**; keep for maintenance but not used in normal flow.

## Tests
- Create 12 fake runs in sequence → assert only the **last 10** remain and index order matches.
- Concurrency test: simulate two finishes within 100ms; ensure final count ≤10 and both newest present.
- Crash safety: simulate failure between write and index update; next completion pass reconciles to ≤10.
</file>

<file path="docs/USAGE-field-sampler.md">
# Field Sampler Usage

The field sampler builds a public field of DraftKings NBA lineups from a
projections file. The core engine lives in `field_sampler.engine` and may be
invoked either from Python or the CLI.

## Config

Required knobs:

* `field_size` – number of public lineups to sample
* `seed` – RNG seed for determinism
* `site` – site identifier (`dk`)
* `slate_id` – slate identifier
* `salary_cap` – contest salary cap (default 50000)
* `max_per_team` – max players per team (default 4)

## Running from Python

```python
import pandas as pd
from field_sampler.engine import SamplerEngine

projections = pd.read_csv("projections.csv")
engine = SamplerEngine(projections, seed=42, slate_id="20250101_NBA")
engine.generate(100)
```

## CLI

```bash
python -m tools.sample_field \
  --projections projections.csv \
  --contest-config contest_config.json \
  --field-size 100 \
  --seed 42 \
  --slate-id 20250101_NBA
```

## Inputs

* `projections.csv` – player projections with columns
  `player_id,team,positions,salary,ownership`
* `contest_config.json` – provides `salary_cap` and `max_per_team`
* `slate.csv` – optional slate metadata (unused)

## Outputs

Artifacts are written under `./artifacts/`:

* `field_base.jsonl` – sampled public field
* `metrics.json` – run metadata
* `audit_fs.md` – summary report
</file>

<file path="field_sampler/engine.py">
from __future__ import annotations

import json
import random
import uuid
from collections.abc import Sequence
from dataclasses import dataclass, field
from datetime import UTC, datetime
from pathlib import Path
from typing import Any

import pandas as pd

from validators.lineup_rules import (
    DK_SLOTS_ORDER,
    POSITION_ELIGIBILITY,
    LineupValidator,
)


@dataclass
class PositionAllocator:
    pool: pd.DataFrame

    def eligible(self, slot: str, taken: set[str]) -> pd.DataFrame:
        mask = ~self.pool["player_id"].isin(taken)
        subset = self.pool[mask]
        allowed = POSITION_ELIGIBILITY.get(slot, set())
        elig_mask = subset["positions"].apply(lambda s: bool(allowed & set(str(s).split("/"))))
        return subset[elig_mask]


@dataclass
class SalaryManager:
    remaining: int

    def can_afford(self, salary: int) -> bool:
        return salary <= self.remaining

    def add(self, salary: int) -> None:
        self.remaining -= salary


@dataclass
class TeamLimiter:
    max_per_team: int
    counts: dict[str, int] = field(default_factory=dict)

    def can_add(self, team: str) -> bool:
        return self.counts.get(team, 0) < self.max_per_team

    def add(self, team: str) -> None:
        self.counts[team] = self.counts.get(team, 0) + 1


@dataclass
class RejectionSampler:
    rng: random.Random
    allocator: PositionAllocator
    salary: SalaryManager
    teams: TeamLimiter

    def sample_lineup(self) -> list[str] | None:
        taken: set[str] = set()
        lineup: list[str] = []
        for slot in DK_SLOTS_ORDER:
            elig = self.allocator.eligible(slot, taken)
            if elig.empty:
                return None
            elig = elig[elig["salary"].apply(self.salary.can_afford)]
            elig = elig[elig["team"].apply(self.teams.can_add)]
            if elig.empty:
                return None
            weights = (
                elig["ownership"].astype(float).fillna(0.0).tolist()
                if "ownership" in elig.columns
                else [0.0] * len(elig)
            )
            if sum(weights) <= 0:
                weights = [1.0] * len(weights)
            player = self.rng.choices(elig["player_id"].tolist(), weights=weights, k=1)[0]
            row = elig.set_index("player_id").loc[player]
            taken.add(player)
            self.salary.add(int(row["salary"]))
            self.teams.add(str(row["team"]))
            lineup.append(player)
        return lineup


@dataclass
class SamplerEngine:
    projections: pd.DataFrame
    seed: int
    salary_cap: int = 50000
    max_per_team: int = 4
    site: str = "dk"
    slate_id: str = ""
    out_dir: Path = Path("artifacts")

    def generate(self, n: int) -> dict[str, Any]:
        validator = LineupValidator(salary_cap=self.salary_cap, max_per_team=self.max_per_team)
        rng = random.Random(self.seed)
        allocator = PositionAllocator(self.projections)
        field: list[dict[str, Any]] = []
        attempts = 0
        while len(field) < n and attempts < n * 1000:
            attempts += 1
            salary = SalaryManager(self.salary_cap)
            teams = TeamLimiter(self.max_per_team)
            sampler = RejectionSampler(rng, allocator, salary, teams)
            lineup = sampler.sample_lineup()
            if lineup is None:
                continue
            if not validator.validate(
                list(zip(DK_SLOTS_ORDER, lineup, strict=False)), self.projections
            ):
                continue
            field.append({"players": lineup, "source": "public"})
        meta = self._write_outputs(field)
        meta["attempts"] = attempts
        meta["field_base_count"] = len(field)
        return meta

    def _write_outputs(self, field_data: Sequence[dict[str, Any]]) -> dict[str, Any]:
        self.out_dir.mkdir(exist_ok=True, parents=True)
        run_id = uuid.uuid4().hex
        created = datetime.now(UTC).isoformat()
        base_path = self.out_dir / "field_base.jsonl"
        with base_path.open("w", encoding="utf-8") as f:
            for row in field_data:
                f.write(json.dumps(row) + "\n")
        metrics = {
            "run_id": run_id,
            "created_at": created,
            "site": self.site,
            "slate_id": self.slate_id,
            "seed": self.seed,
            "ruleset_version": "1",
        }
        metrics_path = self.out_dir / "metrics.json"
        metrics_path.write_text(json.dumps(metrics, indent=2), encoding="utf-8")
        return {
            "run_id": run_id,
            "field_path": str(base_path),
            "metrics_path": str(metrics_path),
            "created_at": created,
        }


def run_sampler(projections: pd.DataFrame, config: dict[str, Any], seed: int) -> dict[str, Any]:
    eng = SamplerEngine(
        projections=projections,
        seed=seed,
        salary_cap=int(config.get("salary_cap", 50000)),
        max_per_team=int(config.get("max_per_team", 4)),
        site=str(config.get("site", "dk")),
        slate_id=str(config.get("slate_id", "")),
        out_dir=Path(config.get("out_dir", "artifacts")),
    )
    n = int(config.get("field_size", 1))
    return eng.generate(n)
</file>

<file path="lib/ingest/normalize.ts">
import type { Player, Projection, MergedPlayer } from "@/lib/domain/types";
import type { PlayerCsv, ProjectionCsv } from "./schemas";

export function normalizePlayers(rows: PlayerCsv[]): Player[] {
  return rows.map((r) => ({
    player_id_dk: String(r.player_id_dk),
    player_name: r.player_name,
    team: r.team.toUpperCase(),
    pos_primary: r.pos_primary,
    pos_secondary: r.pos_secondary ?? null,
  }));
}

export function normalizeProjections(rows: ProjectionCsv[]): Projection[] {
  return rows.map((r) => ({
    player_id_dk: String(r.player_id_dk),
    salary: Number(r.salary),
    proj_fp: Number(r.proj_fp),
    mins: r.mins ?? null,
    ownership: r.ownership ?? null,
    ceiling: r.ceiling ?? null,
    floor: r.floor ?? null,
    source: r.source,
    version_ts: r.version_ts ?? null,
  }));
}

export function mergePlayers(
  players: Player[],
  projections: Projection[]
): MergedPlayer[] {
  const projById = new Map(projections.map((p) => [p.player_id_dk, p] as const));
  const merged: MergedPlayer[] = [];
  for (const pl of players) {
    const pj = projById.get(pl.player_id_dk);
    if (!pj) continue; // inner join
    merged.push({ ...pl, ...pj });
  }
  return merged;
}

export function mergePlayersStrict(
  players: Player[],
  projections: Projection[]
): { merged: MergedPlayer[]; ok: boolean; expected: number; missing_player_ids: string[]; missing_projection_ids: string[] } {
  const projById = new Map(projections.map((p) => [p.player_id_dk, p] as const));
  const plById = new Map(players.map((p) => [p.player_id_dk, p] as const));
  const merged: MergedPlayer[] = [];

  const missingFromProjections: string[] = [];
  for (const pl of players) {
    const pj = projById.get(pl.player_id_dk);
    if (!pj) {
      missingFromProjections.push(pl.player_id_dk);
      continue;
    }
    merged.push({ ...pl, ...pj });
  }

  const missingFromPlayers: string[] = [];
  for (const pj of projections) {
    if (!plById.has(pj.player_id_dk)) missingFromPlayers.push(pj.player_id_dk);
  }

  const expected = Math.max(players.length, projections.length);
  const ok = merged.length === players.length && merged.length === projections.length;
  return {
    merged,
    ok,
    expected,
    missing_player_ids: missingFromPlayers,
    missing_projection_ids: missingFromProjections,
  };
}
</file>

<file path="lib/ingest/schemas.ts">
import { z } from "zod";

// Common alias maps for CSV headers
export const PLAYER_ALIASES: Record<string, keyof z.infer<typeof PlayerCsvSchema>> = {
  player_id_dk: "player_id_dk",
  player_id: "player_id_dk",
  dk_id: "player_id_dk",
  id: "player_id_dk",
  name: "player_name",
  player_name: "player_name",
  team: "team",
  teamabbrev: "team",
  "team abbrev": "team",
  team_abbr: "team",
  pos: "pos_primary",
  position: "pos_primary",
  pos_primary: "pos_primary",
  pos_secondary: "pos_secondary",
};

export const PROJ_ALIASES: Record<string, keyof z.infer<typeof ProjectionCsvSchema>> = {
  player_id_dk: "player_id_dk",
  player_id: "player_id_dk",
  dk_id: "player_id_dk",
  id: "player_id_dk",
  salary: "salary",
  sal: "salary",
  proj_fp: "proj_fp",
  proj: "proj_fp",
  projection: "proj_fp",
  fp: "proj_fp",
  fpts: "proj_fp",
  mins: "mins",
  minutes: "mins",
  own: "ownership",
  "own%": "ownership",
  ownership: "ownership",
  ceil: "ceiling",
  ceiling: "ceiling",
  floor: "floor",
  source: "source",
  version_ts: "version_ts",
  timestamp: "version_ts",
  version: "version_ts",
};

// Helpers
const toStr = z
  .string()
  .transform((s) => s.trim())
  .pipe(z.string().min(1));

const toNum = z
  .union([z.number(), z.string()])
  .transform((v) => (typeof v === "number" ? v : Number(String(v).trim())))
  .pipe(z.number().finite());

const toOptNum = z
  .union([z.number(), z.string()])
  .transform((v) => {
    if (v === null || v === undefined) return null;
    const s = String(v).trim();
    if (s === "" || s.toLowerCase() === "na") return null;
    const n = Number(s);
    return Number.isFinite(n) ? n : null;
  })
  .nullable()
  .optional();

const toOptStr = z
  .union([z.string(), z.null(), z.undefined()])
  .transform((v) => {
    if (v === null || v === undefined) return null;
    const s = String(v).trim();
    return s === "" ? null : s;
  })
  .nullable()
  .optional();

// Row schemas for CSV after aliasing
export const PlayerCsvSchema = z.object({
  player_id_dk: toStr,
  player_name: toStr,
  team: toStr.transform((s) => s.toUpperCase()),
  pos_primary: toStr,
  pos_secondary: toOptStr,
});

export type PlayerCsv = z.infer<typeof PlayerCsvSchema>;

export const ProjectionCsvSchema = z.object({
  player_id_dk: toStr,
  salary: toNum,
  proj_fp: toNum,
  mins: toOptNum,
  ownership: toOptNum,
  ceiling: toOptNum,
  floor: toOptNum,
  source: toStr,
  version_ts: toOptStr, // ISO or null
});

export type ProjectionCsv = z.infer<typeof ProjectionCsvSchema>;

export type AliasMap<T extends z.ZodRawShape> = Record<string, keyof z.infer<z.ZodObject<T>>>;
</file>

<file path="lib/state/ingest-store.ts">
"use client";

import { create } from "zustand";
import type {
  IngestSummary,
  MergedPlayer,
  Player,
  Projection,
} from "@/lib/domain/types";
import { PlayerCsvSchema } from "@/lib/ingest/schemas";
import { parseCsvStream } from "@/lib/ingest/parse";
import { mergePlayersStrict, normalizePlayers, normalizeProjections } from "@/lib/ingest/normalize";
import {
  parseDkPlayers,
  parseDkProjections,
  buildCanonicalProjectionsFromDk,
  type DkProjection,
} from "@/lib/ingest/adapter";

type Status = "idle" | "parsing" | "ready" | "error";

type IngestError = { file: "players" | "projections" | "unknown"; row: number; message: string };

type State = {
  status: Status;
  players: Player[];
  projections: Projection[];
  merged: MergedPlayer[];
  summary: IngestSummary | null;
  errors: IngestError[];
  _pendingDkProjections: DkProjection[] | null;
  ingestCsv: (file: File) => Promise<void>;
  reset: () => void;
};

function initSummary(): IngestSummary {
  return {
    rows_players: 0,
    rows_projections: 0,
    dropped_players: 0,
    dropped_projections: 0,
    unknown_cols_players: [],
    unknown_cols_projections: [],
  };
}

function guessKind(file: File): "players" | "projections" | null {
  const n = file.name.toLowerCase();
  if (n.includes("player")) return "players";
  if (n.includes("proj")) return "projections";
  return null;
}

export const useIngestStore = create<State>((set, get) => ({
  status: "idle",
  players: [],
  projections: [],
  merged: [],
  summary: null,
  errors: [],
  _pendingDkProjections: null,
  reset: () =>
    set({
      status: "idle",
      players: [],
      projections: [],
      merged: [],
      summary: null,
      errors: [],
      _pendingDkProjections: null,
    }),
  ingestCsv: async (file: File) => {
    set({ status: "parsing" });
    const kind = guessKind(file);

    try {
      if (kind === "players") {
        // Prefer DK adapter for real DK files; fall back to canonical if needed
        let players: Player[] = [];
        let unknownCols: string[] = [];
        let rowCount = 0;
        let droppedRows = 0;
        try {
          const repDk = await parseDkPlayers(file);
          players = normalizePlayers(repDk.rows);
          rowCount = repDk.rowCount;
          droppedRows = repDk.droppedRows;
          unknownCols = repDk.unknownColumns;
        } catch {
          const rep = await parseCsvStream(file, PlayerCsvSchema, {} as any);
          players = normalizePlayers(rep.rows);
          rowCount = rep.rowCount;
          droppedRows = rep.droppedRows;
          unknownCols = rep.unknownColumns;
        }
        const nextSummary = { ...(get().summary ?? initSummary()) };
        nextSummary.rows_players = rowCount;
        nextSummary.dropped_players = droppedRows;
        nextSummary.unknown_cols_players = unknownCols;

        // If projections already parsed DK-raw, adapt now
        let projections = get().projections;
        const pending = get()._pendingDkProjections;
        if (pending && pending.length > 0) {
          const res = buildCanonicalProjectionsFromDk(pending, players);
          // If any unmatched remain, mark error
          if (res.unmatched.length > 0) {
            set({
              status: "error",
              errors: res.unmatched.map((r) => ({
                file: "projections",
                row: -1,
                message: `Unmatched DK projection: ${r.name} ${r.team} ${r.position}`,
              })),
            });
          }
          projections = normalizeProjections(res.rows);
        }

        const strict = mergePlayersStrict(players, projections);
        const status: Status = strict.ok ? "ready" : "error";
        set({ players, projections, merged: strict.merged, summary: nextSummary, status, _pendingDkProjections: null });
      } else if (kind === "projections") {
        // Parse DK raw projections first; then adapt once players are available
        const repDk = await parseDkProjections(file);
        const nextSummary = { ...(get().summary ?? initSummary()) };
        nextSummary.rows_projections = repDk.rowCount;
        nextSummary.dropped_projections = repDk.droppedRows;
        nextSummary.unknown_cols_projections = repDk.unknownColumns;

        const players = get().players;
        if (players.length > 0) {
          const res = buildCanonicalProjectionsFromDk(repDk.rows, players);
          if (res.unmatched.length > 0) {
            set({
              status: "error",
              errors: res.unmatched.map((r) => ({
                file: "projections",
                row: -1,
                message: `Unmatched DK projection: ${r.name} ${r.team} ${r.position}`,
              })),
            });
          }
          const projections = normalizeProjections(res.rows);
          const strict = mergePlayersStrict(players, projections);
          const status: Status = strict.ok ? "ready" : "error";
          set({ projections, merged: strict.merged, summary: nextSummary, status, _pendingDkProjections: null });
        } else {
          // wait for players to be ingested
          set({ _pendingDkProjections: repDk.rows, summary: nextSummary, status: "ready" });
        }
      } else {
        // Fallback: try projections first then players
        // try DK projections first
        try {
          const repP = await parseDkProjections(file);
          const nextSummary = { ...(get().summary ?? initSummary()) };
          nextSummary.rows_projections = repP.rowCount;
          nextSummary.dropped_projections = repP.droppedRows;
          nextSummary.unknown_cols_projections = repP.unknownColumns;
          const players = get().players;
          if (players.length > 0) {
            const res = buildCanonicalProjectionsFromDk(repP.rows, players);
            const projections = normalizeProjections(res.rows);
            const strict = mergePlayersStrict(players, projections);
            const status: Status = strict.ok ? "ready" : "error";
            set({ projections, merged: strict.merged, summary: nextSummary, status });
            return;
          }
          set({ _pendingDkProjections: repP.rows, summary: nextSummary, status: "ready" });
          return;
        } catch {}
        // finally, try players
        const repPl = await parseDkPlayers(file);
        const players = normalizePlayers(repPl.rows);
        const nextSummary = { ...(get().summary ?? initSummary()) };
        nextSummary.rows_players = repPl.rowCount;
        nextSummary.dropped_players = repPl.droppedRows;
        nextSummary.unknown_cols_players = repPl.unknownColumns;
        const strict = mergePlayersStrict(players, get().projections);
        const status: Status = strict.ok ? "ready" : "error";
        set({ players, merged: strict.merged, summary: nextSummary, status });
      }
    } catch (e: any) {
      set((s) => ({
        status: "error",
        errors: s.errors.concat({ file: "unknown", row: -1, message: e?.message ?? String(e) }),
      }));
    }
  },
}));

function keyToLower<T extends Record<string, any>>(obj: T): T {
  const out: any = {};
  for (const [k, v] of Object.entries(obj)) out[k.toLowerCase()] = v;
  return out as T;
}
</file>

<file path="lib/ui/constants.ts">
export const TOP_STATUS_H = 40;
export const TABS_H = 60;
export const CONTROLS_H = 96;
export const DRAWER_W = 450; // test 280 later
export const UPLOAD_W = 350;
export const UPLOAD_H = 40;

// UX states timing (ms)
export const SKELETON_MS = 1000;
export const UPLOAD_MIN_MS = 900;
export const DRAWER_SKELETON_MS = 750;
</file>

<file path="pipeline/ingest/__init__.py">
"""Ingestion module for projections and players normalization (PRP-1).

Exposes a thin CLI entrypoint via `python -m pipeline.ingest`.
"""
</file>

<file path="pipeline/io/__init__.py">
"""IO helpers (filesystem, parquet) for PRP-1.

Only minimal utilities to support ingest CLI and tests.
"""
</file>

<file path="pipeline/io/files.py">
from __future__ import annotations

from pathlib import Path

import pandas as pd


def ensure_dir(path: Path) -> None:
    path.mkdir(parents=True, exist_ok=True)


def write_parquet(df: pd.DataFrame, path: Path) -> None:
    path.parent.mkdir(parents=True, exist_ok=True)
    # Rely on pyarrow/fastparquet via pandas
    df.to_parquet(path)  # type: ignore[call-arg]
</file>

<file path="pipeline/registry/__init__.py">
"""Registry helpers placeholder (PRP-1).

Currently appended in the CLI; this module reserved for future expansion.
"""
</file>

<file path="pipeline/schemas/common.types.yaml">
$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://nba-dfs.schemas/common.types.yaml"
title: "Common Types for NBA-DFS"
description: "Reusable enums, regexes, and shared definitions for NBA-DFS schemas."
type: object
additionalProperties: false
version: "0.2.0"
definitions:
  PosEnum:
    type: string
    description: "DraftKings roster positions."
    enum: [PG, SG, SF, PF, C, G, F, UTIL]

  SiteEnum:
    type: string
    enum: [DK]

  RunTypeEnum:
    type: string
    enum: [ingest, optimizer, variants, field, sim, metrics]

  RunId:
    type: string
    description: "Stable run identifier: YYYYMMDD_HHMMSS_<shorthash> (lowercase hex/alpha). Example: 20251101_180000_deadbee"
    pattern: "^\\d{8}_\\d{6}_[a-z0-9]{6,10}$"

  UtcTimestamp:
    type: string
    description: "UTC ISO-8601 timestamp (YYYY-MM-DDTHH:mm:ss.sssZ)."
    pattern: "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{3})?Z$"

  GameDate:
    type: string
    description: "Game date (YYYY-MM-DD)."
    pattern: "^\\d{4}-\\d{2}-\\d{2}$"

  TeamCode:
    type: string
    description: "Team abbreviation (2–4 uppercase letters, e.g., BOS)."
    pattern: "^[A-Z]{2,4}$"

  DKDollars:
    type: integer
    description: "Money in DK dollars (whole integers)."
    minimum: 0

  Probability:
    type: number
    minimum: 0
    maximum: 1

  SHA256:
    type: string
    description: "Hex SHA-256 (64 lowercase hex chars)."
    pattern: "^[a-f0-9]{64}$"

  SlateId:
    type: string
    description: "Slate identifier like 20251101_NBA."
    pattern: "^\\d{8}_NBA$"

  DKCompositePosition:
    type: string
    description: "Single or composite DK positions like PG or PG/SF."
    pattern: "^([A-Z]{2,3})(/[A-Z]{2,3})*$"

  HistogramBin:
    type: object
    additionalProperties: false
    properties:
      bin_start:
        type: number
      bin_end:
        type: number
      count:
        type: integer
        minimum: 0
    required: [bin_start, bin_end, count]
</file>

<file path="pipeline/schemas/README.md">
Pipeline Schema Pack (SSOT)

Overview
- Purpose: Define strict, versioned JSON Schemas for all NBA-DFS pipeline artifacts (ingest → normalize → optimize → variants → field → sim).
- Storage targets: Parquet (primary), with 1:1 JSON/CSV exporters mapping to the same contracts.
- Strictness: All schemas set additionalProperties: false. Required fields and numeric ranges are enforced where expressible in JSON Schema. Some cross-field and cross-table rules are documented as validator notes.
- JSON Schema: Draft 2020-12 is used and pinned via `$schema` in each file.

Files
- common.types.yaml
- players.schema.yaml
- slates.schema.yaml
- projections_raw.schema.yaml
- projections_normalized.schema.yaml
- optimizer_lineups.schema.yaml
- optimizer_metrics.schema.yaml
- variant_catalog.schema.yaml
- variant_metrics.schema.yaml
- field.schema.yaml
- field_metrics.schema.yaml
- contest_structure.schema.yaml
- sim_results.schema.yaml
- sim_metrics.schema.yaml
- manifest.schema.yaml
- runs_registry.schema.yaml

Conventions
- Timestamps: UTC ISO-8601 (e.g., 2025-11-01T23:59:59.000Z). JSON Schema uses format: date-time; a stricter Z-suffix pattern is documented in common types.
- Money: integers in DK dollars (e.g., salary: 5400), never floats.
- Floats/probabilities: numbers with explicit ranges; probabilities in [0,1].
- IDs: dk_player_id travels end-to-end; slate_id matches ^\d{8}_NBA$.
- Enums: positions {PG, SG, SF, PF, C, G, F, UTIL}; site {DK}; run types {ingest, optimizer, variants, field, sim}.
- Lineage: normalization carries a lineage object with source, mapping notes, and content_sha256.

Run IDs
- Format: `YYYYMMDD_HHMMSS_<shorthash>` (lowercase), e.g., `20251101_180000_deadbee`.
- Enforced via `common.types.yaml#/definitions/RunId`; all run-linked schemas reference this.

Validator Notes (beyond JSON Schema)
- projections_normalized: ceil_fp ≥ proj_fp ≥ floor_fp. JSON Schema cannot enforce cross-field comparisons; implement in validator.
- optimizer_lineups: roster validity (8 players; positions compatible; total_salary ≤ 50000) — array length and salary max are enforced; full DK roster logic should be checked in validator.
- Contest payout: payout ranges must be contiguous, non-overlapping, and cover field_size exactly; enforce in validator.
- Cross-table checks:
  - projections_normalized.dk_player_id ⊆ players.dk_player_id
  - lineup/variant/field players ∈ players.dk_player_id
  - sim_results.entrant_id ∈ field.entrant_id for the referenced run

Parquet Type Mapping
- strings → UTF8; integers → INT32/INT64 as needed; numbers → DOUBLE (or FLOAT where appropriate).
- arrays → LIST; structs → STRUCT. Nested objects (e.g., dk_positions_filled, payout_curve) map to STRUCT or LIST<STRUCT>.
- Timestamps stored as strings (UTC ISO) at this layer for simplicity; adapters may project to TIMESTAMP(UTC) if desired.

Versioning
- Each schema includes a version string. Use semver-ish rules:
  - patch: description/metadata changes; no structural changes
  - minor: additive fields (optional) or relaxed bounds
  - major: breaking changes (removed/renamed fields, stricter bounds)
- Maintain a changelog section in this README when bumping versions.

Usage
- Validate a file using a future CLI (spec only):
  - `validate-table --schema pipeline/schemas/<name>.schema.yaml --input <parquet|json|csv>`
- JSON Schema draft: use Draft 2020-12. Python snippet:
  - `from jsonschema import Draft202012Validator as V` then `V.check_schema(schema)`
- Fail on: missing fields, out-of-range values, additionalProperties, enum mismatches, roster invalidity (as applicable).

Tiny Golden Dataset (for future tests)
- players: 3 rows, teams {BOS, LAL, MIA}, positions covering PG, SF/PF, C; valid timestamps
- projections_normalized: 3 rows (one per player) for a single `slate_id`, consistent `dk_player_id`, salary ≥ 3000, minutes ≤ 60; includes `lineage.content_sha256`
- optimizer_lineups: 1 lineup with 8 players drawn from players; `total_salary` ≤ 50000; `export_csv_row` matches DK header order
- contest_structure: field_size 10; payout_curve [1,1], [2,2], [3,3], [4,10] with prizes
- manifest: lists projections_normalized input (with content_sha256) and optimizer_lineups output kind

DK CSV Export
- Header/order for DraftKings NBA Classic upload: `PG,SG,SF,PF,C,G,F,UTIL` (8 columns, comma-separated).
- Fields named `export_csv_row` (optimizer_lineups, variant_catalog, field) must serialize rows matching this header order; exact player token format is site-proprietary and validated in adapters/tooling.

Change Log Template
- One-line entries: `YYYY-MM-DD – vX.Y.Z – who – why/impact`
- Example: `2025-09-04 – v0.1.1 – dschrengost – add RunId pattern and DK export notes (non-breaking)`

Changelog
- 0.1.0: Initial schema pack scaffolding
- 0.2.0: Add RunTypeEnum value `ingest`; bump manifest and runs_registry versions; align examples
- 0.2.1: Extend manifest.inputs.role enum to include `optimizer_lineups` (additive)
</file>

<file path="pipeline/__init__.py">
"""NBA-DFS pipeline package.

This package contains ingestion, IO, and registry helpers as described in PRP-1.
"""
</file>

<file path="processes/api/models.py">
from __future__ import annotations

from typing import Any, Literal

from pydantic import BaseModel


class ErrorResponse(BaseModel):
    error: str
    detail: str | None = None


class IngestConfig(BaseModel):
    source: str = "manual"
    projections: str | None = None
    player_ids: str | None = None
    mapping: str | None = None


class OptimizerConfig(BaseModel):
    site: Literal["DK"] = "DK"
    engine: str | None = None
    config: dict[str, Any] | None = None


class VariantsConfig(BaseModel):
    config: dict[str, Any] | None = None


class FieldConfig(BaseModel):
    config: dict[str, Any] | None = None


class Payout(BaseModel):
    rank_start: int
    rank_end: int
    prize: float


class ContestConfig(BaseModel):
    field_size: int
    entry_fee: float
    rake: float
    site: Literal["DK"]
    payout_curve: list[Payout]
    contest_id: str | None = None
    name: str | None = None


class SimConfig(BaseModel):
    config: dict[str, Any] | None = None
    contest: ContestConfig | None = None


class Seeds(BaseModel):
    optimizer: int | None = None
    variants: int | None = None
    field: int | None = None
    sim: int | None = None


class OrchestratorConfig(BaseModel):
    ingest: IngestConfig
    optimizer: OptimizerConfig
    variants: VariantsConfig
    field: FieldConfig
    sim: SimConfig
    seeds: Seeds | None = None


class OrchestratorRunRequest(BaseModel):
    slate_id: str
    config: OrchestratorConfig
    out_root: str = "data"
    schemas_root: str = "pipeline/schemas"
    validate: bool = True
    dry_run: bool = False
    verbose: bool = False


class StageSummary(BaseModel):
    name: Literal["ingest", "optimizer", "variants", "field", "sim", "metrics"]
    run_id: str
    primary_output: str | None = None


class OrchestratorRunResponse(BaseModel):
    bundle_id: str
    bundle_path: str
    stages: dict[str, str]
    run_registry_path: str | None = None


class BundleStage(BaseModel):
    name: str
    run_id: str
    primary_output: str | None = None


class BundleManifest(BaseModel):
    bundle_id: str
    slate_id: str
    created_ts: str
    stages: list[BundleStage]


class RunRegistryRow(BaseModel):
    run_id: str
    run_type: str
    slate_id: str
    status: str
    primary_outputs: list[str] | None = None
    metrics_path: str | None = None
    created_ts: str
    tags: list[str] | None = None


class RunsListResponse(BaseModel):
    runs: list[RunRegistryRow]
</file>

<file path="processes/dk_export/__main__.py">
from __future__ import annotations

import argparse
from pathlib import Path

import pandas as pd

from .writer import (
    build_export_df,
    discover_from_sim_run,
    fill_entries_template,
    write_dk_csv,
)


def _build_parser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser(prog="python -m processes.dk_export")
    p.add_argument("--from-sim-run")
    p.add_argument("--sim-results", type=Path)
    p.add_argument("--field", type=Path)
    p.add_argument("--top-n", type=int, default=20)
    p.add_argument("--out-csv", type=Path, required=True)
    p.add_argument("--no-dedupe", action="store_true")
    p.add_argument("--entries-csv", type=Path)
    p.add_argument("--entries-out", type=Path)
    p.add_argument("--runs-root", type=Path, default=Path("runs"))
    return p


def main(argv: list[str] | None = None) -> int:
    args = _build_parser().parse_args(argv)
    if args.from_sim_run:
        sim_path, field_path = discover_from_sim_run(args.from_sim_run, args.runs_root)
    else:
        sim_path = args.sim_results
        field_path = args.field
    sim_df = pd.read_parquet(sim_path)
    field_df = pd.read_parquet(field_path)
    export_df = build_export_df(sim_df, field_df, top_n=args.top_n, dedupe=not args.no_dedupe)
    write_dk_csv(export_df, args.out_csv)
    if args.entries_csv:
        entries_df = pd.read_csv(args.entries_csv)
        filled = fill_entries_template(entries_df, export_df)
        out = args.entries_out or args.entries_csv
        filled.to_csv(out, index=False)
    return 0


if __name__ == "__main__":  # pragma: no cover
    raise SystemExit(main())
</file>

<file path="processes/dk_export/writer.py">
from __future__ import annotations

import json
from collections.abc import Sequence
from pathlib import Path
from typing import Any

import pandas as pd

DK_SLOTS_ORDER = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]


def _parse_export_row(export_row: str) -> dict[str, str]:
    mapping: dict[str, str] = {}
    for token in str(export_row).split(","):
        token = token.strip()
        if not token:
            continue
        slot, _, pid = token.partition(" ")
        mapping[slot] = pid.strip()
    return mapping


def build_export_df(
    sim_results: pd.DataFrame,
    field_df: pd.DataFrame,
    top_n: int = 20,
    *,
    dedupe: bool = True,
) -> pd.DataFrame:
    """Select entrants and build DK export rows.

    Entrants are ranked by mean prize descending.
    """
    ev = sim_results.groupby("entrant_id")["prize"].mean().reset_index(name="ev")
    ev.sort_values("ev", ascending=False, inplace=True)
    entrant_ids: Sequence[Any] = ev.head(int(top_n))["entrant_id"].tolist()

    rows: list[dict[str, Any]] = []
    seen: set[tuple[str, ...]] = set()
    for eid in entrant_ids:
        subset = field_df[field_df["entrant_id"] == eid]
        if subset.empty:
            continue
        export_row = str(subset.iloc[0]["export_csv_row"])
        tokens = _parse_export_row(export_row)
        players = [tokens.get(slot, "") for slot in DK_SLOTS_ORDER]
        if "" in players:
            raise ValueError("Invalid export_csv_row: missing slots")
        key = tuple(players)
        if dedupe and key in seen:
            continue
        seen.add(key)
        row = {"entrant_id": eid}
        row.update(dict(zip(DK_SLOTS_ORDER, players, strict=True)))
        rows.append(row)
    return pd.DataFrame(rows)


def write_dk_csv(df: pd.DataFrame, out_csv: Path) -> None:
    df = df[["entrant_id", *DK_SLOTS_ORDER]]
    df.to_csv(out_csv, columns=DK_SLOTS_ORDER, index=False)


def fill_entries_template(entries_df: pd.DataFrame, export_df: pd.DataFrame) -> pd.DataFrame:
    out = entries_df.copy()
    for i, (_, row) in enumerate(export_df.iterrows()):
        for slot in DK_SLOTS_ORDER:
            out.at[i, slot] = row[slot]
    return out


def update_entries_csv(
    entries_csv: Path,
    export_df: pd.DataFrame,
    out_path: Path | None = None,
) -> Path:
    df = pd.read_csv(entries_csv)
    filled = fill_entries_template(df, export_df)
    out = out_path or entries_csv
    filled.to_csv(out, index=False)
    return out


def discover_from_sim_run(run_id: str, runs_root: Path = Path("runs")) -> tuple[Path, Path]:
    manifest_path = runs_root / "sim" / run_id / "manifest.json"
    data = json.loads(manifest_path.read_text(encoding="utf-8"))
    sim_path: Path | None = None
    field_path: Path | None = None
    for obj in data.get("outputs", []):
        if obj.get("kind") == "sim_results":
            sim_path = Path(obj["path"])
            break
    for obj in data.get("inputs", []):
        if obj.get("role") == "field":
            field_path = Path(obj["path"])
            break
    if sim_path is None or field_path is None:
        raise FileNotFoundError("Manifest missing sim_results or field paths")
    return sim_path, field_path
</file>

<file path="processes/field_sampler/_legacy/field_sampler.py">
# Field Sampler – build entrants and live lineups with replacement
from __future__ import annotations

import csv
import hashlib
import json
import math
import os
from collections import Counter, defaultdict
from dataclasses import dataclass
from typing import Any

import numpy as np
import yaml
from src.config import paths

ALLOWED_SLOTS = {"PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"}


# PID normalizer helper
def _normalize_pid(v: Any) -> str:
    """Return a stable string player_id. Handles ints, floats ending with .0, and strings."""
    try:
        import numpy as _np
    except Exception:
        _np = None
    # numpy integers
    if _np is not None and isinstance(v, _np.integer):
        return str(int(v))
    # native ints
    if isinstance(v, int):
        return str(v)
    # floats that are actually integers
    if isinstance(v, float):
        if math.isfinite(v):
            iv = int(round(v))
            if abs(v - iv) < 1e-9:
                return str(iv)
        return str(v)
    # strings: strip trailing .0 if present
    if isinstance(v, str):
        s = v.strip()
        if s.endswith(".0") and s.replace(".", "", 1).isdigit():
            try:
                return str(int(float(s)))
            except Exception:
                return s
        return s
    # fallback
    return str(v)


@dataclass
class Weights:
    weight_proj: float = 0.030
    weight_salary: float = 0.00008
    weight_own: float = 0.45
    weight_chalk_cnt: float = 0.12
    bias: float = -6.0


@dataclass
class BucketTarget:
    run_id: str | None = None
    salary_bin: str | None = None  # "low", "mid", "high"
    ownership_tertile: str | None = None  # "low_own", "mid_own", "high_own"
    target_share: float = 0.0  # Target percentage of field


@dataclass
class BucketTelemetry:
    realized_shares: dict[str, float]
    bucket_deviation: float  # Max deviation from targets
    gini_coefficient: float
    top_dupes: list[tuple[str, int]]  # (lineup_hash, count) pairs
    player_exposures: dict[str, float]  # player_id -> exposure %


SPORT_DEFAULT_CAP = {
    "NBA_CLASSIC": 0.008,
    "NFL_CLASSIC": 0.012,
    "NFL_SHOWDOWN": 0.025,
    "MMA": 0.015,
    "NASCAR": 0.015,
    "PGA": 0.005,
}


SPORT_SALARY_CAPS = {
    "NBA_CLASSIC": 50000,
    "NFL_CLASSIC": 50000,
    "NFL_SHOWDOWN": 50000,
    "MMA": 50000,
    "NASCAR": 50000,
    "PGA": 50000,
}


# Resolver helpers for catalog/pool directory or file path
def _resolve_catalog_path(path: str) -> str:
    """Accept a file path or a run directory. Prefer parquet if present."""
    if os.path.isdir(path):
        # preferred filenames in order
        candidates = [
            os.path.join(path, "variant_catalog.parquet"),
            os.path.join(path, "lineups_grid.parquet"),
            os.path.join(path, "lineups_grid.csv"),
        ]
        for c in candidates:
            if os.path.exists(c):
                print(f"[FIELD] Using catalog file: {c}")
                return c
        raise FileNotFoundError(
            f"No catalog file found under {path}. Expected one of: {', '.join(os.path.basename(c) for c in candidates)}"
        )
    return path


def _resolve_pool_path(path: str) -> str:
    """Accept a file path or a run directory. Prefer parquet if present."""
    if os.path.isdir(path):
        candidates = [
            os.path.join(path, "player_pool.parquet"),
            os.path.join(path, "player_pool.csv"),
        ]
        for c in candidates:
            if os.path.exists(c):
                print(f"[FIELD] Using player pool file: {c}")
                return c
        raise FileNotFoundError(
            f"No player pool file found under {path}. Expected one of: {', '.join(os.path.basename(c) for c in candidates)}"
        )
    return path


def _read_pool(path: str) -> dict[str, dict]:
    import pandas as pd

    pool: dict[str, dict] = {}
    scaled = 0

    # Handle both parquet and CSV files
    if path.endswith(".parquet"):
        df = pd.read_parquet(path)
    else:
        df = pd.read_csv(path)

    # Detect ID column
    id_col = None
    for cand in (
        "player_id",
        "contest_player_id",
        "dk_id",
        "id",
        "PLAYERID",
        "PlayerID",
    ):
        if cand in df.columns:
            id_col = cand
            break
    if id_col is None:
        raise ValueError(
            f"Player pool missing an ID column; looked for one of: player_id, contest_player_id, dk_id, id. Columns present: {list(df.columns)}"
        )
    print(f"[FIELD] Pool ID column: {id_col} (rows={len(df)})")

    # Detect positions column (optional)
    pos_col = None
    for cand in ("positions", "position", "pos", "POSITIONS", "Position"):
        if cand in df.columns:
            pos_col = cand
            break

    # Detect ownership column name
    own_col = None
    for cand in ("own_proj", "own", "ownership", "OWN", "Ownership"):
        if cand in df.columns:
            own_col = cand
            break

    for _, row in df.iterrows():
        # Ownership with auto-scale if in 0-1 range
        own_raw = (
            float(row.get(own_col, 0.0))
            if own_col is not None and not pd.isna(row.get(own_col))
            else 0.0
        )
        if math.isnan(own_raw) or own_raw < 0:
            own = 0.0
        elif 0.0 <= own_raw <= 1.5:
            own = own_raw * 100.0
            scaled += 1
        else:
            own = min(100.0, own_raw)

        pid = _normalize_pid(row[id_col])
        pool[pid] = {
            "proj": float(row["proj"]),
            "own": float(own),
            "salary": int(float(row["salary"])),
        }
        if pos_col is not None and not pd.isna(row.get(pos_col, None)):
            pool[pid]["positions"] = str(row[pos_col])

    if scaled:
        print(f"[INFO] Scaled ownership from fraction→percent for {scaled} players.")
    return pool


def _read_long(path: str) -> list[list[tuple[str, str]]]:
    """
    Return list of lineups; each lineup is a list of (slot, player_id) tuples.

    Supported schemas:
    - Long w/ slots: columns include lineup_id, player_id, slot
    - Long no slots: columns include lineup_id, player_id (assign default NBA slots)
    - Wide: columns include many of [PG, SG, SF, PF, C, G, F, UTIL]
    """
    import pandas as pd

    roster_order = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
    wide_headers = set(roster_order)

    # Handle both parquet and CSV files
    if path.endswith(".parquet"):
        df = pd.read_parquet(path)
    else:
        df = pd.read_csv(path)

    flds = set(df.columns)
    by = defaultdict(list)

    if {"lineup_id", "player_id", "slot"}.issubset(flds):
        # Slot-aware catalog (preferred)
        for _, row in df.iterrows():
            by[row["lineup_id"]].append((row["slot"], _normalize_pid(row["player_id"])))

        def sort_key(sp):  # stable slot order
            return roster_order.index(sp[0]) if sp[0] in roster_order else 999

        result = [sorted(sp, key=sort_key) for _, sp in sorted(by.items())]
        print(f"[FIELD] Catalog schema: LONG+SLOTS (rows={len(by)})")
        return result

    elif {"lineup_id", "player_id"}.issubset(flds):
        # Legacy catalog: no slot column. Assign default slots in order.
        for _, row in df.iterrows():
            by[row["lineup_id"]].append(_normalize_pid(row["player_id"]))
        out: list[list[tuple[str, str]]] = []
        truncated_lineups = 0
        for _, pids in sorted(by.items()):
            if len(pids) > 8:
                truncated_lineups += 1
            assigned: list[tuple[str, str]] = []
            n = min(len(pids), len(roster_order))
            for i in range(n):
                assigned.append((roster_order[i], pids[i]))
            out.append(assigned)
        if truncated_lineups > 0:
            print(
                f"[WARN] Truncated {truncated_lineups} legacy lineups with >8 players to exactly 8 slots."
            )
        print(f"[FIELD] Catalog schema: LONG (rows={len(out)})")
        return out

    elif len(wide_headers & flds) >= 5:
        # Wide catalog: one row per lineup with slot columns
        headers = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
        out: list[list[tuple[str, str]]] = []
        for _, row in df.iterrows():
            assigned: list[tuple[str, str]] = []
            for slot in headers:
                pid = row.get(slot, None)
                if pid is None:
                    continue
                if isinstance(pid, float) and np.isnan(pid):
                    continue
                if pid == "":
                    continue
                assigned.append((slot, _normalize_pid(pid)))
            if assigned:
                out.append(assigned)
        print(f"[FIELD] Catalog schema: WIDE (rows={len(out)})")
        return out

    else:
        raise ValueError(
            f"{path} must include a supported schema: long with (lineup_id,player_id[,slot]) or wide slot columns (PG..UTIL). Columns present: {sorted(flds)}"
        )


def _write_long(lineups: list[list[tuple[str, str]]], path: str):
    os.makedirs(os.path.dirname(path) or ".", exist_ok=True)
    with open(path, "w", newline="") as f:
        w = csv.writer(f)
        w.writerow(["lineup_id", "slot", "player_id"])
        for i, lu in enumerate(lineups, start=1):
            lid = f"L{i}"
            for slot, pid in lu:
                w.writerow([lid, slot, pid])


def _write_tournament_wide(lineups: list[list[tuple[str, str]]], path: str):
    headers = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
    os.makedirs(os.path.dirname(path) or ".", exist_ok=True)
    with open(path, "w", newline="") as f:
        w = csv.writer(f)
        w.writerow(headers)
        for lu in lineups:
            row = {slot: pid for slot, pid in lu}
            w.writerow([row.get(h, "") for h in headers])


def _write_simulator_tournament_wide(lineups: list[list[tuple[str, str]]], path: str):
    """Write tournament lineups for simulator: headerless, IDs only."""
    os.makedirs(os.path.dirname(path) or ".", exist_ok=True)
    headers = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
    with open(path, "w", newline="") as f:
        w = csv.writer(f)
        for lu in lineups:
            row = {slot: pid for slot, pid in lu}
            w.writerow([row.get(h, "") for h in headers])


def _validate_catalog(
    catalog: list[list[tuple[str, str]]], pool: dict[str, dict], name: str
) -> None:
    """Validate that all player IDs in catalog exist in the player pool."""
    bad = []
    for i, lu in enumerate(catalog):
        for _, pid in lu:
            if pid not in pool:
                bad.append((i, pid))
                break
    if bad:
        preview = ", ".join(f"(lineup_idx={i}, pid={pid})" for i, pid in bad[:5])
        raise ValueError(
            f"{name} contains lineups with unknown player IDs: {preview} ... (total {len(bad)})"
        )


def _validate_salary_cap(
    catalog: list[list[tuple[str, str]]], pool: dict[str, dict], sport: str, name: str
) -> None:
    """Validate that all lineups respect salary cap for the given sport."""
    salary_cap = SPORT_SALARY_CAPS.get(sport.upper())
    if salary_cap is None:
        return  # No validation for unknown sports

    violations = []
    for i, lu in enumerate(catalog):
        total_salary = sum(pool[p]["salary"] for _, p in lu if p in pool)
        if total_salary > salary_cap:
            violations.append((i, total_salary))

    if violations:
        preview = ", ".join(f"(lineup_idx={i}, salary={sal})" for i, sal in violations[:5])
        raise ValueError(
            f"{name} contains {len(violations)} lineups exceeding ${salary_cap:,} salary cap: {preview}"
        )


def _normalize_positions(v: Any) -> set:
    """Normalize positions from a string like 'PG/SG' or an iterable to a set of tokens."""
    if isinstance(v, str):
        return set(p.strip() for p in v.split("/") if p)
    if isinstance(v, (list, tuple, set)):
        return set(map(str, v))
    return set()


def _validate_slot_eligibility(
    catalog: list[list[tuple[str, str]]], pool: dict[str, dict], name: str
) -> None:
    """Validate slot eligibility if positions are present in pool."""
    # Check if any player has position data
    has_positions = any("positions" in player_data for player_data in pool.values())
    if not has_positions:
        return  # Skip validation if no position data

    POSITION_ELIGIBILITY = {
        "PG": {"PG"},
        "SG": {"SG"},
        "SF": {"SF"},
        "PF": {"PF"},
        "C": {"C"},
        "G": {"PG", "SG"},
        "F": {"SF", "PF"},
        "UTIL": {"PG", "SG", "SF", "PF", "C"},
    }

    violations = []
    for i, lu in enumerate(catalog):
        for slot, pid in lu:
            if pid not in pool:
                continue
            player_positions = _normalize_positions(pool[pid].get("positions", ""))
            allowed = POSITION_ELIGIBILITY.get(slot, set())
            if allowed and not (player_positions & allowed):
                violations.append((i, slot, pid, sorted(player_positions)))
                break
    if violations:
        preview = ", ".join(
            f"(lineup_idx={i}, slot={slot}, pid={pid}, pos={pos})"
            for i, slot, pid, pos in violations[:5]
        )
        raise ValueError(
            f"{name} contains {len(violations)} slot eligibility violations: {preview}"
        )


def _validate_lineup_shape(
    catalog: list[list[tuple[str, str]]], pool: dict[str, dict], name: str
) -> None:
    """Strict lineup shape validation: exactly 8 slots, valid slot names, no duplicate players, all PIDs present."""
    bad = []
    for i, lu in enumerate(catalog):
        slots = [s for s, _ in lu]
        pids = [p for _, p in lu]
        if len(lu) != 8:
            bad.append((i, "len!=8"))
            continue
        if any(s not in ALLOWED_SLOTS for s in slots):
            bad.append((i, "bad_slot"))
            continue
        if len(set(pids)) != 8:
            bad.append((i, "dup_pid"))
            continue
        if any(p not in pool for p in pids):
            bad.append((i, "pid_missing"))
            continue
    if bad:
        preview = ", ".join(map(str, bad[:5]))
        raise ValueError(f"{name} has invalid lineups, e.g. {preview} ... (total {len(bad)})")


def _enforce_dup_cap_inplace(
    entrants: list[list[tuple[str, str]]],
    catalog: list[list[tuple[str, str]]],
    p: list[float],
    dup_mode: str,
    rng: np.random.Generator,
    protected_prefix_n: int,
    cap_abs: int | None,
) -> int | None:
    """Robust post-inject duplicate cap enforcement that protects the specified prefix entries."""
    if cap_abs is None:
        return cap_abs

    # Feasibility: if the cap is too tight to fill the field at all, relax minimally.
    unique_catalog = {tuple(lu) for lu in catalog}
    min_cap_needed = math.ceil(len(entrants) / max(1, len(unique_catalog)))
    if cap_abs < min_cap_needed:
        print(
            f"[WARN] cap_abs={cap_abs} infeasible for catalog_size={len(unique_catalog)} "
            f"and entrants={len(entrants)}; relaxing to {min_cap_needed}."
        )
        cap_abs = min_cap_needed

    # Map each lineup to the indices where it appears in entrants
    counts = Counter(tuple(lu) for lu in entrants)
    idxs_by_lineup = defaultdict(list)
    for i, lu in enumerate(entrants):
        idxs_by_lineup[tuple(lu)].append(i)

    # For sampling, represent catalog as tuples and track availability (< cap)
    cat_tuples = [tuple(lu) for lu in catalog]

    def sample_replacement(deny=None):
        """Sample a catalog lineup that won't exceed cap when added."""
        # Build an availability mask over catalog indices
        avail = np.fromiter((counts[t] < cap_abs and t != deny for t in cat_tuples), dtype=bool)
        if not avail.any():
            return None  # nothing available without violating the cap

        if dup_mode == "multinomial":
            p_arr = np.asarray(p, dtype=float)
            p_arr = np.where(avail, p_arr, 0.0)
            s = p_arr.sum()
            if s <= 0:
                # fallback to uniform over available
                avail_idx = np.nonzero(avail)[0]
                j = int(rng.choice(avail_idx))
            else:
                j = int(rng.choice(len(catalog), p=p_arr / s))
        else:
            avail_idx = np.nonzero(avail)[0]
            j = int(rng.choice(avail_idx))
        return j

    # Trim overfull lineups; never replace protected prefix entries
    for lt in list(counts.keys()):
        while counts[lt] > cap_abs:
            # choose a replaceable index for this lineup that is NOT one of the protected entries
            replaceable = [i for i in idxs_by_lineup[lt] if i >= protected_prefix_n]
            if not replaceable:
                # Can't drop more without removing protected entries; stop trimming this lineup.
                break
            i2 = int(replaceable.pop())  # pop one index to replace
            idxs_by_lineup[lt].remove(i2)
            counts[lt] -= 1  # decrement now to make lt newly eligible if close to cap

            j = sample_replacement(deny=lt)
            if j is None:
                # No legal replacement without violating cap; revert and bail
                counts[lt] += 1
                idxs_by_lineup[lt].append(i2)
                print(
                    "[WARN] No available replacement under cap; leaving residual violation for this lineup."
                )
                break

            new_lu = catalog[j]
            new_lt = cat_tuples[j]
            entrants[i2] = new_lu
            idxs_by_lineup[new_lt].append(i2)
            counts[new_lt] += 1

    return cap_abs


def _features(
    lu: list[tuple[str, str]],
    pool: dict[str, dict],
    chalk_threshold: float,
    ownership_floor: float,
):
    proj = sum(pool[p]["proj"] for _, p in lu)
    salary = sum(pool[p]["salary"] for _, p in lu)

    def logit_pct(pct: float) -> float:
        # clamp ownership to avoid logit explosions when feeds are sparse
        p = max(1e-4, min(0.9999, max(ownership_floor, pct) / 100.0))
        return math.log(p / (1 - p))

    own_logit_sum = sum(logit_pct(pool[p]["own"]) for _, p in lu)
    chalk_cnt = sum(1 for _, p in lu if pool[p]["own"] >= chalk_threshold)
    return proj, own_logit_sum, salary, chalk_cnt


def _popularities(
    catalog: list[list[tuple[str, str]]],
    pool: dict[str, dict],
    w: Weights,
    chalk_threshold: float,
    ownership_floor: float,
) -> list[float]:
    scores = []
    for lu in catalog:
        proj, own_logit, salary, chalk = _features(
            lu, pool, chalk_threshold=chalk_threshold, ownership_floor=ownership_floor
        )
        s = (
            w.bias
            + w.weight_proj * proj
            + w.weight_salary * salary
            + w.weight_own * own_logit
            + w.weight_chalk_cnt * chalk
        )
        scores.append(s)
    scores = np.asarray(scores, dtype=float)
    scores -= scores.max()
    exp_scores = np.exp(scores)
    total = float(exp_scores.sum())
    return (exp_scores / total).tolist()


def _load_bucket_targets(bucket_targets_path: str | None) -> list[BucketTarget]:
    """Load bucket targets from YAML file."""
    if not bucket_targets_path or not os.path.exists(bucket_targets_path):
        return []

    try:
        with open(bucket_targets_path) as f:
            data = yaml.safe_load(f)

        targets = []
        for item in data.get("bucket_targets", []):
            targets.append(
                BucketTarget(
                    run_id=item.get("run_id"),
                    salary_bin=item.get("salary_bin"),
                    ownership_tertile=item.get("ownership_tertile"),
                    target_share=float(item.get("target_share", 0.0)),
                )
            )
        return targets
    except Exception as e:
        print(f"[WARN] Failed to load bucket targets from {bucket_targets_path}: {e}")
        return []


def _categorize_lineup(
    lu: list[tuple[str, str]],
    pool: dict[str, dict],
    own_low: float | None = None,
    own_high: float | None = None,
) -> tuple[str, str]:
    """Categorize a lineup by salary bin and ownership tertile.
    If own_low/high are provided, they are quantile cut points for **sum** ownership; otherwise fallback to fixed thresholds.
    """
    total_salary = sum(pool[p]["salary"] for _, p in lu if p in pool)
    own_sum = sum(pool[p]["own"] for _, p in lu if p in pool)

    # Salary bins tuned to DK duplication clusters
    if total_salary >= 49800:
        salary_bin = "high"
    elif total_salary >= 49500:
        salary_bin = "mid"
    else:
        salary_bin = "low"

    if own_low is not None and own_high is not None:
        if own_sum <= own_low:
            ownership_tertile = "low_own"
        elif own_sum <= own_high:
            ownership_tertile = "mid_own"
        else:
            ownership_tertile = "high_own"
    else:
        # Fallback fixed thresholds on **average** own (legacy behavior)
        avg_own = own_sum / max(1, len(lu))
        if avg_own < 10.0:
            ownership_tertile = "low_own"
        elif avg_own >= 25.0:
            ownership_tertile = "high_own"
        else:
            ownership_tertile = "mid_own"

    return salary_bin, ownership_tertile


def _bucket_sampling_with_targets(
    catalog: list[list[tuple[str, str]]],
    pool: dict[str, dict],
    p: list[float],
    field_size: int,
    bucket_targets: list[BucketTarget],
    rng: np.random.Generator,
) -> tuple[np.ndarray, dict[str, float]]:
    """Apply bucketed sampling to honor target shares within ±2%.
    Buckets are defined over (salary_bin × ownership_tertile). Realized shares are
    computed from the final counts rather than assumed from targets.
    """
    # No targets → classic multinomial
    if not bucket_targets:
        counts = rng.multinomial(field_size, p)
        return counts, {}

    # Data-driven ownership tertiles from catalog **sum** ownership
    own_sums = [sum(pool[pid]["own"] for _, pid in lu if pid in pool) for lu in catalog]
    if len(own_sums) >= 3 and np.any(np.isfinite(own_sums)):
        low_t, high_t = np.quantile(own_sums, [1 / 3, 2 / 3])
    else:
        low_t, high_t = (None, None)

    # Categorize catalog lineups into buckets
    lineup_buckets: dict[int, str] = {}
    bucket_lineups: dict[str, list[int]] = defaultdict(list)
    for i, lu in enumerate(catalog):
        sb, ot = _categorize_lineup(lu, pool, low_t, high_t)
        key = f"{sb}_{ot}"
        lineup_buckets[i] = key
        bucket_lineups[key].append(i)

    # Build integer target counts per bucket
    target_counts: dict[str, int] = {}
    total_target_share = 0.0
    for t in bucket_targets:
        if t.salary_bin and t.ownership_tertile:
            key = f"{t.salary_bin}_{t.ownership_tertile}"
            target_counts[key] = int(field_size * float(t.target_share))
            total_target_share += float(t.target_share)

    # Normalize if targets don't sum to 1.0 (warn on large drift)
    if target_counts:
        total_alloc = sum(target_counts.values())
        if total_alloc != field_size:
            if abs(total_target_share - 1.0) > 0.02:
                print(
                    f"[WARN] bucket target shares sum to {total_target_share:.3f}; normalizing to 1.0"
                )
            scale = field_size / max(1, total_alloc)
            target_counts = {k: int(round(v * scale)) for k, v in target_counts.items()}

    # Sample within each bucket by renormalized p
    counts = np.zeros(len(catalog), dtype=int)
    p_arr = np.asarray(p, dtype=float)
    p_arr /= p_arr.sum()
    allocated = 0
    for key, need in target_counts.items():
        idxs = bucket_lineups.get(key, [])
        if not idxs or need <= 0:
            continue
        sub_p = p_arr[idxs]
        s = sub_p.sum()
        if s > 0:
            sub_p = sub_p / s
            take = rng.multinomial(need, sub_p)
            for off, idx in enumerate(idxs):
                c = int(take[off])
                if c:
                    counts[idx] += c
            allocated += int(need)

    # Backfill any shortfall by global p
    short = field_size - allocated
    if short > 0:
        back = rng.multinomial(short, p_arr)
        counts += back

    # Compute realized shares from final counts
    bucket_totals: dict[str, int] = Counter()
    for idx, c in enumerate(counts):
        if c:
            bucket_totals[lineup_buckets[idx]] += int(c)
    realized = {k: v / float(field_size) for k, v in bucket_totals.items()}
    return counts, realized


# Insert stable lineup signature helper above _compute_gini_coefficient


def _lu_sig(lu: list[tuple[str, str]]) -> str:
    """Stable signature for a lineup: MD5 over DK slot-ordered player IDs."""
    order = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
    row = {s: p for s, p in lu}
    sig = ",".join(row.get(s, "") for s in order)
    return hashlib.md5(sig.encode("utf-8")).hexdigest()[:12]


def _compute_gini_coefficient(dup_counts: Counter) -> float:
    """Compute Gini coefficient for duplicate distribution."""
    if not dup_counts:
        return 0.0

    counts = sorted(dup_counts.values())
    n = len(counts)
    index = np.arange(1, n + 1)
    return (2 * np.sum(index * counts)) / (n * np.sum(counts)) - (n + 1) / n


def _compute_player_exposures(
    entrants: list[list[tuple[str, str]]],
) -> dict[str, float]:
    """Compute player exposure percentages."""
    player_counts = Counter()
    total_lineups = len(entrants)

    for lu in entrants:
        for _, pid in lu:
            player_counts[pid] += 1

    return {pid: (count / total_lineups) * 100.0 for pid, count in player_counts.items()}


def _apply_salary_window(catalog, pool, min_sal: int | None, max_sal: int | None):
    if min_sal is None and max_sal is None:
        return catalog
    out = []
    for lu in catalog:
        # Handle slot-aware lineups: extract player IDs from (slot, player_id) tuples
        sal = sum(pool[p]["salary"] for _, p in lu)
        if (min_sal is None or sal >= min_sal) and (max_sal is None or sal <= max_sal):
            out.append(lu)
    return out


def _cap_counts_pct(counts: np.ndarray, cap_abs: int | None) -> np.ndarray:
    if cap_abs is None:
        return counts
    counts = counts.astype(int).copy()
    total = counts.sum()
    # First clamp
    over_mask = counts > cap_abs
    excess = int(counts[over_mask].sum() - cap_abs * over_mask.sum())
    counts[over_mask] = cap_abs
    # Redistribute excess only into bins strictly below cap_abs
    if excess > 0:
        under_idx = np.where(counts < cap_abs)[0].tolist()
        i = 0
        while excess > 0 and under_idx:
            j = under_idx[i % len(under_idx)]
            counts[j] += 1
            if counts[j] == cap_abs:
                # remove now-capped index
                under_idx.pop(i % len(under_idx))
                i = i % (len(under_idx) if under_idx else 1)
            else:
                i += 1
    # As a final guard, if total changed due to rounding, adjust uniformly
    diff = counts.sum() - total
    if diff != 0:
        sign = -1 if diff > 0 else +1
        adjustable = np.where((counts > 0) if diff > 0 else (counts < cap_abs))[0]
        k = 0
        for _ in range(abs(diff)):
            if not len(adjustable):
                break
            idx = adjustable[k % len(adjustable)]
            counts[idx] += sign
            k += 1
    return counts


def build_field_with_replacement(
    catalog_path: str,
    player_pool_path: str,
    your_entries_path: str | None,
    contest_size: int,
    entrants_path: str,
    live_path: str,
    dup_mode: str = "multinomial",
    weights: Weights | None = None,
    random_seed: int = 23,
    min_salary: int | None = None,
    max_salary: int | None = None,
    sport: str = "NBA_CLASSIC",
    max_dup_cap_pct: float | None = None,
    chalk_threshold: float = 30.0,
    ownership_floor: float = 2.0,
    bucket_targets_path: str | None = None,
    exposures_csv_path: str | None = None,
    report_json_path: str | None = None,
    inject_full_catalog: bool = True,
) -> dict:
    # Ensure weights is initialized
    if weights is None:
        weights = Weights()

    # Validate dup_mode
    if dup_mode not in {"multinomial", "uniform"}:
        raise ValueError(f"dup_mode must be 'multinomial' or 'uniform', got '{dup_mode}'")

    # Resolve directory inputs to actual file paths if needed
    catalog_path = _resolve_catalog_path(catalog_path)
    player_pool_path = _resolve_pool_path(player_pool_path)
    print(
        f"[FIELD] catalog={catalog_path} pool={player_pool_path} yours={your_entries_path or 'NONE'} contest_size={contest_size} seed={random_seed} inject_full_catalog={inject_full_catalog}"
    )
    rng = np.random.default_rng(random_seed)
    pool = _read_pool(player_pool_path)
    catalog = _read_long(catalog_path)  # list[list[(slot, pid)]]
    # PID overlap diagnostics
    cat_pids = {p for lu in catalog for _, p in lu}
    pool_pids = set(pool.keys())
    overlap = len(cat_pids & pool_pids)
    if overlap == 0:
        print(
            f"[WARN] No overlap between catalog PIDs ({len(cat_pids)}) and pool PIDs ({len(pool_pids)}). Check ID columns."
        )
    else:
        missing_set = cat_pids - pool_pids
        missing = list(missing_set)[:5]
        print(
            f"[FIELD] PID overlap: {overlap}/{len(cat_pids)} (pool_unique={len(pool_pids)}); sample missing: {missing}"
        )
        if missing and any(isinstance(x, str) and x.endswith(".0") for x in list(missing_set)[:10]):
            print(
                "[HINT] Some catalog PIDs end with '.0'. Normalizing PIDs; if you still see this, check pool ID column."
            )
        if overlap / max(1, len(cat_pids)) < 0.6:
            print(
                "[WARN] Low catalog↔pool PID overlap (<60%). Ensure both files are from the SAME run and DK ID space."
            )
    # If UI passed the catalog as your_entries, ignore to avoid duplication
    if your_entries_path and os.path.exists(your_entries_path):
        try:
            same = os.path.samefile(your_entries_path, catalog_path)
        except Exception:
            same = os.path.abspath(your_entries_path) == os.path.abspath(catalog_path)
        if same:
            print("[INFO] your_entries path equals catalog; ignoring your_entries.")
            your_entries_path = None
    # Treat missing or non-existent path as NO_ENTRIES mode
    if your_entries_path and os.path.exists(your_entries_path):
        yours = _read_long(your_entries_path)
    else:
        if your_entries_path and not os.path.exists(your_entries_path):
            print(f"[INFO] your_entries not found at {your_entries_path}; running NO_ENTRIES mode.")
        yours = []
    _validate_catalog(catalog, pool, "catalog")
    if yours:
        _validate_catalog(yours, pool, "your_entries")
        _validate_lineup_shape(yours, pool, "your_entries")
        _validate_salary_cap(yours, pool, sport, "your_entries")
        _validate_slot_eligibility(yours, pool, "your_entries")
    _validate_lineup_shape(catalog, pool, "catalog")
    _validate_salary_cap(catalog, pool, sport, "catalog")
    _validate_slot_eligibility(catalog, pool, "catalog")

    # Basic validations
    n_you = len(yours)
    n_catalog = len(catalog)

    # Implement full catalog injection validation
    if inject_full_catalog:
        if contest_size < n_you + n_catalog:
            raise ValueError(
                f"inject_full_catalog=True requires contest_size >= n_you + n_catalog "
                f"({contest_size} < {n_you} + {n_catalog}). Increase contest_size or disable full-catalog injection."
            )

    if not inject_full_catalog and n_you <= 0:
        raise ValueError("your_entries_path is empty or None, and inject_full_catalog=False")

    field_size = contest_size - n_you
    if not inject_full_catalog and field_size <= 0:
        raise ValueError("contest_size must exceed your entries")

    # Apply salary window filter
    catalog = _apply_salary_window(catalog, pool, min_salary, max_salary)

    if not catalog:
        raise ValueError("No eligible catalog lineups after salary filters")

    # Ownership coverage note (model still works via ownership_floor clamp)
    own_vals = [pool[p]["own"] for lu in catalog for _, p in lu if p in pool]
    zero_own_ratio = float(sum(1 for v in own_vals if v <= 0.0)) / max(1, len(own_vals))
    notes: list[str] = []
    if zero_own_ratio >= 0.25:
        notes.append(
            f"Ownership sparse: {zero_own_ratio:.0%} of used player ownerships are ≤ 0.0. "
            f"Using ownership_floor={ownership_floor}% in popularity model."
        )

    # Popularities (slot-aware + tunable knobs)
    p = _popularities(
        catalog=catalog,
        pool=pool,
        w=weights,
        chalk_threshold=chalk_threshold,
        ownership_floor=ownership_floor,
    )
    if dup_mode == "uniform":
        p = [1.0 / len(catalog)] * len(catalog)

    # Load bucket targets
    bucket_targets = _load_bucket_targets(bucket_targets_path)

    # Determine field building strategy and protected prefix size
    if inject_full_catalog:
        # Full catalog injection mode
        # 1) Start entrants with YOUR entries at the front
        entrants = list(yours)

        # 2) Append exactly one copy of every catalog lineup (coverage block)
        entrants.extend(catalog)

        # 3) Fill remaining seats by sampling with replacement using p (or bucketed p)
        covered = len(entrants)
        remaining = contest_size - covered
        protected_prefix_n = n_you + n_catalog

        if remaining > 0:
            # Handle bucketed sampling for remaining seats only
            counts, realized_shares = _bucket_sampling_with_targets(
                catalog, pool, p, remaining, bucket_targets, rng
            )

            # Expand remaining seats based on counts
            for idx, k in enumerate(counts):
                if k:
                    entrants.extend([catalog[idx]] * int(k))
        else:
            # No remaining seats to fill
            counts = np.zeros(n_catalog, dtype=int)
            realized_shares = {}
    else:
        # Original logic: sample replacement field then inject your entries
        counts, realized_shares = _bucket_sampling_with_targets(
            catalog, pool, p, field_size, bucket_targets, rng
        )

        # Cap by % of field (sport default if pct not provided)
        cap_pct = max_dup_cap_pct
        if cap_pct is None:
            cap_pct = SPORT_DEFAULT_CAP.get(sport.upper(), None)
        cap_abs = None
        original_cap_abs = None
        if cap_pct is not None:
            cap_abs = max(1, int(math.floor(contest_size * cap_pct)))  # clamp to at least 1
            original_cap_abs = cap_abs
        counts = _cap_counts_pct(counts, cap_abs)

        # Expand to field
        field: list[list[tuple[str, str]]] = []
        for idx, k in enumerate(counts):
            if k:
                field.extend([catalog[idx]] * int(k))

        # Edge case: ensure field long enough to replace
        if len(field) < n_you:
            additional_needed = n_you - len(field)
            p_arr = np.asarray(p, dtype=float)
            p_arr /= p_arr.sum()
            additional_indices = rng.choice(len(catalog), size=additional_needed, p=p_arr)
            field.extend([catalog[i] for i in additional_indices])

        # Inject your entries by replacement
        if n_you > 0:
            replace_indices = rng.choice(len(field), size=n_you, replace=False)
            for i, lu in enumerate(yours):
                field[int(replace_indices[i])] = lu

            # Build final entrants list: your entries + remaining field
            replace_idx_set = set(int(x) for x in replace_indices)
            remaining_field = [lu for j, lu in enumerate(field) if j not in replace_idx_set]
            entrants = yours + remaining_field
        else:
            entrants = field

        protected_prefix_n = n_you

    # Cap by % of field (sport default if pct not provided) - only for non-full-catalog mode
    cap_pct = max_dup_cap_pct
    if cap_pct is None:
        cap_pct = SPORT_DEFAULT_CAP.get(sport.upper(), None)
    cap_abs = None
    original_cap_abs = None
    if cap_pct is not None and not inject_full_catalog:
        cap_abs = max(1, int(math.floor(contest_size * cap_pct)))  # clamp to at least 1
        original_cap_abs = cap_abs
    elif cap_pct is not None and inject_full_catalog:
        # For full catalog injection, apply cap to duplicate portions only
        cap_abs = max(1, int(math.floor(contest_size * cap_pct)))
        original_cap_abs = cap_abs

    # Ensure exact contest_size
    if len(entrants) != contest_size:
        if len(entrants) < contest_size:
            needed = contest_size - len(entrants)
            p_arr = np.asarray(p, dtype=float)
            p_arr /= p_arr.sum()
            extra_idx = rng.choice(len(catalog), size=needed, p=p_arr)
            entrants.extend([catalog[i] for i in extra_idx])
        else:
            entrants = entrants[:contest_size]

    # Post-inject duplicate cap enforcement (robust, non-violating)
    final_cap_abs = _enforce_dup_cap_inplace(
        entrants, catalog, p, dup_mode, rng, protected_prefix_n, cap_abs
    )

    # Assert length before writes
    assert len(entrants) == contest_size, "Entrants length mismatch"

    # Write outputs (slot-aware long)
    _write_long(entrants, entrants_path)
    _write_long(entrants, live_path)

    # Write UI copy (with header)
    try:
        _write_tournament_wide(entrants, str(paths.TOURNAMENT_LINEUPS))
    except Exception as e:
        print(f"[WARN] Failed to write tournament_lineups.csv (UI): {e}")

    # Write simulator copy (no header)
    sim_tournament_lineups_path = None
    try:
        sim_path = os.path.join(str(paths.DK_DATA), "tournament_lineups.csv")
        _write_simulator_tournament_wide(entrants, sim_path)
        sim_tournament_lineups_path = sim_path
    except Exception as e:
        print(f"[WARN] Failed to write simulator tournament_lineups.csv: {e}")

    # Duplication stats
    dup_counts = Counter(tuple(lu) for lu in entrants)
    hist = Counter(dup_counts.values())

    # Compute expanded telemetry
    gini_coeff = _compute_gini_coefficient(dup_counts)
    player_exposures = _compute_player_exposures(entrants)
    top_dupes = [(_lu_sig(list(lu)), count) for lu, count in dup_counts.most_common(10)]

    # Compute bucket deviation if targets were provided
    bucket_deviation = 0.0
    if bucket_targets and realized_shares:
        target_shares = {
            f"{t.salary_bin}_{t.ownership_tertile}": t.target_share
            for t in bucket_targets
            if t.salary_bin and t.ownership_tertile
        }
        deviations = [
            abs(realized_shares.get(k, 0.0) - target_shares.get(k, 0.0))
            for k in set(target_shares.keys()) | set(realized_shares.keys())
        ]
        bucket_deviation = max(deviations) if deviations else 0.0

    # Quick analytics for UI
    try:
        salaries = [sum(pool[p]["salary"] for _, p in lu) for lu in entrants]
        proj_sum = [sum(pool[p]["proj"] for _, p in lu) for lu in entrants]
        salary_min = min(salaries) if salaries else None
        salary_max = max(salaries) if salaries else None
        salary_mean = float(np.mean(salaries)) if salaries else None
        proj_mean = float(np.mean(proj_sum)) if proj_sum else None
        proj_std = float(np.std(proj_sum)) if proj_sum else None
    except Exception:
        salary_min = salary_max = salary_mean = proj_mean = proj_std = None

    # Write exposures CSV if requested
    if exposures_csv_path and player_exposures:
        try:
            exposures_dir = os.path.dirname(exposures_csv_path) or "."
            os.makedirs(exposures_dir, exist_ok=True)
            with open(exposures_csv_path, "w", newline="") as f:
                w = csv.writer(f)
                w.writerow(["player_id", "exposure_pct"])
                for pid, exposure in sorted(player_exposures.items()):
                    w.writerow([pid, f"{exposure:.2f}"])
        except Exception as e:
            print(f"[WARN] Failed to write player exposures CSV: {e}")

    # Determine telemetry mode
    mode = (
        "FULL_CATALOG_INJECTION"
        if inject_full_catalog
        else ("INJECT_ENTRIES" if n_you > 0 else "NO_ENTRIES")
    )

    # Persist run_meta.json with telemetry data
    meta = {
        "random_seed": random_seed,
        "contest_size": contest_size,
        "n_catalog": len(catalog),
        "n_you": n_you,
        "mode": mode,
        "coverage_block": n_catalog if inject_full_catalog else 0,
        "dup_histogram": dict(sorted(hist.items())),
        "cap_pct": cap_pct,
        "cap_abs": cap_abs,
        "cap_relaxed_to": final_cap_abs if original_cap_abs != final_cap_abs else None,
        "sim_tournament_lineups": sim_tournament_lineups_path,
        "chalk_threshold": chalk_threshold,
        "ownership_floor": ownership_floor,
        "dup_mode": dup_mode,
        "salary_min": salary_min,
        "salary_mean": salary_mean,
        "salary_max": salary_max,
        "proj_mean": proj_mean,
        "proj_std": proj_std,
        "notes": notes,
        # Expanded telemetry (PRP-FS-05)
        "bucket_targets": (
            [
                {
                    "salary_bin": t.salary_bin,
                    "ownership_tertile": t.ownership_tertile,
                    "target_share": t.target_share,
                }
                for t in bucket_targets
            ]
            if bucket_targets
            else []
        ),
        "realized_bucket_shares": realized_shares,
        "bucket_deviation": bucket_deviation,
        "gini_coefficient": gini_coeff,
        "top_dupes": top_dupes,
        "player_exposures_count": len(player_exposures),
    }
    meta_path = os.path.join(os.path.dirname(entrants_path) or ".", "run_meta.json")
    with open(meta_path, "w") as fh:
        json.dump(meta, fh, indent=2)

    # Write separate report JSON if requested
    if report_json_path:
        try:
            report_dir = os.path.dirname(report_json_path) or "."
            os.makedirs(report_dir, exist_ok=True)
            with open(report_json_path, "w") as fh:
                json.dump(meta, fh, indent=2)
        except Exception as e:
            print(f"[WARN] Failed to write report JSON: {e}")

    return {
        "ok": True,
        "contest_size": contest_size,
        "n_catalog": len(catalog),
        "n_you": n_you,
        "mode": mode,
        "coverage_block": n_catalog if inject_full_catalog else 0,
        "unique_in_entrants": sum(1 for k in dup_counts.values() if k == 1),
        "max_dupes": max(dup_counts.values()) if dup_counts else 0,
        "dup_histogram": dict(sorted(hist.items())),
        "out_path": entrants_path,
        "live_path": live_path,
        "cap_pct": cap_pct,
        "cap_abs": cap_abs,
        "cap_relaxed_to": final_cap_abs if original_cap_abs != final_cap_abs else None,
        "sim_tournament_lineups": sim_tournament_lineups_path,
        "chalk_threshold": chalk_threshold,
        "ownership_floor": ownership_floor,
        "dup_mode": dup_mode,
        "salary_min": salary_min,
        "salary_mean": salary_mean,
        "salary_max": salary_max,
        "proj_mean": proj_mean,
        "proj_std": proj_std,
        "notes": notes,
        # Expanded telemetry (PRP-FS-05)
        "bucket_targets": [
            {
                "run_id": t.run_id,
                "salary_bin": t.salary_bin,
                "ownership_tertile": t.ownership_tertile,
                "target_share": t.target_share,
            }
            for t in bucket_targets
        ],
        "realized_bucket_shares": realized_shares,
        "bucket_deviation": bucket_deviation,
        "gini_coefficient": gini_coeff,
        "top_dupes": top_dupes,
        "player_exposures": player_exposures,
    }


# Legacy compatibility function
def build_field(
    catalog_path: str = str(paths.VARIANT_CATALOG),
    player_pool_path: str = str(paths.PLAYER_POOL),
    your_entries_path: str | None = None,
    contest_size: int = 100,
    out_path: str = str(paths.DK_DATA / "entrants.csv"),
    random_seed: int = 13,
):
    """Legacy compatibility wrapper for build_field_with_replacement"""
    live_path = str(paths.LIVE_LINEUPS)
    return build_field_with_replacement(
        catalog_path=catalog_path,
        player_pool_path=player_pool_path,
        your_entries_path=None,
        contest_size=contest_size,
        entrants_path=out_path,
        live_path=live_path,
        random_seed=random_seed,
        inject_full_catalog=True,
    )


# CLI entrypoint
if __name__ == "__main__":
    import argparse

    ap = argparse.ArgumentParser()
    ap.add_argument("--catalog", required=True)
    ap.add_argument("--pool", required=True)
    ap.add_argument("--yours", default=None, help="Path to your entries CSV file (optional)")
    ap.add_argument("--contest_size", type=int, required=True)
    ap.add_argument("--entrants", required=True)
    ap.add_argument("--live", required=True)
    ap.add_argument("--seed", type=int, default=23)
    ap.add_argument("--min_salary", type=int, default=None)
    ap.add_argument("--max_salary", type=int, default=None)
    ap.add_argument("--dup_mode", default="multinomial", choices=["multinomial", "uniform"])
    ap.add_argument("--sport", default="NBA_CLASSIC")
    ap.add_argument("--max_dup_cap_pct", type=float, default=None)
    ap.add_argument("--chalk_threshold", type=float, default=30.0)
    ap.add_argument("--ownership_floor", type=float, default=2.0)
    ap.add_argument("--bucket_targets", default=None, help="Path to bucket targets YAML file")
    ap.add_argument("--exposures_csv", default=None, help="Path to write player exposures CSV")
    ap.add_argument("--report_json", default=None, help="Path to write detailed report JSON")
    ap.add_argument(
        "--inject_full_catalog",
        action="store_true",
        default=True,
        help="Guarantee full catalog injection (each lineup at least once)",
    )
    args = ap.parse_args()
    # Resolve directory or file for catalog/pool
    cat_path = _resolve_catalog_path(args.catalog)
    pool_path = _resolve_pool_path(args.pool)
    # Normalize --yours: treat empty string or missing file as None
    yours_path = args.yours
    if not yours_path or (isinstance(yours_path, str) and not os.path.exists(yours_path)):
        if yours_path:
            print(
                f"[INFO] --yours provided but file not found at {yours_path}; proceeding without your entries."
            )
        yours_path = None
    build_field_with_replacement(
        catalog_path=cat_path,
        player_pool_path=pool_path,
        your_entries_path=yours_path,
        contest_size=args.contest_size,
        entrants_path=args.entrants,
        live_path=args.live,
        random_seed=args.seed,
        min_salary=args.min_salary,
        max_salary=args.max_salary,
        dup_mode=args.dup_mode,
        sport=args.sport,
        max_dup_cap_pct=args.max_dup_cap_pct,
        chalk_threshold=args.chalk_threshold,
        ownership_floor=args.ownership_floor,
        bucket_targets_path=args.bucket_targets,
        exposures_csv_path=args.exposures_csv,
        report_json_path=args.report_json,
        inject_full_catalog=args.inject_full_catalog,
    )
</file>

<file path="processes/field_sampler/__init__.py">
"""Field sampler adapter package.

This module provides a headless adapter and CLI for sampling a contest field
from a variant catalog (and/or base optimizer lineups). See README.md for
usage and contracts.
"""
</file>

<file path="processes/field_sampler/__main__.py">
from __future__ import annotations

from .adapter import main

if __name__ == "__main__":  # pragma: no cover
    raise SystemExit(main())
</file>

<file path="processes/field_sampler/injection_model.py">
from __future__ import annotations

import json
import random
import uuid
from datetime import UTC, datetime
from pathlib import Path
from typing import Any

import pandas as pd

from validators.lineup_rules import DK_SLOTS_ORDER, LineupValidator


def _utc_now() -> str:
    now = datetime.now(UTC)
    return now.strftime("%Y-%m-%dT%H:%M:%SZ")


def _write_jsonl(path: Path, rows: list[dict[str, Any]]) -> None:
    path.parent.mkdir(parents=True, exist_ok=True)
    with path.open("w", encoding="utf-8") as f:
        for row in rows:
            f.write(json.dumps(row) + "\n")


def build_field(
    projections: pd.DataFrame,
    *,
    field_size: int,
    seed: int,
    slate_id: str,
    site: str = "dk",
    salary_cap: int = 50000,
    max_per_team: int = 4,
    ruleset_version: str = "v1",
    variant_catalog: pd.DataFrame | None = None,
) -> dict[str, Any]:
    rng = random.Random(seed)
    validator = LineupValidator(salary_cap=salary_cap, max_per_team=max_per_team)

    pool = projections[["player_id", "team", "salary", "positions"]]
    players = pool.to_dict("records")

    base: list[dict[str, Any]] = []
    attempts = 0
    while len(base) < field_size and attempts < 10000:
        rng.shuffle(players)
        lineup = list(zip(DK_SLOTS_ORDER, [p["player_id"] for p in players[:8]], strict=False))
        if validator.validate(lineup, pool):
            base.append({"players": [pid for _, pid in lineup]})
        else:
            attempts += 1

    run_id = f"fs-{uuid.uuid4().hex[:8]}"
    created_at = _utc_now()

    for row in base:
        row.update(
            {
                "run_id": run_id,
                "created_at": created_at,
                "site": site,
                "slate_id": slate_id,
                "seed": seed,
                "ruleset_version": ruleset_version,
                "source": "public",
                "origin": "field_base",
                "owner": "field",
            }
        )

    artifacts_dir = Path("artifacts")
    _write_jsonl(artifacts_dir / "field_base.jsonl", base)

    merged = list(base)
    injected = 0
    if variant_catalog is not None and len(variant_catalog):
        for _, row in variant_catalog.iterrows():
            lineup = list(zip(DK_SLOTS_ORDER, list(row["players"]), strict=False))
            if validator.validate(lineup, pool):
                entry = {
                    "players": list(row["players"]),
                    "run_id": run_id,
                    "created_at": created_at,
                    "site": site,
                    "slate_id": slate_id,
                    "seed": seed,
                    "ruleset_version": ruleset_version,
                    "source": "injected",
                    "origin": "variant_catalog",
                    "owner": "us",
                }
                merged.append(entry)
                injected += 1
    _write_jsonl(artifacts_dir / "field_merged.jsonl", merged)

    metrics = {
        "run_id": run_id,
        "created_at": created_at,
        "site": site,
        "slate_id": slate_id,
        "seed": seed,
        "ruleset_version": ruleset_version,
        "field_base_count": len(base),
        "injected_count": injected,
        "field_merged_count": len(merged),
        "invalid_attempts": attempts,
    }
    artifacts_dir.mkdir(parents=True, exist_ok=True)
    metrics_path = artifacts_dir / "metrics.json"
    metrics_path.write_text(json.dumps(metrics, indent=2), encoding="utf-8")
    (artifacts_dir / "audit_fs.md").write_text(
        "# Field Sampler Audit\n\n- criticals: 0\n", encoding="utf-8"
    )

    return metrics
</file>

<file path="processes/field_sampler/README.md">
# Field Sampler Adapter

Headless adapter to build a representative contest field from a variant catalog
(and optionally optimizer base lineups). It validates artifacts against the
house schemas and appends to the run registry. No UI; implementation is loaded
dynamically.

Quick start
- Create or point to a `variant_catalog.parquet` for a slate.
- Run the CLI:
  `uv run python -m processes.field_sampler --slate-id 20251101_NBA --config configs/field.yaml --seed 42 --out-root data --input path/to/variant_catalog.parquet`

Discovery (inputs)
- `--input`: explicit `variant_catalog.parquet` path.
- `--from-run <variants_run_id>`: resolves `<out_root>/runs/variants/<run_id>/artifacts/variant_catalog.parquet`.
- Latest `run_type="variants"` for the `slate_id` in registry when neither is provided.
- `--inputs p1 p2 ...`: merge multiple catalogs.

Implementation loader
- Provide `FIELD_SAMPLER_IMPL=module:function` to specify a sampler.
- The adapter calls `fn(catalog_df: pd.DataFrame, knobs: dict, seed: int)` and
  expects either `list[dict]` entrants or `(list[dict], telemetry)`.
  Each entrant must include: `origin` (variant|optimizer|external), `players`
  (8 DK IDs), and `export_csv_row`. Optional: `variant_id`/`lineup_id`, `weight`.

Outputs
- `runs/field/<run_id>/artifacts/field.parquet` — schema `field`.
- `runs/field/<run_id>/artifacts/metrics.parquet` — schema `field_metrics`.
- `runs/field/<run_id>/manifest.json` — run metadata.
- Registry append to `registry/runs.parquet` with `primary_outputs=[field.parquet]`.

Validation & determinism
- Validates every row of `field` and `field_metrics` prior to any writes.
- Deterministic `run_id = YYYYMMDD_HHMMSS_<shorthash>` over input SHA(s) +
  resolved config + seed.

Config → knobs (initial)
- `field_size`, `source_mix`, `sampling_mode`, `ownership_curve`, `diversity`,
  `team_limits`, `de-dup`, `seed`, plus any extras preserved under `extras`.
</file>

<file path="processes/gpp_sim/adapter.py">
from __future__ import annotations

import argparse
import hashlib
import json
import os
import sys
from collections.abc import Callable, Mapping, Sequence
from datetime import UTC, datetime
from pathlib import Path
from typing import Any, cast

import pandas as pd

from pipeline.io.files import ensure_dir, write_parquet
from pipeline.io.validate import load_schema, validate_obj

# Resolve repo root (two levels up from this file) and schemas root
REPO_ROOT = Path(__file__).resolve().parents[2]
SCHEMAS_ROOT = REPO_ROOT / "pipeline" / "schemas"


RunSimFn = Callable[[pd.DataFrame, dict[str, Any], dict[str, Any], int], Any]


DK_SLOTS_ORDER = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]


def _sha256_of_path(path: Path) -> str:
    h = hashlib.sha256()
    with path.open("rb") as f:
        for chunk in iter(lambda: f.read(8192), b""):
            h.update(chunk)
    return h.hexdigest()


def _coerce_scalar(val: str) -> int | float | bool | str:
    lower = val.lower()
    if lower in ("true", "false"):
        return lower == "true"
    try:
        if "." in val:
            return float(val)
        return int(val)
    except ValueError:
        return val


def load_config(config_path: Path | None, inline_kv: Sequence[str] | None = None) -> dict[str, Any]:
    cfg: dict[str, Any] = {}
    if config_path:
        text = config_path.read_text(encoding="utf-8")
        if config_path.suffix.lower() in (".yaml", ".yml"):
            import yaml  # lazy

            try:
                cfg = dict(yaml.safe_load(text) or {})
            except Exception as e:  # pragma: no cover
                msg = f"Failed to parse YAML config {config_path}: {e}"
                raise ValueError(msg) from e
        else:
            cfg = dict(json.loads(text))
    if inline_kv:
        for item in inline_kv:
            if "=" not in item:
                continue
            k, v = item.split("=", 1)
            cfg[k.strip()] = _coerce_scalar(v.strip())
    return cfg


def map_config_to_knobs(config: Mapping[str, Any]) -> dict[str, Any]:
    """Translate user config to simulator knobs and preserve extras.

    Known keys:
    - num_trials, projection_model, boom_bust, dup_penalty, late_swap,
      min_cash_prob, seed
    Unknown keys are preserved under `extras`.
    """
    c: dict[str, Any] = {}
    for key in (
        "num_trials",
        "projection_model",
        "boom_bust",
        "dup_penalty",
        "late_swap",
        "min_cash_prob",
        "seed",
    ):
        if key in config:
            c[key] = config[key]
    # Preserve extras
    for k, v in config.items():
        if k not in c:
            c.setdefault("extras", {})[k] = v
    return c


def export_csv_row_preview(
    players: Sequence[str], dk_positions_filled: Sequence[Mapping[str, Any]]
) -> str:
    """Build DK CSV preview string robustly.

    Uses canonical order PG,SG,SF,PF,C,G,F,UTIL with tokens "<slot> <player_id>".
    Handles mismatched lengths by mapping up to the shorter length.
    """
    slot_to_player: dict[str, str] = {}
    n = min(len(players), len(dk_positions_filled))
    for idx in range(n):
        slot_item = dk_positions_filled[idx]
        getter = getattr(slot_item, "get", None)
        slot_val = getter("slot") if callable(getter) else None
        slot = str(slot_val or "")
        slot_to_player[slot] = str(players[idx])
    cols: list[str] = []
    for slot_label in DK_SLOTS_ORDER:
        pid = slot_to_player.get(slot_label, "")
        cols.append(f"{slot_label} {pid}".strip())
    return ",".join(cols)


def _dk_preview_to_upload_row(preview: str) -> str:
    """Convert preview tokens "PG p1,SG p2,..." to DK upload row "p1,p2,..."."""
    parts = [p.strip() for p in preview.split(",")]
    ids = [p.split(" ", 1)[-1] if " " in p else "" for p in parts]
    return ",".join(ids)


def _schema_version(schemas_root: Path | None, name: str) -> str:
    schema = load_schema((schemas_root or SCHEMAS_ROOT) / f"{name}.schema.yaml")
    return str(schema.get("version", "0.0.0"))


def _load_sim_impl() -> RunSimFn:
    override = os.environ.get("GPP_SIM_IMPL")
    if override:
        mod_name, _, fn_name = override.partition(":")
        mod = __import__(mod_name, fromlist=[fn_name or "run_sim"])
        fn = getattr(mod, fn_name or "run_sim")
        return cast(RunSimFn, fn)
    # No built-in default; tests will monkeypatch this function.
    raise ImportError(
        "No GPP simulator implementation available. Provide GPP_SIM_IMPL or "
        "monkeypatch _load_sim_impl in tests."
    )


def _validate_field_df(df: pd.DataFrame) -> None:
    # Basic guards: 8 players per lineup
    if "players" not in df.columns:
        raise ValueError("Field missing 'players' column")
    for i, players in enumerate(df["players"].tolist()):
        # Accept any non-string sequence-like with len==8
        ok_len = False
        if isinstance(players, list) or isinstance(players, tuple):
            ok_len = len(players) == 8
        else:
            if hasattr(players, "__len__") and not (
                isinstance(players, str) or isinstance(players, bytes)
            ):
                try:
                    ok_len = len(players) == 8
                except Exception:
                    ok_len = False
        if not ok_len:
            raise ValueError(f"Invalid field row {i}: expected 8 players")
    # Optional salary guard if present
    if "total_salary" in df.columns:
        if pd.to_numeric(df["total_salary"], errors="coerce").max() > 50000:
            raise ValueError("Field row exceeds DK salary cap 50000")


def _contest_from_path(path: Path) -> dict[str, Any]:
    """Load contest structure from csv|parquet|json to schema shape.

    CSV expected columns: rank_start, rank_end, prize
    Missing contest metadata is filled with defaults; field_size inferred from
    payout ranges.
    """
    suffix = path.suffix.lower()
    if suffix == ".json":
        return cast(dict[str, Any], json.loads(path.read_text(encoding="utf-8")))
    if suffix == ".parquet":
        pdf = pd.read_parquet(path)
    else:
        # Manual parse for CSV to handle unquoted thousands separators cleanly
        with open(path, encoding="utf-8") as f:
            header = f.readline().strip().split(",")
            rows: list[dict[str, str]] = []
            for line in f:
                line = line.rstrip("\n")
                if not line.strip():
                    continue
                parts = line.split(",", 2)
                if len(parts) < 3:
                    continue
                rows.append(
                    {
                        header[0]: parts[0].strip(),
                        header[1]: parts[1].strip(),
                        "prize": parts[2].strip(),
                    }
                )
        pdf = pd.DataFrame(rows)
    # normalize columns
    cols = {c.lower(): c for c in map(str, pdf.columns)}

    def col(name: str) -> str:
        for k, v in cols.items():
            if k == name.lower():
                return v
        return name

    payout_curve: list[dict[str, Any]] = []
    for _, row in pdf.iterrows():

        def _parse_place(val: str) -> tuple[int, int]:
            s = str(val).strip()
            parts = [p.strip() for p in s.split("-")]
            try:
                a = int(parts[0])
                b = int(parts[-1])
            except Exception:
                a = b = int(parts[0]) if parts and parts[0].isdigit() else 0
            return a, b

        if col("rank_start") in pdf.columns and col("rank_end") in pdf.columns:
            a = int(str(row[col("rank_start")]).strip())
            b = int(str(row[col("rank_end")]).strip())
        else:
            a, b = _parse_place(row[col("place")])

        raw_prize = str(row[col("prize")] if col("prize") in pdf.columns else row[col("payout")])
        prize = float(raw_prize.replace(",", "").replace("$", "").strip())
        payout_curve.append({"rank_start": a, "rank_end": b, "prize": prize})
    # Defaults
    field_size = sum(int(p["rank_end"]) - int(p["rank_start"]) + 1 for p in payout_curve)
    contest = {
        "contest_id": f"TEST_{path.stem}",
        "name": path.stem,
        "field_size": int(field_size),
        "payout_curve": payout_curve,
        "entry_fee": float(20),
        "rake": 0.15,
        "site": "DK",
    }
    return contest


def _validate_contest_structure(c: Mapping[str, Any]) -> None:
    # Contiguous, non-overlapping, exhaustive coverage
    curve = list(c.get("payout_curve") or [])
    field_size = int(c.get("field_size") or 0)
    if field_size <= 0:
        raise ValueError("Contest field_size must be > 0")
    covered: set[int] = set()
    for p in curve:
        a = int(p.get("rank_start", 0))
        b = int(p.get("rank_end", 0))
        if a < 1 or b < a:
            raise ValueError("Invalid payout range")
        for r in range(a, b + 1):
            if r in covered:
                raise ValueError("Overlapping payout ranges")
            covered.add(r)
    if covered != set(range(1, field_size + 1)):
        raise ValueError("Payout ranges must exactly cover 1..field_size")
    rake = float(c.get("rake", 0.0))
    if not (0 <= rake < 1):
        raise ValueError("Contest rake must be in [0,1)")
    if float(c.get("entry_fee", 0.0)) < 0:
        raise ValueError("Contest entry_fee must be >= 0")


def _find_field_input(
    *,
    out_root: Path,
    explicit_field: Path | None = None,
    from_field_run: str | None = None,
    variants_path: Path | None = None,
) -> tuple[Path, str]:
    # Returns (path, role)
    if explicit_field is not None:
        return explicit_field, "field"
    if from_field_run:
        candidate = out_root / "runs" / "field" / from_field_run / "artifacts" / "field.parquet"
        if candidate.exists():
            return candidate, "field"
        raise FileNotFoundError(f"--from-field-run provided but not found: {candidate}")
    if variants_path is not None:
        return variants_path, "variants"
    raise FileNotFoundError(
        "No field input provided. Use --field, --from-field-run, or --variants."
    )


def _find_contest_input(
    *, explicit_contest: Path | None = None, from_contest_dir: Path | None = None
) -> Path:
    if explicit_contest is not None:
        return explicit_contest
    if from_contest_dir is not None:
        names = [
            "contest_structure.csv",
            "contest.csv",
            "contest.json",
            "contest.parquet",
        ]
        for n in names:
            p = from_contest_dir / n
            if p.exists():
                return p
        raise FileNotFoundError(f"No contest file found under {from_contest_dir}")
    raise FileNotFoundError("No contest input provided. Use --contest or --from-contest.")


def _build_sim_results_df(run_id: str, rows: Sequence[Mapping[str, Any]]) -> pd.DataFrame:
    out: list[dict[str, Any]] = []
    for r in rows:
        row = {
            "run_id": run_id,
            "world_id": int(r.get("world_id", 0)),
            "entrant_id": r.get("entrant_id"),
            "score": float(r.get("score", 0.0)),
            "rank": int(r.get("rank", 1)),
            "prize": float(r.get("prize", 0.0)),
        }
        if "components" in r:
            row["components"] = r["components"]
        if "seed" in r:
            row["seed"] = int(r["seed"])  # optional
        out.append(row)
    return pd.DataFrame(out)


def _build_sim_metrics_df(run_id: str, aggregates: Mapping[str, Any]) -> pd.DataFrame:
    ag = {
        "ev_mean": float(aggregates.get("ev_mean", 0.0)),
        "roi_mean": float(aggregates.get("roi_mean", 0.0)),
    }
    # Optional extras
    for opt in ("sharpe", "sortino"):
        if opt in aggregates:
            ag[opt] = float(aggregates[opt])
    return pd.DataFrame([{"run_id": run_id, "aggregates": ag}])


def _execute_sim(
    field_df: pd.DataFrame, contest: dict[str, Any], knobs: dict[str, Any], seed: int
) -> tuple[pd.DataFrame, pd.DataFrame, dict[str, Any]]:
    run_sim = _load_sim_impl()
    res = run_sim(field_df, contest, knobs, seed)
    telemetry: dict[str, Any] = {}
    if isinstance(res, tuple) and len(res) >= 2:
        rows_raw = res[0]
        aggs = res[1]
        if len(res) > 2 and isinstance(res[2], Mapping):
            telemetry = dict(res[2])
    else:
        rows_raw = cast(Sequence[Mapping[str, Any]], res)
        aggs = {"ev_mean": 0.0, "roi_mean": 0.0}
    results_df = (
        rows_raw
        if isinstance(rows_raw, pd.DataFrame)
        else _build_sim_results_df("RID_PLACEHOLDER", rows_raw)
    )
    # We temporarily build with placeholder run_id; caller will set actual run_id below.
    metrics_df = (
        aggs
        if isinstance(aggs, pd.DataFrame)
        else _build_sim_metrics_df("RID_PLACEHOLDER", cast(Mapping[str, Any], aggs))
    )
    return results_df, metrics_df, telemetry


def run_adapter(
    *,
    slate_id: str,
    config_path: Path | None,
    config_kv: Sequence[str] | None,
    seed: int,
    out_root: Path,
    tag: str | None,
    field_path: Path | None,
    from_field_run: str | None,
    variants_path: Path | None,
    contest_path: Path | None,
    from_contest_dir: Path | None,
    schemas_root: Path | None = None,
    validate: bool = True,
    verbose: bool = False,
    export_dk_csv: Path | None = None,
) -> dict[str, Any]:
    schemas_root = schemas_root or SCHEMAS_ROOT
    # Mint timestamp once and reuse for created_ts and run_id core
    now = datetime.now(UTC)
    ms = int(now.microsecond / 1000)
    created_ts = f"{now.strftime('%Y-%m-%dT%H:%M:%S')}.{ms:03d}Z"

    # Resolve inputs
    field_input, field_role = _find_field_input(
        out_root=out_root,
        explicit_field=field_path,
        from_field_run=from_field_run,
        variants_path=variants_path,
    )
    contest_input = _find_contest_input(
        explicit_contest=contest_path, from_contest_dir=from_contest_dir
    )
    if verbose:
        print(f"[sim] field: {field_input} (role={field_role})", file=sys.stderr)
        print(f"[sim] contest: {contest_input}", file=sys.stderr)
        print(f"[sim] schemas_root: {schemas_root}", file=sys.stderr)

    # Load/validate inputs
    if field_role == "field":
        field_df = pd.read_parquet(field_input)
        _validate_field_df(field_df)
    else:  # variants → field
        catalog = pd.read_parquet(field_input)
        rows: list[dict[str, Any]] = []
        for i, v in enumerate(catalog.to_dict(orient="records"), start=1):
            _players_val = v.get("players")
            players = list(_players_val) if _players_val is not None else []
            row = {
                "run_id": str(v.get("run_id", "")),
                "entrant_id": i,
                "origin": "variant",
                "variant_id": str(v.get("variant_id", f"V{i}")),
                "players": players,
                "export_csv_row": export_csv_row_preview(
                    players, list(v.get("dk_positions_filled") or [])
                ),
                "weight": 1.0,
            }
            if verbose and not v.get("dk_positions_filled"):
                print(
                    "[sim] variants row missing dk_positions_filled; "
                    "export preview will have blanks",
                    file=sys.stderr,
                )
            rows.append(row)
        field_df = pd.DataFrame(rows)
        _validate_field_df(field_df)

    contest = _contest_from_path(contest_input)

    # Map config → knobs
    cfg = load_config(config_path, config_kv)
    knobs = map_config_to_knobs(cfg)
    knobs["seed"] = int(seed)
    if verbose:
        known = {
            "num_trials",
            "projection_model",
            "boom_bust",
            "dup_penalty",
            "late_swap",
            "min_cash_prob",
            "seed",
        }
        unknown = [k for k in cfg.keys() if k not in known]
        if unknown:
            print(
                f"[sim] unknown config keys preserved: {sorted(unknown)}",
                file=sys.stderr,
            )

    # Compute input SHAs for determinism and manifest
    inputs_list: list[dict[str, Any]] = []
    field_sha = _sha256_of_path(field_input)
    inputs_list.append({"path": str(field_input), "content_sha256": field_sha, "role": field_role})
    contest_sha = _sha256_of_path(contest_input)
    inputs_list.append(
        {
            "path": str(contest_input),
            "content_sha256": contest_sha,
            "role": "contest_structure",
        }
    )
    cfg_blob = json.dumps(cfg, sort_keys=True, separators=(",", ":")).encode("utf-8")
    cfg_sha = hashlib.sha256(cfg_blob).hexdigest()
    if config_path:
        inputs_list.append({"path": str(config_path), "content_sha256": cfg_sha, "role": "config"})
    if config_kv:
        kv_parsed: dict[str, Any] = {}
        for item in config_kv:
            if "=" not in item:
                continue
            k, v = item.split("=", 1)
            kv_parsed[k.strip()] = _coerce_scalar(v.strip())
        inputs_list.append(
            {
                "path": "inline:config_kv",
                "content_sha256": hashlib.sha256(
                    json.dumps(kv_parsed, sort_keys=True, separators=(",", ":")).encode("utf-8")
                ).hexdigest(),
                "role": "config",
            }
        )

    # Deterministic run_id
    run_id_core = now.strftime("%Y%m%d_%H%M%S")
    short_hash = hashlib.sha256(f"{field_sha}|{contest_sha}|{cfg_sha}|{seed}".encode()).hexdigest()[
        :8
    ]
    run_id = f"{run_id_core}_{short_hash}"

    # Execute simulation
    results_df, metrics_df, telemetry = _execute_sim(field_df, contest, knobs, seed)
    # Ensure run_id column exists for all rows
    results_df = results_df.copy()
    results_df["run_id"] = run_id
    metrics_df = metrics_df.copy()
    metrics_df["run_id"] = run_id

    if verbose:
        print(f"[sim] run_id={run_id}", file=sys.stderr)

    # Validate rows before any writes
    if validate:
        sim_results_schema = load_schema(schemas_root / "sim_results.schema.yaml")
        sim_metrics_schema = load_schema(schemas_root / "sim_metrics.schema.yaml")
        for row in results_df.to_dict(orient="records"):
            validate_obj(sim_results_schema, row, schemas_root=schemas_root)
        for row in metrics_df.to_dict(orient="records"):
            validate_obj(sim_metrics_schema, row, schemas_root=schemas_root)
        # Contest structure + manifest validation
        contest_schema = load_schema(schemas_root / "contest_structure.schema.yaml")
        validate_obj(contest_schema, contest, schemas_root=schemas_root)
        _validate_contest_structure(contest)

    # Write artifacts
    run_dir = out_root / "runs" / "sim" / run_id
    artifacts_dir = run_dir / "artifacts"
    ensure_dir(artifacts_dir)
    results_path = artifacts_dir / "sim_results.parquet"
    metrics_path = artifacts_dir / "metrics.parquet"
    write_parquet(results_df, results_path)
    write_parquet(metrics_df, metrics_path)

    # Optional DK CSV export from field preview
    if export_dk_csv is not None:
        ensure_dir(Path(export_dk_csv).parent)
        with open(export_dk_csv, "w", encoding="utf-8") as f:
            f.write(",".join(DK_SLOTS_ORDER) + "\n")
            for _, row in field_df.head(50).iterrows():
                preview = str(row.get("export_csv_row", ""))
                if preview:
                    f.write(_dk_preview_to_upload_row(preview) + "\n")

    # Manifest
    manifest_schema = load_schema(schemas_root / "manifest.schema.yaml")
    manifest = {
        "schema_version": _schema_version(schemas_root, "manifest"),
        "run_id": run_id,
        "run_type": "sim",
        "slate_id": slate_id,
        "created_ts": created_ts,
        "inputs": inputs_list,
        "config": cfg,
        "outputs": [
            {"path": str(results_path), "kind": "sim_results"},
            {"path": str(metrics_path), "kind": "sim_metrics"},
        ],
        "tags": [tag] if tag else [],
    }
    if validate:
        validate_obj(manifest_schema, manifest, schemas_root=schemas_root)
    (run_dir / "manifest.json").write_text(json.dumps(manifest, indent=2), encoding="utf-8")

    # Registry append
    registry_path = out_root / "registry" / "runs.parquet"
    ensure_dir(registry_path.parent)
    reg_row = {
        "run_id": run_id,
        "run_type": "sim",
        "slate_id": slate_id,
        "status": "success",
        "primary_outputs": [str(results_path)],
        "metrics_path": str(metrics_path),
        "created_ts": created_ts,
        "tags": [tag] if tag else [],
    }
    if validate:
        runs_registry_schema = load_schema(schemas_root / "runs_registry.schema.yaml")
        validate_obj(runs_registry_schema, reg_row, schemas_root=schemas_root)
    if registry_path.exists():
        existing = pd.read_parquet(registry_path)
        df = pd.concat([existing, pd.DataFrame([reg_row])], ignore_index=True)
    else:
        df = pd.DataFrame([reg_row])
    write_parquet(df, registry_path)

    return {
        "run_id": run_id,
        "sim_results_path": str(results_path),
        "metrics_path": str(metrics_path),
        "manifest_path": str(run_dir / "manifest.json"),
        "registry_path": str(registry_path),
        "telemetry": telemetry,
    }


def _build_parser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser(prog="python -m processes.gpp_sim")
    p.add_argument("--slate-id", required=True)
    p.add_argument("--config", type=Path)
    p.add_argument("--config-kv", nargs="*", help="Inline overrides key=value")
    p.add_argument("--seed", type=int, default=42)
    p.add_argument("--out-root", type=Path, default=Path("data"))
    p.add_argument("--tag", type=str)
    # Discovery: field
    p.add_argument("--field", type=Path, help="Explicit field parquet path")
    p.add_argument("--from-field-run", type=str, help="Field run_id under runs/field/")
    p.add_argument("--variants", type=Path, help="Variant catalog parquet (fallback)")
    # Discovery: contest
    p.add_argument("--contest", type=Path, help="Contest structure file (csv|parquet|json)")
    p.add_argument("--from-contest", type=Path, help="Directory to search for contest file")
    # Infra
    p.add_argument("--schemas-root", type=Path)
    p.add_argument(
        "--validate",
        dest="validate",
        action=argparse.BooleanOptionalAction,
        default=True,
    )
    p.add_argument("--verbose", action="store_true")
    p.add_argument("--export-dk-csv", type=Path)
    return p


def main(argv: Sequence[str] | None = None) -> int:
    p = _build_parser()
    ns = p.parse_args(argv)
    try:
        run_adapter(
            slate_id=str(ns.slate_id),
            config_path=ns.config,
            config_kv=ns.config_kv,
            seed=int(ns.seed),
            out_root=ns.out_root,
            tag=ns.tag,
            field_path=ns.field,
            from_field_run=ns.from_field_run,
            variants_path=ns.variants,
            contest_path=ns.contest,
            from_contest_dir=ns.from_contest,
            schemas_root=ns.schemas_root,
            validate=bool(ns.validate),
            verbose=bool(ns.verbose),
            export_dk_csv=ns.export_dk_csv,
        )
    except Exception as e:  # pragma: no cover - error path
        print(f"[sim] error: {e}", file=sys.stderr)
        return 1
    return 0
</file>

<file path="processes/gpp_sim/engine.py">
from __future__ import annotations

from typing import Any

import pandas as pd


def _normalize_players(player_ids: str) -> str:
    players = [p.strip() for p in player_ids.split("|") if p.strip()]
    return "|".join(sorted(players))


def run_sim(lineups: pd.DataFrame, contest: pd.DataFrame) -> tuple[pd.DataFrame, dict[str, Any]]:
    """Run a minimal deterministic contest simulation.

    Parameters
    ----------
    lineups: DataFrame
        Columns: lineup_id, player_ids, entry_count, proj_points.
    contest: DataFrame
        Columns: place, payout with optional buy_in and rake (taken from first row).
    """
    df = lineups.copy()
    if "entry_count" not in df.columns:
        df["entry_count"] = 1
    df["player_set"] = df["player_ids"].map(_normalize_players)
    grouped = (
        df.groupby("player_set")
        .agg({"lineup_id": "first", "proj_points": "first", "entry_count": "sum"})
        .rename(columns={"proj_points": "score", "entry_count": "dup_count"})
        .reset_index()
    )

    # Expand for ranking
    expanded_rows: list[dict[str, Any]] = []
    for _, row in grouped.iterrows():
        for _ in range(int(row["dup_count"])):
            expanded_rows.append(
                {
                    "player_set": row["player_set"],
                    "lineup_id": row["lineup_id"],
                    "score": float(row["score"]),
                }
            )
    entries_df = pd.DataFrame(expanded_rows)
    entries_df.sort_values("score", ascending=False, inplace=True, kind="mergesort")
    entries_df["finish"] = range(1, len(entries_df) + 1)

    # Payouts
    contest_sorted = contest.sort_values("place")
    payouts = contest_sorted["payout"].tolist()
    payouts.extend([0.0] * max(0, len(entries_df) - len(payouts)))

    entries_df["prize"] = 0.0
    for _score, group in entries_df.groupby("score", sort=False):
        idxs = group.index
        places = entries_df.loc[idxs, "finish"].astype(int).tolist()
        pay = [payouts[i - 1] for i in places]
        avg = sum(pay) / len(pay)
        entries_df.loc[idxs, "prize"] = avg

    agg = (
        entries_df.groupby("player_set")
        .agg(
            lineup_id=("lineup_id", "first"),
            score=("score", "first"),
            prize=("prize", "sum"),
            finish=("finish", "min"),
            dup_count=("lineup_id", "count"),
        )
        .reset_index(drop=True)
    )

    entries = int(entries_df.shape[0])
    buy_in = float(contest_sorted.get("buy_in", pd.Series([0.0])).iloc[0])
    total_prizes = float(agg["prize"].sum())
    total_fees = entries * buy_in
    net = total_prizes - total_fees
    roi = net / total_fees if total_fees else 0.0
    itm_entries = int((entries_df["prize"] > 0).sum())
    dup_counts = agg["dup_count"]
    summary: dict[str, Any] = {
        "entries": entries,
        "unique_lineups": int(agg.shape[0]),
        "total_prizes": round(total_prizes, 2),
        "total_fees": round(total_fees, 2),
        "net": round(net, 2),
        "roi": roi,
        "itm_pct": itm_entries / entries if entries else 0.0,
        "dup": {
            "mean": float(dup_counts.mean()) if not dup_counts.empty else 0.0,
            "p95": float(dup_counts.quantile(0.95)) if not dup_counts.empty else 0.0,
            "max": int(dup_counts.max()) if not dup_counts.empty else 0,
        },
    }

    return agg, summary
</file>

<file path="processes/optimizer/_legacy/cpsat_solver.py">
import math
from dataclasses import dataclass
from typing import Dict, Tuple, List, Any, Optional


# ============================================================================
# PRP-16: Ownership Penalty Helper Functions for CP-SAT
# ============================================================================


def _clamp(v: float, lo: float, hi: float) -> float:
    """Clamp value to range [lo, hi]"""
    return max(lo, min(hi, v))


def _effective_p(p: float, p0: float, gamma: float, lo: float, hi: float) -> float:
    """Calculate effective ownership percentage with shrinkage and clamping"""
    return _clamp(gamma * p + (1.0 - gamma) * p0, lo, hi)


def _g_curve(p_eff: float, settings: Dict) -> float:
    """Calculate penalty curve value for effective ownership percentage"""
    curve_type = settings.get("curve_type", "sigmoid")

    if curve_type == "linear":
        return p_eff
    elif curve_type == "power":
        power_k = settings.get("power_k", 1.5)
        return p_eff**power_k
    elif curve_type == "neglog":
        return -math.log(max(1e-9, 1.0 - p_eff))
    else:  # Default: sigmoid
        eps = 1e-9
        pivot_p0 = settings.get("pivot_p0", 0.20)
        curve_alpha = settings.get("curve_alpha", 2.0)
        ratio = pivot_p0 / max(eps, p_eff)
        return 1.0 / (1.0 + (ratio**curve_alpha))


def _effective_lambda(
    lambda_ui: float, mode: str, df, normalization_diag: Optional[Dict] = None
) -> Tuple[float, float]:
    """
    Compute effective lambda to use against normalized ownership [0,1].
    - If data appear normalized (own_max <= 1) OR normalization_diag indicates scaled_by=100, use UI value as-is.
    - Defensive fallback: if ownership appears in percent scale (>1), adapt ui by *0.01.
    Returns (lambda_eff, scale_used).
    """
    try:
        own_max = (
            float(df["own_proj"].max())
            if hasattr(df, "__getitem__") and "own_proj" in df.columns
            else None
        )
    except Exception:
        own_max = None

    scaled_by = None
    try:
        if normalization_diag and "ownership" in normalization_diag:
            scaled_by = normalization_diag["ownership"].get("scaled_by")
    except Exception:
        scaled_by = None

    # Prefer data signal; normalization path ensures df.own_proj in [0,1]
    own_is_normalized = (own_max is None) or (own_max <= 1.0 + 1e-9)
    if own_is_normalized or scaled_by in (100.0, 100):
        return float(lambda_ui), 1.0
    else:
        return float(lambda_ui) * 0.01, 0.01


def _calculate_ownership_penalty_term(own_pct: float, settings: Dict) -> float:
    """Calculate ownership penalty term for a single player"""
    p_eff = _effective_p(
        own_pct,
        settings.get("pivot_p0", 0.20),
        settings.get("shrink_gamma", 1.0),
        settings.get("clamp_min", 0.01),
        settings.get("clamp_max", 0.80),
    )
    return _g_curve(p_eff, settings)


# ============================================================================
# PRP-OWN-19/22: Input Contract + Objective Telemetry (Wiring Check)
# ============================================================================
def _run_input_contract_and_objective_telemetry(
    spec: Any, ownership_penalty: Optional[Dict]
) -> Dict[str, Any]:
    """Validate the exact inputs used by CP-SAT and print objective scaling telemetry.

    Returns a small diagnostics dict that can be attached to solver diagnostics.
    """
    import pandas as _pd
    import hashlib as _hashlib
    import time as _time
    import os as _os

    RUN_ID = str(int(_time.time()))

    # Build a DataFrame from spec.players (this is the exact candidate set)
    rows = []
    for p in spec.players:
        rows.append(
            {
                "player_id": p.player_id,
                "name": p.name,
                "team": p.team,
                "position": (
                    "/".join(p.positions)
                    if isinstance(p.positions, (list, tuple))
                    else str(p.positions)
                ),
                "salary": p.salary,
                "FPts": float(p.proj),
                "own_proj": (
                    None if getattr(p, "own_proj", None) is None else float(p.own_proj)
                ),
            }
        )
    df = _pd.DataFrame(rows)
    # Ensure numeric ownership column for normalization logic
    try:
        df["own_proj"] = _pd.to_numeric(df["own_proj"], errors="coerce")
    except Exception:
        pass

    # Canonical required columns
    required = {"player_id", "name", "team", "position", "salary", "FPts", "own_proj"}
    missing = required - set(df.columns)
    if missing:
        raise AssertionError(f"[INPUT CONTRACT] Missing columns: {missing}")

    # Ownership normalization: normalize in-place on the exact inputs to CP-SAT
    own_max_before = (
        float(df["own_proj"].max()) if df["own_proj"].notna().any() else 0.0
    )
    scaled_by = 1.0
    if own_max_before > 1.5:
        # Percent scale detected → convert to [0,1]
        df["own_proj"] = (df["own_proj"] / 100.0).clip(0.0, 1.0)
        scaled_by = 100.0
    else:
        # Ensure values are clipped to [0,1]
        df["own_proj"] = df["own_proj"].clip(0.0, 1.0)
    # Strict: must be normalized
    if float(df["own_proj"].max()) > 1.000001:
        raise AssertionError("[INPUT CONTRACT] own_proj not normalized")
    # Stats after normalization (for logging)
    own_min = float(df["own_proj"].min()) if df["own_proj"].notna().any() else 0.0
    own_max = float(df["own_proj"].max()) if df["own_proj"].notna().any() else 0.0
    pct_over1 = float((df["own_proj"] > 1.0).mean()) * 100.0 if len(df) else 0.0

    # Propagate normalized ownership back into spec.players so the objective uses it
    try:
        own_map = {
            r["player_id"]: (None if _pd.isna(r["own_proj"]) else float(r["own_proj"]))
            for _, r in df.iterrows()
        }
        for p in spec.players:
            if p.player_id in own_map:
                p.own_proj = own_map[p.player_id]
    except Exception:
        pass

    # FPts sanity: numeric and non-constant
    if not _pd.api.types.is_numeric_dtype(df["FPts"]):
        raise AssertionError("[INPUT CONTRACT] FPts not numeric")
    if float(df["FPts"].std()) <= 0.0:
        raise AssertionError("[INPUT CONTRACT] FPts look constant/zero")

    # Contract hash of fields that impact solve
    key_cols = ["player_id", "FPts", "own_proj", "salary", "team", "position"]
    contract_key = df[key_cols].sort_values("player_id").to_csv(index=False)
    contract_hash = _hashlib.sha256(contract_key.encode()).hexdigest()[:12]

    print(
        f"[INPUT CONTRACT] run={RUN_ID} rows={df.shape[0]} "
        f"own_min={own_min:.3f} own_max={own_max:.3f} over1%={pct_over1:.2f}% "
        f"contract={contract_hash}"
    )

    # Objective telemetry (points vs lambda*penalty on same SCALE)
    SCALE = 1000

    points_scaled_total = int(df["FPts"].round(9).mul(SCALE).round().sum())
    lambda_penalty_scaled_total = 0
    lambda_ui = 0.0
    lambda_eff = 0.0
    lambda_scale_used = 1.0

    if ownership_penalty and ownership_penalty.get("enabled", False):
        lambda_ui = float(ownership_penalty.get("weight_lambda", 0.0) or 0.0)
        # Use effective lambda without mutating input dict
        lambda_eff, lambda_scale_used = _effective_lambda(
            lambda_ui,
            ownership_penalty.get("mode", "by_points"),
            df,
            {"ownership": {"scaled_by": scaled_by}},
        )
        if lambda_eff > 0 and df["own_proj"].notna().any():
            settings = ownership_penalty
            pen_sum = 0.0
            for _, row in df.iterrows():
                op = row["own_proj"]
                if _pd.isna(op):
                    continue
                own_pct = float(op)
                pen_sum += _calculate_ownership_penalty_term(own_pct, settings)
            lambda_penalty_scaled_total = int(round(SCALE * lambda_eff * pen_sum))

    ratio = (
        (lambda_penalty_scaled_total / (points_scaled_total + 1e-9))
        if points_scaled_total
        else 0.0
    )
    print(
        f"[OBJ] SCALE={SCALE} lambda_ui={lambda_ui:.3f} lambda_eff={lambda_eff:.3f} "
        f"points_scaled_total={points_scaled_total} "
        f"lambda_penalty_scaled_total={lambda_penalty_scaled_total} "
        f"ratio={ratio:.4%}"
    )

    payload = {
        "run_id": RUN_ID,
        "contract": {
            "hash": contract_hash,
            "rows": int(df.shape[0]),
            "own_min": own_min,
            "own_max": own_max,
            "pct_over_1": pct_over1,
            "own_max_before": own_max_before,
            "scaled_by": scaled_by,
        },
        "objective": {
            "scale": SCALE,
            "lambda_ui": lambda_ui,
            "lambda_eff": lambda_eff,
            "lambda_scale_used": lambda_scale_used,
            "points_scaled_total": points_scaled_total,
            "lambda_penalty_scaled_total": lambda_penalty_scaled_total,
            "ratio": ratio,
        },
    }
    # Optional artifact export (env-gated)
    try:
        if str(_os.environ.get("DFS_WRITE_CONTRACT_ARTIFACTS", "0")).lower() in (
            "1",
            "true",
            "yes",
        ):
            out_dir = _os.path.join(
                "src", "exports", f"run_{_time.strftime('%Y%m%d_%H%M%S')}"
            )
            _os.makedirs(out_dir, exist_ok=True)
            df.to_csv(_os.path.join(out_dir, "projections_used.csv"), index=False)
            with open(_os.path.join(out_dir, "contract.txt"), "w") as f:
                f.write(
                    f"""run={RUN_ID}
contract={contract_hash}
own_min={own_min}
own_max={own_max}
over1%={pct_over1}
SCALE={SCALE}
lambda_ui={lambda_ui}
lambda_eff={lambda_eff}
points_scaled_total={points_scaled_total}
lambda_penalty_scaled_total={lambda_penalty_scaled_total}
ratio={ratio}
"""
                )
            try:
                import json as _json

                with open(_os.path.join(out_dir, "telemetry.json"), "w") as jf:
                    _json.dump(payload, jf, indent=2)
            except Exception:
                pass
    except Exception:
        pass

    return payload


def build_cpsat(spec: Any):
    """
    Build a CP-SAT model mirroring the CBC model.
    Variables: x[(player_id, pos)] ∈ {0,1}
    Constraints:
      - DK: exactly 1 per slot in [PG,SG,SF,PF,C,G,F,UTIL]
      - FD: PG/SG/SF/PF exactly 2 each, C exactly 1
      - Each player at most once
      - Salary cap (and optional min salary)
      - Team limits (global + specific)
      - Locks/Bans
    Objective: maximize projected points (scaled integers)
    """
    # Import orthogonally inside function to avoid hard dependency at import time
    from ortools.sat.python import cp_model

    m = cp_model.CpModel()

    # Index players by id for quick lookup
    pid_to_player: Dict[str, Any] = {p.player_id: p for p in spec.players}

    # Decision variables for eligible positions
    x: Dict[Tuple[str, str], Any] = {}

    # Slot list constant bound to spec (avoid hard-coding)
    DK_SLOTS = spec.roster_slots if spec.site == "dk" else ["PG", "SG", "SF", "PF", "C"]

    # Helper to build DK flex eligibility
    def eligible_positions(positions: List[str]) -> List[str]:
        base = [pos for pos in ["PG", "SG", "SF", "PF", "C"] if pos in positions]
        if spec.site == "dk":
            if any(p in ("PG", "SG") for p in base):
                base.append("G")
            if any(p in ("SF", "PF") for p in base):
                base.append("F")
            base.append("UTIL")
        return base

    # Create variables
    for p in spec.players:
        for pos in eligible_positions(p.positions):
            x[(p.player_id, pos)] = m.NewBoolVar(f"x_{p.player_id}_{pos}")

    # Pre-bucket once for speed & clarity
    slot_vars: Dict[str, List[Any]] = {pos: [] for pos in DK_SLOTS}
    from collections import defaultdict as _dd

    team_vars: Dict[str, List[Any]] = _dd(list)
    for (pid, pos), var in x.items():
        if pos in slot_vars:
            slot_vars[pos].append(var)
        team_vars[pid_to_player[pid].team].append(var)

    # Preflight infeasibility checks (fast fail before adding constraints)
    # 1) Ensure each roster slot has at least one eligible candidate
    slot_candidates = {
        pos: [pid for (pid, p) in x.keys() if p == pos] for pos in spec.roster_slots
    }
    for pos, cands in slot_candidates.items():
        if not cands:
            raise RuntimeError(
                f"No eligible players for slot {pos}. Check locks/bans/positions."
            )

    # 2) Cheap salary screen (not exact but fast):
    #    Sum of per-slot mins must not exceed cap; sum of per-slot maxes must meet min_salary (if set)
    min_sum = 0
    max_sum = 0
    for cands in slot_candidates.values():
        # candidates are pids eligible for the slot
        salaries = [pid_to_player[pid].salary for pid in cands]
        if not salaries:
            continue
        min_sum += min(salaries)
        max_sum += max(salaries)
    if min_sum > spec.salary_cap:
        raise RuntimeError(
            f"Infeasible: minimum possible salary {min_sum} exceeds cap {spec.salary_cap}."
        )
    if spec.min_salary is not None and max_sum < spec.min_salary:
        raise RuntimeError(
            f"Infeasible: even max possible salary {max_sum} < min_salary {spec.min_salary}."
        )

    # Position fill constraints (use pre-buckets)
    if spec.site == "dk":
        # Exactly one per DK slot
        for pos in DK_SLOTS:
            m.AddExactlyOne(slot_vars[pos])
    else:  # FanDuel counts
        for pos in ["PG", "SG", "SF", "PF"]:
            m.Add(sum(slot_vars.get(pos, [])) == 2)
        m.Add(sum(slot_vars.get("C", [])) == 1)

    # Each player at most once
    from collections import defaultdict

    per_player = defaultdict(list)
    for (pid, pos), var in x.items():
        per_player[pid].append(var)
    for pid, vars_ in per_player.items():
        m.AddAtMostOne(vars_)

    # Salary constraints
    salary_terms = []
    for (pid, pos), var in x.items():
        salary_terms.append(pid_to_player[pid].salary * var)
    m.Add(sum(salary_terms) <= spec.salary_cap)
    if spec.min_salary is not None:
        m.Add(sum(salary_terms) >= spec.min_salary)

    # Team limits (use pre-bucketed vars)
    if spec.team_max is not None:
        for t, vars_ in team_vars.items():
            m.Add(sum(vars_) <= spec.team_max)
    for t, cap in (spec.team_limits or {}).items():
        if t in team_vars:
            m.Add(sum(team_vars[t]) <= cap)

    # Locks / bans (use site-driven slot list)
    for pid in spec.lock_ids:
        vars_ = [x[(pid, pos)] for pos in DK_SLOTS if (pid, pos) in x]
        if not vars_:
            raise ValueError(
                f"Locked player {pid} has no eligible positions for site {spec.site}."
            )
        m.AddExactlyOne(vars_)
    for pid in spec.ban_ids:
        vars_ = [x[(pid, pos)] for pos in DK_SLOTS if (pid, pos) in x]
        if vars_:
            m.Add(sum(vars_) == 0)

    # Objective (PRP-16): projected points with optional ownership penalty
    SCALE = 1000
    obj_terms = []
    use_penalty = bool(
        spec.ownership_penalty and spec.ownership_penalty.get("enabled", False)
    )
    lam = 0.0
    settings = None
    if use_penalty:
        settings = spec.ownership_penalty
        try:
            lam = float(settings.get("weight_lambda", 0.0) or 0.0)
        except Exception:
            lam = 0.0

    for (pid, pos), var in x.items():
        base_proj = float(pid_to_player[pid].proj)
        eff_proj = base_proj
        if use_penalty and lam > 0:
            own_val = getattr(pid_to_player[pid], "own_proj", None)
            if own_val is not None:
                own_pct = (own_val / 100.0) if own_val > 1.0 else float(own_val)
                pen = lam * _calculate_ownership_penalty_term(own_pct, settings)  # type: ignore[arg-type]
                eff_proj = base_proj - pen
        obj_terms.append(int(round(eff_proj * SCALE)) * var)
    m.Maximize(sum(obj_terms))

    return m, x


def build_cpsat_counts(spec):
    """
    Build a CP-SAT model using counts-only approach with one binary per player.
    Variables: y[player_id] ∈ {0,1} select 8 players.
    Constraints:
      - DK: at least one per base slot (PG/SG/SF/PF/C), plus one G (PG|SG), one F (SF|PF), one UTIL (any)
      - Roster size, salary cap/floor, team limits, locks/bans identical
    Objective: maximize projected points (scaled integers)
    """
    from ortools.sat.python import cp_model

    m = cp_model.CpModel()
    pid2 = {p.player_id: p for p in spec.players}
    y = {pid: m.NewBoolVar(f"y_{pid}") for pid in pid2}

    # roster size
    m.Add(sum(y.values()) == spec.lineup_size)

    # salary
    m.Add(sum(pid2[pid].salary * y[pid] for pid in y) <= spec.salary_cap)
    if spec.min_salary is not None:
        m.Add(sum(pid2[pid].salary * y[pid] for pid in y) >= spec.min_salary)

    # base elig sets
    PG = {pid for pid, p in pid2.items() if "PG" in p.positions}
    SG = {pid for pid, p in pid2.items() if "SG" in p.positions}
    SF = {pid for pid, p in pid2.items() if "SF" in p.positions}
    PF = {pid for pid, p in pid2.items() if "PF" in p.positions}
    C = {pid for pid, p in pid2.items() if "C" in p.positions}

    if spec.site == "dk":
        m.Add(sum(y[pid] for pid in PG) >= 1)
        m.Add(sum(y[pid] for pid in SG) >= 1)
        m.Add(sum(y[pid] for pid in SF) >= 1)
        m.Add(sum(y[pid] for pid in PF) >= 1)
        m.Add(sum(y[pid] for pid in C) >= 1)
        # G/F requirements
        m.Add(sum(y[pid] for pid in (PG | SG)) >= 1)
        m.Add(sum(y[pid] for pid in (SF | PF)) >= 1)
        # Strengthened DK feasibility counts to guarantee assignability
        UG = PG | SG
        UF = SF | PF
        # Need enough supply to fill (PG, SG, G) and (SF, PF, F)
        m.Add(sum(y[pid] for pid in UG) >= 3)
        m.Add(sum(y[pid] for pid in UF) >= 3)
        # Centers: at least one, at most two (C slot plus optionally UTIL)
        m.Add(sum(y[pid] for pid in C) >= 1)
        m.Add(sum(y[pid] for pid in C) <= 2)

    # team limits
    if spec.team_max is not None:
        teams = set(p.team for p in spec.players)
        for t in teams:
            m.Add(sum(y[pid] for pid in y if pid2[pid].team == t) <= spec.team_max)
    for t, cap in (spec.team_limits or {}).items():
        m.Add(sum(y[pid] for pid in y if pid2[pid].team == t) <= cap)

    # locks/bans
    for pid in spec.lock_ids:
        if pid not in y:
            raise ValueError(f"Locked player {pid} missing from candidate set.")
        m.Add(y[pid] == 1)
    for pid in spec.ban_ids:
        if pid in y:
            m.Add(y[pid] == 0)

    # objective (PRP-16: with ownership penalty support)
    SCALE = 1000
    objective_terms = []

    for pid in y:
        player = pid2[pid]
        base_proj = player.proj

        # Apply ownership penalty if settings are provided
        if spec.ownership_penalty and spec.ownership_penalty.get("enabled", False):
            penalty_settings = spec.ownership_penalty
            lam = penalty_settings.get("weight_lambda", 0.0)

            if player.own_proj is not None and lam > 0:
                # Calculate ownership penalty using the same logic as functional API
                own_pct = (
                    player.own_proj / 100.0
                    if player.own_proj > 1.0
                    else player.own_proj
                )
                penalty = lam * _calculate_ownership_penalty_term(
                    own_pct, penalty_settings
                )
                effective_proj = base_proj - penalty
            else:
                effective_proj = base_proj
        else:
            effective_proj = base_proj

        objective_terms.append(int(round(effective_proj * SCALE)) * y[pid])

    m.Maximize(sum(objective_terms))
    return m, y


BASE = ("PG", "SG", "SF", "PF", "C")


def _flex_degree(pos_list):
    pos = set(pos_list)
    deg = len(pos & set(BASE))
    if "PG" in pos or "SG" in pos:
        deg += 1  # G
    if "SF" in pos or "PF" in pos:
        deg += 1  # F
    return deg + 1  # UTIL


def assign_slots_dk(selected_pids, pid2player):
    """Deterministic DK slot assignment (fail-hard).
    Returns list of (pid, slot) on success; returns None if assignment is impossible.
    Policy: fill base slots with least-flexible first, then flex (G/F) with most-flexible, then UTIL.
    """

    def _flex_deg(pos_list):
        pos = set(pos_list)
        deg = len(pos & set(BASE))
        if ("PG" in pos) or ("SG" in pos):
            deg += 1  # eligible for G
        if ("SF" in pos) or ("PF" in pos):
            deg += 1  # eligible for F
        return deg + 1  # UTIL

    remaining = set(selected_pids)
    assigned = []

    # Base slots: least-flexible first
    for slot in ("PG", "SG", "SF", "PF", "C"):
        eligible = [pid for pid in remaining if slot in pid2player[pid].positions]
        if not eligible:
            return None  # cannot fill required base slot
        eligible.sort(key=lambda pid: (_flex_deg(pid2player[pid].positions), pid))
        pick = eligible[0]
        assigned.append((pick, slot))
        remaining.remove(pick)

    # Flex slots: most-flexible first
    def _pick(slot, pred):
        cands = [pid for pid in remaining if pred(pid2player[pid].positions)]
        if not cands:
            return False
        cands.sort(key=lambda pid: (-_flex_deg(pid2player[pid].positions), pid))
        choice = cands[0]
        assigned.append((choice, slot))
        remaining.remove(choice)
        return True

    if not _pick("G", lambda pos: ("PG" in pos) or ("SG" in pos)):
        return None
    if not _pick("F", lambda pos: ("SF" in pos) or ("PF" in pos)):
        return None

    # UTIL: anyone remaining
    if not remaining:
        return None
    last = sorted(remaining)[0]
    assigned.append((last, "UTIL"))
    remaining.remove(last)
    return assigned


@dataclass
class SolveResult:
    lineups: List[List[Tuple[str, str]]]
    total_proj: List[float]
    total_salary: List[int]


def solve_cpsat_iterative(players: List[Dict], constraints: Any, seed: int, site: str):
    """
    Map players + constraints to Spec, build CP-SAT and generate N lineups with no-good cuts.
    Returns (lineup_objs, diagnostics)
    """
    # Import inside function to avoid hard dependency on ortools at import time
    from ortools.sat.python import cp_model

    # Apply safe pruning before building the model
    from .pruning import prune_safely
    import logging

    original_players = players.copy()  # Keep reference to original list
    original_count = len(players)
    locks_list = getattr(constraints, "lock_ids", [])
    players = prune_safely(
        players,
        locks=locks_list,
        proj_floor=getattr(constraints, "proj_min", None),
        k_per_pos=24,
        k_global=48,
        keep_value_per_pos=4,
    )
    pruned_count = len(players)

    # Log pruning summary
    reduction_pct = (
        (original_count - pruned_count) / original_count * 100
        if original_count > 0
        else 0
    )
    logging.info(
        f"Safe pruning: kept {pruned_count}/{original_count} players ({reduction_pct:.1f}% reduction)"
    )

    if locks_list:
        locks_kept = [
            pid for pid in locks_list if any(p["player_id"] == pid for p in players)
        ]
        logging.info(
            f"Locks auto-kept: {len(locks_kept)}/{len(locks_list)} ({locks_kept})"
        )

    # Show top pruned players (those with highest projections that were removed)
    if original_count > pruned_count:
        kept_ids = {p["player_id"] for p in players}
        pruned_players = [p for p in original_players if p["player_id"] not in kept_ids]
        if pruned_players:
            top_pruned = sorted(pruned_players, key=lambda x: x["proj"], reverse=True)[
                :3
            ]
            top_pruned_info = [f"{p['name']} ({p['proj']:.1f})" for p in top_pruned]
            logging.info(f"Top pruned players: {', '.join(top_pruned_info)}")

    # Build Spec
    from ..model_spec import Spec, SpecPlayer

    roster = (
        ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
        if site == "dk"
        else ["PG", "SG", "SF", "PF", "C"]
    )

    # PRP-16: Convert ownership penalty settings to dict for Spec
    ownership_penalty_dict = None
    if hasattr(constraints, "ownership_penalty") and constraints.ownership_penalty:
        ownership_penalty_dict = {
            "enabled": constraints.ownership_penalty.enabled,
            "mode": constraints.ownership_penalty.mode,
            "weight_lambda": constraints.ownership_penalty.weight_lambda,
            "curve_type": constraints.ownership_penalty.curve_type,
            "power_k": constraints.ownership_penalty.power_k,
            "pivot_p0": constraints.ownership_penalty.pivot_p0,
            "curve_alpha": constraints.ownership_penalty.curve_alpha,
            "clamp_min": constraints.ownership_penalty.clamp_min,
            "clamp_max": constraints.ownership_penalty.clamp_max,
            "shrink_gamma": constraints.ownership_penalty.shrink_gamma,
        }

    spec = Spec(
        site=site,  # type: ignore
        roster_slots=roster,
        salary_cap=constraints.max_salary or (50000 if site == "dk" else 60000),
        min_salary=constraints.min_salary,
        players=[
            SpecPlayer(
                player_id=p["player_id"],
                name=p["name"],
                team=p["team"],
                positions=p["positions"],
                salary=p["salary"],
                proj=p["proj"],
                dk_id=p.get("dk_id"),
                own_proj=p.get("own_proj"),  # PRP-16: Pass ownership data
            )
            for p in players
        ],
        team_max=(
            constraints.global_team_limit
            if constraints.global_team_limit is not None
            else (4 if site == "dk" else None)
        ),
        team_limits=constraints.team_limits or {},
        lock_ids=[pid for pid in getattr(constraints, "lock_ids", [])],
        ban_ids=[pid for pid in getattr(constraints, "ban_ids", [])],
        lineup_size=8 if site == "dk" else 9,
        N_lineups=constraints.N_lineups,
        unique_players=max(0, constraints.unique_players),
        cp_sat_params=getattr(constraints, "cp_sat_params", {}) or {},
        engine="cp_sat",
        ownership_penalty=ownership_penalty_dict,  # PRP-16: Pass ownership penalty settings
    )

    # Wiring check: Input contract + objective telemetry (prints + returns diagnostics)
    wiring_diag = None
    try:
        wiring_diag = _run_input_contract_and_objective_telemetry(
            spec, ownership_penalty_dict
        )
    except AssertionError as _ae:
        # Fail fast with a clear message
        raise RuntimeError(str(_ae))
    except Exception:
        # Non-fatal; continue solve
        wiring_diag = None

    # Build model
    model, x = build_cpsat(spec)
    num_bool_vars = len(x)

    # Configure solver with strict, safe defaults
    solver = cp_model.CpSolver()
    params = spec.cp_sat_params or {}

    def _flt(key: str, default: float) -> float:
        try:
            return float(params.get(key, default))
        except Exception:
            return default

    # Speed-safe defaults
    time_limit = _flt("max_time_seconds", 0.7)
    if time_limit <= 0:
        time_limit = 0.7
    solver.parameters.max_time_in_seconds = time_limit
    # Adaptive time cap (off by default unless enabled via params)
    adaptive_time = bool(params.get("adaptive_time", False))
    time_cap = time_limit

    rel_gap = _flt("relative_gap_limit", 0.001)
    if rel_gap > 0:
        # only set if > 0 to allow full optimality when requested
        try:
            solver.parameters.relative_gap_limit = rel_gap
        except Exception:
            pass

    det_time = _flt("max_deterministic_time", 0.0)
    if det_time > 0:
        solver.parameters.max_deterministic_time = det_time

    solver.parameters.num_search_workers = int(
        params.get("num_search_workers", 0)
    )  # 0=all cores
    solver.parameters.random_seed = int(params.get("random_seed", seed))
    # Prefer portfolio search for speed/robustness when available (Pylance-safe)
    try:
        from ortools.sat import sat_parameters_pb2 as sat_pb2

        solver.parameters.search_branching = sat_pb2.SatParameters.PORTFOLIO_SEARCH  # type: ignore[reportAttributeAccessIssue]
    except Exception:
        pass
    # Optional verbose logging controlled via params
    solver.parameters.log_search_progress = bool(
        params.get("log_search_progress", False)
    )

    # Helper indices
    pid_to_player: Dict[str, Any] = {p.player_id: p for p in spec.players}

    def extract_lineup():
        chosen = [(pid, pos) for (pid, pos), var in x.items() if solver.Value(var) == 1]
        # Sum salary and proj by players actually chosen
        total_salary = 0
        total_proj = 0.0
        # chosen contains one variable per player due to <=1 constraint
        for pid, pos in chosen:
            sp = pid_to_player[pid]
            total_salary += sp.salary
            total_proj += sp.proj
        return chosen, total_salary, total_proj

    results: List[Tuple[List[Tuple[str, str]], int, float]] = []
    built = 0
    last_status = None

    while built < spec.N_lineups:
        # set the per-iteration time budget (may be adapted)
        solver.parameters.max_time_in_seconds = time_cap
        status = solver.Solve(model)
        last_status = status
        # compute gap for adaptation/diagnostics
        try:
            curr_obj = float(solver.ObjectiveValue())
            curr_bound = float(solver.BestObjectiveBound())
            curr_gap = abs(curr_bound - curr_obj) / max(1.0, abs(curr_obj))
        except Exception:
            curr_obj, curr_bound, curr_gap = None, None, None

        if status not in (cp_model.OPTIMAL, cp_model.FEASIBLE):
            break

        chosen, sal, proj = extract_lineup()
        results.append((chosen, sal, proj))
        # Adapt next iteration's time cap if enabled
        if adaptive_time and curr_gap is not None:
            if status == cp_model.OPTIMAL or curr_gap <= 0.002:  # ~0.2%
                time_cap = max(0.25, time_cap * 0.8)
            elif curr_gap > 0.01:  # >1%
                time_cap = min(1.2, time_cap + 0.2)
        built += 1

        # Player-level no-good cut with min-uniques
        selected_pids = {pid for (pid, _pos) in chosen}
        selected_vars_all_pos = [
            var for (pid, pos), var in x.items() if pid in selected_pids
        ]
        if spec.unique_players <= 0:
            # Forbid the exact lineup
            model.Add(sum(selected_vars_all_pos) <= len(selected_pids) - 1)
        else:
            # Enforce min-uniques vs previous solution
            model.Add(
                sum(selected_vars_all_pos) <= len(selected_pids) - spec.unique_players
            )

        # Optional: provide hint for next solution
        model.ClearHints()
        for pid, pos in chosen:
            model.AddHint(x[(pid, pos)], 1)
        # Lightly discourage reusing other positions of the same players
        for (pid, pos), var in x.items():
            if pid in selected_pids and (pid, pos) not in chosen:
                model.AddHint(var, 0)

    # Convert to application Lineup/Player
    from ..types import Player, Lineup

    lineup_objs: List[Any] = []
    for idx, (chosen, sal, proj) in enumerate(results, start=1):
        # Keep chosen order as DK slot order
        if spec.site == "dk":
            slot_order_map = {s: i for i, s in enumerate(spec.roster_slots)}
        else:
            slot_order_map = {"PG": 0, "SG": 1, "SF": 2, "PF": 3, "C": 4}
        chosen_sorted = sorted(
            chosen, key=lambda t: (slot_order_map.get(t[1], 99), t[0])
        )
        players_out: List[Any] = []
        for pid, pos in chosen_sorted:
            sp = pid_to_player[pid]
            # Find original player dict to get optional fields
            orig_player = next((p for p in players if p["player_id"] == pid), {})
            players_out.append(
                Player(
                    player_id=pid,
                    name=sp.name,
                    pos=pos,
                    team=sp.team,
                    salary=sp.salary,
                    proj=sp.proj,
                    dk_id=sp.dk_id,
                    own_proj=orig_player.get("own_proj"),
                    minutes=orig_player.get("minutes"),
                    stddev=orig_player.get("stddev"),
                )
            )
        lineup_objs.append(
            Lineup(
                lineup_id=idx,
                total_proj=round(proj, 2),
                total_salary=sal,
                players=players_out,
            )
        )

    status_name = (
        solver.StatusName(last_status) if last_status is not None else "UNKNOWN"
    )
    try:
        best_obj = float(solver.ObjectiveValue())
    except Exception:
        best_obj = None
    try:
        best_bound = float(solver.BestObjectiveBound())
    except Exception:
        best_bound = None
    # Calculate pruning statistics for diagnostics
    reduction_pct = (
        (original_count - pruned_count) / original_count * 100
        if original_count > 0
        else 0
    )
    pruned_players_info = None
    if original_count > pruned_count:
        kept_ids = {p["player_id"] for p in players}
        pruned_players_list = [
            p for p in original_players if p["player_id"] not in kept_ids
        ]
        if pruned_players_list:
            top_pruned = sorted(
                pruned_players_list, key=lambda x: x["proj"], reverse=True
            )[:3]
            pruned_players_info = [f"{p['name']} ({p['proj']:.1f})" for p in top_pruned]

    diagnostics = {
        "engine": "cp_sat",
        "N": len(lineup_objs),
        "status": status_name,
        "best_obj": best_obj,
        "best_bound": best_bound,
        "achieved_gap": (
            None
            if best_obj is None or best_bound is None
            else abs(best_bound - best_obj) / max(1.0, abs(best_obj))
        ),
        "wall_time_sec": getattr(solver, "WallTime", lambda: None)(),
        "model": {
            "num_bool_vars": num_bool_vars,
            "num_slots": len(spec.roster_slots),
        },
        "params": {
            "max_time_in_seconds": solver.parameters.max_time_in_seconds,
            "relative_gap_limit": getattr(
                solver.parameters, "relative_gap_limit", None
            ),
            "max_deterministic_time": solver.parameters.max_deterministic_time,
            "num_search_workers": solver.parameters.num_search_workers,
            "random_seed": solver.parameters.random_seed,
            "adaptive_time": adaptive_time,
            "final_time_cap": time_cap,
        },
        # PRP-13: Safe Position-Aware Pruning diagnostics
        "pruning": {
            "enabled": True,
            "original_players": original_count,
            "kept_players": pruned_count,
            "reduction_pct": round(reduction_pct, 1),
            "top_pruned": pruned_players_info,
            "locks_kept": (
                len(
                    [
                        pid
                        for pid in locks_list
                        if any(p["player_id"] == pid for p in players)
                    ]
                )
                if locks_list
                else 0
            ),
        },
        "wiring_check": wiring_diag,
    }
    return lineup_objs, diagnostics


def solve_cpsat_iterative_counts(
    players: List[Dict], constraints: Any, seed: int, site: str
):
    """
    Map players + constraints to Spec, build counts-based CP-SAT and generate N lineups.
    Uses one binary variable per player and deterministic slot assignment post-solve.
    Returns (lineup_objs, diagnostics)
    """
    # Import inside function to avoid hard dependency on ortools at import time
    from ortools.sat.python import cp_model

    # Apply safe pruning before building the model
    from .pruning import prune_safely
    import logging

    original_players = players.copy()  # Keep reference to original list
    original_count = len(players)
    locks_list = getattr(constraints, "lock_ids", [])
    players = prune_safely(
        players,
        locks=locks_list,
        proj_floor=getattr(constraints, "proj_min", None),
        k_per_pos=24,
        k_global=48,
        keep_value_per_pos=4,
    )
    pruned_count = len(players)

    # Log pruning summary
    reduction_pct = (
        (original_count - pruned_count) / original_count * 100
        if original_count > 0
        else 0
    )
    logging.info(
        f"Safe pruning: kept {pruned_count}/{original_count} players ({reduction_pct:.1f}% reduction)"
    )

    if locks_list:
        locks_kept = [
            pid for pid in locks_list if any(p["player_id"] == pid for p in players)
        ]
        logging.info(
            f"Locks auto-kept: {len(locks_kept)}/{len(locks_list)} ({locks_kept})"
        )

    # Show top pruned players (those with highest projections that were removed)
    if original_count > pruned_count:
        kept_ids = {p["player_id"] for p in players}
        pruned_players = [p for p in original_players if p["player_id"] not in kept_ids]
        if pruned_players:
            top_pruned = sorted(pruned_players, key=lambda x: x["proj"], reverse=True)[
                :3
            ]
            top_pruned_info = [f"{p['name']} ({p['proj']:.1f})" for p in top_pruned]
            logging.info(f"Top pruned players: {', '.join(top_pruned_info)}")

    # Build Spec
    from ..model_spec import Spec, SpecPlayer

    roster = (
        ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
        if site == "dk"
        else ["PG", "SG", "SF", "PF", "C"]
    )

    # PRP-16: Convert ownership penalty settings to dict for Spec
    ownership_penalty_dict = None
    if hasattr(constraints, "ownership_penalty") and constraints.ownership_penalty:
        ownership_penalty_dict = {
            "enabled": constraints.ownership_penalty.enabled,
            "mode": constraints.ownership_penalty.mode,
            "weight_lambda": constraints.ownership_penalty.weight_lambda,
            "curve_type": constraints.ownership_penalty.curve_type,
            "power_k": constraints.ownership_penalty.power_k,
            "pivot_p0": constraints.ownership_penalty.pivot_p0,
            "curve_alpha": constraints.ownership_penalty.curve_alpha,
            "clamp_min": constraints.ownership_penalty.clamp_min,
            "clamp_max": constraints.ownership_penalty.clamp_max,
            "shrink_gamma": constraints.ownership_penalty.shrink_gamma,
        }

    spec = Spec(
        site=site,  # type: ignore
        roster_slots=roster,
        salary_cap=constraints.max_salary or (50000 if site == "dk" else 60000),
        min_salary=constraints.min_salary,
        players=[
            SpecPlayer(
                player_id=p["player_id"],
                name=p["name"],
                team=p["team"],
                positions=p["positions"],
                salary=p["salary"],
                proj=p["proj"],
                dk_id=p.get("dk_id"),
                own_proj=p.get("own_proj"),  # PRP-16: Pass ownership data
            )
            for p in players
        ],
        team_max=(
            constraints.global_team_limit
            if constraints.global_team_limit is not None
            else (4 if site == "dk" else None)
        ),
        team_limits=constraints.team_limits or {},
        lock_ids=[pid for pid in getattr(constraints, "lock_ids", [])],
        ban_ids=[pid for pid in getattr(constraints, "ban_ids", [])],
        lineup_size=8 if site == "dk" else 9,
        N_lineups=constraints.N_lineups,
        unique_players=max(0, constraints.unique_players),
        cp_sat_params=getattr(constraints, "cp_sat_params", {}) or {},
        engine="cp_sat",
        ownership_penalty=ownership_penalty_dict,  # PRP-16: Pass ownership penalty settings
    )

    # Counts-only currently implemented for DK only; fallback to per-slot solver for others
    if site != "dk":
        return solve_cpsat_iterative(players, constraints, seed, site)

    # Wiring check: Input contract + objective telemetry (prints + returns diagnostics)
    wiring_diag = None
    try:
        wiring_diag = _run_input_contract_and_objective_telemetry(
            spec, ownership_penalty_dict
        )
    except AssertionError as _ae:
        # Fail fast with a clear message
        raise RuntimeError(str(_ae))
    except Exception:
        wiring_diag = None

    # Build counts model
    model, y = build_cpsat_counts(spec)
    num_bool_vars = len(y)

    # Configure solver with strict, safe defaults
    solver = cp_model.CpSolver()
    params = spec.cp_sat_params or {}

    def _flt(key: str, default: float) -> float:
        try:
            return float(params.get(key, default))
        except Exception:
            return default

    # Speed-safe defaults
    time_limit = _flt("max_time_seconds", 0.7)
    if time_limit <= 0:
        time_limit = 0.7
    solver.parameters.max_time_in_seconds = time_limit
    # Adaptive time cap (off by default unless enabled via params)
    adaptive_time = bool(params.get("adaptive_time", False))
    time_cap = time_limit

    rel_gap = _flt("relative_gap_limit", 0.001)
    if rel_gap > 0:
        # only set if > 0 to allow full optimality when requested
        try:
            solver.parameters.relative_gap_limit = rel_gap
        except Exception:
            pass

    det_time = _flt("max_deterministic_time", 0.0)
    if det_time > 0:
        solver.parameters.max_deterministic_time = det_time

    solver.parameters.num_search_workers = int(
        params.get("num_search_workers", 0)
    )  # 0=all cores
    solver.parameters.random_seed = int(params.get("random_seed", seed))
    # Prefer portfolio search for speed/robustness when available (Pylance-safe)
    try:
        from ortools.sat import sat_parameters_pb2 as sat_pb2

        solver.parameters.search_branching = sat_pb2.SatParameters.PORTFOLIO_SEARCH  # type: ignore[reportAttributeAccessIssue]
    except Exception:
        pass
    # Optional verbose logging controlled via params
    solver.parameters.log_search_progress = bool(
        params.get("log_search_progress", False)
    )

    # Helper indices
    pid_to_player: Dict[str, Any] = {p.player_id: p for p in spec.players}

    def extract_selected():
        chosen = [pid for pid, var in y.items() if solver.Value(var) == 1]
        sal = sum(
            next(pp for pp in spec.players if pp.player_id == pid).salary
            for pid in chosen
        )
        proj = sum(
            next(pp for pp in spec.players if pp.player_id == pid).proj
            for pid in chosen
        )
        return chosen, sal, proj

    assigned_lineups: List[Tuple[List[Tuple[str, str]], int, float]] = []
    built = 0
    last_status = None

    while built < spec.N_lineups:
        # set the per-iteration time budget (may be adapted)
        solver.parameters.max_time_in_seconds = time_cap
        status = solver.Solve(model)
        last_status = status
        # compute gap for adaptation/diagnostics
        try:
            curr_obj = float(solver.ObjectiveValue())
            curr_bound = float(solver.BestObjectiveBound())
            curr_gap = abs(curr_bound - curr_obj) / max(1.0, abs(curr_obj))
        except Exception:
            curr_obj, curr_bound, curr_gap = None, None, None

        if status not in (cp_model.OPTIMAL, cp_model.FEASIBLE):
            break

        chosen, sal, proj = extract_selected()
        assigned = assign_slots_dk(chosen, pid_to_player)
        if assigned is None:
            # Unassignable set (rare with strengthened counts): cut & retry without incrementing built
            model.Add(sum(y[pid] for pid in chosen) <= spec.lineup_size - 1)
            continue

        assigned_lineups.append((assigned, sal, proj))

        # Adapt next iteration's time cap if enabled
        if adaptive_time and curr_gap is not None:
            if status == cp_model.OPTIMAL or curr_gap <= 0.002:  # ~0.2%
                time_cap = max(0.25, time_cap * 0.8)
            elif curr_gap > 0.01:  # >1%
                time_cap = min(1.2, time_cap + 0.2)
        built += 1

        # No-good cuts (on the selected set)
        if spec.unique_players <= 0:
            model.Add(sum(y[pid] for pid in chosen) <= spec.lineup_size - 1)
        else:
            model.Add(
                sum(y[pid] for pid in chosen) <= spec.lineup_size - spec.unique_players
            )

        # Hints
        model.ClearHints()
        for pid in chosen:
            model.AddHint(y[pid], 1)

    # Convert to application Lineup/Player using slot assignment
    from ..types import Player, Lineup

    lineup_objs: List[Any] = []
    if not assigned_lineups:
        raise RuntimeError(
            "CP-SAT counts-only: no assignable lineups found. Check locks/bans and strengthened DK counts."
        )

    for idx, (assigned_slots, sal, proj) in enumerate(assigned_lineups, start=1):
        # Sort by slot order for consistent output (DK-only path here)
        slot_order_map = {s: i for i, s in enumerate(spec.roster_slots)}
        assigned_slots_sorted = sorted(
            assigned_slots, key=lambda t: (slot_order_map.get(t[1], 99), t[0])
        )

        players_out: List[Any] = []
        for pid, pos in assigned_slots_sorted:
            sp = pid_to_player[pid]
            # Find original player dict to get optional fields
            orig_player = next((p for p in players if p["player_id"] == pid), {})
            players_out.append(
                Player(
                    player_id=pid,
                    name=sp.name,
                    pos=pos,
                    team=sp.team,
                    salary=sp.salary,
                    proj=sp.proj,
                    dk_id=sp.dk_id,
                    own_proj=orig_player.get("own_proj"),
                    minutes=orig_player.get("minutes"),
                    stddev=orig_player.get("stddev"),
                )
            )
        lineup_objs.append(
            Lineup(
                lineup_id=idx,
                total_proj=round(proj, 2),
                total_salary=sal,
                players=players_out,
            )
        )

    status_name = (
        solver.StatusName(last_status) if last_status is not None else "UNKNOWN"
    )
    try:
        best_obj = float(solver.ObjectiveValue())
    except Exception:
        best_obj = None
    try:
        best_bound = float(solver.BestObjectiveBound())
    except Exception:
        best_bound = None
    # Calculate pruning statistics for diagnostics
    reduction_pct = (
        (original_count - pruned_count) / original_count * 100
        if original_count > 0
        else 0
    )
    pruned_players_info = None
    if original_count > pruned_count:
        kept_ids = {p["player_id"] for p in players}
        pruned_players_list = [
            p for p in original_players if p["player_id"] not in kept_ids
        ]
        if pruned_players_list:
            top_pruned = sorted(
                pruned_players_list, key=lambda x: x["proj"], reverse=True
            )[:3]
            pruned_players_info = [f"{p['name']} ({p['proj']:.1f})" for p in top_pruned]

    diagnostics = {
        "engine": "cp_sat_counts",
        "N": len(lineup_objs),
        "status": status_name,
        "best_obj": best_obj,
        "best_bound": best_bound,
        "achieved_gap": (
            None
            if best_obj is None or best_bound is None
            else abs(best_bound - best_obj) / max(1.0, abs(best_obj))
        ),
        "wall_time_sec": getattr(solver, "WallTime", lambda: None)(),
        "model": {
            "num_bool_vars": num_bool_vars,
            "num_slots": len(spec.roster_slots),
        },
        "params": {
            "max_time_in_seconds": solver.parameters.max_time_in_seconds,
            "relative_gap_limit": getattr(
                solver.parameters, "relative_gap_limit", None
            ),
            "max_deterministic_time": solver.parameters.max_deterministic_time,
            "num_search_workers": solver.parameters.num_search_workers,
            "random_seed": solver.parameters.random_seed,
            "adaptive_time": adaptive_time,
            "final_time_cap": time_cap,
        },
        # PRP-13: Safe Position-Aware Pruning diagnostics
        "pruning": {
            "enabled": True,
            "original_players": original_count,
            "kept_players": pruned_count,
            "reduction_pct": round(reduction_pct, 1),
            "top_pruned": pruned_players_info,
            "locks_kept": (
                len(
                    [
                        pid
                        for pid in locks_list
                        if any(p["player_id"] == pid for p in players)
                    ]
                )
                if locks_list
                else 0
            ),
        },
        "wiring_check": wiring_diag,
    }
    return lineup_objs, diagnostics
</file>

<file path="processes/optimizer/_legacy/nba_optimizer_functional.py">
"""
Functional NBA DFS optimizer API for Streamlit integration
"""

import math
import random
import re
import uuid
from datetime import datetime
from typing import List, Dict, Tuple, Optional, Any
import numpy as np
import pulp as plp
import pandas as pd
import os
import time
import hashlib

try:
    from difflib import SequenceMatcher

    FUZZY_MATCHING_AVAILABLE = True
except ImportError:
    FUZZY_MATCHING_AVAILABLE = False
from .types import Player, Lineup, Constraints, OptimizerError, ErrorCodes, SiteType
from .dk_strict_results import (
    lineups_to_grid_df,
    validate_grid_df,
    grid_df_to_dk_csv,
)
from .dk_data_loader import (
    DKDataConfig,
    load_dk_strict_projections,
    validate_dk_strict_data,
)

# Team name standardization
TEAM_REPLACEMENT_DICT = {
    "PHO": "PHX",
    "GS": "GSW",
    "SA": "SAS",
    "NO": "NOP",
    "NY": "NYK",
}


# ============================================================================
# PRP-18.2: DK-Strict Ownership Normalization Functions
# ============================================================================


def _normalize_projections_df(df: pd.DataFrame) -> Tuple[pd.DataFrame, Dict[str, Any]]:
    """
    Normalize projections DataFrame for DK-Strict mode (PRP-18.2)

    Maps ownership columns (Own%, ownership, etc.) to own_proj (0-1 scale)
    and provides other helpful column mappings for resilience.

    Args:
        df: Raw projections DataFrame

    Returns:
        Tuple of (normalized_df, normalization_info_dict)
    """
    if df is None or df.empty:
        return df, {"ownership": None}

    df_norm = df.copy()
    info = {"ownership": None}

    def _first_col(candidates):
        """Find first column that matches any of the candidates (case-insensitive)"""
        for candidate in candidates:
            for variant in (
                candidate,
                candidate.lower(),
                candidate.upper(),
                candidate.title(),
            ):
                if variant in df_norm.columns:
                    return variant
        return None

    # Map ownership → own_proj (PRIMARY PRP-18.2 requirement)
    ownership_candidates = [
        "own_proj",
        "own%",
        "ownership",
        "ownership%",
        "projected ownership",
        "own pct",
        "own_pct",
    ]
    own_col = _first_col(ownership_candidates)

    if own_col:
        # Convert to numeric, coerce non-numeric to NaN
        ser = pd.to_numeric(df_norm[own_col], errors="coerce").astype(float)

        # Determine if we need to scale (divide by 100)
        max_val = ser.max(skipna=True)
        # PRP-22: use 1.5 threshold to avoid double-scaling edge cases
        scaled_by = 100.0 if max_val and max_val > 1.5 else 1.0

        if scaled_by > 1.0:
            ser = ser / scaled_by

        # Clip to [0, 1] range
        ser = ser.clip(lower=0.0, upper=1.0)

        # Count non-numeric values that were dropped
        non_numeric_count = df_norm[own_col].shape[0] - ser.notna().sum()

        # Update DataFrame with normalized ownership
        df_norm["own_proj"] = ser

        # Record normalization info for telemetry
        info["ownership"] = {
            "source_col": own_col,
            "target_col": "own_proj",
            "scaled_by": scaled_by,
            "non_numeric_dropped": int(non_numeric_count),
            "clip_applied": True,
        }

    # Optional resilience mappings (no behavior change, just column name consistency)
    mapping = {
        "proj_fp": ["Fpts Proj", "Fpts_Proj", "FptsProj", "FPTS", "Proj", "Projection"],
        "salary": ["Salary", "SAL", "Salary($)"],
        "position": ["Roster Position", "Position", "POS"],
        "name": ["Name", "Player", "Player Name"],
        "team": ["TeamAbbrev", "Team", "TEAM", "Tm"],
        "dk_id": ["ID", "Id", "id"],
    }

    for target, candidates in mapping.items():
        if target not in df_norm.columns:
            col = _first_col(candidates)
            if col and col != target:
                df_norm = df_norm.rename(columns={col: target})

    return df_norm, info


# ============================================================================
# PRP-22: Ownership-only normalization helper (no other column renames)
# ============================================================================
def _normalize_ownership(df: pd.DataFrame) -> Tuple[pd.DataFrame, Dict[str, Any]]:
    """
    Normalize ownership to own_proj ∈ [0,1] from any common source column.
    Returns the updated DataFrame and a telemetry dict capturing normalization details.
    """
    if df is None or df.empty:
        return df, {
            "source_col": None,
            "scaled_by": 1.0,
            "scaled_by_100": False,
            "clip_applied": False,
            "non_numeric_dropped": 0,
            "nulls_filled": 0,
            "max_before": None,
            "max_after": None,
        }

    df_out = df.copy()

    lower_cols = {c.lower(): c for c in df_out.columns}
    candidates = [
        "own_proj",
        "own%",
        "ownership",
        "ownership%",
        "projected ownership",
        "own pct",
        "own_pct",
        "ownproj",
        "proj_own",
    ]
    src = None
    for cand in candidates:
        if cand in lower_cols:
            src = lower_cols[cand]
            break
    if src is None:
        # substring fallback
        for lc, orig in lower_cols.items():
            if "own" in lc:
                src = orig
                break
    if src is None:
        # No ownership column found; create a zero column so downstream contracts can pass
        df_out["own_proj"] = 0.0
        return df_out, {
            "source_col": None,
            "scaled_by": 1.0,
            "scaled_by_100": False,
            "clip_applied": False,
            "non_numeric_dropped": 0,
            "nulls_filled": 0,
            "max_before": 0.0,
            "max_after": 0.0,
        }

    raw = pd.to_numeric(df_out[src], errors="coerce").astype(float)
    max_before = float(raw.max(skipna=True)) if raw.notna().any() else None
    scaled_by = 100.0 if (max_before is not None and max_before > 1.5) else 1.0
    ser = raw.copy()
    if scaled_by > 1.0:
        ser = ser / scaled_by
    # Count nulls and fill with 0.0 per PRP hardening
    nulls_before = int(ser.isna().sum())
    ser = ser.fillna(0.0)
    # Clip to [0,1]
    clipped_series = ser.clip(0.0, 1.0)
    num_clipped = int((clipped_series.ne(ser)).sum())
    ser = clipped_series
    max_after = float(ser.max(skipna=True)) if ser.notna().any() else None
    non_num_dropped = int(df_out[src].shape[0] - raw.notna().sum())

    df_out["own_proj"] = ser
    return df_out, {
        "source_col": src,
        "scaled_by": scaled_by,
        "scaled_by_100": bool(scaled_by > 1.0),
        "clip_applied": True,
        "non_numeric_dropped": non_num_dropped,
        "nulls_filled": nulls_before,
        "max_before": max_before,
        "max_after": max_after,
        "num_clipped": num_clipped,
    }


def fuzzy_similarity(name1: str, name2: str) -> float:
    """Calculate fuzzy string similarity between two names (0.0 to 1.0)"""
    if not FUZZY_MATCHING_AVAILABLE:
        return 1.0 if name1.lower() == name2.lower() else 0.0

    # Normalize names for comparison
    norm1 = re.sub(r"[^\w\s]", "", name1.lower()).strip()
    norm2 = re.sub(r"[^\w\s]", "", name2.lower()).strip()

    if not norm1 or not norm2:
        return 0.0

    return SequenceMatcher(None, norm1, norm2).ratio()


def normalize_player_name(name: str) -> str:
    """Enhanced player name normalization for better matching"""
    if pd.isna(name):
        return ""

    # Convert to string and basic cleanup
    name = str(name).strip()

    # Common name variations and standardizations
    name_replacements = {
        # Handle common nicknames and variations
        "Jr.": "Jr",
        "Sr.": "Sr",
        "III": "III",
        "II": "II",
        "IV": "IV",
        "V": "V",
    }

    for old, new in name_replacements.items():
        name = name.replace(old, new)

    # Remove extra whitespace and normalize case
    name = " ".join(name.split()).lower()

    return name


def find_fuzzy_matches(
    proj_df: pd.DataFrame, ids_df: pd.DataFrame, similarity_threshold: float = 0.85
) -> pd.DataFrame:
    """
    Find fuzzy matches between projections and ID data when exact matching fails

    Returns DataFrame with fuzzy match suggestions
    """
    if not FUZZY_MATCHING_AVAILABLE:
        return pd.DataFrame()

    # Get unmatched projections
    unmatched = proj_df[proj_df["dk_id"].isna()].copy()
    if unmatched.empty:
        return pd.DataFrame()

    print(f"🔍 Attempting fuzzy matching for {len(unmatched)} unmatched players...")

    fuzzy_matches = []

    for _, proj_row in unmatched.iterrows():
        proj_name = normalize_player_name(proj_row["name"])
        proj_team = proj_row["__team_norm"]

        best_match = None
        best_similarity = 0.0

        for _, id_row in ids_df.iterrows():
            id_name = normalize_player_name(id_row["name_ids"])
            id_team = id_row["__team_norm"]

            # Only consider same team matches for safety
            if proj_team == id_team:
                similarity = fuzzy_similarity(proj_name, id_name)
                if similarity > best_similarity and similarity >= similarity_threshold:
                    best_similarity = similarity
                    best_match = id_row

        if best_match is not None:
            fuzzy_matches.append(
                {
                    "proj_name": proj_row["name"],
                    "id_name": best_match["name_ids"],
                    "team": proj_team,
                    "similarity": best_similarity,
                    "dk_id": best_match["dk_id"],
                    "proj_index": proj_row.name,
                }
            )

    fuzzy_df = pd.DataFrame(fuzzy_matches)
    if not fuzzy_df.empty:
        print(f"🎯 Found {len(fuzzy_df)} potential fuzzy matches:")
        for _, match in fuzzy_df.head(5).iterrows():
            print(
                f"  {match['proj_name']} → {match['id_name']} ({match['similarity']:.1%} similar)"
            )

    return fuzzy_df


# ============================================================================
# PRP-16: Ownership Penalty Functions
# ============================================================================


def _clamp(v: float, lo: float, hi: float) -> float:
    """Clamp value to range [lo, hi]"""
    return max(lo, min(hi, v))


def _effective_p(p: float, p0: float, gamma: float, lo: float, hi: float) -> float:
    """Calculate effective ownership percentage with shrinkage and clamping"""
    return _clamp(gamma * p + (1.0 - gamma) * p0, lo, hi)


def _g_curve(p_eff: float, settings) -> float:
    """Calculate penalty curve value for effective ownership percentage"""
    if settings.curve_type == "linear":
        return p_eff
    elif settings.curve_type == "power":
        return p_eff**settings.power_k
    elif settings.curve_type == "neglog":
        return -math.log(max(1e-9, 1.0 - p_eff))
    else:  # Default: sigmoid
        eps = 1e-9
        ratio = settings.pivot_p0 / max(eps, p_eff)
        return 1.0 / (1.0 + (ratio**settings.curve_alpha))


def _per_player_penalty_terms(own_series, settings) -> Dict[str, float]:
    """Calculate penalty terms for each player based on ownership and curve settings"""
    g = {}
    for pid, p in own_series.items():
        p_eff = _effective_p(
            float(p),
            settings.pivot_p0,
            settings.shrink_gamma,
            settings.clamp_min,
            settings.clamp_max,
        )
        g[pid] = _g_curve(p_eff, settings)
    return g


# New helper: _objective_coeffs_from_players
def _objective_coeffs_from_players(
    players: List[Dict], settings, lam: float
) -> Dict[str, float]:
    """Calculate objective coefficients from the in-memory players list.
    Returns dict[player_id] -> adjusted points (base - lam * g(p))."""
    coeffs: Dict[str, float] = {}
    for p in players:
        pid = p["player_id"]
        base = float(p["proj"])
        own = p.get("own_proj", None)
        if own is None:
            coeffs[pid] = base
            continue
        # normalize to [0,1]
        own_pct = own / 100.0 if own > 1.0 else float(own)
        p_eff = _effective_p(
            own_pct,
            settings.pivot_p0,
            settings.shrink_gamma,
            settings.clamp_min,
            settings.clamp_max,
        )
        gval = _g_curve(p_eff, settings)
        coeffs[pid] = base - lam * gval
    return coeffs


def _objective_coeffs(
    projections_df: pd.DataFrame, settings, lam: float
) -> Dict[str, float]:
    """Calculate objective coefficients with ownership penalty"""
    # Expect columns: 'player_id', 'proj_fp', 'own%' (own in [0,1] or percentage)
    own_col = "own%" if "own%" in projections_df.columns else "own_proj"

    if own_col not in projections_df.columns:
        # No ownership data - return base projections
        coeffs = {}
        for row in projections_df.itertuples(index=False):
            pid = getattr(row, "player_id", f"{row.name}_{row.team}_{row.salary}")
            coeffs[pid] = float(row.proj_fp)
        return coeffs

    # Normalize ownership to [0, 1] if needed
    own_series = projections_df.set_index("player_id")[own_col]
    if own_series.max() > 1.0:
        own_series = own_series / 100.0  # Convert percentage to decimal

    own_g = _per_player_penalty_terms(own_series, settings)

    coeffs = {}
    for row in projections_df.itertuples(index=False):
        pid = getattr(row, "player_id", f"{row.name}_{row.team}_{row.salary}")
        base = float(row.proj_fp)
        penalty = lam * own_g.get(pid, 0.0)
        coeffs[pid] = base - penalty
    return coeffs


def _lineup_raw_projection(
    lineup_players: List[str], proj_map: Dict[str, float]
) -> float:
    """Calculate raw projection total for a lineup (no penalty)"""
    return sum(proj_map.get(pid, 0.0) for pid in lineup_players)


def _measure_offoptimal_pct(
    P_star: float, lineup_players: List[str], proj_map: Dict[str, float]
) -> float:
    """Measure how far off optimal this lineup is (as percentage)"""
    P = _lineup_raw_projection(lineup_players, proj_map)
    if P_star <= 0:
        return 0.0
    return max(0.0, 1.0 - (P / P_star))


def _g_curve_penalty(own_pct: float, settings) -> float:
    """Calculate penalty curve value for ownership percentage (for CBC solver)"""
    p_eff = _effective_p(
        own_pct,
        settings.pivot_p0,
        settings.shrink_gamma,
        settings.clamp_min,
        settings.clamp_max,
    )
    return _g_curve(p_eff, settings)


def _solve_with_lambda(
    lam: float, players: List[Dict], settings, build_and_solve_fn
) -> List[str]:
    """Solve optimization problem with specific lambda penalty weight using provided coeffs."""
    coeffs = _objective_coeffs_from_players(players, settings, lam)
    lineup_players = build_and_solve_fn(coeffs)
    return lineup_players


def _find_lambda_by_percent(
    target_pct: float,
    tol_pct: float,
    players: List[Dict],
    settings,
    build_and_solve_fn,
    proj_map: Dict[str, float],
    lambda_seed: float = 1.0,
    lambda_cap: float = 12.0,
) -> Tuple[float, float, List[str]]:
    """
    Find lambda value to achieve target off-optimal percentage using bracket + bisection

    Returns:
        Tuple of (lambda_used, achieved_offoptimal_pct, lineup_players)
    """
    # Baseline P* (optimal with no penalty)
    lineup_star = _solve_with_lambda(0.0, players, settings, build_and_solve_fn)
    P_star = _lineup_raw_projection(lineup_star, proj_map)

    if target_pct <= 0:
        return 0.0, 0.0, lineup_star

    # Bracket: start with lambda_low = 0, find lambda_high that exceeds target
    lam_lo, lo_players = 0.0, lineup_star
    off_lo = _measure_offoptimal_pct(P_star, lo_players, proj_map)

    lam_hi = max(1e-6, lambda_seed)
    lam_hi = min(lambda_cap, lam_hi)
    hi_players = _solve_with_lambda(lam_hi, players, settings, build_and_solve_fn)
    off_hi = _measure_offoptimal_pct(P_star, hi_players, proj_map)

    # Double lambda_hi until we exceed target or hit cap
    while off_hi < target_pct and lam_hi < lambda_cap:
        lam_lo, off_lo = lam_hi, off_hi
        lam_hi = min(lambda_cap, lam_hi * 2.0)
        hi_players = _solve_with_lambda(lam_hi, players, settings, build_and_solve_fn)
        off_hi = _measure_offoptimal_pct(P_star, hi_players, proj_map)

    # If cap can't reach target, return closest
    if off_hi < target_pct:
        return (
            (lam_hi, off_hi, hi_players)
            if abs(off_hi - target_pct) <= abs(off_lo - target_pct)
            else (lam_lo, off_lo, lo_players)
        )

    # Bisection search
    best = (lam_hi, off_hi, hi_players)
    for _ in range(18):  # ~18 iterations for good precision
        lam_mid = 0.5 * (lam_lo + lam_hi)
        mid_players = _solve_with_lambda(lam_mid, players, settings, build_and_solve_fn)
        off_mid = _measure_offoptimal_pct(P_star, mid_players, proj_map)

        if abs(off_mid - target_pct) <= tol_pct:
            return lam_mid, off_mid, mid_players

        if abs(off_mid - target_pct) < abs(best[1] - target_pct):
            best = (lam_mid, off_mid, mid_players)

        if off_mid < target_pct:
            lam_lo, off_lo = lam_mid, off_mid
        else:
            lam_hi, off_hi = lam_mid, off_mid

    return best


def optimize(
    projections_df: pd.DataFrame,
    constraints: Constraints,
    seed: int,
    site: SiteType,
    player_ids_df: Optional[pd.DataFrame] = None,
    engine: str = "cbc",
) -> List[Lineup]:
    """
    Main optimization function - returns lineups only (for compatibility)
    """
    lineups, _ = optimize_with_diagnostics(
        projections_df, constraints, seed, site, player_ids_df, engine=engine
    )
    return lineups


def optimize_with_diagnostics(
    projections_df: pd.DataFrame,
    constraints: Constraints,
    seed: int,
    site: SiteType,
    player_ids_df: Optional[pd.DataFrame] = None,
    engine: str = "cbc",
) -> Tuple[List[Lineup], Dict[str, Any]]:
    """
    Main optimization function for UI integration

    Args:
        projections_df: Player projections with required columns
        constraints: Validated optimization constraints
        seed: Random seed for deterministic behavior
        site: "dk" or "fd"
        player_ids_df: Optional DataFrame with real DK/FD player IDs

    Returns:
        List of optimized lineups

    Raises:
        OptimizerError: For all optimization failures
    """
    # Set seeds for deterministic behavior
    random.seed(seed)
    np.random.seed(seed)

    # Validate projections data
    validate_projections(projections_df, site)

    # Attach real player IDs if available
    # Snapshot columns before merges for diagnostics
    _cols_before_merge = sorted(list(projections_df.columns))

    projections_df, id_diagnostics = attach_player_ids_if_available(
        projections_df, site, player_ids_df
    )

    # PRP-Ownership-Normalization: Normalize ownership and capture telemetry
    try:
        projections_df, own_norm = _normalize_ownership(projections_df)
        norm_block = id_diagnostics.setdefault("normalization", {}).setdefault(
            "ownership", {}
        )
        if own_norm:
            norm_block.update(own_norm)
        # Add post-merge columns diff
        _cols_after_merge = sorted(list(projections_df.columns))
        norm_block["cols_diff_post_merge"] = list(
            set(_cols_before_merge) ^ set(_cols_after_merge)
        )
        try:
            if "own_proj" in projections_df.columns:
                norm_block["own_proj_max_post_merge"] = float(
                    projections_df["own_proj"].max()
                )
        except Exception:
            pass
    except Exception:
        pass
    # Snapshot whether ownership penalty was requested (for UI gating)
    try:
        pen_cfg = getattr(constraints, "ownership_penalty", None)
        id_diagnostics.setdefault("constraints_snapshot", {})["ownership_enabled"] = (
            bool(pen_cfg and pen_cfg.enabled)
        )
    except Exception:
        pass

    # Handle ID matching failures
    if id_diagnostics["errors"]:
        for error in id_diagnostics["errors"]:
            print(f"❌ {error}")

    if id_diagnostics["warnings"]:
        for warning in id_diagnostics["warnings"]:
            print(f"⚠️  {warning}")

    # Check if we should fail fast for DK export requirements
    success_rate = id_diagnostics["success_rate"]

    # Fail-fast mode: block optimization if DK ID requirements not met
    if constraints.require_dk_ids and site == "dk":
        if success_rate < constraints.min_dk_id_match_rate:
            raise OptimizerError(
                code="INSUFFICIENT_DK_IDS",
                message=f"DK ID match rate ({success_rate:.1f}%) below required minimum ({constraints.min_dk_id_match_rate}%)",
                user_message=f"""❌ Cannot proceed: Insufficient DK player IDs

Required: {constraints.min_dk_id_match_rate}% match rate
Actual: {success_rate:.1f}% ({id_diagnostics['matched_players']}/{id_diagnostics['total_players']} players)

🔧 How to fix:
1. Add dk_data/player_ids.csv with columns: ID, Name, TeamAbbrev, Position
2. Ensure player names and teams match between projections and player_ids.csv
3. Export player IDs from DraftKings contest entries
4. Or disable fail-fast mode (require_dk_ids=False) to use synthetic IDs

📊 Diagnostics:
• Data source: {id_diagnostics['data_source'] or 'None'}
• Name/team matching failed: {id_diagnostics['failed_name_matching']} players
• Position validation failed: {id_diagnostics['failed_position_validation']} players""",
                details=id_diagnostics,
            )

    # Warning mode: inform about compatibility issues
    elif site == "dk" and success_rate < 95.0:
        print(f"\n🚨 WARNING: Low DK ID match rate ({success_rate:.1f}%)")
        print("   Lineups generated will NOT be compatible with DraftKings import!")
        print(
            "   Enable fail-fast mode (require_dk_ids=True) to prevent invalid lineups."
        )
        print("   See diagnostics above for specific matching failures.\n")

    # Convert DataFrame to player dictionary format
    players = convert_projections_to_players(projections_df, constraints.proj_min)

    if len(players) == 0:
        raise OptimizerError(
            code=ErrorCodes.INVALID_PROJECTIONS,
            message="No players meet minimum projection threshold",
            user_message=f"No players found with projections >= {constraints.proj_min}. Try lowering the minimum.",
            details={
                "proj_min": constraints.proj_min,
                "available_players": len(projections_df),
            },
        )

    # If by_percent mode is requested, find λ first for CP-SAT engines (use CP-SAT during search)
    ownership_penalty = constraints.ownership_penalty
    if (
        ownership_penalty
        and ownership_penalty.enabled
        and ownership_penalty.mode == "by_percent"
        and engine in ("cp_sat", "cp_sat_counts")
    ):
        print(
            f"🎯 Ownership penalty: by % off optimal (target: {ownership_penalty.target_offoptimal_pct:.1%})"
        )

        # Build projection map for off-optimal calculation
        players_for_search = convert_projections_to_players(
            projections_df, constraints.proj_min
        )
        proj_map = {p["player_id"]: p["proj"] for p in players_for_search}

        # Build-and-solve using CP-SAT by injecting adjusted coefficients as temporary projections
        def build_and_solve_fn(coeffs: Dict[str, float]) -> List[str]:
            # Adjust player projections to the provided coefficients (base - λ*g(p))
            players_adj: List[Dict] = []
            for p in players_for_search:
                q = dict(p)
                q["proj"] = float(coeffs.get(p["player_id"], p["proj"]))
                players_adj.append(q)
            # Prepare a minimal CP-SAT run: disable penalty (coeffs already include it), single lineup, short time cap
            base_constraints = Constraints.from_dict(constraints.to_dict())
            if (
                hasattr(base_constraints, "ownership_penalty")
                and base_constraints.ownership_penalty
            ):
                base_constraints.ownership_penalty.enabled = False
            base_constraints.N_lineups = 1
            if isinstance(base_constraints.cp_sat_params, dict):
                params = dict(base_constraints.cp_sat_params)
                mt = float(params.get("max_time_seconds", 0.7) or 0.7)
                params["max_time_seconds"] = max(0.25, min(mt, 1.0))
                params["num_search_workers"] = int(
                    params.get("num_search_workers", 0) or 0
                )
                base_constraints.cp_sat_params = params
            try:
                from .solvers.cpsat_solver import (
                    solve_cpsat_iterative,
                    solve_cpsat_iterative_counts,
                )

                if engine == "cp_sat_counts":
                    _lineups, _diag = solve_cpsat_iterative_counts(
                        players_adj, base_constraints, seed, site
                    )
                else:
                    _lineups, _diag = solve_cpsat_iterative(
                        players_adj, base_constraints, seed, site
                    )
            except Exception:
                return []
            if not _lineups:
                return []
            return [pl.player_id for pl in _lineups[0].players]

        lam_used, achieved_pct, _ = _find_lambda_by_percent(
            target_pct=ownership_penalty.target_offoptimal_pct,
            tol_pct=ownership_penalty.tol_offoptimal_pct,
            players=players_for_search,
            settings=ownership_penalty,
            build_and_solve_fn=build_and_solve_fn,
            proj_map=proj_map,
        )
        print(
            f"🎯 Lambda search result: λ={lam_used:.3f}, achieved {achieved_pct:.1%} off-optimal (CP-SAT)"
        )
        ownership_penalty.weight_lambda = lam_used
        ownership_penalty.mode = "by_points"  # Use fixed λ for downstream engine
        # Stash into diagnostics for UI
        id_diagnostics.setdefault("ownership_penalty", {})
        id_diagnostics["ownership_penalty"].update(
            {
                "enabled": True,
                "mode": "by_percent",
                "lambda_used": float(lam_used),
                "target_offoptimal_pct": float(
                    constraints.ownership_penalty.target_offoptimal_pct
                ),
                "achieved_offoptimal_pct": float(achieved_pct),
                "capped": bool(lam_used >= 12.0 - 1e-9),
            }
        )

    # Choose engine path
    if engine == "cp_sat":
        print(f"🔧 Using CP-SAT solver engine (seed={seed}, site={site})")
        try:
            from .solvers.cpsat_solver import solve_cpsat_iterative
        except Exception as e:
            raise OptimizerError(
                code=ErrorCodes.CONFIG_ERROR,
                message=f"CP-SAT engine unavailable: {e}",
                user_message="CP-SAT engine is not available. Please install ortools or switch to CBC.",
                details={"import_error": str(e)},
            )

        lineups, diagnostics = solve_cpsat_iterative(players, constraints, seed, site)
        # Merge DK ID diagnostics into solver diagnostics for consistency
        if not isinstance(diagnostics, dict):
            diagnostics = {}
        diagnostics.update(id_diagnostics)
        # Ensure engine key present
        diagnostics.setdefault("engine", "cp_sat")
        # Compute achieved % off optimal against a CP-SAT baseline (λ=0) on produced lineups
        try:
            pen_cfg = getattr(constraints, "ownership_penalty", None)
            if pen_cfg and pen_cfg.enabled and lineups:
                # Build a minimal baseline CP-SAT run (λ=0, N=1) for P* using same constraints
                from copy import deepcopy as _deepcopy

                base_constraints = Constraints.from_dict(constraints.to_dict())
                # Disable ownership penalty and reduce to a single lineup with a short time cap if provided
                if (
                    hasattr(base_constraints, "ownership_penalty")
                    and base_constraints.ownership_penalty
                ):
                    base_constraints.ownership_penalty.enabled = False
                base_constraints.N_lineups = 1
                # Soften time limit for the baseline solve if present
                if isinstance(base_constraints.cp_sat_params, dict):
                    params = dict(base_constraints.cp_sat_params)
                    mt = float(params.get("max_time_seconds", 0.7) or 0.7)
                    params["max_time_seconds"] = max(0.25, min(mt, 1.0))
                    base_constraints.cp_sat_params = params
                baseline_lineups, _baseline_diag = solve_cpsat_iterative(
                    players, base_constraints, seed, site
                )
                if baseline_lineups:
                    # Raw projection sums (points-only) for baseline and first produced lineup
                    def _sum_proj(lu):
                        return float(sum(p.proj for p in lu.players))

                    P_star = _sum_proj(baseline_lineups[0])
                    P_cur = _sum_proj(lineups[0])
                    off_pct = 0.0 if P_star <= 0 else max(0.0, 1.0 - (P_cur / P_star))
                    _ep = diagnostics.get("ownership_penalty", {})
                    # Preserve any target set earlier; just annotate achieved
                    _ep["achieved_offoptimal_pct"] = float(off_pct)
                    diagnostics["ownership_penalty"] = _ep
        except Exception:
            # Non-fatal; skip achieved% calculation if anything fails
            pass
        # Add ownership penalty diagnostics for CP-SAT (post-solve)
        try:
            pen_cfg = getattr(constraints, "ownership_penalty", None)
            if pen_cfg and pen_cfg.enabled:
                pen_diag: Dict[str, Any] = {
                    "enabled": True,
                    "mode": pen_cfg.mode,
                    "lambda_used": float(getattr(pen_cfg, "weight_lambda", 0.0) or 0.0),
                    "applied": False,
                    "reason": None,
                }
                # If no ownership available on any player, flag error
                any_own = any(p.get("own_proj") is not None for p in players)
                if not any_own:
                    pen_diag["applied"] = False
                    pen_diag["reason"] = "missing_or_invalid_own_proj"
                else:
                    # Compute averages over produced lineups
                    lam = float(getattr(pen_cfg, "weight_lambda", 0.0) or 0.0)
                    if lam > 0 and lineups:
                        chalk_vals = []
                        penalty_pts = []
                        for lu in lineups:
                            gvals = []
                            for pl in lu.players:
                                if pl.own_proj is None:
                                    continue
                                own_pct = (
                                    pl.own_proj / 100.0
                                    if pl.own_proj > 1.0
                                    else float(pl.own_proj)
                                )
                                g = _g_curve_penalty(own_pct, pen_cfg)
                                gvals.append(g)
                            if gvals:
                                chalk_vals.append(float(np.mean(gvals)))
                                penalty_pts.append(float(lam * np.sum(gvals)))
                        if chalk_vals:
                            pen_diag["avg_chalk_index"] = float(np.mean(chalk_vals))
                        if penalty_pts:
                            pen_diag["avg_penalty_points"] = float(np.mean(penalty_pts))
                        pen_diag["applied"] = True
                _ep = diagnostics.get("ownership_penalty", {})
                _ep.update(pen_diag)
                diagnostics["ownership_penalty"] = _ep
        except Exception:
            # Non-fatal
            pass
        return lineups, diagnostics

    elif engine == "cp_sat_counts":
        print(
            f"🚀 Using CP-SAT Counts solver engine (PRP-14) (seed={seed}, site={site})"
        )
        try:
            from .solvers.cpsat_solver import solve_cpsat_iterative_counts
        except Exception as e:
            raise OptimizerError(
                code=ErrorCodes.CONFIG_ERROR,
                message=f"CP-SAT Counts engine unavailable: {e}",
                user_message="CP-SAT Counts engine is not available. Please install ortools or switch to CBC.",
                details={"import_error": str(e)},
            )

        lineups, diagnostics = solve_cpsat_iterative_counts(
            players, constraints, seed, site
        )
        # Merge DK ID diagnostics into solver diagnostics for consistency
        if not isinstance(diagnostics, dict):
            diagnostics = {}
        diagnostics.update(id_diagnostics)
        diagnostics.setdefault("engine", "cp_sat_counts")
        # Add ownership penalty diagnostics similar to CP-SAT
        try:
            pen_cfg = getattr(constraints, "ownership_penalty", None)
            if pen_cfg and pen_cfg.enabled:
                pen_diag: Dict[str, Any] = {
                    "enabled": True,
                    "mode": pen_cfg.mode,
                    "lambda_used": float(getattr(pen_cfg, "weight_lambda", 0.0) or 0.0),
                    "applied": False,
                    "reason": None,
                }
                any_own = any(p.get("own_proj") is not None for p in players)
                if not any_own:
                    pen_diag["applied"] = False
                    pen_diag["reason"] = "missing_or_invalid_own_proj"
                else:
                    lam = float(getattr(pen_cfg, "weight_lambda", 0.0) or 0.0)
                    if lam > 0 and lineups:
                        chalk_vals = []
                        penalty_pts = []
                        for lu in lineups:
                            gvals = []
                            for pl in lu.players:
                                if pl.own_proj is None:
                                    continue
                                own_pct = (
                                    pl.own_proj / 100.0
                                    if pl.own_proj > 1.0
                                    else float(pl.own_proj)
                                )
                                g = _g_curve_penalty(own_pct, pen_cfg)
                                gvals.append(g)
                            if gvals:
                                chalk_vals.append(float(np.mean(gvals)))
                                penalty_pts.append(float(lam * np.sum(gvals)))
                        if chalk_vals:
                            pen_diag["avg_chalk_index"] = float(np.mean(chalk_vals))
                        if penalty_pts:
                            pen_diag["avg_penalty_points"] = float(np.mean(penalty_pts))
                        pen_diag["applied"] = True
                _ep2 = diagnostics.get("ownership_penalty", {})
                _ep2.update(pen_diag)
                diagnostics["ownership_penalty"] = _ep2
        except Exception:
            pass
        return lineups, diagnostics

    # CBC (default) path
    print(f"🔧 Using CBC solver engine (seed={seed}, site={site})")

    # PRP-16: Handle ownership penalty "by_percent" mode
    ownership_penalty = constraints.ownership_penalty
    if (
        ownership_penalty
        and ownership_penalty.enabled
        and ownership_penalty.mode == "by_percent"
    ):

        print(
            f"🎯 Ownership penalty: by % off optimal (target: {ownership_penalty.target_offoptimal_pct:.1%})"
        )

        # Build projection map for off-optimal calculation
        proj_map = {p["player_id"]: p["proj"] for p in players}

        # Create build_and_solve function for lambda search
        def build_and_solve_fn(coeffs: Dict[str, float]) -> List[str]:
            # Build a temporary problem that uses the provided objective coefficients directly
            temp_problem, temp_var_index, temp_lp_variables, _ = build_problem(
                players, constraints, site, override_coeffs=coeffs
            )
            lineup_vars = solve_problem(
                temp_problem, temp_lp_variables, temp_var_index, seed
            )
            return [var_key[0] for var_key in lineup_vars] if lineup_vars else []

        # Find optimal lambda using bracket + bisection
        lam_used, achieved_pct, first_lineup_players = _find_lambda_by_percent(
            target_pct=ownership_penalty.target_offoptimal_pct,
            tol_pct=ownership_penalty.tol_offoptimal_pct,
            players=players,
            settings=ownership_penalty,
            build_and_solve_fn=build_and_solve_fn,
            proj_map=proj_map,
        )

        print(
            f"🎯 Lambda search result: λ={lam_used:.3f}, achieved {achieved_pct:.1%} off-optimal"
        )

        # Update penalty settings with found lambda for lineup generation
        ownership_penalty.weight_lambda = lam_used
        ownership_penalty.mode = "by_points"  # Switch to by_points for generation

    problem, var_index, lp_variables, base_objective = build_problem(
        players, constraints, site
    )

    # Generate lineups iteratively
    lineups: List[Lineup] = []
    for i in range(constraints.N_lineups):
        try:
            # Apply randomness for this iteration if user requested it, otherwise use base objective
            if constraints.randomness_pct > 0:
                apply_randomness_to_objective(
                    problem, lp_variables, var_index, constraints, seed + i
                )
            else:
                # Use base objective (no randomness when user sets 0%)
                problem.objective = base_objective

            lineup_vars = solve_problem(problem, lp_variables, var_index, seed)

            if not lineup_vars:
                # Infeasible - stop generating
                break

            lineup = convert_vars_to_lineup(lineup_vars, var_index, players, i + 1)
            lineups.append(lineup)

            # Add uniqueness constraint for next iteration
            if i < constraints.N_lineups - 1:
                add_uniqueness_constraint(
                    problem,
                    lp_variables,
                    lineup_vars,
                    constraints.unique_players,
                    f"Lineup_{i}_uniqueness",
                )

        except plp.PulpSolverError as e:
            if len(lineups) == 0:
                raise OptimizerError(
                    code=ErrorCodes.INFEASIBLE,
                    message=f"Solver failed: {str(e)}",
                    user_message="No valid lineups found. Try relaxing salary or team constraints.",
                    details={"solver_error": str(e), "generated_lineups": len(lineups)},
                )
            break

    if len(lineups) < constraints.N_lineups:
        # Partial generation - could be warning or info
        actual_count = len(lineups)
        if actual_count == 0:
            raise OptimizerError(
                code=ErrorCodes.INFEASIBLE,
                message="No feasible lineups found",
                user_message="No valid lineups found. Check salary limits and constraints.",
                details={"requested": constraints.N_lineups, "generated": 0},
            )

    # Build ownership penalty diagnostics (CBC)
    try:
        id_diagnostics.setdefault("engine", "cbc")
        pen_cfg = getattr(constraints, "ownership_penalty", None)
        if pen_cfg and pen_cfg.enabled:
            # Determine lambda used and percent-achieved if by_percent performed above
            lam_used = float(getattr(pen_cfg, "weight_lambda", 0.0) or 0.0)
            pen_diag: Dict[str, Any] = {
                "enabled": True,
                "mode": pen_cfg.mode,
                "lambda_used": lam_used,
                "applied": False,
                "reason": None,
            }
            # If by_percent flow was used earlier, try to infer achieved vs target from prints not available here;
            # we can recompute achieved for the first lineup
            try:
                if (
                    pen_cfg.mode == "by_points"
                    and "target_offoptimal_pct" in pen_cfg.__dict__
                ):
                    # no-op; legacy
                    pass
            except Exception:
                pass
            any_own = any(p.get("own_proj") is not None for p in players)
            if not any_own:
                pen_diag["applied"] = False
                pen_diag["reason"] = "missing_or_invalid_own_proj"
            else:
                # Compute averages over generated lineups
                if lam_used > 0 and lineups:
                    chalk_vals = []
                    penalty_pts = []
                    for lu in lineups:
                        gvals = []
                        for pl in lu.players:
                            if pl.own_proj is None:
                                continue
                            own_pct = (
                                pl.own_proj / 100.0
                                if pl.own_proj > 1.0
                                else float(pl.own_proj)
                            )
                            g = _g_curve_penalty(own_pct, pen_cfg)
                            gvals.append(g)
                        if gvals:
                            chalk_vals.append(float(np.mean(gvals)))
                            penalty_pts.append(float(lam_used * np.sum(gvals)))
                    if chalk_vals:
                        pen_diag["avg_chalk_index"] = float(np.mean(chalk_vals))
                    if penalty_pts:
                        pen_diag["avg_penalty_points"] = float(np.mean(penalty_pts))
                    pen_diag["applied"] = True
            # Optional debug info under DFS_DEBUG
            import os as _os

            if _os.environ.get("DFS_DEBUG"):
                try:
                    # Ownership snapshot: first 10 players
                    snap = []
                    for p in players[:10]:
                        own = p.get("own_proj")
                        if own is None:
                            continue
                        op = own / 100.0 if own > 1.0 else float(own)
                        gv = _g_curve_penalty(op, pen_cfg)
                        snap.append(
                            {
                                "name": p.get("name"),
                                "own_proj": float(op),
                                "g": float(gv),
                            }
                        )
                    # Objective sample from first lineup
                    obj_sample = None
                    if lineups:
                        lu0 = lineups[0]
                        proj_term = float(sum(pl.proj for pl in lu0.players))
                        gsum = 0.0
                        for pl in lu0.players:
                            if pl.own_proj is None:
                                continue
                            op = (
                                pl.own_proj / 100.0
                                if pl.own_proj > 1.0
                                else float(pl.own_proj)
                            )
                            gsum += float(_g_curve_penalty(op, pen_cfg))
                        penalty_term = float(lam_used * gsum)
                        obj_sample = {
                            "projection_term": proj_term,
                            "penalty_term": penalty_term,
                            "objective": proj_term - penalty_term,
                        }
                    pen_diag["debug"] = {
                        "weights_snapshot": snap,
                        "objective_sample": obj_sample,
                    }
                except Exception:
                    pass
            _ep3 = id_diagnostics.get("ownership_penalty", {})
            _ep3.update(pen_diag)
            id_diagnostics["ownership_penalty"] = _ep3
    except Exception:
        pass

    return lineups, id_diagnostics


def optimize_dk_strict(
    projections_path: str,
    constraints: Constraints,
    seed: int,
    player_ids_path: Optional[str] = None,
    engine: str = "cbc",
) -> Tuple[List[Lineup], Dict[str, Any]]:
    """
    DK-Strict optimizer using PRP-07 data loader

    This function enforces the PRP-07 contract:
    - Never use synthetic IDs
    - Only use repo-provided data from dk_data/
    - Fail fast if any player lacks a real DK ID

    Args:
        projections_path: Path to projections CSV (dk_data/projections.csv)
        constraints: Optimization constraints with DK-strict requirements
        seed: Random seed
        player_ids_path: Optional path to player IDs CSV (dk_data/player_ids.csv)

    Returns:
        Tuple of (lineups, diagnostics)

    Raises:
        RuntimeError: If any player lacks real DK ID (PRP-07 hard-fail contract)
        OptimizerError: For other optimization failures
    """
    try:
        # Load projections with DK-strict ID attachment
        projections_df = load_dk_strict_projections(projections_path, player_ids_path)

        # PRP-18.2: Normalize projections (ownership columns, etc.)
        projections_df, norm_info = _normalize_projections_df(projections_df)

        # Validate all players have real DK IDs
        validation = validate_dk_strict_data(projections_df)
        if not validation["is_valid"]:
            error_details = "; ".join(validation["errors"])
            raise RuntimeError(
                f"DK-strict validation failed: {error_details}. "
                f"All {validation['total_players']} players must have valid numeric DK IDs. "
                f"Update dk_data/player_ids.csv or projections with real DK IDs."
            )

        # Run optimizer with guaranteed DK IDs
        site: SiteType = "dk"  # PRP-07 is DK-specific
        lineups, diagnostics = optimize_with_diagnostics(
            projections_df, constraints, seed, site, None, engine
        )

        # Add DK-strict validation status to diagnostics
        diagnostics.update(
            {
                "dk_strict_mode": True,
                "dk_validation": validation,
                "data_source": f"DK-strict loader: {projections_path}",
            }
        )

        # PRP-18.2: Add normalization info to diagnostics for UI telemetry
        if norm_info and norm_info.get("ownership"):
            diagnostics.setdefault("normalization", {})["ownership"] = norm_info[
                "ownership"
            ]

        return lineups, diagnostics

    except RuntimeError as e:
        # Re-raise DK-strict failures directly
        raise e
    except Exception as e:
        # Wrap other errors as OptimizerError
        raise OptimizerError(
            code="DK_STRICT_FAILED",
            message=f"DK-strict optimization failed: {str(e)}",
            user_message=f"DK-strict mode failed: {str(e)}. Check dk_data/ files and try again.",
            details={
                "projections_path": projections_path,
                "player_ids_path": player_ids_path,
            },
        )


def optimize_to_dk_csv(
    projections_df: pd.DataFrame,
    constraints: Constraints,
    seed: int,
    player_ids_df: Optional[pd.DataFrame] = None,
) -> str:
    """
    Run the optimizer and return a DK-importable CSV string.

    Enforces the DK-Strict contract (PRP-06E):
    - Attaches real DK IDs (PRP-05) with validation and diagnostics
    - Converts lineups to a typed DataFrame
    - Validates lineups (all slots populated, IDs numeric, salary <= cap)
    - Exports exactly 8 DK IDs per lineup with header: PG,SG,SF,PF,C,G,F,UTIL

    Raises OptimizerError if validation fails or no valid lineups remain.
    """
    # Always run in DraftKings mode for this helper
    site: SiteType = "dk"  # type: ignore

    # Run optimizer with diagnostics and DK ID attachment
    lineups, id_diagnostics = optimize_with_diagnostics(
        projections_df, constraints, seed, site, player_ids_df
    )

    if not lineups:
        raise OptimizerError(
            code=ErrorCodes.INFEASIBLE,
            message="No lineups generated",
            user_message="No valid lineups found. Try relaxing constraints or increasing projection minimum.",
            details={
                "generated_lineups": 0,
                "id_match_rate": id_diagnostics.get("success_rate"),
            },
        )

    # Build typed DataFrame and validate against DK-Strict spec
    grid_df = lineups_to_grid_df(lineups, sport="nba", site=site)
    valid_df, errors = validate_grid_df(grid_df, sport="nba", site=site)

    if errors:
        # Summarize first few errors for the user
        preview = "; ".join(
            [
                f"Lineup {e.get('lineup_id')}: {', '.join(e.get('errors', [])[:2])}"
                for e in errors[:3]
            ]
        )
        raise OptimizerError(
            code="DK_STRICT_VALIDATION_FAILED",
            message=f"DK-Strict validation failed for {len(errors)} lineups",
            user_message=f"Cannot export DK CSV: {len(errors)} lineups failed validation. {preview}",
            details={"errors": errors},
        )

    # Export exactly the DK IDs in slot order
    return grid_df_to_dk_csv(valid_df, sport="nba", site=site)


def optimize_dk_strict_to_csv(
    projections_path: str,
    constraints: Constraints,
    seed: int,
    player_ids_path: Optional[str] = None,
    engine: str = "cbc",
) -> str:
    """
    DK-Strict optimization direct to CSV export

    This function implements the complete PRP-07 flow:
    1. Load projections with hard-fail DK ID validation
    2. Run optimization with DK-strict constraints
    3. Validate lineup grid against DK requirements
    4. Export exactly DK IDs in slot order

    Args:
        projections_path: Path to projections CSV (dk_data/projections.csv)
        constraints: Optimization constraints
        seed: Random seed
        player_ids_path: Optional path to player IDs CSV (dk_data/player_ids.csv)

    Returns:
        CSV string ready for DraftKings import

    Raises:
        RuntimeError: If any player lacks real DK ID (PRP-07 hard-fail)
        OptimizerError: If validation fails or no valid lineups
    """
    # Run DK-strict optimization
    lineups, diagnostics = optimize_dk_strict(
        projections_path, constraints, seed, player_ids_path, engine
    )

    if not lineups:
        raise OptimizerError(
            code=ErrorCodes.INFEASIBLE,
            message="No lineups generated in DK-strict mode",
            user_message="No valid lineups found. Check constraints and projections data.",
            details=diagnostics,
        )

    # Convert to grid DataFrame and validate
    grid_df = lineups_to_grid_df(lineups, sport="nba", site="dk")
    valid_df, errors = validate_grid_df(grid_df, sport="nba", site="dk")

    if errors:
        error_summary = "; ".join(
            [
                f"Lineup {e.get('lineup_id')}: {', '.join(e.get('errors', [])[:2])}"
                for e in errors[:3]
            ]
        )
        raise OptimizerError(
            code="DK_STRICT_VALIDATION_FAILED",
            message=f"DK-Strict validation failed for {len(errors)} lineups",
            user_message=f"Cannot export DK CSV: {len(errors)} lineups failed validation. {error_summary}",
            details={"errors": errors, "diagnostics": diagnostics},
        )

    # Export DK-compatible CSV
    return grid_df_to_dk_csv(valid_df, sport="nba", site="dk")


def validate_projections(df: pd.DataFrame, site: SiteType) -> None:
    """Validate projections DataFrame has required columns"""
    required_cols = ["name", "team", "position", "salary", "proj_fp"]
    missing_cols = [col for col in required_cols if col not in df.columns]

    if missing_cols:
        raise OptimizerError(
            code=ErrorCodes.MISSING_COLUMNS,
            message=f"Missing required columns: {missing_cols}",
            user_message=f"Required columns missing: {', '.join(missing_cols)}. Please check your projections data.",
            details={
                "missing_columns": missing_cols,
                "available_columns": list(df.columns),
            },
        )


def attach_player_ids_if_available(
    df: pd.DataFrame, site: SiteType, ids_df: Optional[pd.DataFrame]
) -> Tuple[pd.DataFrame, Dict[str, Any]]:
    """
    Attach real DK player IDs when available, with comprehensive diagnostics

    Returns:
        Tuple of (updated_df, diagnostics_dict)
    """
    diagnostics = {
        "total_players": len(df),
        "matched_players": 0,
        "data_source": None,
        "errors": [],
        "warnings": [],
        "failed_name_matching": 0,
        "failed_position_validation": 0,
        "success_rate": 0.0,
    }

    if site != "dk":
        diagnostics["warnings"].append(f"Non-DK site ({site}) - skipping ID attachment")
        return df, diagnostics

    # If dk_id is already in the DataFrame, return as-is
    if "dk_id" in df.columns:
        existing_ids = df["dk_id"].notna().sum()
        diagnostics.update(
            {
                "matched_players": existing_ids,
                "success_rate": existing_ids / len(df) * 100,
                "data_source": "pre-existing_column",
                "warnings": ["DK IDs already present in projections data"],
            }
        )
        return df, diagnostics

    # Try provided IDs DF first; else load from disk
    ids = ids_df
    if ids is None:
        default_path = "dk_data/player_ids.csv"
        try:
            ids = pd.read_csv(default_path)
            diagnostics["data_source"] = default_path
        except FileNotFoundError:
            diagnostics["errors"].append(f"Player IDs file not found: {default_path}")
            return df, diagnostics
        except Exception as e:
            diagnostics["errors"].append(f"Error loading player IDs: {str(e)}")
            return df, diagnostics
    else:
        diagnostics["data_source"] = "provided_dataframe"

    # Validate required columns
    required_cols = ["ID", "Name", "TeamAbbrev", "Position"]
    missing_cols = [col for col in required_cols if col not in ids.columns]
    if missing_cols:
        diagnostics["errors"].append(
            f"Missing required columns in player IDs: {missing_cols}"
        )
        return df, diagnostics

    print(
        f"🔍 DK ID Matching: {len(df)} players in projections, {len(ids)} IDs available"
    )

    # Enhanced normalization for matching
    tmp = df.copy()
    tmp["__name_norm"] = tmp["name"].apply(normalize_player_name)
    tmp["__team_norm"] = (
        tmp["team"]
        .astype(str)
        .str.upper()
        .map(lambda t: TEAM_REPLACEMENT_DICT.get(t, t))
    )

    ids = ids.rename(
        columns={
            "ID": "dk_id",
            "Name": "name_ids",
            "TeamAbbrev": "team_ids",
            "Position": "pos_ids",
        }
    )
    ids["__name_norm"] = ids["name_ids"].apply(normalize_player_name)
    ids["__team_norm"] = (
        ids["team_ids"]
        .astype(str)
        .str.upper()
        .map(lambda t: TEAM_REPLACEMENT_DICT.get(t, t))
    )
    ids["__pos_list"] = ids["pos_ids"].astype(str).str.split("/")

    # Exact merge on normalized name + team
    merged = tmp.merge(
        ids[
            [
                "__name_norm",
                "__team_norm",
                "dk_id",
                "__pos_list",
                "name_ids",
                "team_ids",
            ]
        ],
        on=["__name_norm", "__team_norm"],
        how="left",
    )

    # Count initial exact matches
    initial_matches = merged["dk_id"].notna().sum()

    # Attempt fuzzy matching for remaining unmatched players
    if initial_matches < len(df) and FUZZY_MATCHING_AVAILABLE:
        fuzzy_matches = find_fuzzy_matches(merged, ids)

        if not fuzzy_matches.empty:
            # Apply fuzzy matches
            for _, match in fuzzy_matches.iterrows():
                idx = match["proj_index"]
                merged.at[idx, "dk_id"] = match["dk_id"]

            fuzzy_match_count = len(fuzzy_matches)
            initial_matches += fuzzy_match_count
            diagnostics["warnings"].append(
                f"Applied {fuzzy_match_count} fuzzy name matches"
            )

    diagnostics["failed_name_matching"] = len(df) - initial_matches

    # Validate position overlap
    def has_position_overlap(row):
        if pd.isna(row.get("dk_id")):
            return False
        proj_positions = [p.strip() for p in str(row["position"]).split("/")]
        id_positions = row["__pos_list"] if isinstance(row["__pos_list"], list) else []
        return any(p in id_positions for p in proj_positions)

    # Clear dk_id where positions don't overlap and track failures
    mask_bad_pos = merged["dk_id"].notna() & ~merged.apply(has_position_overlap, axis=1)
    position_failures = mask_bad_pos.sum()
    diagnostics["failed_position_validation"] = position_failures

    if position_failures > 0:
        failed_players = merged.loc[
            mask_bad_pos, ["name", "position", "name_ids", "pos_ids"]
        ].head(5)
        diagnostics["warnings"].append(
            f"Position validation failed for {position_failures} players"
        )
        for _, row in failed_players.iterrows():
            diagnostics["warnings"].append(
                f"  {row['name']} ({row['position']}) vs {row['name_ids']} ({row['pos_ids']})"
            )

    merged.loc[mask_bad_pos, "dk_id"] = pd.NA

    # Final match statistics
    final_matches = merged["dk_id"].notna().sum()
    diagnostics.update(
        {
            "matched_players": final_matches,
            "success_rate": final_matches / len(df) * 100,
        }
    )

    # Generate actionable guidance
    if final_matches == 0:
        diagnostics["errors"].append(
            "CRITICAL: Zero DK IDs matched - lineups will not be DK-compatible"
        )
        if diagnostics["failed_name_matching"] > 0:
            diagnostics["errors"].append(
                "• Check player name formatting in projections vs player_ids.csv"
            )
            diagnostics["errors"].append(
                "• Verify team abbreviations match between files"
            )
        if len(ids) == 0:
            diagnostics["errors"].append("• Player IDs file is empty")
    elif final_matches < len(df) * 0.95:  # Less than 95% match rate
        diagnostics["warnings"].append(
            f"Low match rate: {final_matches}/{len(df)} ({diagnostics['success_rate']:.1f}%)"
        )
        unmatched = merged[merged["dk_id"].isna()]["name"].head(10).tolist()
        diagnostics["warnings"].append(f"Unmatched players: {', '.join(unmatched[:5])}")

    # Log detailed results
    print(
        f"📊 Match Results: {final_matches}/{len(df)} ({diagnostics['success_rate']:.1f}%) successful"
    )
    if diagnostics["failed_name_matching"] > 0:
        print(
            f"❌ Name/Team matching failed: {diagnostics['failed_name_matching']} players"
        )
    if diagnostics["failed_position_validation"] > 0:
        print(
            f"⚠️  Position validation failed: {diagnostics['failed_position_validation']} players"
        )

    # Clean up temporary columns
    result_df = merged.drop(
        columns=["__name_norm", "__team_norm", "__pos_list", "name_ids", "team_ids"],
        errors="ignore",
    )
    return result_df, diagnostics


def convert_projections_to_players(df: pd.DataFrame, proj_min: float) -> List[Dict]:
    """Convert DataFrame to player dictionary format"""
    players = []

    for _, row in df.iterrows():
        if float(row["proj_fp"]) < proj_min:
            continue

        # Standardize team names
        team = row["team"].upper()
        if team in TEAM_REPLACEMENT_DICT:
            team = TEAM_REPLACEMENT_DICT[team]

        # Handle multi-position players (e.g., "PG/SG")
        positions = [pos.strip() for pos in str(row["position"]).split("/")]

        # Create stable player ID - prefer real IDs, with hash for collision avoidance
        name = str(row["name"])
        salary = int(str(row["salary"]).replace(",", ""))

        # Try to use existing player ID columns first, then generate stable ID
        dk_id = row.get("dk_id")
        if pd.notna(dk_id):
            player_id = str(int(float(dk_id)))
        else:
            player_id = (
                str(row.get("player_id", "")).strip()
                or str(row.get("fd_id", "")).strip()
                or f"{name}_{team}_{salary}_{hash(name) & 0xffff}"
            )

        # PRP-16: Handle ownership data - check both 'own%' and 'own_proj' columns
        own_proj = None
        if "own%" in row and pd.notna(row["own%"]):
            own_proj = float(row["own%"])
        elif "own_proj" in row and pd.notna(row["own_proj"]):
            own_proj = float(row["own_proj"])

        player = {
            "name": name,  # Keep original name for rule matching
            "team": team,
            "positions": positions,
            "salary": salary,
            "proj": float(row["proj_fp"]),
            "own_proj": own_proj,  # PRP-16: Ownership percentage for penalty calculation
            "stddev": float(row.get("stddev", 0)) if "stddev" in row else None,
            "minutes": float(row.get("minutes", 0)) if "minutes" in row else None,
            "player_id": player_id,  # Deterministic and collision-resistant ID
            "dk_id": (
                str(int(float(dk_id))) if pd.notna(dk_id) else None
            ),  # Real DK ID if available
        }

        players.append(player)

    return players


def build_problem(
    players: List[Dict],
    constraints: Constraints,
    site: SiteType,
    override_coeffs: Optional[Dict[str, float]] = None,
) -> Tuple[plp.LpProblem, Dict, Dict, plp.LpAffineExpression]:
    """
    Build optimization problem with stable variable ordering

    Returns:
        (problem, variable_index, lp_variables) tuple
    """
    problem = plp.LpProblem("NBA_Optimizer", plp.LpMaximize)

    # Create variables with stable ordering by (player_id, position)
    lp_variables = {}
    var_index = {}  # Maps variable tuple to player info

    # Sort players for deterministic ordering
    sorted_players = sorted(players, key=lambda p: (p["player_id"], p["name"]))

    for player in sorted_players:
        # Add eligible positions based on site
        eligible_positions = get_eligible_positions(player["positions"], site)

        for pos in eligible_positions:
            var_key = (player["player_id"], pos)
            # Sanitize player name to prevent solver issues with special characters
            safe_name = re.sub(r"[^A-Za-z0-9_]", "_", player["name"])
            var_name = f"{safe_name}_{pos}_{player['player_id'][:8]}"

            lp_variables[var_key] = plp.LpVariable(name=var_name, cat=plp.LpBinary)
            var_index[var_key] = player

    # Set objective - maximize projected points (with ownership penalty support)
    ownership_penalty = constraints.ownership_penalty

    if override_coeffs is not None:
        # Directly use provided coefficients (typically used during λ search)
        objective_terms = []
        for var_key, variable in lp_variables.items():
            pid = var_index[var_key]["player_id"]
            coeff = override_coeffs.get(pid, var_index[var_key]["proj"])
            objective_terms.append(coeff * variable)
        base_objective = plp.lpSum(objective_terms)
    elif (
        ownership_penalty
        and ownership_penalty.enabled
        and ownership_penalty.mode == "by_points"
        and ownership_penalty.weight_lambda > 0
    ):
        # Apply ownership penalty in "by_points" mode
        penalty_terms = []
        for var_key, variable in lp_variables.items():
            player = var_index[var_key]
            base_proj = player["proj"]
            if player.get("own_proj") is not None:
                own_pct = (
                    player["own_proj"] / 100.0
                    if player["own_proj"] > 1.0
                    else player["own_proj"]
                )
                penalty = ownership_penalty.weight_lambda * _g_curve_penalty(
                    own_pct, ownership_penalty
                )
                effective_proj = base_proj - penalty
            else:
                effective_proj = base_proj
            penalty_terms.append(effective_proj * variable)
        base_objective = plp.lpSum(penalty_terms)
    else:
        # Standard objective without penalty
        base_objective_terms = [
            var_index[var_key]["proj"] * variable
            for var_key, variable in lp_variables.items()
        ]
        base_objective = plp.lpSum(base_objective_terms)

    problem.objective = base_objective

    # Add constraints
    add_salary_constraints(problem, lp_variables, var_index, constraints, site)
    add_position_constraints(problem, lp_variables, var_index, site)
    add_team_constraints(problem, lp_variables, var_index, constraints, site)
    add_player_constraints(problem, lp_variables, var_index, constraints)

    return problem, var_index, lp_variables, base_objective


def apply_randomness_to_objective(
    problem: plp.LpProblem,
    lp_variables: Dict,
    var_index: Dict,
    constraints: Constraints,
    iteration_seed: int,
):
    """Apply randomness to the objective function for lineup diversity"""
    # Set seed for this specific iteration
    np.random.seed(iteration_seed)

    # Create new randomized objective
    objective_terms = []
    ownership_penalty = constraints.ownership_penalty
    use_penalty = (
        ownership_penalty
        and ownership_penalty.enabled
        and ownership_penalty.mode == "by_points"
        and ownership_penalty.weight_lambda > 0
    )
    for var_key, variable in lp_variables.items():
        player = var_index[var_key]
        if player.get("stddev") and constraints.randomness_pct > 0:
            randomized_proj = np.random.normal(
                player["proj"], player["stddev"] * constraints.randomness_pct / 100
            )
        else:
            randomized_proj = player["proj"]
        # subtract ownership penalty if applicable
        if use_penalty and player.get("own_proj") is not None:
            own_pct = (
                player["own_proj"] / 100.0
                if player["own_proj"] > 1.0
                else player["own_proj"]
            )
            penalty = ownership_penalty.weight_lambda * _g_curve_penalty(
                own_pct, ownership_penalty
            )
            effective_proj = randomized_proj - penalty
        else:
            effective_proj = randomized_proj
        objective_terms.append(effective_proj * variable)

    problem.objective = plp.lpSum(objective_terms)


def get_eligible_positions(player_positions: List[str], site: SiteType) -> List[str]:
    """Get all eligible lineup positions for a player in deterministic order"""
    # Always return positions in the same order for deterministic variable creation
    base = [pos for pos in ["PG", "SG", "SF", "PF", "C"] if pos in player_positions]

    if site == "dk":
        # DraftKings position eligibility - add in fixed order
        if any(pos in ("PG", "SG") for pos in base):
            base.append("G")
        if any(pos in ("SF", "PF") for pos in base):
            base.append("F")
        base.append("UTIL")  # All players eligible for UTIL

    return base


def add_salary_constraints(
    problem: plp.LpProblem,
    lp_variables: Dict,
    var_index: Dict,
    constraints: Constraints,
    site: SiteType,
):
    """Add salary constraints"""
    salary_sum = plp.lpSum(
        var_index[var_key]["salary"] * variable
        for var_key, variable in lp_variables.items()
    )

    # Max salary constraint
    max_sal = constraints.max_salary or (50000 if site == "dk" else 60000)
    problem += salary_sum <= max_sal, "Max_Salary"

    # Min salary constraint - only if explicitly provided (avoid tight defaults)
    if constraints.min_salary is not None:
        problem += salary_sum >= constraints.min_salary, "Min_Salary"


def add_position_constraints(
    problem: plp.LpProblem, lp_variables: Dict, var_index: Dict, site: SiteType
):
    """Add position-specific constraints"""
    if site == "dk":
        # DraftKings: PG, SG, SF, PF, C, G, F, UTIL
        positions = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
        for pos in positions:
            position_sum = plp.lpSum(
                variable
                for var_key, variable in lp_variables.items()
                if var_key[1] == pos
            )
            problem += position_sum == 1, f"Position_{pos}"

    else:  # FanDuel
        # FanDuel: 2 each of PG, SG, SF, PF + 1 C
        for pos in ["PG", "SG", "SF", "PF"]:
            position_sum = plp.lpSum(
                variable
                for var_key, variable in lp_variables.items()
                if var_key[1] == pos
            )
            problem += position_sum == 2, f"Position_{pos}"

        # Center constraint
        center_sum = plp.lpSum(
            variable for var_key, variable in lp_variables.items() if var_key[1] == "C"
        )
        problem += center_sum == 1, "Position_C"

    # Each player can only be selected once
    player_sums = {}
    for var_key, variable in lp_variables.items():
        player_id = var_key[0]
        if player_id not in player_sums:
            player_sums[player_id] = []
        player_sums[player_id].append(variable)

    for player_id, variables in player_sums.items():
        problem += plp.lpSum(variables) <= 1, f"Player_{player_id}_once"


def add_team_constraints(
    problem: plp.LpProblem,
    lp_variables: Dict,
    var_index: Dict,
    constraints: Constraints,
    site: SiteType,
):
    """Add team-based constraints"""
    # Team limits
    teams = set(player["team"] for player in var_index.values())

    for team in teams:
        team_variables = [
            variable
            for var_key, variable in lp_variables.items()
            if var_index[var_key]["team"] == team
        ]

        # Specific team limits
        if team in constraints.team_limits:
            limit = constraints.team_limits[team]
            problem += plp.lpSum(team_variables) <= limit, f"Team_{team}_limit_{limit}"

        # Global team limit - default to 4 for DK if not specified
        global_limit = constraints.global_team_limit
        if global_limit is None and site == "dk":
            global_limit = 4  # DK convention

        if global_limit is not None:
            # Skip for FanDuel if global limit >= 4 (their max is 4 anyway)
            if not (site == "fd" and global_limit >= 4):
                problem += (
                    plp.lpSum(team_variables) <= global_limit,
                    f"Team_{team}_global_{global_limit}",
                )


def add_player_constraints(
    problem: plp.LpProblem,
    lp_variables: Dict,
    var_index: Dict,
    constraints: Constraints,
):
    """Add at_least and at_most player constraints"""
    # At least constraints
    for rule in constraints.at_least:
        matching_variables = [
            variable
            for var_key, variable in lp_variables.items()
            if var_index[var_key]["name"] in rule.players
        ]
        if matching_variables:
            problem += (
                plp.lpSum(matching_variables) >= rule.count,
                f"AtLeast_{rule.count}_{hash(tuple(rule.players))}",
            )

    # At most constraints
    for rule in constraints.at_most:
        matching_variables = [
            variable
            for var_key, variable in lp_variables.items()
            if var_index[var_key]["name"] in rule.players
        ]
        if matching_variables:
            problem += (
                plp.lpSum(matching_variables) <= rule.count,
                f"AtMost_{rule.count}_{hash(tuple(rule.players))}",
            )


def solve_problem(
    problem: plp.LpProblem, lp_variables: Dict, var_index: Dict, seed: int
) -> Optional[List[Tuple]]:
    """
    Solve optimization problem with CBC solver configuration

    Returns:
        List of selected variable keys or None if infeasible
    """
    try:
        # Use CBC solver with random seed for deterministic tie-breaking
        solver = plp.PULP_CBC_CMD(
            msg=False, timeLimit=9, options=[f"randomSeed {seed}"]
        )
        problem.solve(solver)

        if plp.LpStatus[problem.status] != "Optimal":
            return None

        # Get selected variables using our variable tracking
        selected_vars = []
        for var_key, variable in lp_variables.items():
            if variable.varValue and variable.varValue > 0.5:
                selected_vars.append(var_key)  # var_key is (player_id, pos)

        return selected_vars

    except Exception as e:
        raise OptimizerError(
            code=ErrorCodes.SOLVER_TIMEOUT,
            message=f"Solver error: {str(e)}",
            user_message="Optimization failed. Try reducing lineup count or relaxing constraints.",
            details={"solver_error": str(e)},
        )


def convert_vars_to_lineup(
    var_keys: List[Tuple], var_index: Dict, players: List[Dict], lineup_id: int
) -> Lineup:
    """Convert selected variables to Lineup object"""
    lineup_players = []
    total_salary = 0
    total_proj = 0

    for player_id, pos in var_keys:
        var_key = (player_id, pos)
        if var_key in var_index:
            player_data = var_index[var_key]

            player = Player(
                player_id=player_data["player_id"],
                name=player_data["name"],
                pos=pos,
                team=player_data["team"],
                salary=player_data["salary"],
                proj=player_data["proj"],
                dk_id=player_data.get("dk_id"),
                own_proj=player_data.get("own_proj"),
                stddev=player_data.get("stddev"),
                minutes=player_data.get("minutes"),
            )

            lineup_players.append(player)
            total_salary += player.salary
            total_proj += player.proj

    return Lineup(
        lineup_id=lineup_id,
        total_proj=round(total_proj, 2),
        total_salary=total_salary,
        players=lineup_players,
    )


def add_uniqueness_constraint(
    problem: plp.LpProblem,
    lp_variables: Dict,
    selected_vars: List[Tuple],
    unique_count: int,
    constraint_name: str,
):
    """Add constraint to ensure lineup uniqueness at the player level"""
    # Only skip if unique_count is 0 or negative (no uniqueness required)
    if unique_count <= 0:
        return

    # Get unique player IDs from the selected lineup
    selected_player_ids = {var_key[0] for var_key in selected_vars}

    # For each player in the previous lineup, find ALL their position variables
    # This prevents selecting the same player in any position
    player_vars = [
        variable
        for var_key, variable in lp_variables.items()
        if var_key[0] in selected_player_ids
    ]

    if player_vars:
        # Must have at least unique_count different players
        problem += (
            plp.lpSum(player_vars) <= len(selected_player_ids) - unique_count,
            constraint_name,
        )


# Legacy class wrapper for backward compatibility
class NBA_Optimizer:
    """Legacy class wrapper - use optimize() function instead"""

    def __init__(self, site=None, num_lineups=0, num_uniques=1):
        self.site = site
        self.num_lineups = num_lineups
        self.num_uniques = num_uniques
        print(
            "Warning: NBA_Optimizer class is deprecated. Use optimize() function instead."
        )

    # PRP-Ownership-Normalization: Pre-solve guards, export exact solver inputs, and run_id
    try:
        # Generate run id and attach to diagnostics
        RUN_ID = str(int(time.time()))

        def _df_hash(df: pd.DataFrame) -> str:
            try:
                return hashlib.sha256(
                    pd.util.hash_pandas_object(df, index=True).values
                ).hexdigest()
            except Exception:
                return uuid.uuid4().hex

        id_diagnostics.setdefault("normalization", {}).setdefault("ownership", {})[
            "run_id"
        ] = RUN_ID

        # Required columns just before solve (pre-contract)
        required = {"name", "team", "position", "salary", "proj_fp"}
        missing = required - set(projections_df.columns)
        if missing:
            raise OptimizerError(
                code=ErrorCodes.MISSING_COLUMNS,
                message=f"Missing columns pre-solve: {missing}",
                user_message=f"Required columns missing pre-solve: {', '.join(sorted(missing))}",
                details={"missing": sorted(list(missing))},
            )

        # Normalization guard only if user enabled ownership penalty
        try:
            pen_cfg = getattr(constraints, "ownership_penalty", None)
            if pen_cfg and getattr(pen_cfg, "enabled", False):
                mx = (
                    float(projections_df["own_proj"].max())
                    if "own_proj" in projections_df.columns
                    else float("inf")
                )
                id_diagnostics["normalization"]["ownership"][
                    "own_proj_max_pre_solve"
                ] = mx
                assert mx <= 1.000001, f"own_proj not normalized (max={mx})"
        except Exception as _e:
            # If assertion fails, raise as OptimizerError to surface cleanly
            raise OptimizerError(
                code=ErrorCodes.INVALID_PROJECTIONS,
                message=str(_e),
                user_message="Ownership column appears non-normalized. Ensure own_proj is on [0,1] scale.",
                details={"max": mx if "mx" in locals() else None},
            )

        # Solver Input Contract: export exact solver inputs and manifest
        try:
            df_contract = projections_df.copy()
            # Canonicalize FPts column for export/contract
            rename_map = {
                "FPTS": "FPts",
                "fpts": "FPts",
                "proj": "FPts",
                "projection": "FPts",
                "Projection": "FPts",
            }
            df_contract = df_contract.rename(
                columns={
                    k: v for k, v in rename_map.items() if k in df_contract.columns
                }
            )
            if "FPts" not in df_contract.columns and "proj_fp" in df_contract.columns:
                df_contract["FPts"] = df_contract["proj_fp"]
            # Ensure player_id column exists for contract hashing
            if "player_id" not in df_contract.columns:
                # Prefer dk_id when present, otherwise synthesize stable-ish ID similar to convert_projections_to_players
                def _mk_pid(row):
                    dkid = row.get("dk_id")
                    if pd.notna(dkid):
                        try:
                            return str(int(float(dkid)))
                        except Exception:
                            return str(dkid)
                    name = str(row.get("name", "")).strip()
                    team = str(row.get("team", "")).strip().upper()
                    salary = row.get("salary")
                    try:
                        salary = int(str(salary).replace(",", ""))
                    except Exception:
                        salary = str(salary)
                    return f"{name}_{team}_{salary}_{hash(name) & 0xffff}"

                df_contract["player_id"] = df_contract.apply(_mk_pid, axis=1)

            # Contract required columns
            contract_required = {
                "player_id",
                "name",
                "team",
                "position",
                "salary",
                "FPts",
                "own_proj",
            }
            miss2 = contract_required - set(df_contract.columns)
            assert not miss2, f"[CONTRACT] Missing columns pre-solve: {miss2}"
            # Ownership must be in [0,1]
            mx = (
                float(df_contract["own_proj"].max())
                if "own_proj" in df_contract.columns
                else float("inf")
            )
            assert mx <= 1.000001, f"[CONTRACT] own_proj not normalized (max={mx})"
            # Contract hash over deterministic subset
            cols_for_hash = [
                "player_id",
                "FPts",
                "own_proj",
                "salary",
                "team",
                "position",
            ]
            key = (
                df_contract[cols_for_hash].sort_values("player_id").to_csv(index=False)
            )
            contract_hash = hashlib.sha256(key.encode()).hexdigest()

            # Build manifest (always available in diagnostics)
            manifest = {
                "run_id": RUN_ID,
                "contract_hash": contract_hash,
                "rows": int(df_contract.shape[0]),
                "cols": sorted(df_contract.columns.tolist()),
                "own_proj_max": mx,
                "note": "This CSV is the exact DataFrame passed into the solver.",
            }

            # Diagnostics (include CSV content in-memory so UI can write single-location export)
            id_diagnostics.setdefault("solver_contract", {})["run_id"] = RUN_ID
            id_diagnostics["solver_contract"]["contract_hash"] = contract_hash
            try:
                id_diagnostics["solver_contract"]["csv"] = df_contract.to_csv(
                    index=False
                )
                id_diagnostics["solver_contract"]["manifest"] = manifest
            except Exception:
                pass

            # Optional: write artifacts to disk if explicitly enabled
            try:
                if os.environ.get("DFS_WRITE_CONTRACT_ARTIFACTS", "0") in (
                    "1",
                    "true",
                    "True",
                ):
                    out_dir = os.path.join("artifacts", f"run_{RUN_ID}")
                    os.makedirs(out_dir, exist_ok=True)
                    solver_csv = os.path.join(out_dir, "solver_inputs.csv")
                    df_contract.to_csv(solver_csv, index=False)
                    with open(os.path.join(out_dir, "manifest.json"), "w") as f:
                        import json as _json

                        _json.dump(manifest, f, indent=2)
                    id_diagnostics["solver_contract"]["solver_inputs_path"] = solver_csv
            except Exception:
                pass
            # Backcompat fields used by UI pre-PRP
            id_diagnostics.setdefault("normalization", {}).setdefault("ownership", {})[
                "projections_used_hash"
            ] = _df_hash(df_contract)
            print(
                f"[CONTRACT] run={RUN_ID} rows={df_contract.shape[0]} own_max={mx:.3f} hash={contract_hash[:12]}"
            )
        except AssertionError as _ae:
            # Surface contract failures clearly
            id_diagnostics.setdefault("solver_contract", {})
            id_diagnostics["solver_contract"]["error"] = str(_ae)
            print(f"[CONTRACT][ERROR] {str(_ae)}")
            raise OptimizerError(
                code=ErrorCodes.INVALID_PROJECTIONS,
                message=str(_ae),
                user_message="Solver input contract failed: missing columns or non-normalized ownership.",
                details={"error": str(_ae)},
            )
        except Exception as _ue:
            # Do not silently swallow unexpected issues; attach to diagnostics and log
            try:
                id_diagnostics.setdefault("solver_contract", {})
                id_diagnostics["solver_contract"]["error"] = str(_ue)
                print(f"[CONTRACT][UNEXPECTED] {str(_ue)}")
            except Exception:
                pass
    except OptimizerError:
        raise
    except Exception:
        pass
</file>

<file path="processes/optimizer/_legacy/optimize.py">
"""
NBA DFS Lineup Optimizer - Streamlit UI
"""

# TODO(PRP-2L): De-UI — Streamlit dependency; UI shell only
import streamlit as st
import pandas as pd
import time
import json
import uuid
import hashlib
from datetime import datetime
from pathlib import Path
import sys
import os
import numpy as np
from collections import Counter

# Add src to path for imports
# TODO(PRP-2L): De-UI — path hack to import legacy backend modules; replace with proper package imports in adapter
sys.path.append(os.path.join(os.path.dirname(__file__), "../../"))

from backend.nba_optimizer_functional import (
    optimize_with_diagnostics,
    optimize_dk_strict,
)
from backend.types import Constraints, OptimizerError, GroupRule
from backend.dk_strict_results import (
    lineups_to_grid_df,
    validate_grid_df,
    grid_df_to_dk_csv,
)

# TODO(PRP-2L): De-UI — AG Grid UI dependency; not needed for headless adapter
from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode, DataReturnMode, JsCode
from backend.orb_export import write_orb_bundle
from io_facade.run_io import (
    load_pool,
    load_bases_long,
    save_pool,
    save_bases_long,
    save_variants,
)  # PRP-PIO
from frontend.components.compare_utils import (
    hash_constraints_from_artifact,
    projection_stats,
    topN_jaccard,
    exposure_table,
    stack_freqs,
    calculate_exposure_delta,
    calculate_stack_delta,
    read_export_run,
    try_join_ownership,
    format_run_label,
    generate_run_id,
    check_same_run,
    jaccard_pairwise,
    jaccard_pool,
    exposure_delta,
    stack_delta,
    normalize_grid_columns,
    load_export_ownership,
    try_join_ownership_with_data,
)

# Enhanced AG Grid theme CSS - Reused from csv_ingest_app.py patterns
# TODO(PRP-2L): De-UI — UI CSS; move to UI layer
AGGRID_THEME_CSS = """
<style>
/* Custom AG Grid Theme - Aggressive override for streamlit theme */
div.ag-theme-streamlit,
.stAgGrid div.ag-theme-streamlit,
[data-testid="stAgGrid"] div.ag-theme-streamlit {
    --ag-background-color: #1f2836 !important;
    --ag-header-background-color: #1f2836 !important;
    --ag-odd-row-background-color: #111418 !important;
    --ag-foreground-color: #FFF !important;
    --ag-header-foreground-color: #FFF !important;
    --ag-border-color: transparent !important;
    --ag-row-border-color: transparent !important;
    --ag-font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Oxygen-Sans", Ubuntu, Cantarell, "Helvetica Neue", sans-serif !important;
    --ag-header-font-size: 14px !important;
    --ag-spacing: 5px !important;
    --ag-cell-horizontal-padding: 8px !important;
    --ag-row-hover-color: #2a3441 !important;
    --ag-selected-row-background-color: #3b4c63 !important;
    --ag-header-column-separator-color: transparent !important;
    --ag-checkbox-background-color: #1f2836 !important;
    --ag-checkbox-checked-color: #4F8BF9 !important;
    background-color: #1f2836 !important;
    color: #FFF !important;
}

/* Force all elements */
div.ag-theme-streamlit * {
    border-color: transparent !important;
}

div.ag-theme-streamlit .ag-root-wrapper {
    background-color: #1f2836 !important;
    color: #FFF !important;
}

div.ag-theme-streamlit .ag-header {
    background-color: #1f2836 !important;
    color: #FFF !important;
    border-bottom: 1px solid #3b4c63 !important;
}

div.ag-theme-streamlit .ag-header-cell {
    background-color: #1f2836 !important;
    color: #FFF !important;
    font-weight: 600 !important;
    border-right: none !important;
}

div.ag-theme-streamlit .ag-cell {
    background-color: #1f2836 !important;
    color: #FFF !important;
    border: none !important;
}

/* Numeric column alignment */
div.ag-theme-streamlit .ag-cell.ag-cell-numeric {
    text-align: right !important;
    font-variant-numeric: tabular-nums;
}

div.ag-theme-streamlit .ag-row {
    background-color: #1f2836 !important;
    color: #FFF !important;
    border: none !important;
}

div.ag-theme-streamlit .ag-row.ag-row-odd {
    background-color: #111418 !important;
}

div.ag-theme-streamlit .ag-row:hover {
    background-color: #2a3441 !important;
}

div.ag-theme-streamlit .ag-row.ag-row-selected {
    background-color: #3b4c63 !important;
}

div.ag-theme-streamlit .ag-checkbox-input-wrapper {
    background-color: #1f2836 !important;
    border-color: #4F8BF9 !important;
}

div.ag-theme-streamlit .ag-checkbox-input-wrapper.ag-checked {
    background-color: #4F8BF9 !important;
    border-color: #4F8BF9 !important;
}

/* Additional force for stubborn elements */
div.ag-theme-streamlit .ag-body-viewport,
div.ag-theme-streamlit .ag-body-horizontal-scroll-viewport,
div.ag-theme-streamlit .ag-center-cols-clipper {
    background-color: #1f2836 !important;
}
</style>
"""


def main():  # TODO(PRP-2L): De-UI — UI entrypoint; not part of headless API
    st.set_page_config(page_title="NBA Lineup Optimizer", layout="wide")
    st.markdown(AGGRID_THEME_CSS, unsafe_allow_html=True)

    st.title("🏀 NBA Lineup Optimizer")
    st.markdown("Generate optimized NBA DFS lineups with advanced constraints")
    # PRP-PIO: Parquet support preflight
    try:
        import pyarrow  # noqa: F401
    except Exception:
        st.warning(
            "Parquet support (pyarrow) not available. Some features may be disabled."
        )

    # Load normalized projections if available
    normalized_path = Path("data/normalized/projections.parquet")
    if not normalized_path.exists():
        st.error("❌ No projections data found. Please run the CSV ingest tool first.")
        st.markdown("Go to: `streamlit run src/csv_ingest_app.py`")
        return

    try:
        projections_df = pd.read_parquet(normalized_path)
        st.success(
            f"✅ Loaded {len(projections_df)} players from normalized projections"
        )
    except Exception as e:
        st.error(f"❌ Failed to load projections: {str(e)}")
        return

    # Layout: Left panel for inputs, right panel for results
    col1, col2 = st.columns([1, 2])

    with col1:
        st.header("⚙️ Optimization Settings")

        # Core inputs
        site = st.selectbox("Site", ["dk", "fd"], help="DraftKings or FanDuel")
        max_unique = 7 if site == "dk" else 8

        engine = st.selectbox(
            "Engine",
            ["cp_sat", "cbc"],
            index=0,
            help="CP-SAT (default) is OR-Tools CP-SAT. CBC is PuLP/CBC (legacy).",
            format_func=lambda x: (
                "CP-SAT (default)" if x == "cp_sat" else "CBC (legacy)"
            ),
        )

        # CP-SAT Presets (PRP-15)
        cp_sat_params = {}
        if engine == "cp_sat":
            preset = st.selectbox(
                "CP-SAT Preset",
                ["Speed", "Repro", "Custom"],
                index=0,
                help="Speed: Fast solve (0.7s, 0.1% gap). Repro: Full solve (8s, 0% gap, deterministic). Custom: Configure manually.",
            )

            # Define preset parameter mappings
            if preset == "Speed":
                cp_sat_params = {
                    "max_time_seconds": 0.7,
                    "relative_gap_limit": 0.001,  # 0.1%
                    "num_search_workers": 0,  # All cores
                    "log_search_progress": False,
                }
                st.info("🚀 **Speed preset**: 0.7s timeout, 0.1% gap, multi-threaded")

            elif preset == "Repro":
                cp_sat_params = {
                    "max_time_seconds": 8.0,
                    "relative_gap_limit": 0.0,  # 0% gap (full optimality)
                    "num_search_workers": 1,  # Single-threaded for determinism
                    "log_search_progress": False,
                }
                st.info(
                    "🔍 **Repro preset**: 8s timeout, 0% gap, single-threaded for full reproducibility"
                )

            elif preset == "Custom":
                st.markdown("🛠️ **Custom CP-SAT Parameters**")
                col_a, col_b = st.columns(2)
                with col_a:
                    max_time = st.number_input(
                        "Max Time (seconds)",
                        0.1,
                        60.0,
                        0.7,
                        0.1,
                        help="Maximum time per lineup solve",
                    )
                    gap_limit = st.number_input(
                        "Relative Gap Limit",
                        0.0,
                        0.1,
                        0.001,
                        0.001,
                        help="0.001 = 0.1% gap, 0.0 = full optimality",
                    )
                with col_b:
                    num_workers = st.number_input(
                        "Search Workers",
                        0,
                        16,
                        0,
                        help="0 = use all cores, 1 = single-threaded",
                    )
                    log_progress = st.checkbox(
                        "Log Search Progress",
                        value=False,
                        help="Show detailed solver progress",
                    )

                cp_sat_params = {
                    "max_time_seconds": max_time,
                    "relative_gap_limit": gap_limit,
                    "num_search_workers": num_workers,
                    "log_search_progress": log_progress,
                }
        else:
            # CBC engine - no additional params needed
            preset = None

        N_lineups = st.number_input(
            "Number of Lineups", 1, 1000, 20, help="How many lineups to generate"
        )
        unique_players = st.number_input(
            "Unique Players",
            1,
            max_unique,
            2,
            help="Minimum unique players between lineups",
        )
        seed = st.number_input(
            "Seed (for determinism)", 0, 999999, 12345, help="Same seed = same results"
        )

        # DK-Strict mode toggle (PRP-07) - default ON per PRP-15
        dk_strict_mode = st.checkbox(
            "🔒 DK-Strict Mode (PRP-07)",
            value=True,
            help="Enforce hard-fail if any player lacks real DK ID. Uses dk_data/ files only.",
        )
        if dk_strict_mode:
            st.info(
                "🔒 **DK-Strict Mode**: Hard-fail if any player lacks real DK ID. No synthetic IDs allowed."
            )

        # Advanced constraints in expander
        with st.expander("Advanced Constraints"):
            randomness_pct = st.slider(
                "Randomness %", 0, 100, 0, help="Add variance to projections"
            )
            proj_min = st.number_input(
                "Minimum Projection",
                0.0,
                100.0,
                15.0,
                help="Filter out low projections",
            )

            # Salary constraints
            st.subheader("Salary Limits")
            col_min, col_max = st.columns(2)
            with col_min:
                min_salary = st.number_input(
                    "Min Salary", 0, 60000, 49000 if site == "dk" else 59000
                )
            with col_max:
                max_salary = st.number_input(
                    "Max Salary", 0, 60000, 50000 if site == "dk" else 60000
                )

            # Team constraints
            st.subheader("Team Limits")
            global_team_limit = st.number_input(
                "Global Team Limit", 0, 8, 0, help="Max players per team (0 = no limit)"
            )

            # Player constraints (simplified)
            st.subheader("Player Rules")
            st.markdown("*Advanced player constraints coming soon*")

        # PRP-16: Ownership Penalty Controls
        st.subheader("🎯 Ownership Penalty")
        ownership_enabled = st.checkbox(
            "Enable ownership penalty",
            False,
            help="Penalize high-owned players to create more contrarian lineups",
        )

        ownership_settings = {}
        if ownership_enabled:
            penalty_mode = st.selectbox(
                "Penalty Mode",
                ["by_percent", "by_points"],
                format_func=lambda x: (
                    "By % off optimal (recommended)"
                    if x == "by_percent"
                    else "By points (legacy)"
                ),
                help="By % off optimal targets a specific % below optimal lineup. By points uses fixed penalty weight.",
            )

            if penalty_mode == "by_percent":
                col_target, col_tol = st.columns(2)
                with col_target:
                    target_offoptimal_pct = st.slider(
                        "Target off-optimal %",
                        0.0,
                        20.0,
                        8.0,
                        0.5,
                        help="Target % below optimal (e.g., 8% = lineups ~8% worse than pure optimal)",
                    )
                with col_tol:
                    tol_offoptimal_pct = st.slider(
                        "Tolerance %",
                        0.1,
                        1.0,
                        0.3,
                        0.1,
                        help="Acceptable tolerance around target (±0.3% default)",
                    )
            else:  # by_points
                weight_lambda = st.slider(
                    "Penalty weight λ",
                    0.0,
                    20.0,
                    1.0,
                    0.1,
                    help="Higher values = more penalty for owned players",
                )

            # Advanced penalty curve settings
            with st.expander("🔧 Advanced Curve Settings"):
                curve_type = st.selectbox(
                    "Curve type",
                    ["sigmoid", "linear", "power", "neglog"],
                    help="Shape of the penalty curve. Sigmoid (default) has smooth transitions.",
                )

                if curve_type == "power":
                    power_k = st.slider(
                        "Power k", 1.2, 1.8, 1.5, 0.1, help="Exponent for power curve"
                    )
                else:
                    power_k = 1.5

                if curve_type == "sigmoid":
                    col_pivot, col_alpha = st.columns(2)
                    with col_pivot:
                        pivot_p0 = (
                            st.slider(
                                "Pivot point %",
                                5.0,
                                35.0,
                                20.0,
                                1.0,
                                help="Ownership % where penalty increases rapidly",
                            )
                            / 100.0
                        )
                    with col_alpha:
                        curve_alpha = st.slider(
                            "Curve steepness",
                            1.0,
                            4.0,
                            2.0,
                            0.1,
                            help="Higher = steeper curve",
                        )
                else:
                    pivot_p0 = 0.20
                    curve_alpha = 2.0

                col_min, col_max = st.columns(2)
                with col_min:
                    clamp_min = (
                        st.slider(
                            "Min ownership %",
                            1.0,
                            10.0,
                            1.0,
                            0.5,
                            help="Minimum ownership for calculations",
                        )
                        / 100.0
                    )
                with col_max:
                    clamp_max = (
                        st.slider(
                            "Max ownership %",
                            50.0,
                            100.0,
                            80.0,
                            5.0,
                            help="Maximum ownership for calculations",
                        )
                        / 100.0
                    )

                shrink_gamma = st.slider(
                    "Ownership shrink γ",
                    0.7,
                    1.0,
                    1.0,
                    0.05,
                    help="1.0 = use raw ownership, <1.0 = shrink toward pivot",
                )

            # Build ownership settings dict
            ownership_settings = {
                "enabled": True,
                "mode": penalty_mode,
                "target_offoptimal_pct": (
                    target_offoptimal_pct / 100.0
                    if penalty_mode == "by_percent"
                    else 0.08
                ),
                "tol_offoptimal_pct": (
                    tol_offoptimal_pct / 100.0
                    if penalty_mode == "by_percent"
                    else 0.003
                ),
                "weight_lambda": weight_lambda if penalty_mode == "by_points" else 1.0,
                "curve_type": curve_type,
                "power_k": power_k,
                "pivot_p0": pivot_p0,
                "curve_alpha": curve_alpha,
                "clamp_min": clamp_min,
                "clamp_max": clamp_max,
                "shrink_gamma": shrink_gamma,
            }
        else:
            ownership_settings = {"enabled": False}

        # Run button
        run_disabled = st.session_state.get("optimizer_running", False)
        if st.button("🔄 Run Optimizer", disabled=run_disabled, type="primary"):
            run_optimizer(
                projections_df,
                {
                    "N_lineups": N_lineups,
                    "unique_players": unique_players,
                    "proj_min": proj_min,
                    "randomness_pct": randomness_pct,
                    "min_salary": min_salary if min_salary > 0 else None,
                    "max_salary": max_salary if max_salary > 0 else None,
                    "global_team_limit": (
                        global_team_limit if global_team_limit > 0 else None
                    ),
                    "team_limits": {},
                    "at_least": [],
                    "at_most": [],
                    "slate_id": f"{site}_{datetime.now().strftime('%Y_%m_%d')}",
                    "dk_strict_mode": dk_strict_mode,
                    "cp_sat_params": cp_sat_params,
                    "preset": preset,
                    "ownership_penalty": ownership_settings,  # PRP-16: Pass ownership penalty settings
                },
                seed,
                site,
                engine,
            )

    with col2:
        st.header("📊 Generated Lineups")

        # Display results if available
        if "lineups" in st.session_state and st.session_state.lineups:
            # Display solver diagnostics
            if "id_diagnostics" in st.session_state:
                display_solver_diagnostics(st.session_state.id_diagnostics, engine)
                # Display DK ID status panel if available
                display_dk_id_status(st.session_state.id_diagnostics, site)
                # Ownership penalty diagnostics (if provided by optimizer)
                display_ownership_penalty_diagnostics(st.session_state.id_diagnostics)
                # Debug keys expander (optional)
                import os as _os

                if _os.environ.get("DFS_DEBUG"):
                    with st.expander("Debug: Diagnostics Keys", expanded=False):
                        try:
                            st.write(
                                sorted(list(st.session_state.id_diagnostics.keys()))
                            )
                        except Exception:
                            st.json(st.session_state.id_diagnostics)

            display_results(
                st.session_state.lineups,
                st.session_state.get("optimization_runtime", 0),
                site,
            )

            # PRP-18: Display run comparison panel after results
            display_compare_panel()
        else:
            st.info(
                "👈 Configure settings and click 'Run Optimizer' to generate lineups"
            )


def run_optimizer(
    projections_df: pd.DataFrame,
    constraints_dict: dict,
    seed: int,
    site: str,
    engine: str = "cbc",
):
    """Run the optimizer and store results in session state

    TODO(PRP-2L): De-UI — Replace session-state usage and spinners with headless wrapper.
    """
    st.session_state.optimizer_running = True
    # PRP-Ownership-Normalization-UI-Cache-Hardening: Clear caches on each solve
    try:
        import streamlit as _st

        _st.cache_data.clear()  # TODO(PRP-2L): De-UI — replace streamlit cache hooks
        _st.cache_resource.clear()  # TODO(PRP-2L): De-UI — replace streamlit cache hooks
    except Exception:
        pass

    try:
        with st.spinner("🔄 Generating lineups..."):
            start_time = time.time()

            # Create and validate constraints
            dk_strict_mode = constraints_dict.pop("dk_strict_mode", False)
            cp_sat_params = constraints_dict.pop("cp_sat_params", {})
            preset = constraints_dict.pop("preset", None)
            constraints = Constraints.from_dict(constraints_dict)
            constraints.cp_sat_params = cp_sat_params  # Add CP-SAT parameters (PRP-15)
            stddev_available = "stddev" in projections_df.columns
            constraints = constraints.validate(site, stddev_available)
            # Ownership penalty guardrail: warn if ownership data is missing
            if (
                getattr(constraints, "ownership_penalty", None)
                and getattr(constraints.ownership_penalty, "enabled", False)
                and "own_proj" not in projections_df.columns
            ):
                st.warning(
                    "Ownership penalty is enabled, but the projections data has no `own_proj` column. "
                    "The optimizer will proceed without applying the ownership penalty."
                )

            # Choose optimizer based on mode
            if dk_strict_mode and site == "dk":
                # DK-Strict mode: use dk_data/ files directly
                projections_path = "dk_data/projections.csv"
                player_ids_path = "dk_data/player_ids.csv"

                # Check if dk_data files exist
                if not Path(projections_path).exists():
                    st.error(f"❌ DK-Strict mode requires {projections_path} file")
                    return

                # Run DK-strict optimization
                lineups, id_diagnostics = optimize_dk_strict(
                    projections_path=projections_path,
                    constraints=constraints,
                    seed=seed,
                    player_ids_path=(
                        player_ids_path if Path(player_ids_path).exists() else None
                    ),
                    engine=engine,
                )

                # PRP-18.2: Show guardrail banner for ownership normalization
                if (
                    constraints.ownership_penalty
                    and constraints.ownership_penalty.enabled
                    and id_diagnostics.get("normalization", {}).get("ownership")
                ):
                    norm_info = id_diagnostics["normalization"]["ownership"]
                    src_col = norm_info["source_col"]
                    scale = int(norm_info["scaled_by"])
                    if scale > 1:
                        st.info(
                            f"🧭 Detected '{src_col}'; auto-mapped to 'own_proj' (÷{scale})."
                        )
                    else:
                        st.info(
                            f"🧭 Using '{src_col}' as 'own_proj' (no scaling needed)."
                        )

            else:
                # Standard mode: use loaded projections
                # Check for persisted player IDs
                player_ids_path = Path("dk_data/player_ids.csv")
                player_ids_df = None
                if player_ids_path.exists():
                    try:
                        player_ids_df = pd.read_csv(player_ids_path)
                    except Exception as e:
                        st.warning(f"Could not load player IDs: {e}")

                # Run optimization with diagnostics
                lineups, id_diagnostics = optimize_with_diagnostics(
                    projections_df,
                    constraints,
                    seed,
                    site,
                    player_ids_df,
                    engine=engine,
                )
                # PRP-22: Show ownership normalization banner if present
                try:
                    norm = id_diagnostics.get("normalization", {}).get("ownership")
                    if norm and float(norm.get("scaled_by", 1.0)) > 1.0:
                        src_col = norm.get("source_col", "ownership column")
                        scale = int(norm.get("scaled_by", 100))
                        st.info(
                            f"🧭 Detected '{src_col}'; auto-mapped to 'own_proj' (÷{scale})."
                        )
                except Exception:
                    pass

            runtime = time.time() - start_time

            # Store results in session state
            st.session_state.lineups = lineups
            st.session_state.id_diagnostics = id_diagnostics
            st.session_state.optimization_runtime = runtime
            st.session_state.optimization_constraints = constraints_dict
            st.session_state.optimization_seed = seed
            st.session_state.optimization_preset = (
                preset  # PRP-15: Store preset for telemetry
            )
            st.session_state.optimization_cp_sat_params = (
                cp_sat_params  # PRP-15: Store params for telemetry
            )

            # Performance warning and success message
            if runtime > 10.0:
                st.warning(f"⚠️ Runtime: {runtime:.1f}s exceeded 10s target")
            else:
                mode_label = (
                    "DK-Strict" if dk_strict_mode and site == "dk" else "Standard"
                )
                st.success(
                    f"✅ Generated {len(lineups)} lineups in {runtime:.1f}s ({mode_label} mode)"
                )
                if dk_strict_mode and site == "dk":
                    st.info(
                        "🔒 **DK-Strict Mode**: All players have validated real DK IDs"
                    )

    except RuntimeError as e:
        # DK-strict mode failures
        error_message = str(e)
        st.error(f"❌ DK-Strict Mode Failed")
        st.markdown(f"**Error**: {error_message}")

        # Show remediation steps
        if "missing/invalid dk_id" in error_message.lower():
            with st.expander("🔧 How to Fix DK ID Issues", expanded=True):
                st.markdown("### Required Steps:")
                st.markdown(
                    "1. **Create or update** `dk_data/player_ids.csv` with real DK player data"
                )
                st.markdown(
                    "2. **Export player data** from DraftKings contest page (CSV format)"
                )
                st.markdown(
                    "3. **Ensure exact name/team matching** between projections and DK data"
                )
                st.markdown(
                    "4. **Check team abbreviations**: PHX vs PHO, GSW vs GS, etc."
                )
                st.markdown("### Expected Format:")
                st.code(
                    "ID,Name,TeamAbbrev,Position\n12345,Stephen Curry,GSW,PG\n67890,LeBron James,LAL,SF/PF"
                )

    except OptimizerError as e:
        if e.severity == "error":
            st.error(f"❌ {e.user_message}")
        else:
            st.warning(f"⚠️ {e.user_message}")

        # Show technical details in expander
        with st.expander("Technical Details"):
            st.json(e.details)

    except Exception as e:
        st.error(f"❌ Unexpected error: {str(e)}")
        st.exception(e)

    finally:
        st.session_state.optimizer_running = False


def build_optimizer_grid_options(df: pd.DataFrame, view_mode: str = "compact") -> dict:
    """Build AG Grid options with view-specific column configuration

    TODO(PRP-2L): De-UI — AG Grid configuration; move to UI layer.
    """
    gb = GridOptionsBuilder.from_dataframe(df)

    # Base numeric formatters - using proper JsCode instead of strings
    numeric_formatter = JsCode(
        """
    function(params) {
        if (params.value == null || params.value === '') return '';
        return Number(params.value).toFixed(1);
    }
    """
    )

    integer_formatter = JsCode(
        """
    function(params) {
        if (params.value == null || params.value === '') return '';
        return Number(params.value).toLocaleString();
    }
    """
    )

    precision_formatter = JsCode(
        """
    function(params) {
        if (params.value == null || params.value === '') return '';
        return Number(params.value).toFixed(4);
    }
    """
    )

    # Common columns (both views)
    # Pin lineup identifier if present
    if "lineup_id" in df.columns:
        gb.configure_column("lineup_id", pinned="left", width=70, headerName="Lineup")
    gb.configure_column(
        "total_proj",
        type=["numericColumn", "rightAligned"],
        valueFormatter=numeric_formatter,
        width=90,
        headerName="Proj",
    )
    gb.configure_column(
        "total_salary",
        type=["numericColumn", "rightAligned"],
        valueFormatter=integer_formatter,
        width=100,
        headerName="Salary",
    )
    gb.configure_column(
        "salary_left",
        type=["numericColumn", "rightAligned"],
        valueFormatter=integer_formatter,
        width=90,
        headerName="Left",
    )

    # View-specific columns
    if view_mode == "compact":
        # Compact: single players column from prepared DF
        players_col = (
            "players_compact" if "players_compact" in df.columns else "players_csv"
        )
        gb.configure_column(
            players_col,
            width=600,
            headerName="Players",
            wrapText=True,
            autoHeight=True,
            tooltipField=players_col,
        )
        # Hide DK position columns
        dk_positions = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
        for pos in dk_positions:
            if pos in df.columns:
                gb.configure_column(pos, hide=True)
    else:  # DK-style view
        # Hide compact column
        if "players_csv" in df.columns:
            gb.configure_column("players_csv", hide=True)
        # Show position columns
        dk_positions = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
        for pos in dk_positions:
            if pos in df.columns:
                gb.configure_column(
                    pos, width=120, headerName=pos, wrapText=True, tooltipField=pos
                )

    # Optional metric columns (show only if present and have non-null values)
    optional_columns = {
        "own_sum": ("Own%", 80, numeric_formatter),
        "minutes_sum": ("Min", 70, numeric_formatter),
        "stddev_sum": ("StdDev", 80, numeric_formatter),
        "own_prod": ("Own Prod", 90, precision_formatter),
    }

    for col, (header, width, formatter) in optional_columns.items():
        if col in df.columns and not df[col].isna().all():
            gb.configure_column(
                col,
                type=["numericColumn", "rightAligned"],
                valueFormatter=formatter,
                width=width,
                headerName=header,
            )
        elif col in df.columns:
            gb.configure_column(col, hide=True)

    # Optional stacks and notes if present
    if "stacks" in df.columns:
        gb.configure_column("stacks", width=120, headerName="Stacks")
    if "notes" in df.columns:
        gb.configure_column("notes", width=150, headerName="Notes", editable=True)

    # Hide internal columns
    hidden_columns = ["seed", "player_ids_csv", "players_json"]
    for col in hidden_columns:
        if col in df.columns:
            gb.configure_column(col, hide=True)

    # Grid configuration
    gb.configure_pagination(paginationPageSize=50)
    gb.configure_selection(
        "multiple",
        use_checkbox=True,
        header_checkbox=True,
        header_checkbox_filtered_only=True,
    )
    gb.configure_side_bar()
    gb.configure_grid_options(
        rowHeight=40 if view_mode == "compact" else 32,
        headerHeight=40,
        suppressRowClickSelection=True,
        animateRows=True,
        rowSelection="multiple",
    )

    return gb.build()


def display_results(lineups, runtime, site: str = "dk"):
    """Display optimization results with enhanced AG Grid"""
    if not lineups:
        st.warning("No lineups to display")
        return

    # View mode toggle
    col_toggle, col_export, col_stats = st.columns([1, 1, 2])

    with col_toggle:
        view_mode = st.selectbox(
            "View Mode",
            ["compact", "dk_style"],
            index=1,  # Default to DK Roster Style
            format_func=lambda x: (
                "Compact CSV" if x == "compact" else "DK Roster Style"
            ),
            key="lineup_view_mode",
        )

    # Transform data using DK-strict approach
    try:
        # Convert lineups to typed DataFrame and include runtime/seed
        full_df = lineups_to_grid_df(
            lineups,
            sport="nba",
            site=site,
            runtime_ms=int(runtime * 1000),
            rand_seed=st.session_state.get("optimization_seed"),
        )

        # Validate DataFrame and get errors
        valid_df, validation_errors = validate_grid_df(full_df, sport="nba", site=site)

        # Store validation state in session
        st.session_state["validation_errors"] = validation_errors
        st.session_state["valid_df"] = valid_df
        st.session_state["export_enabled"] = len(validation_errors) == 0

        # PRP-18: Persist run history after successful optimization
        if len(validation_errors) == 0:  # Only add to history if validation passed
            persist_run_to_history(valid_df, site, runtime)

        # Use valid lineups for display
        results_df = prepare_display_df(valid_df, view_mode)

    except Exception as e:
        st.error(f"Error processing lineups: {str(e)}")
        return

    # Display validation errors if any
    if validation_errors:
        with st.expander(
            f"⚠️ Validation Issues ({len(validation_errors)} lineups excluded)",
            expanded=False,
        ):
            for error in validation_errors[:5]:  # Show first 5 errors
                st.error(f"Lineup {error['lineup_id']}: {', '.join(error['errors'])}")
            if len(validation_errors) > 5:
                st.info(f"... and {len(validation_errors) - 5} more errors")

    # Run Summary badge (Contract + Ownership Normalization)
    try:
        _diag_all = st.session_state.get("id_diagnostics", {})
        _contract = (
            _diag_all.get("solver_contract", {}) if isinstance(_diag_all, dict) else {}
        )
        _norm = (
            _diag_all.get("normalization", {}).get("ownership", {})
            if isinstance(_diag_all, dict)
            else {}
        )
        run_id = _contract.get("run_id") or _norm.get("run_id") or "—"
        chash = (_contract.get("contract_hash") or "")[:12]
        scaled_by_100 = bool(_norm.get("scaled_by_100", False))
        max_pre = _norm.get("own_proj_max_pre_solve", _norm.get("max_after", 0.0))
        clipped = _norm.get("num_clipped", 0)
        st.caption(
            f"Run {run_id} • contract {chash} • scaled_by_100={scaled_by_100} • own_max_pre={max_pre:.3f} • clipped={clipped}"
        )
        # If available, surface a quick path to the exact solver inputs for this run
        _solver_inputs_path = _contract.get("solver_inputs_path")
        if _solver_inputs_path:
            st.caption(f"Open inputs: `{_solver_inputs_path}`")
    except Exception:
        pass

    # Build grid options
    grid_options = build_optimizer_grid_options(results_df, view_mode)

    # Display grid with enhanced theme
    # Cache-busted, per-run grid key
    _grid_key = None
    try:
        _diag_all = st.session_state.get("id_diagnostics", {})
        _rid = None
        if isinstance(_diag_all, dict):
            _rid = _diag_all.get("solver_contract", {}).get("run_id") or _diag_all.get(
                "normalization", {}
            ).get("ownership", {}).get("run_id")
        _grid_key = f"grid_{_rid or uuid.uuid4().hex}"
    except Exception:
        _grid_key = f"grid_{uuid.uuid4().hex}"

    grid_response = AgGrid(
        results_df,
        gridOptions=grid_options,
        data_return_mode=DataReturnMode.FILTERED_AND_SORTED,
        update_mode=GridUpdateMode.MODEL_CHANGED,
        fit_columns_on_grid_load=False,
        theme="streamlit",
        height=600,
        width="100%",
        reload_data=False,
        allow_unsafe_jscode=True,  # Required for JsCode formatters
        enable_enterprise_modules=False,
        key=_grid_key,
    )

    # Export functionality (enhanced for PRP-15)
    with col_export:
        export_enabled = st.session_state.get("export_enabled", False)

        # Main telemetry export button (PRP-15)
        telemetry_export_button = st.button(
            "📦 Export with Telemetry",
            disabled=not export_enabled,
            type="primary",
            help="Export to structured directory with CSV files and telemetry JSON (PRP-15)",
        )

        # ORB export controls (PRP-ORB)
        run_name = st.text_input(
            "Run Name",
            value="baseline",
            help="Used to slug folder name in runs/ directory",
        )
        orb_export_button = st.button(
            "📁 Export ORB Bundle",
            disabled=not export_enabled,
            help="Create runs/<timestamp>__<slug> with player_pool.parquet, bases_long.parquet, run_meta.json",
        )

        # Legacy download buttons
        btn_col1, btn_col2 = st.columns(2)
        with btn_col1:
            export_button = st.button(
                "📥 DK CSV",
                disabled=not export_enabled,
                help="Download DK-compatible CSV",
            )
        with btn_col2:
            export_human_button = st.button(
                "📥 Human CSV",
                disabled=not export_enabled,
                help="Download human-readable CSV",
            )

        # Handle export actions
        if telemetry_export_button and export_enabled:
            # Need projections for hash generation
            normalized_path = Path("data/normalized/projections.parquet")
            try:
                projections_df = pd.read_parquet(normalized_path)
                export_with_telemetry(st.session_state.get("valid_df"), projections_df)
            except Exception as e:
                st.error(f"Could not load projections for telemetry export: {e}")

        if export_button and export_enabled:
            export_dk_csv(st.session_state.get("valid_df"))
        if export_human_button and export_enabled:
            export_human_csv(st.session_state.get("valid_df"))

        # Handle ORB export
        if orb_export_button and export_enabled:
            try:
                # Try to load projections for player_pool; fall back gracefully
                projections_df = None
                try:
                    normalized_path = Path("data/normalized/projections.parquet")
                    if normalized_path.exists():
                        projections_df = pd.read_parquet(normalized_path)
                except Exception:
                    projections_df = None

                out_dir = write_orb_bundle(
                    run_name=run_name or "run",
                    lineups=lineups,
                    projections_df=projections_df,
                    diagnostics=st.session_state.get("id_diagnostics", {}),
                    constraints=(
                        Constraints.from_dict(
                            st.session_state.get("optimization_constraints", {})
                        )
                        if st.session_state.get("optimization_constraints")
                        else None
                    ),
                )
                st.success("✅ ORB bundle created")
                st.info(f"📁 {out_dir}")
                st.session_state["last_run_dir"] = str(out_dir)
                # Preflight: surface potential bad exports early
                try:
                    pool_df = load_pool(out_dir)
                    zero_proj_frac = (
                        float((pool_df["proj"] == 0).mean())
                        if "proj" in pool_df.columns
                        else 1.0
                    )
                    own_100_frac = (
                        float((pool_df.get("own", 0).fillna(0) >= 100.0).mean())
                        if "own" in pool_df.columns
                        else 0.0
                    )
                    if zero_proj_frac > 0.20:
                        st.warning(
                            f"⚠️ {zero_proj_frac*100:.1f}% of player proj are zero; check column mapping."
                        )
                    if own_100_frac > 0.10:
                        st.warning(
                            f"⚠️ {own_100_frac*100:.1f}% of ownership are 100%; verify ownership normalization."
                        )
                    # Show top-10 players by proj for a quick eyeball
                    if "proj" in pool_df.columns:
                        preview_cols = [
                            c
                            for c in [
                                "player_id",
                                "name",
                                "team",
                                "pos",
                                "salary",
                                "proj",
                                "own",
                            ]
                            if c in pool_df.columns
                        ]
                        st.dataframe(
                            pool_df.sort_values("proj", ascending=False).head(10)[
                                preview_cols
                            ],
                            use_container_width=True,
                            height=280,
                        )
                except Exception:
                    pass
            except Exception as e:
                st.error(f"❌ ORB export failed: {e}")

    with col_stats:
        st.markdown(f"*Runtime: {runtime:.1f}s | Generated: {len(lineups)} lineups*")

    # Save lineup set option
    if st.button("💾 Save Lineup Set"):
        save_lineup_set(lineups, runtime)

    # PRP-SVD-IO: Run management and explicit CSV export buttons for latest run
    last_run_dir = st.session_state.get("last_run_dir")
    if last_run_dir and Path(last_run_dir).exists():
        st.markdown("---")
        st.subheader("Run Management")
        st.caption(
            "Parquet is authoritative. Use buttons below to export CSVs on demand."
        )
        # Legacy upgrade helper
        pp_parq = Path(last_run_dir) / "player_pool.parquet"
        pp_csv = Path(last_run_dir) / "player_pool.csv"
        bl_parq = Path(last_run_dir) / "bases_long.parquet"
        bl_csv = Path(last_run_dir) / "bases_long.csv"
        if (not pp_parq.exists() and pp_csv.exists()) or (
            not bl_parq.exists() and bl_csv.exists()
        ):
            if st.button("Upgrade legacy CSV run → Parquet"):
                try:
                    if pp_csv.exists() and not pp_parq.exists():
                        df = pd.read_csv(pp_csv)
                        save_pool(last_run_dir, df, export_csv=False)
                    if bl_csv.exists() and not bl_parq.exists():
                        df = pd.read_csv(bl_csv)
                        save_bases_long(last_run_dir, df, export_csv=False)
                    st.success("Run upgraded to Parquet.")
                except Exception as e:
                    st.error(f"Upgrade failed: {e}")
        exp_col1, exp_col2, exp_col3 = st.columns(3)
        with exp_col1:
            if st.button("Export player_pool.csv"):
                try:
                    df = load_pool(last_run_dir)
                    save_pool(last_run_dir, df, export_csv=True)
                    st.success("Exported player_pool.csv")
                except Exception as e:
                    st.error(f"Export failed: {e}")
        with exp_col2:
            if st.button("Export bases_long.csv"):
                try:
                    df = load_bases_long(last_run_dir)
                    save_bases_long(last_run_dir, df, export_csv=True)
                    st.success("Exported bases_long.csv")
                except Exception as e:
                    st.error(f"Export failed: {e}")
        with exp_col3:
            if st.button("Export variant_catalog.csv"):
                try:
                    # Only exports if variants exist
                    df = None
                    try:
                        from io_facade.run_io import load_variants

                        df = load_variants(last_run_dir)
                    except Exception:
                        df = None
                    if df is None:
                        st.warning("No variant_catalog found to export.")
                    else:
                        save_variants(last_run_dir, df, export_csv=True)
                        st.success("Exported variant_catalog.csv")
                except Exception as e:
                    st.error(f"Export failed: {e}")

        # Retention/Archiving
        st.markdown("")
        st.subheader("Run Retention")
        col_keep, col_btn = st.columns([1, 1])
        with col_keep:
            keep_n = st.number_input(
                "Keep last N runs", min_value=1, max_value=100, value=5
            )
        with col_btn:
            if st.button("Archive Old Runs"):
                try:
                    from tools.cleanup_runs import cleanup_runs as _cleanup_runs

                    zip_path = _cleanup_runs("src/runs", keep=int(keep_n), archive=True)
                    if zip_path:
                        st.success(f"Archived to {zip_path}")
                    else:
                        st.info("No runs archived.")
                except Exception as e:
                    st.error(f"Retention failed: {e}")


def export_optimizer_results(grid_response, view_mode: str, runtime: float, site: str):
    """Export exactly what's visible in grid

    TODO(PRP-2L): De-UI — Streamlit download button and CSV export belong in UI layer.
    """
    try:
        # Get filtered and sorted data from grid
        export_df = grid_response["data"]

        if export_df is None or len(export_df) == 0:
            st.error("No data to export")
            return

        # Remove internal/hidden columns for export but keep user-editable ones
        hidden_columns = ["seed", "player_ids_csv", "players_json"]

        # Also remove position columns if in compact view, or players_csv if in DK view
        if view_mode == "compact":
            dk_positions = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
            hidden_columns.extend(
                [pos for pos in dk_positions if pos in export_df.columns]
            )
        else:
            if "players_csv" in export_df.columns:
                hidden_columns.append("players_csv")

        # Create clean export DataFrame
        visible_df = export_df.drop(
            columns=[col for col in hidden_columns if col in export_df.columns]
        )

        # Remove empty optional metric columns
        for col in ["own_sum", "minutes_sum", "stddev_sum", "own_prod"]:
            if col in visible_df.columns and visible_df[col].isna().all():
                visible_df = visible_df.drop(columns=[col])

        # Generate filename
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        view_suffix = "compact" if view_mode == "compact" else "dk"
        filename = f"lineups_{view_suffix}_{site}_{timestamp}.csv"

        # Convert to CSV
        csv_data = visible_df.to_csv(index=False)

        # Download button
        st.download_button(
            label=f"Download {filename}",
            data=csv_data,
            file_name=filename,
            mime="text/csv",
        )

        st.success(f"✅ Exported {len(visible_df)} lineups to {filename}")

    except Exception as e:
        st.error(f"❌ Export failed: {str(e)}")


def transform_lineups_for_grid(
    lineups, site: str = "dk", view_mode: str = "compact"
) -> pd.DataFrame:
    """Convert lineup objects to comprehensive grid format"""
    rows = []
    salary_cap = 50000 if site == "dk" else 60000

    for lineup in lineups:
        # Basic metrics
        base_data = {
            "id": lineup.lineup_id,
            "total_proj": round(lineup.total_proj, 2),
            "total_salary": lineup.total_salary,
            "salary_left": salary_cap - lineup.total_salary,
        }

        # Extract optional player metrics safely
        own_values = [
            p.own_proj
            for p in lineup.players
            if hasattr(p, "own_proj") and p.own_proj is not None
        ]
        minutes_values = [
            p.minutes
            for p in lineup.players
            if hasattr(p, "minutes") and p.minutes is not None
        ]
        stddev_values = [
            p.stddev
            for p in lineup.players
            if hasattr(p, "stddev") and p.stddev is not None
        ]

        # Computed metrics (only if data available)
        optional_data = {}
        if own_values and len(own_values) > 0:
            optional_data.update(
                {
                    "own_sum": round(sum(own_values), 1),
                    "own_prod": (
                        round(np.prod(own_values), 4)
                        if len(own_values) == len(lineup.players)
                        else None
                    ),
                }
            )
        if minutes_values and len(minutes_values) > 0:
            optional_data["minutes_sum"] = round(sum(minutes_values), 0)
        if stddev_values and len(stddev_values) > 0:
            optional_data["stddev_sum"] = round(sum(stddev_values), 2)

        # View-specific player formatting
        if view_mode == "compact":
            base_data["players_csv"] = ", ".join(
                f"{p.name} ({p.pos} {p.team})" for p in lineup.players
            )
        else:  # DK-style view
            # Map players to roster positions with player IDs
            dk_positions = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
            position_map = {pos: "" for pos in dk_positions}

            # Sort players by DK position order to ensure consistent display
            sorted_players = sorted(
                lineup.players, key=lambda p: dk_positions.index(p.pos)
            )

            for player in sorted_players:
                if player.pos in position_map:
                    # Extract clean ID for display (use last part of synthetic ID or first 8 chars)
                    clean_id = (
                        player.player_id.split("_")[-1]
                        if "_" in player.player_id
                        else player.player_id[:8]
                    )
                    # Handle cases where clean_id might be empty or cause truncation
                    if not clean_id or len(clean_id) == 0:
                        position_map[player.pos] = f"{player.name} ({player.team})"
                    else:
                        position_map[player.pos] = (
                            f"{player.name} ({clean_id} {player.team})"
                        )

            base_data.update(position_map)

        # Team stacking analysis
        team_counts = Counter(p.team for p in lineup.players)
        stacks = [
            f"{team}x{count}" for team, count in team_counts.items() if count >= 2
        ]
        base_data["stacks"] = ", ".join(sorted(stacks)) if stacks else ""

        # Metadata and notes
        base_data.update({"notes": "", **optional_data})

        # Hidden fields for export/tracking
        base_data.update(
            {
                "seed": st.session_state.get("optimization_seed", 0),
                "player_ids_csv": ",".join(p.player_id for p in lineup.players),
                "players_json": json.dumps([p.to_dict() for p in lineup.players]),
            }
        )

        rows.append(base_data)

    return pd.DataFrame(rows)


def save_lineup_set(lineups, runtime):
    """Save lineup set to disk with metadata"""
    try:
        # Create output directory
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        seed = st.session_state.get("optimization_seed", 0)
        out_dir = Path(f"data/lineup_sets/{timestamp}_{seed}")
        out_dir.mkdir(parents=True, exist_ok=True)

        # Create lineup set metadata
        lineup_set = {
            "id": str(uuid.uuid4()),
            "created_at": datetime.utcnow().isoformat(),
            "seed": seed,
            "slate_id": st.session_state.get("optimization_constraints", {}).get(
                "slate_id"
            ),
            "constraints": st.session_state.get("optimization_constraints", {}),
            "engine": "nba_optimizer_functional.py",
            "version": "v1.0",
            "runtime_sec": runtime,
            "lineups": [lineup.to_dict() for lineup in lineups],
        }

        # Save JSON
        json_path = out_dir / "lineup_set.json"
        with open(json_path, "w") as f:
            json.dump(lineup_set, f, indent=2)

        # Save CSV for DK upload
        csv_data = []
        for lineup in lineups:
            # Sort players by DK position order
            dk_order = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
            sorted_players = sorted(lineup.players, key=lambda p: dk_order.index(p.pos))

            csv_data.append(
                [f"{p.name} ({p.player_id})" for p in sorted_players]
                + [lineup.total_salary, round(lineup.total_proj, 2)]
            )

        csv_path = out_dir / "lineups.csv"
        with open(csv_path, "w", newline="") as f:
            import csv

            writer = csv.writer(f)
            writer.writerow(
                ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL", "Salary", "Fpts Proj"]
            )
            writer.writerows(csv_data)

        st.success(f"✅ Lineup set saved to: {out_dir}")

    except Exception as e:
        st.error(f"❌ Failed to save lineup set: {str(e)}")


def prepare_display_df(valid_df: pd.DataFrame, view_mode: str) -> pd.DataFrame:
    """Prepare DataFrame for display in AG Grid based on view mode"""
    if valid_df.empty:
        return pd.DataFrame()

    if view_mode == "compact":
        # Show compact view with key + metrics columns
        display_cols = ["lineup_id", "total_proj", "total_salary"]
        if "salary_left" in valid_df.columns:
            display_cols.append("salary_left")
        for opt in ["own_sum", "minutes_sum", "stddev_sum", "own_prod"]:
            if opt in valid_df.columns:
                display_cols.append(opt)
        display_cols.append("players_compact")
        if "stacks" in valid_df.columns:
            display_cols.append("stacks")
        if "runtime_ms" in valid_df.columns:
            display_cols.append("runtime_ms")
        return valid_df[[c for c in display_cols if c in valid_df.columns]].copy()

    else:  # dk_style
        # Show DK-style with slot columns - derive from site config
        try:
            from backend.dk_strict_results import load_site_config

            site_config = load_site_config("nba", "dk", 1)
            slots = site_config.get(
                "slots", ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
            )
        except Exception:
            # Fallback if config loading fails
            slots = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
        display_cols = ["lineup_id", "total_proj", "total_salary"]
        if "salary_left" in valid_df.columns:
            display_cols.append("salary_left")

        # Add slot display columns (name with ID and team)
        for slot in slots:
            # Create display values directly without lambda function issues
            display_values = []
            for idx, row in valid_df.iterrows():
                name = str(row.get(f"{slot}_name", "Unknown")).strip()
                dk_id = str(row.get(f"{slot}_dk_id", "")).strip()
                team = str(row.get(f"{slot}_team", "")).strip()

                # Handle missing or invalid data
                if not name or name.lower() in ["", "nan", "none", "unknown"]:
                    name = f"Missing_Player_{slot}"

                # Clean up DK ID - treat 'nan', 'none', empty string as missing
                if not dk_id or dk_id.lower() in ["", "nan", "none"]:
                    # No DK ID available - just show name and team
                    display_values.append(f"{name} ({team})")
                else:
                    # DK ID available - show full format
                    display_values.append(f"{name} ({dk_id} {team})")

            valid_df[slot] = display_values
            display_cols.append(slot)

        # Append optional metrics at the end
        for opt in ["own_sum", "minutes_sum", "stddev_sum", "own_prod"]:
            if opt in valid_df.columns:
                display_cols.append(opt)
        if "stacks" in valid_df.columns:
            display_cols.append("stacks")
        return valid_df[[c for c in display_cols if c in valid_df.columns]].copy()


def export_dk_csv(valid_df: pd.DataFrame):
    """Export valid lineups as DK-compatible CSV"""
    if valid_df is None or valid_df.empty:
        st.error("No valid lineups to export")
        return

    try:
        # Generate DK CSV content
        csv_content = grid_df_to_dk_csv(valid_df, sport="nba", site="dk")

        # Create download
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"dk_lineups_{timestamp}.csv"

        st.download_button(
            label="📥 Download DK CSV",
            data=csv_content,
            file_name=filename,
            mime="text/csv",
            help="Download DK-compatible lineup CSV",
        )

        st.success(f"✅ Generated {len(valid_df)} valid lineups for DK import")

    except Exception as e:
        st.error(f"❌ Export failed: {str(e)}")


def export_human_csv(valid_df: pd.DataFrame):
    """Export valid lineups as human-readable DK-style CSV with Name (ID TEAM)."""
    if valid_df is None or valid_df.empty:
        st.error("No valid lineups to export")
        return

    try:
        slots = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
        header = slots + ["Salary", "Fpts Proj"]
        rows = [",".join(header)]

        for _, row in valid_df.iterrows():
            slot_vals = [
                f"{row[f'{s}_name']} ({row[f'{s}_dk_id']} {row[f'{s}_team']})"
                for s in slots
            ]
            slot_vals += [
                str(int(row["total_salary"])),
                f"{float(row['total_proj']):.2f}",
            ]
            rows.append(",".join(slot_vals))

        csv_content = "\n".join(rows)

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"dk_lineups_human_{timestamp}.csv"
        st.download_button(
            label="📥 Download Human CSV",
            data=csv_content,
            file_name=filename,
            mime="text/csv",
            help="Download lineup CSV with Name (ID TEAM) per slot",
        )

        st.success(f"✅ Generated {len(valid_df)} human-readable lineups")
    except Exception as e:
        st.error(f"❌ Export failed: {str(e)}")


def display_dk_id_status(diagnostics: dict, site: str):
    """Display DK ID matching status with actionable guidance"""
    if site != "dk":
        return  # Only relevant for DraftKings

    success_rate = diagnostics.get("success_rate", 0.0)
    matched = diagnostics.get("matched_players", 0)
    total = diagnostics.get("total_players", 0)
    data_source = diagnostics.get("data_source")

    # Create status panel
    if success_rate >= 95.0:
        # Great success
        st.success(
            f"🎯 **DK ID Status: Excellent** ({success_rate:.1f}% - {matched}/{total} players)"
        )
        with st.expander("📋 DK Compatibility Details", expanded=False):
            st.write(
                f"✅ **Match Rate**: {success_rate:.1f}% ({matched} of {total} players)"
            )
            st.write(f"🗂️ **Data Source**: {data_source or 'No IDs available'}")
            if diagnostics.get("warnings"):
                for warning in diagnostics["warnings"]:
                    st.info(f"ℹ️ {warning}")
            st.write("**Export Status**: ✅ Ready for DraftKings import")

    elif success_rate >= 75.0:
        # Moderate success - warning
        st.warning(
            f"⚠️ **DK ID Status: Needs Attention** ({success_rate:.1f}% - {matched}/{total} players)"
        )
        with st.expander("🔧 How to Improve DK Compatibility", expanded=True):
            st.write(
                f"📊 **Current Match Rate**: {success_rate:.1f}% ({matched} of {total} players)"
            )
            st.write(f"🗂️ **Data Source**: {data_source or 'No IDs available'}")

            # Show specific issues
            failed_name = diagnostics.get("failed_name_matching", 0)
            failed_pos = diagnostics.get("failed_position_validation", 0)

            if failed_name > 0:
                st.write(f"❌ **Name/Team Mismatches**: {failed_name} players")
            if failed_pos > 0:
                st.write(f"❌ **Position Validation Issues**: {failed_pos} players")

            st.markdown("### 🛠️ **Action Steps**:")
            st.markdown(
                "1. **Update player_ids.csv** - ensure names and teams match exactly"
            )
            st.markdown(
                "2. **Check team abbreviations** - DEN vs DEN, PHX vs PHO, etc."
            )
            st.markdown("3. **Export fresh IDs** from current DraftKings contest")

            if diagnostics.get("warnings"):
                st.markdown("### ⚠️ **Specific Issues**:")
                for warning in diagnostics["warnings"]:
                    st.info(f"• {warning}")

            st.warning(
                "**Export Status**: ⚠️ Some lineups may not import correctly to DraftKings"
            )

    else:
        # Poor success - critical
        st.error(
            f"🚨 **DK ID Status: Critical Issues** ({success_rate:.1f}% - {matched}/{total} players)"
        )
        with st.expander("⚠️ Critical DK Compatibility Problems", expanded=True):
            st.write(
                f"📊 **Current Match Rate**: {success_rate:.1f}% ({matched} of {total} players)"
            )
            st.write(f"🗂️ **Data Source**: {data_source or 'No IDs available'}")

            # Show errors
            if diagnostics.get("errors"):
                st.markdown("### ❌ **Errors**:")
                for error in diagnostics["errors"]:
                    st.error(f"• {error}")

            # Show specific issues
            failed_name = diagnostics.get("failed_name_matching", 0)
            failed_pos = diagnostics.get("failed_position_validation", 0)

            if failed_name > 0:
                st.write(f"❌ **Name/Team Mismatches**: {failed_name} players")
            if failed_pos > 0:
                st.write(f"❌ **Position Validation Issues**: {failed_pos} players")

            st.markdown("### 🆘 **Required Actions**:")
            st.markdown(
                "1. **Create dk_data/player_ids.csv** with format: ID, Name, TeamAbbrev, Position"
            )
            st.markdown("2. **Export player data** from DraftKings contest page")
            st.markdown(
                "3. **Ensure exact name matching** between projections and DK data"
            )
            st.markdown(
                "4. **Enable fail-fast mode** (require_dk_ids=True) to prevent invalid lineups"
            )

            st.markdown("### 🔧 **Quick Fix Tools**:")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("📄 Generate Template", key="dk_template_btn"):
                    st.code(
                        '''python -c "from src.utils.dk_id_generator import generate_template_from_projections; generate_template_from_projections('dk_data/projections.csv')"'''
                    )
                    st.info(
                        "Run this command to generate a template from your projections"
                    )

            with col2:
                if st.button("🔍 Validation Help", key="dk_help_btn"):
                    st.code(
                        '''python -c "from src.utils.dk_id_generator import print_dk_id_help; print_dk_id_help()"'''
                    )
                    st.info("Run this command for comprehensive setup guidance")

            st.error(
                "**Export Status**: ❌ Lineups will NOT import correctly to DraftKings"
            )


# Ownership penalty diagnostics panel
def display_ownership_penalty_diagnostics(diagnostics: dict):
    """Render ownership penalty diagnostics if present in optimizer diagnostics."""
    pen = (
        diagnostics.get("ownership_penalty") if isinstance(diagnostics, dict) else None
    )
    # If penalty was enabled but diagnostics missing, show gating banner
    snapshot = (
        diagnostics.get("constraints_snapshot", {})
        if isinstance(diagnostics, dict)
        else {}
    )
    if not pen and snapshot.get("ownership_enabled"):
        with st.expander("🎯 Ownership Penalty Diagnostics", expanded=True):
            st.error(
                "Ownership penalty was enabled, but diagnostics were not emitted. Check ownership data and wiring."
            )
        return
    if not pen:
        return
    with st.expander("🎯 Ownership Penalty Diagnostics", expanded=True):
        if pen.get("error") == "missing_ownership":
            st.error(
                "Ownership data is missing (`own_proj` not found). Penalty could not be applied."
            )
        c1, c2, c3, c4 = st.columns(4)
        with c1:
            mode = pen.get("mode", "—")
            st.metric("Mode", str(mode).replace("_", " ").title())
            lam = pen.get("lambda_used")
            if lam is not None:
                st.metric("λ Used", f"{lam:.3f}")
        with c2:
            tgt = pen.get("target_offoptimal_pct")
            ach = pen.get("achieved_offoptimal_pct")
            if tgt is not None:
                st.metric("Target % Off", f"{100*float(tgt):.2f}%")
            if ach is not None:
                st.metric("Achieved % Off", f"{100*float(ach):.2f}%")
        with c3:
            chalk = pen.get("avg_chalk_index")
            if chalk is not None:
                st.metric("Avg Chalk Index", f"{float(chalk):.2f}")
        with c4:
            ppts = pen.get("avg_penalty_points")
            if ppts is not None:
                st.metric("Avg Penalty Points", f"{float(ppts):.2f}")
        if pen.get("capped"):
            st.warning("Hit λ cap during search; used closest achievable value.")
        # Optional debug expander if backend provided and DFS_DEBUG
        import os as _os

        if _os.environ.get("DFS_DEBUG") and pen.get("debug"):
            with st.expander("Debug: Ownership Penalty Details", expanded=False):
                st.json(pen["debug"])


# PRP-15 T4: Hash helpers for reproducibility
def hash_projections(projections_df: pd.DataFrame) -> str:
    """Generate reproducible hash of projections data"""
    try:
        # Create sorted DataFrame for consistent hashing
        # Accept both 'pos' and 'position' columns; create a unified 'position'
        df = projections_df.copy()
        if "position" not in df.columns and "pos" in df.columns:
            df = df.rename(columns={"pos": "position"})
        sorted_df = df.sort_values(["name", "team", "position"]).reset_index(drop=True)

        # Include key columns that affect optimization
        hash_columns = [
            "name",
            "team",
            "position",
            "salary",
            "proj",
            "own_proj",
            "stddev",
            "minutes",
        ]
        available_columns = [col for col in hash_columns if col in sorted_df.columns]

        # Convert to JSON string with sorted keys
        hash_data = sorted_df[available_columns].to_dict("records")
        json_str = json.dumps(hash_data, sort_keys=True, default=str)

        # Generate SHA-256 hash
        return hashlib.sha256(json_str.encode()).hexdigest()[
            :16
        ]  # First 16 chars for brevity
    except Exception as e:
        return f"hash_error_{str(e)[:8]}"


def hash_constraints(constraints_dict: dict) -> str:
    """Generate reproducible hash of constraints"""
    try:
        # Create clean constraints dict without session-specific data
        clean_constraints = constraints_dict.copy()

        # Remove items that don't affect optimization reproducibility
        exclusions = ["slate_id", "dk_strict_mode", "preset"]
        for key in exclusions:
            clean_constraints.pop(key, None)

        # Sort keys for consistent hashing
        json_str = json.dumps(clean_constraints, sort_keys=True, default=str)

        # Generate SHA-256 hash
        return hashlib.sha256(json_str.encode()).hexdigest()[
            :16
        ]  # First 16 chars for brevity
    except Exception as e:
        return f"hash_error_{str(e)[:8]}"


def _try_build_projections_used(projections_df):
    """
    Try to build projections_used.csv data from various sources (PRP-18.3)

    Args:
        projections_df: Projections DataFrame from ingest pipeline (may be None)

    Returns:
        DataFrame with columns [dk_id, name, team, position, salary, proj, own_proj] if successful, else None
    """
    # Prefer provided projections_df (ingest path)
    if projections_df is not None:
        df = projections_df.copy()
    else:
        df = None

    # Fallback to DK-strict source if needed
    if (df is None) or ("own_proj" not in df.columns):
        dk_p = Path("dk_data/projections.csv")
        if dk_p.exists():
            df = pd.read_csv(dk_p)
            # Normalize ownership column variants to own_proj if needed
            if "own_proj" not in df.columns:
                # Accept headers (case-insensitive): Own%, Ownership, Ownership%, Projected Ownership, Own pct, own_pct
                ownership_candidates = [
                    "Own%",
                    "Ownership",
                    "Ownership%",
                    "Projected Ownership",
                    "Own pct",
                    "own_pct",
                ]
                for candidate in ownership_candidates:
                    if candidate in df.columns:
                        ser = pd.to_numeric(df[candidate], errors="coerce").astype(
                            float
                        )
                        # If max value > 1.5, divide by 100; clip to [0,1]
                        if ser.max(skipna=True) and ser.max(skipna=True) > 1.5:
                            ser = ser / 100.0
                        df["own_proj"] = ser.clip(0.0, 1.0)
                        break

    if df is None or "own_proj" not in df.columns:
        return None

    # Helpful renames for compatibility: ID→dk_id, TeamAbbrev→team, Name→name, FPTS→proj
    rename_map = {
        "ID": "dk_id",
        "TeamAbbrev": "team",
        "Team": "team",
        "Name": "name",
        "FPTS": "proj",
        "Position": "position",
        "Salary": "salary",
    }
    df = df.rename(columns={k: v for k, v in rename_map.items() if k in df.columns})

    # Select only the columns we want to persist
    cols = [
        c
        for c in ["dk_id", "name", "team", "position", "salary", "proj", "own_proj"]
        if c in df.columns
    ]
    return df[cols] if cols else None


# PRP-15 T3: Telemetry save functionality
def export_with_telemetry(valid_df: pd.DataFrame, projections_df: pd.DataFrame):
    """Export lineups with telemetry to structured directory (PRP-15 T3)"""
    if valid_df is None or valid_df.empty:
        st.error("No valid lineups to export")
        return

    try:
        # Create export directory structure
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        export_dir = Path(f"exports/run_{timestamp}")
        export_dir.mkdir(parents=True, exist_ok=True)

        # Generate DK CSV for import
        dk_csv_content = grid_df_to_dk_csv(valid_df, sport="nba", site="dk")
        dk_csv_path = export_dir / "dk_import.csv"
        with open(dk_csv_path, "w") as f:
            f.write(dk_csv_content)

        # Generate human-readable grid CSV
        slots = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
        header = ["lineup_id"] + slots + ["Salary", "Fpts Proj"]
        grid_rows = [",".join(header)]

        for _, row in valid_df.iterrows():
            lineup_id = str(row["lineup_id"])
            slot_vals = [
                f"{row[f'{s}_name']} ({row[f'{s}_dk_id']} {row[f'{s}_team']})"
                for s in slots
            ]
            slot_vals += [
                str(int(row["total_salary"])),
                f"{float(row['total_proj']):.2f}",
            ]
            grid_rows.append(",".join([lineup_id] + slot_vals))

        grid_csv_path = export_dir / "lineups_grid.csv"
        with open(grid_csv_path, "w") as f:
            f.write("\n".join(grid_rows))

        # PRP-18.3 + PRP Ownership Hardening: Prefer exact solver input for projections_used.csv
        projections_used_path = export_dir / "projections_used.csv"
        copied = False
        try:
            diag = st.session_state.get("id_diagnostics", {})
            # 1) Prefer in-memory contract CSV from diagnostics (single-location flow)
            csv_data = None
            manifest_obj = None
            if isinstance(diag, dict):
                csv_data = diag.get("solver_contract", {}).get("csv")
                manifest_obj = diag.get("solver_contract", {}).get("manifest")
            if csv_data:
                with open(projections_used_path, "w") as f:
                    f.write(csv_data)
                copied = True
                if manifest_obj:
                    import json as _json

                    with open(export_dir / "contract_manifest.json", "w") as mf:
                        _json.dump(manifest_obj, mf, indent=2)
            else:
                # 2) Fallback to any saved path (if DFS_WRITE_CONTRACT_ARTIFACTS was enabled)
                path = None
                solver_dir = None
                if isinstance(diag, dict):
                    solver_path = diag.get("solver_contract", {}).get(
                        "solver_inputs_path"
                    )
                    if solver_path:
                        try:
                            from pathlib import Path as _P

                            p = _P(solver_path)
                            solver_dir = p.parent
                        except Exception:
                            solver_dir = None
                    path = solver_path or diag.get("normalization", {}).get(
                        "ownership", {}
                    ).get("projections_used_path")
                if path and Path(path).exists():
                    with (
                        open(path, "r") as src,
                        open(projections_used_path, "w") as dst,
                    ):
                        dst.write(src.read())
                    copied = True
                    try:
                        if solver_dir and (solver_dir / "manifest.json").exists():
                            with (
                                open(solver_dir / "manifest.json", "r") as srcm,
                                open(
                                    export_dir / "contract_manifest.json", "w"
                                ) as dstm,
                            ):
                                dstm.write(srcm.read())
                    except Exception:
                        pass
        except Exception:
            copied = False

        if not copied:
            # Fallback: try to build from available sources
            proj_used = _try_build_projections_used(projections_df)
            if proj_used is not None:
                with open(projections_used_path, "w") as f:
                    f.write(proj_used.to_csv(index=False))

        # Generate telemetry JSON
        diagnostics = st.session_state.get("id_diagnostics", {})
        constraints_dict = st.session_state.get("optimization_constraints", {})
        preset = st.session_state.get("optimization_preset")
        cp_sat_params = st.session_state.get("optimization_cp_sat_params", {})

        telemetry = {
            "export_info": {
                "timestamp": timestamp,
                "export_time": datetime.now().isoformat(),
                "version": "PRP-15",
                "lineups_exported": len(valid_df),
            },
            "optimization": {
                "engine": diagnostics.get("engine", "unknown"),
                "seed": st.session_state.get("optimization_seed", 0),
                "preset": preset,
                "runtime_sec": st.session_state.get("optimization_runtime", 0.0),
            },
            "solver_metrics": {
                "status": diagnostics.get("status"),
                "best_objective": diagnostics.get("best_objective"),
                "best_bound": diagnostics.get("best_bound"),
                "achieved_gap": diagnostics.get("achieved_gap"),
                "wall_time_sec": diagnostics.get("wall_time_sec"),
            },
            "parameters": cp_sat_params,
            "constraints": constraints_dict,
            "data_hashes": {
                "projections_hash": hash_projections(projections_df),
                "constraints_hash": hash_constraints(constraints_dict),
            },
            # Include ownership normalization and penalty diagnostics if present
            "normalization": diagnostics.get("normalization", {}),
            "ownership_penalty": diagnostics.get("ownership_penalty", {}),
            "pruning": diagnostics.get("pruning", {}),
            "dk_id_diagnostics": {
                "success_rate": diagnostics.get("success_rate", 0.0),
                "matched_players": diagnostics.get("matched_players", 0),
                "total_players": diagnostics.get("total_players", 0),
                "data_source": diagnostics.get("data_source"),
            },
            # Persist contract + wiring info if available so compare panel can use it
            "solver_contract": diagnostics.get("solver_contract", {}),
            "wiring_check": diagnostics.get("wiring_check", {}),
        }

        telemetry_path = export_dir / "telemetry.json"
        with open(telemetry_path, "w") as f:
            json.dump(telemetry, f, indent=2, default=str)

        st.success(f"✅ **Complete Export Created**")
        st.info(f"📁 Export directory: `{export_dir}`")

        # Show export summary
        with st.expander("📋 Export Summary", expanded=False):
            st.write(f"**Directory**: {export_dir}")
            st.write(f"**Files created**:")
            st.write(
                f"• `dk_import.csv` - DK-compatible import file ({len(valid_df)} lineups)"
            )
            st.write(f"• `lineups_grid.csv` - Human-readable lineup grid")
            try:
                chash = diagnostics.get("solver_contract", {}).get("contract_hash")
                if chash:
                    st.write(
                        f"• `projections_used.csv` - Exact solver inputs (contract {chash[:12]})"
                    )
                    if (export_dir / "contract_manifest.json").exists():
                        st.write(
                            f"• `contract_manifest.json` - Copy of solver manifest"
                        )
                else:
                    st.write(f"• `projections_used.csv` - Built from available sources")
            except Exception:
                pass
            st.write(f"• `telemetry.json` - Complete optimization telemetry")
            st.write(f"**Data fingerprints**:")
            st.write(f"• Projections: `{telemetry['data_hashes']['projections_hash']}`")
            st.write(f"• Constraints: `{telemetry['data_hashes']['constraints_hash']}`")

    except Exception as e:
        st.error(f"❌ Export failed: {str(e)}")


def display_solver_diagnostics(diagnostics: dict, selected_engine: str):
    """Enhanced solver diagnostics display (PRP-15 T2)"""
    # Check if we have solver-specific diagnostics
    if "engine" in diagnostics:
        actual_engine = diagnostics["engine"]

        # Create solver status panel - expanded by default for PRP-15
        with st.expander(f"🔧 Solver Diagnostics & Performance", expanded=True):
            col1, col2, col3, col4 = st.columns(4)

            with col1:
                st.metric("Engine", selected_engine.upper())
                if actual_engine == selected_engine:
                    st.success("✅ Match confirmed")
                else:
                    st.error(f"❌ Expected {selected_engine}, got {actual_engine}")

            with col2:
                if actual_engine == "cp_sat":
                    status = diagnostics.get("status", "N/A")
                    st.metric("Status", status)

                    # Enhanced gap display (PRP-15 T2)
                    gap = diagnostics.get("achieved_gap")
                    if gap is not None:
                        gap_pct = gap * 100
                        st.metric("Gap", f"{gap_pct:.3f}%")
                else:
                    st.metric("Status", "CBC (PuLP)")

            with col3:
                n_lineups = diagnostics.get("N", 0)
                st.metric("Lineups", f"{n_lineups}")

                # Enhanced wall time metrics (PRP-15 T2)
                if actual_engine == "cp_sat":
                    wall_time = diagnostics.get("wall_time_sec")
                    if wall_time and n_lineups > 0:
                        avg_time = wall_time / n_lineups
                        st.metric("Avg/Lineup", f"{avg_time:.3f}s")

            with col4:
                # Best objective and bound (PRP-15 T2)
                if actual_engine == "cp_sat":
                    best_obj = diagnostics.get("best_objective")
                    best_bound = diagnostics.get("best_bound")
                    if best_obj is not None:
                        st.metric("Best Obj", f"{best_obj:.1f}")
                    if best_bound is not None:
                        st.metric("Best Bound", f"{best_bound:.1f}")

            # Show preset information (PRP-15)
            preset = st.session_state.get("optimization_preset")
            if preset and actual_engine == "cp_sat":
                st.markdown(f"**🎯 Preset Used**: {preset}")

                # Show preset description
                if preset == "Speed":
                    st.info(
                        "🚀 Speed preset: Optimized for fast results (0.7s, 0.1% gap)"
                    )
                elif preset == "Repro":
                    st.info(
                        "🔍 Repro preset: Full optimization for reproducibility (8s, 0% gap)"
                    )
                elif preset == "Custom":
                    st.info("🛠️ Custom preset: User-defined parameters")

            # Enhanced parameter summary (PRP-15 T2)
            if actual_engine == "cp_sat" and "params" in diagnostics:
                params = diagnostics["params"]
                st.markdown("**⚙️ Solver Parameters:**")
                param_cols = st.columns(4)

                with param_cols[0]:
                    time_limit = params.get("max_time_in_seconds", "N/A")
                    st.write(f"**Time**: {time_limit}s")

                with param_cols[1]:
                    gap_limit = params.get("relative_gap_limit", "N/A")
                    if isinstance(gap_limit, (int, float)) and gap_limit > 0:
                        st.write(f"**Gap**: {gap_limit*100:.1f}%")
                    else:
                        st.write(f"**Gap**: 0% (optimal)")

                with param_cols[2]:
                    workers = params.get("num_search_workers", "N/A")
                    worker_text = (
                        "All cores"
                        if workers == 0
                        else f"{workers} worker{'s' if workers != 1 else ''}"
                    )
                    st.write(f"**Workers**: {worker_text}")

                with param_cols[3]:
                    seed = params.get("random_seed", "N/A")
                    st.write(f"**Seed**: {seed}")

            # Show PRP-13 Pruning diagnostics (CP-SAT only)
            if actual_engine == "cp_sat" and "pruning" in diagnostics:
                pruning = diagnostics["pruning"]
                if pruning.get("enabled"):
                    st.markdown("**🚀 PRP-13 Safe Position-Aware Pruning:**")
                    prune_cols = st.columns(3)

                    with prune_cols[0]:
                        st.metric(
                            "Original Players", pruning.get("original_players", "N/A")
                        )
                    with prune_cols[1]:
                        st.metric("Players Kept", pruning.get("kept_players", "N/A"))
                    with prune_cols[2]:
                        reduction = pruning.get("reduction_pct", 0)
                        st.metric("Reduction", f"{reduction}%")

                    # Show top pruned players if any
                    if pruning.get("top_pruned"):
                        st.write(
                            f"🔍 **Top pruned players**: {', '.join(pruning['top_pruned'])}"
                        )

                    # Show locks kept if any
                    locks_kept = pruning.get("locks_kept", 0)
                    if locks_kept > 0:
                        st.write(f"🔒 **Locks kept**: {locks_kept}")


def display_compare_panel():
    """
    Display run comparison panel — simplified to manual export selection only
    for testing stability. We can re-enable history later.
    """
    with st.expander("🆚 Compare Runs", expanded=True):
        display_export_folder_comparison()


def display_export_folder_comparison():
    """Display UI for comparing runs from export folders"""
    col1, col2 = st.columns(2)

    with col1:
        export_path_a = st.text_input(
            "Export Folder A",
            placeholder="exports/run_20240101_120000",
            key="export_path_a",
        )

    with col2:
        export_path_b = st.text_input(
            "Export Folder B",
            placeholder="exports/run_20240101_130000",
            key="export_path_b",
        )

    # Top-N selector
    top_n = st.number_input("Top-N for Jaccard", 10, 500, 50, key="export_jaccard_n")

    if export_path_a and export_path_b:
        # Try to read export runs
        run_a = read_export_run(export_path_a)
        run_b = read_export_run(export_path_b)

        if run_a and run_b:
            st.success("✅ Successfully loaded both export runs")
            display_run_comparison(run_a, run_b, top_n)
        else:
            if not run_a:
                st.error(f"❌ Could not load run from: {export_path_a}")
            if not run_b:
                st.error(f"❌ Could not load run from: {export_path_b}")


def display_run_comparison(run_a: dict, run_b: dict, top_n: int):
    """Display detailed comparison between two runs"""

    # Run metadata comparison
    st.markdown("### 📋 Run Metadata")

    col1, col2 = st.columns(2)
    with col1:
        st.markdown("**Run A**")
        st.write(f"🏷️ **Label**: {format_run_label(run_a)}")
        st.write(f"⚙️ **Engine**: {run_a.get('engine', 'Unknown')}")
        st.write(f"🎲 **Seed**: {run_a.get('seed', 'N/A')}")
        st.write(f"🔧 **Preset**: {run_a.get('preset', 'N/A')}")
        st.write(f"⏱️ **Runtime**: {run_a.get('runtime_sec', 0):.2f}s")
        ch_a = run_a.get("contract_hash")
        if ch_a:
            st.write(f"📄 **Contract**: {str(ch_a)[:12]}")

    with col2:
        st.markdown("**Run B**")
        st.write(f"🏷️ **Label**: {format_run_label(run_b)}")
        st.write(f"⚙️ **Engine**: {run_b.get('engine', 'Unknown')}")
        st.write(f"🎲 **Seed**: {run_b.get('seed', 'N/A')}")
        st.write(f"🔧 **Preset**: {run_b.get('preset', 'N/A')}")
        st.write(f"⏱️ **Runtime**: {run_b.get('runtime_sec', 0):.2f}s")
        ch_b = run_b.get("contract_hash")
        if ch_b:
            st.write(f"📄 **Contract**: {str(ch_b)[:12]}")

    # Check for slate compatibility
    hash_a = run_a.get("constraints_hash", "unknown")
    hash_b = run_b.get("constraints_hash", "unknown")
    if hash_a != hash_b and hash_a != "unknown" and hash_b != "unknown":
        st.warning("⚠️ **Different slates detected** - constraints hashes don't match")
    # Contract hash mismatch warning helps avoid comparing against wrong inputs
    ch_a = run_a.get("contract_hash")
    ch_b = run_b.get("contract_hash")
    if ch_a and ch_b and ch_a != ch_b:
        st.warning("⚠️ **Different contract inputs** - contract hashes don't match")

    # Get DataFrames
    df_a = run_a.get("valid_df")
    df_b = run_b.get("valid_df")

    if df_a is None or df_b is None:
        st.error("❌ Missing lineup data for comparison")
        return

    # PRP-18.1a: Normalize columns immediately after loading
    df_a = normalize_grid_columns(df_a)
    df_b = normalize_grid_columns(df_b)

    # Projection summary
    st.markdown("### 📊 Projection Summary")

    stats_a = projection_stats(df_a)
    stats_b = projection_stats(df_b)

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("Mean A", f"{stats_a['mean']:.1f}")
        st.metric("Mean B", f"{stats_b['mean']:.1f}")
        delta_mean = stats_b["mean"] - stats_a["mean"]
        st.metric("Δ Mean", f"{delta_mean:+.2f}")

    with col2:
        st.metric("Median A", f"{stats_a['median']:.1f}")
        st.metric("Median B", f"{stats_b['median']:.1f}")
        delta_median = stats_b["median"] - stats_a["median"]
        st.metric("Δ Median", f"{delta_median:+.2f}")

    with col3:
        st.metric("P95 A", f"{stats_a['p95']:.1f}")
        st.metric("P95 B", f"{stats_b['p95']:.1f}")
        delta_p95 = stats_b["p95"] - stats_a["p95"]
        st.metric("Δ P95", f"{delta_p95:+.2f}")

    with col4:
        st.metric("Top A", f"{stats_a['top']:.1f}")
        st.metric("Top B", f"{stats_b['top']:.1f}")
        delta_top = stats_b["top"] - stats_a["top"]
        st.metric("Δ Top", f"{delta_top:+.2f}")

    # PRP-18.1: Lineup overlap (both Jaccard metrics)
    st.markdown("### 🎯 Lineup Overlap")

    col_j1, col_j2 = st.columns(2)

    with col_j1:
        try:
            # Pairwise Top-N Jaccard
            jaccard_pw = jaccard_pairwise(df_a, df_b, top_n)
            if jaccard_pw is not None:
                st.metric(f"Pairwise Top-{top_n} Jaccard", f"{jaccard_pw:.3f}")

                if jaccard_pw > 0.8:
                    st.success("🟢 High pairwise overlap")
                elif jaccard_pw > 0.5:
                    st.info("🟡 Moderate pairwise overlap")
                else:
                    st.warning("🔴 Low pairwise overlap")
            else:
                st.metric(f"Pairwise Top-{top_n} Jaccard", "N/A")
                st.info(
                    "ℹ️ Projection column not found; normalize failed or export schema changed."
                )

        except Exception as e:
            st.error(f"❌ Failed to calculate pairwise Jaccard: {str(e)}")

    with col_j2:
        try:
            # Aggregate Pool Jaccard
            jaccard_pool_val = jaccard_pool(df_a, df_b, top_n)
            if jaccard_pool_val is not None:
                st.metric(
                    f"Aggregate Pool Top-{top_n} Jaccard", f"{jaccard_pool_val:.3f}"
                )

                if jaccard_pool_val > 0.8:
                    st.success("🟢 High pool overlap")
                elif jaccard_pool_val > 0.5:
                    st.info("🟡 Moderate pool overlap")
                else:
                    st.warning("🔴 Low pool overlap")
            else:
                st.metric(f"Aggregate Pool Top-{top_n} Jaccard", "N/A")
                st.info(
                    "ℹ️ Projection column not found; normalize failed or export schema changed."
                )

        except Exception as e:
            st.error(f"❌ Failed to calculate pool Jaccard: {str(e)}")

    # PRP-18.1: Player exposures comparison with robust delta computation
    st.markdown("### 👥 Player Exposure Deltas")

    try:
        # Use new robust exposure delta function
        exposure_deltas_robust = exposure_delta(df_a, df_b)

        if not exposure_deltas_robust.empty:
            # Limit to top 100 by absolute delta for performance
            display_deltas = exposure_deltas_robust.head(100).copy()

            # Format for display
            display_deltas["A_pct"] = display_deltas["A"].apply(lambda x: f"{x:.1%}")
            display_deltas["B_pct"] = display_deltas["B"].apply(lambda x: f"{x:.1%}")
            display_deltas["delta_pct"] = display_deltas["delta"].apply(
                lambda x: f"{x:+.1%}"
            )

            # Show formatted table
            st.dataframe(
                display_deltas[["A_pct", "B_pct", "delta_pct"]].rename(
                    columns={
                        "A_pct": "Exposure A",
                        "B_pct": "Exposure B",
                        "delta_pct": "Δ Exposure",
                    }
                ),
                use_container_width=True,
                height=300,
            )

            # CSV download with raw values
            if st.button("📥 Download Exposure Deltas CSV", key="download_exposures"):
                csv_content = exposure_deltas_robust.to_csv(index=True)
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                st.download_button(
                    label="💾 exposures_delta.csv",
                    data=csv_content,
                    file_name=f"exposures_delta_{timestamp}.csv",
                    mime="text/csv",
                )
        else:
            st.info("ℹ️ No player IDs parsed; cannot compute exposures.")

    except Exception as e:
        st.error(f"❌ Failed to calculate exposure deltas: {str(e)}")
        # Fallback to legacy approach
        try:
            exposures_a = exposure_table(df_a)
            exposures_b = exposure_table(df_b)
            if not exposures_a.empty and not exposures_b.empty:
                st.info("ℹ️ Using fallback exposure calculation")
                legacy_deltas = calculate_exposure_delta(exposures_a, exposures_b)
                if not legacy_deltas.empty:
                    st.dataframe(legacy_deltas.head(20), use_container_width=True)
        except Exception as fallback_e:
            st.error(f"❌ Fallback also failed: {str(fallback_e)}")

    # PRP-18.1: Stack frequency comparison with robust delta computation
    st.markdown("### 🏗️ Stack Frequency Deltas")

    try:
        # Use new robust stack delta function
        stack_deltas_robust = stack_delta(df_a, df_b)

        if not stack_deltas_robust.empty:
            # Show aligned table with A, B, delta columns
            st.dataframe(
                stack_deltas_robust.rename(
                    columns={"A": "Freq A", "B": "Freq B", "delta": "Δ Freq"}
                ),
                use_container_width=True,
                height=200,
            )

            # CSV download with raw values
            if st.button("📥 Download Stack Deltas CSV", key="download_stacks"):
                csv_content = stack_deltas_robust.to_csv(index=True)
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                st.download_button(
                    label="💾 stacks_delta.csv",
                    data=csv_content,
                    file_name=f"stacks_delta_{timestamp}.csv",
                    mime="text/csv",
                )
        else:
            st.info("ℹ️ No stack data available for comparison")

    except Exception as e:
        st.error(f"❌ Failed to calculate stack deltas: {str(e)}")
        # Fallback to legacy approach
        try:
            stacks_a = stack_freqs(df_a)
            stacks_b = stack_freqs(df_b)
            if not stacks_a.empty and not stacks_b.empty:
                st.info("ℹ️ Using fallback stack calculation")
                legacy_stacks = calculate_stack_delta(stacks_a, stacks_b)
                if not legacy_stacks.empty:
                    st.dataframe(legacy_stacks.head(20), use_container_width=True)
        except Exception as fallback_e:
            st.error(f"❌ Fallback also failed: {str(fallback_e)}")

    # Ownership penalty diagnostics comparison
    display_ownership_penalty_comparison(run_a, run_b)

    # Ownership trends (if available)
    display_ownership_trends_comparison(df_a, df_b, run_a, run_b)


def display_ownership_penalty_comparison(run_a: dict, run_b: dict):
    """Display ownership penalty diagnostics comparison"""
    diag_a = run_a.get("diagnostics", {}).get("ownership_penalty")
    diag_b = run_b.get("diagnostics", {}).get("ownership_penalty")

    if diag_a or diag_b:
        st.markdown("### 🎯 Ownership Penalty Comparison")

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("**Run A**")
            if diag_a:
                display_ownership_penalty_box(diag_a)
            else:
                st.info("No ownership penalty used")

        with col2:
            st.markdown("**Run B**")
            if diag_b:
                display_ownership_penalty_box(diag_b)
            else:
                st.info("No ownership penalty used")


def display_ownership_penalty_box(penalty_diag: dict):
    """Display ownership penalty diagnostics in compact format"""
    mode = penalty_diag.get("mode", "—")
    lambda_used = penalty_diag.get("lambda_used")
    target_pct = penalty_diag.get("target_offoptimal_pct")
    achieved_pct = penalty_diag.get("achieved_offoptimal_pct")
    chalk_index = penalty_diag.get("avg_chalk_index")
    penalty_points = penalty_diag.get("avg_penalty_points")
    capped = penalty_diag.get("capped", False)

    st.write(f"**Mode**: {mode.replace('_', ' ').title()}")
    if lambda_used is not None:
        st.write(f"**λ**: {lambda_used:.3f}")
    if target_pct is not None:
        st.write(f"**Target % Off**: {target_pct*100:.1f}%")
    if achieved_pct is not None:
        st.write(f"**Achieved % Off**: {achieved_pct*100:.1f}%")
    if chalk_index is not None:
        st.write(f"**Avg Chalk Index**: {chalk_index:.2f}")
    if penalty_points is not None:
        st.write(f"**Avg Penalty Pts**: {penalty_points:.2f}")
    if capped:
        st.warning("⚠️ Hit λ cap during search")


def display_ownership_trends_comparison(
    df_a: pd.DataFrame, df_b: pd.DataFrame, run_a: dict, run_b: dict
):
    """Ownership trends that are robust to DK-strict vs ingest flows (PRP-18.3).
    Prefers each export's own `projections_used.csv`, then falls back to
    normalized parquet, then dk_data/projections.csv.
    """
    from pathlib import Path

    st.markdown("### 📈 Ownership Trends")

    # Export paths (may be missing for in-session runs)
    export_path_a = run_a.get("export_path")
    export_path_b = run_b.get("export_path")

    # Load ownership for each side using PRP-18.3 order
    own_a = (
        load_export_ownership(Path(export_path_a))
        if export_path_a
        else load_export_ownership(Path("."))
    )
    own_b = (
        load_export_ownership(Path(export_path_b))
        if export_path_b
        else load_export_ownership(Path("."))
    )

    # Join ownership onto lineup grids (computes own_sum / own_prod when possible)
    df_a_own = try_join_ownership_with_data(df_a, own_a) if own_a is not None else None
    df_b_own = try_join_ownership_with_data(df_b, own_b) if own_b is not None else None

    if df_a_own is None and df_b_own is None:
        st.info(
            "Ownership data not available — no usable `own_proj` found in export, normalized parquet, or dk_data."
        )
        return

    # Top-N from UI (fallback to 50)
    top_n = (
        st.session_state.get("jaccard_n")
        or st.session_state.get("export_jaccard_n")
        or 50
    )
    c1, c2 = st.columns(2)

    def _render_side(df_own: pd.DataFrame, label: str, col):
        if df_own is None or df_own.empty:
            with col:
                st.metric(f"Avg Own Sum {label} (Top-{top_n})", "N/A")
                st.metric(f"Avg Own Prod {label} (Top-{top_n})", "N/A")
            return
        ranked = df_own.sort_values("total_proj", ascending=False).head(int(top_n))
        avg_sum_pct = (
            float(ranked["own_sum"].mean() * 100.0)
            if "own_sum" in ranked.columns
            else None
        )
        avg_prod = (
            float(ranked["own_prod"].mean())
            if "own_prod" in ranked.columns and not ranked["own_prod"].isna().all()
            else None
        )
        with col:
            st.metric(
                f"Avg Own Sum {label} (Top-{top_n})",
                f"{avg_sum_pct:.1f}%" if avg_sum_pct is not None else "N/A",
            )
            st.metric(
                f"Avg Own Prod {label} (Top-{top_n})",
                f"{avg_prod:.4f}" if avg_prod is not None else "N/A",
            )

    _render_side(df_a_own, "A", c1)
    _render_side(df_b_own, "B", c2)

    # Source caption (helps debug which source fed ownership)
    def _source_caption(run: dict, own_df: pd.DataFrame | None) -> str:
        # Prefer attrs from loader if present
        if own_df is not None and hasattr(own_df, "attrs"):
            src = own_df.attrs.get("source")
            scaled = own_df.attrs.get("scaled_by")
            if src:
                if scaled and float(scaled) > 1.0:
                    return f"{src} (÷{int(scaled)})"
                return f"{src}"
        # Fallback inference by paths
        p = run.get("export_path")
        if p and (Path(p) / "projections_used.csv").exists():
            return "export’s `projections_used.csv`"
        if Path("data/normalized/projections.parquet").exists():
            return "normalized parquet"
        if Path("dk_data/projections.csv").exists():
            return "dk_data/projections.csv"
        return "unknown"

    st.caption(
        f"Ownership sources — A: {_source_caption(run_a, own_a)} · B: {_source_caption(run_b, own_b)}"
    )


def persist_run_to_history(valid_df: pd.DataFrame, site: str, runtime: float):
    """
    Persist run artifact to session history for comparison (PRP-18.1)

    Args:
        valid_df: Validated lineup DataFrame
        site: Site identifier (e.g., 'dk')
        runtime: Optimization runtime in seconds
    """
    try:
        # Get session state data
        constraints_dict = st.session_state.get("optimization_constraints", {})
        seed = st.session_state.get("optimization_seed", 0)
        preset = st.session_state.get("optimization_preset")
        id_diagnostics = st.session_state.get("id_diagnostics", {})
        engine = id_diagnostics.get("engine", "unknown")

        # Generate timestamp
        timestamp = datetime.now().strftime("%H%M%S")

        # PRP-18.1: Create run artifact with run_id and deep copy
        artifact = {
            "run_id": generate_run_id(),  # PRP-18.1: Unique run ID (UUID)
            "label": f"{site.upper()} • {engine.upper()} • seed={seed} • {preset or '—'} • {timestamp}",
            "timestamp": timestamp,
            "engine": engine,
            "site": site,
            "seed": seed,
            "preset": preset,
            "constraints_hash": hash_constraints(constraints_dict),
            "valid_df": valid_df.copy(
                deep=True
            ),  # PRP-18.1: Deep copy to avoid aliasing
            "diagnostics": id_diagnostics,
            "runtime_sec": runtime,
        }

        # Initialize or update run history
        if "run_history" not in st.session_state:
            st.session_state["run_history"] = []

        st.session_state["run_history"].append(artifact)

        # Cap history length to 5 (keep most recent)
        st.session_state["run_history"] = st.session_state["run_history"][-5:]

    except Exception as e:
        # Don't fail the main flow, just log the error
        print(f"Failed to persist run to history: {e}")


if __name__ == "__main__":
    main()
</file>

<file path="processes/optimizer/_legacy/pruning.py">
from typing import List, Dict, Set, Any, Optional

BASES = ("PG", "SG", "SF", "PF", "C")


def prune_safely(
    players_in: List[Dict[str, Any]],
    *,
    locks: Optional[List[str]] = None,
    proj_floor: Optional[float] = None,
    k_per_pos: int = 24,
    k_global: int = 48,
    keep_value_per_pos: int = 4,
) -> List[Dict[str, Any]]:
    locks = set(locks or [])
    # 0) projection floor (locks bypass floor)
    pool = [
        p
        for p in players_in
        if proj_floor is None or p["proj"] >= proj_floor or p["player_id"] in locks
    ]

    # 1) top-K per base
    per_pos_keep: Set[str] = set()
    for b in BASES:
        bucket = [p for p in pool if b in p["positions"]]
        bucket.sort(key=lambda x: x["proj"], reverse=True)
        per_pos_keep.update(p["player_id"] for p in bucket[:k_per_pos])

    # 2) top-K global
    global_keep = {
        p["player_id"]
        for p in sorted(pool, key=lambda x: x["proj"], reverse=True)[:k_global]
    }

    # 3) value safety: keep a few cheapest per base
    value_keep: Set[str] = set()
    for b in BASES:
        bucket = [p for p in pool if b in p["positions"]]
        bucket.sort(key=lambda x: x["salary"])
        value_keep.update(p["player_id"] for p in bucket[:keep_value_per_pos])

    keep_ids = locks | per_pos_keep | global_keep | value_keep
    pruned = [p for p in pool if p["player_id"] in keep_ids]

    # guardrail: ensure at least one candidate for each base
    assert all(
        any(b in p["positions"] for p in pruned) for b in BASES
    ), "Pruning removed a base position."
    return pruned
</file>

<file path="processes/optimizer/adapter.py">
from __future__ import annotations

import argparse
import hashlib
import json
import os
import sys
from collections.abc import Callable, Mapping, Sequence
from datetime import UTC, datetime
from pathlib import Path
from typing import (
    Any,
)

import pandas as pd

from pipeline.io.files import ensure_dir, write_parquet
from pipeline.io.validate import load_schema, validate_obj

# Resolve repo root (two levels up from this file) and schemas root
REPO_ROOT = Path(__file__).resolve().parents[2]
SCHEMAS_ROOT = REPO_ROOT / "pipeline" / "schemas"


RunOptimizerFn = Callable[[pd.DataFrame, dict[str, Any], int, str, str], Any]


DK_SLOTS_ORDER = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]


def _utc_now_iso() -> str:
    # Millisecond precision per schema pattern
    now = datetime.now(UTC)
    ms = int(now.microsecond / 1000)
    return f"{now.strftime('%Y-%m-%dT%H:%M:%S')}.{ms:03d}Z"


def _sha256_of_path(path: Path) -> str:
    h = hashlib.sha256()
    with path.open("rb") as f:
        for chunk in iter(lambda: f.read(8192), b""):
            h.update(chunk)
    return h.hexdigest()


def _load_optimizer() -> RunOptimizerFn:
    """Dynamically load the optimizer implementation.

    Tries to import the legacy UI module's run function lazily to avoid bringing
    Streamlit into adapter import time. Tests can monkeypatch this function.
    """
    # Allow override via env var module path: module:function
    override = os.environ.get("OPTIMIZER_IMPL")

    if override:
        mod_name, _, fn_name = override.partition(":")
        mod = __import__(mod_name, fromlist=[fn_name or "run_optimizer"])
        fn = getattr(mod, fn_name or "run_optimizer")
        from typing import cast

        return cast(RunOptimizerFn, fn)

    # Fallback: try legacy location (imports Streamlit inside that module, but
    # only at call time, not at adapter import time)
    try:
        from typing import cast

        from processes.optimizer._legacy.optimize import run_optimizer as _run

        return cast(RunOptimizerFn, _run)
    except Exception as e:  # pragma: no cover - exercised in smoke tests via monkeypatch
        raise ImportError(
            "No optimizer implementation available. Provide OPTIMIZER_IMPL or monkeypatch _load_optimizer in tests."
        ) from e


def _coerce_scalar(val: str) -> int | float | bool | str:
    lower = val.lower()
    if lower in ("true", "false"):
        return lower == "true"
    try:
        if "." in val:
            return float(val)
        return int(val)
    except ValueError:
        return val


def load_config(config_path: Path | None, inline_kv: Sequence[str] | None = None) -> dict[str, Any]:
    cfg: dict[str, Any] = {}
    if config_path:
        text = config_path.read_text(encoding="utf-8")
        if config_path.suffix.lower() in (".yaml", ".yml"):
            import yaml  # lazy

            cfg = dict(yaml.safe_load(text) or {})
        else:
            cfg = dict(json.loads(text))
    if inline_kv:
        for item in inline_kv:
            if "=" not in item:
                continue
            k, v = item.split("=", 1)
            cfg[k.strip()] = _coerce_scalar(v.strip())
    return cfg


def map_config_to_constraints(config: Mapping[str, Any]) -> dict[str, Any]:
    """Translate user config to the solver constraints dict.

    Unknown keys are preserved (pass-through) to allow downstream expansions; we
    add warnings at call sites if needed.
    """
    c: dict[str, Any] = {}

    # Core
    for key in (
        "num_lineups",
        "max_salary",
        "min_salary",
        "uniques",
        "max_from_team",
        "min_from_team",
        "randomness",
        "position_rules",
    ):
        if key in config:
            c[key] = config[key]

    # Lists
    for key in ("lock", "ban"):
        if key in config:
            c[key] = list(config[key])

    # Nested
    for key in ("exposure_caps", "stacking", "group_rules", "ownership_penalty"):
        if key in config:
            c[key] = config[key]

    # Optional CP-SAT parameters
    for key in ("cp_sat_params", "preset", "dk_strict_mode"):
        if key in config:
            c[key] = config[key]

    return c


def _find_projections(
    slate_id: str,
    in_root: Path,
    explicit_input: Path | None = None,
) -> Path:
    if explicit_input is not None:
        return explicit_input
    # 1) Canonical pointer if present
    candidate_pointer = in_root / "processed" / "current" / "projections.parquet"
    if candidate_pointer.exists():
        return candidate_pointer

    # 2) PRP-1 normalized pattern: data/projections/normalized/<slate_id>__<source>__<updated_ts>.parquet
    normalized_dir = in_root / "projections" / "normalized"
    if normalized_dir.exists():
        matches = sorted(normalized_dir.glob(f"{slate_id}__*.parquet"))
        if matches:
            # Prefer filename tail (updated_ts) first for speed; fallback to reading column
            def tail_key(path: Path) -> str:
                tail = path.stem.split("__")[-1]
                return tail or ""

            keyed: list[tuple[Path, str]] = [(p, tail_key(p)) for p in matches]
            # If any key is empty, fallback to reading updated_ts column for that path
            best: tuple[Path, str] | None = None
            for p, key in keyed:
                if not key:
                    try:
                        ts_col = pd.read_parquet(p, columns=["updated_ts"])
                        key = str(ts_col["updated_ts"].max()) if not ts_col.empty else ""
                    except Exception:
                        key = ""
                if not key:
                    key = str(p.stat().st_mtime_ns)
                if best is None or key > best[1]:
                    best = (p, key)
            if best is not None:
                return best[0]

    # 3) Legacy/simple fallbacks
    legacy_candidates = [
        in_root / "projections" / "normalized" / f"{slate_id}.parquet",
        in_root / "projections" / "normalized" / slate_id / "projections.parquet",
        in_root / "processed" / slate_id / "projections.parquet",
    ]
    for p in legacy_candidates:
        if p.exists():
            return p

    looked = (
        [candidate_pointer]
        + ([normalized_dir / f"{slate_id}__*.parquet"] if normalized_dir.exists() else [])
        + legacy_candidates
    )
    raise FileNotFoundError(
        f"No projections parquet found for slate_id={slate_id}. Looked in/for: {', '.join(str(p) for p in looked)}"
    )


def _to_solver_df(df: pd.DataFrame) -> pd.DataFrame:
    # Minimal columns expected by solver
    required = ["dk_player_id", "pos", "salary", "proj_fp"]
    missing = [c for c in required if c not in df.columns]
    if missing:
        raise ValueError(f"Missing required columns in projections: {missing}")
    # Map to conventional names used by legacy solvers
    out = df.copy()
    out = out.rename(columns={"dk_player_id": "player_id", "pos": "position"})
    return out


def _execute_optimizer(
    projections_df: pd.DataFrame,
    constraints_dict: dict[str, Any],
    seed: int,
    site: str,
    engine: str,
) -> tuple[list[dict[str, Any]], dict[str, Any]]:
    run_opt = _load_optimizer()
    res = run_opt(projections_df, constraints_dict, seed, site, engine)
    # Support either lineups or (lineups, telemetry)
    if isinstance(res, tuple) and len(res) >= 1:
        lineups = list(res[0])
        telemetry = dict(res[1]) if len(res) > 1 and isinstance(res[1], Mapping) else {}
    else:
        lineups = list(res)
        telemetry = {}
    return lineups, telemetry


def export_csv_row(players: Sequence[str], dk_positions_filled: Sequence[Mapping[str, Any]]) -> str:
    """Build DK CSV preview in header order PG,SG,SF,PF,C,G,F,UTIL.

    This is a preview string (not a DK-uploadable row). It expects
    `players[i]` corresponds to `dk_positions_filled[i]` and serializes as
    "<slot> <dk_player_id>" tokens in the canonical slot order.
    """
    slot_to_player: dict[str, str] = {}
    for idx, slot in enumerate(dk_positions_filled):
        slot_to_player[str(slot.get("slot"))] = str(players[idx])
    cols: list[str] = []
    for slot_label in DK_SLOTS_ORDER:
        pid = slot_to_player.get(slot_label, "")
        cols.append(f"{slot_label} {pid}".strip())
    return ",".join(cols)


def _sanity_check_lineup(
    players: Sequence[Any],
    dk_positions_filled: Sequence[Mapping[str, Any]],
    total_salary: int | float,
) -> None:
    if len(players) != 8:
        raise ValueError(f"Invalid lineup: expected 8 players, got {len(players)}")
    if len(dk_positions_filled) != 8:
        raise ValueError(f"Invalid lineup: expected 8 DK slots, got {len(dk_positions_filled)}")
    slots = {str(s.get("slot")) for s in dk_positions_filled}
    if set(DK_SLOTS_ORDER) != slots:
        raise ValueError(f"Invalid DK slots: expected {DK_SLOTS_ORDER}, got {sorted(slots)}")
    try:
        if int(total_salary) > 50000:
            raise ValueError(f"Invalid lineup salary: {total_salary} exceeds DK cap 50000")
    except Exception as err:
        raise ValueError(f"Invalid lineup salary value: {total_salary}") from err


def _build_lineups_df(run_id: str, lineups: Sequence[Mapping[str, Any]]) -> pd.DataFrame:
    rows: list[dict[str, Any]] = []
    for i, lp in enumerate(lineups, start=1):
        players = list(lp.get("players") or [])
        dk_pos = list(lp.get("dk_positions_filled") or [])
        row: dict[str, Any] = {
            "run_id": run_id,
            "lineup_id": f"L{i}",
            "players": players,
            "dk_positions_filled": dk_pos,
            "total_salary": int(lp.get("total_salary", 0)),
            "proj_fp": float(lp.get("proj_fp", 0.0)),
        }
        if "ceil_fp" in lp:
            row["ceil_fp"] = float(lp["ceil_fp"])  # optional
        if "own_proj" in lp:
            row["own_proj"] = float(lp["own_proj"])  # optional
        row["export_csv_row"] = export_csv_row(players, dk_pos)
        _sanity_check_lineup(players, dk_pos, int(row["total_salary"]))
        rows.append(row)
    return pd.DataFrame(rows)


def _build_metrics_df(run_id: str, lineups_df: pd.DataFrame) -> pd.DataFrame:
    proj = lineups_df["proj_fp"].astype(float)
    salary = lineups_df["total_salary"].astype(int)
    aggregates = {
        "mean_proj": float(proj.mean()) if not proj.empty else 0.0,
        "median_proj": float(proj.median()) if not proj.empty else 0.0,
        "stdev_proj": float(proj.std(ddof=0)) if len(proj) > 1 else 0.0,
        "salary_utilization_mean": float(salary.mean()) if not salary.empty else 0.0,
    }
    return pd.DataFrame(
        [
            {
                "run_id": run_id,
                "aggregates": aggregates,
                # distributions optional; can be populated later
            }
        ]
    )


def _schema_version(schemas_root: Path | None, name: str) -> str:
    schema = load_schema((schemas_root or SCHEMAS_ROOT) / f"{name}.schema.yaml")
    v = str(schema.get("version", "0.0.0"))
    return v


def run_adapter(
    *,
    slate_id: str,
    site: str,
    config_path: Path | None,
    config_kv: Sequence[str] | None,
    engine: str,
    seed: int,
    out_root: Path,
    tag: str | None = None,
    in_root: Path | None = None,
    input_path: Path | None = None,
    schemas_root: Path | None = None,
) -> dict[str, Any]:
    # Resolve paths and identifiers
    created_ts = _utc_now_iso()

    in_root_eff = in_root or Path("data")
    out_root_eff = out_root

    proj_path = _find_projections(slate_id, in_root_eff, input_path)
    projections_df = pd.read_parquet(proj_path)
    solver_df = _to_solver_df(projections_df)

    # Site preflight (DK only for now)
    if str(site).upper() != "DK":
        raise ValueError(f"Unsupported site '{site}'. Only 'DK' is supported in this adapter.")

    cfg = load_config(config_path, config_kv)
    constraints = map_config_to_constraints(cfg)

    lineups, telemetry = _execute_optimizer(solver_df, constraints, seed, site, engine)

    # Build manifest inputs and compute run_id (portable with short hash)
    schemas_root = schemas_root or SCHEMAS_ROOT
    manifest_schema = load_schema(schemas_root / "manifest.schema.yaml")

    # Build inputs list: projections + config (file and/or inline overrides)
    proj_sha = _sha256_of_path(proj_path)
    inputs_list: list[dict[str, Any]] = [
        {
            "path": str(proj_path),
            "content_sha256": proj_sha,
            "role": "projections_normalized",
        }
    ]

    # Hash resolved config for determinism
    cfg_json = json.dumps(cfg, sort_keys=True, separators=(",", ":"))
    cfg_sha = hashlib.sha256(cfg_json.encode("utf-8")).hexdigest()
    if config_path is not None and config_path.exists():
        inputs_list.append(
            {
                "path": str(config_path),
                "content_sha256": _sha256_of_path(config_path),
                "role": "config",
            }
        )
    if config_kv:
        kv_parsed: dict[str, Any] = {}
        for item in config_kv:
            if "=" not in item:
                continue
            k, v = item.split("=", 1)
            kv_parsed[k.strip()] = _coerce_scalar(v.strip())
        inputs_list.append(
            {
                "path": "inline:config_kv",
                "content_sha256": hashlib.sha256(
                    json.dumps(kv_parsed, sort_keys=True, separators=(",", ":")).encode("utf-8")
                ).hexdigest(),
                "role": "config",
            }
        )

    # Portable run_id: YYYYMMDD_HHMMSS_<shorthash>
    ts = datetime.now(UTC)
    run_id_core = ts.strftime("%Y%m%d_%H%M%S")
    short_hash = hashlib.sha256(
        f"{proj_sha}|{cfg_sha}|{seed}|{site}|{engine}".encode()
    ).hexdigest()[:8]
    run_id = f"{run_id_core}_{short_hash}"

    # Now we can build artifacts under the finalized run_id
    run_dir = out_root_eff / "runs" / "optimizer" / run_id
    artifacts_dir = run_dir / "artifacts"
    ensure_dir(artifacts_dir)

    lineups_df = _build_lineups_df(run_id, lineups)
    metrics_df = _build_metrics_df(run_id, lineups_df)

    # Validate lineups & metrics against their schemas before any write (fail fast)
    lineups_schema = load_schema(schemas_root / "optimizer_lineups.schema.yaml")
    metrics_schema = load_schema(schemas_root / "optimizer_metrics.schema.yaml")
    for row in lineups_df.to_dict(orient="records"):
        validate_obj(lineups_schema, row, schemas_root=schemas_root)
    for row in metrics_df.to_dict(orient="records"):
        validate_obj(metrics_schema, row, schemas_root=schemas_root)

    lineups_path = artifacts_dir / "lineups.parquet"
    metrics_path = artifacts_dir / "metrics.parquet"
    write_parquet(lineups_df, lineups_path)
    write_parquet(metrics_df, metrics_path)

    # Build manifest
    manifest = {
        "schema_version": _schema_version(schemas_root, "manifest"),
        "run_id": run_id,
        "run_type": "optimizer",
        "slate_id": slate_id,
        "created_ts": created_ts,
        "inputs": inputs_list,
        "config": cfg,
        "outputs": [
            {"path": str(lineups_path), "kind": "optimizer_lineups"},
            {"path": str(metrics_path), "kind": "optimizer_metrics"},
        ],
        "tags": [tag] if tag else [],
    }
    # Validate and write manifest.json
    validate_obj(manifest_schema, manifest, schemas_root=schemas_root)
    (run_dir / "manifest.json").write_text(json.dumps(manifest, indent=2), encoding="utf-8")

    # Append registry (validate rows)
    registry_path = out_root_eff / "registry" / "runs.parquet"
    ensure_dir(registry_path.parent)
    reg_row = {
        "run_id": run_id,
        "run_type": "optimizer",
        "slate_id": slate_id,
        "status": "success",
        "primary_outputs": [str(lineups_path)],
        "metrics_path": str(metrics_path),
        "created_ts": created_ts,
        "tags": [tag] if tag else [],
    }
    runs_registry_schema = load_schema(schemas_root / "runs_registry.schema.yaml")
    validate_obj(runs_registry_schema, reg_row, schemas_root=schemas_root)
    if registry_path.exists():
        existing = pd.read_parquet(registry_path)
        df = pd.concat([existing, pd.DataFrame([reg_row])], ignore_index=True)
    else:
        df = pd.DataFrame([reg_row])
    write_parquet(df, registry_path)

    return {
        "run_id": run_id,
        "lineups_path": str(lineups_path),
        "metrics_path": str(metrics_path),
        "manifest_path": str(run_dir / "manifest.json"),
        "registry_path": str(registry_path),
        "lineup_count": int(len(lineups_df)),
        "projections_path": str(proj_path),
        "telemetry": telemetry,
    }


def _build_parser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser(prog="python -m processes.optimizer")
    p.add_argument("--slate-id", required=True)
    p.add_argument("--site", default="DK")
    p.add_argument("--config", type=Path)
    p.add_argument("--config-kv", nargs="*", help="Inline overrides key=value")
    p.add_argument("--engine", default="cbc")
    p.add_argument("--seed", type=int, default=42)
    p.add_argument("--out-root", type=Path, default=Path("data"))
    p.add_argument("--tag", type=str)
    p.add_argument("--in-root", type=Path, default=Path("data"))
    p.add_argument("--input", type=Path, help="Explicit projections parquet path")
    p.add_argument(
        "--schemas-root",
        type=Path,
        help="Override schemas root (defaults to repo-relative pipeline/schemas)",
    )
    p.add_argument("--verbose", action="store_true")
    return p


def main(argv: Sequence[str] | None = None) -> int:
    args = _build_parser().parse_args(argv)
    # Basic unknown key warning when verbose
    result = run_adapter(
        slate_id=args.slate_id,
        site=str(args.site),
        config_path=args.config,
        config_kv=args.config_kv,
        engine=str(args.engine),
        seed=int(args.seed),
        out_root=args.out_root,
        tag=args.tag,
        in_root=args.in_root,
        input_path=args.input,
        schemas_root=args.schemas_root,
    )
    if args.verbose:
        # Warn if config contains keys not in known constraints
        known = {
            "num_lineups",
            "max_salary",
            "min_salary",
            "uniques",
            "max_from_team",
            "min_from_team",
            "randomness",
            "position_rules",
            "lock",
            "ban",
            "exposure_caps",
            "stacking",
            "group_rules",
            "ownership_penalty",
            "cp_sat_params",
            "preset",
            "dk_strict_mode",
        }
        cfg = load_config(args.config, args.config_kv)
        unknown = sorted(set(cfg.keys()) - known)
        if unknown:
            print(
                f"[optimizer] Warning: unknown config keys ignored/passthrough: {', '.join(unknown)}",
                file=sys.stderr,
            )
        print(
            f"[optimizer] projections: {result.get('projections_path')}",
            file=sys.stderr,
        )
        print(f"[optimizer] manifest: {result.get('manifest_path')}", file=sys.stderr)
        print(
            f"[optimizer] lineups written: {result.get('lineup_count')}",
            file=sys.stderr,
        )
    return 0


if __name__ == "__main__":  # pragma: no cover
    raise SystemExit(main())
</file>

<file path="processes/optimizer/model_spec.py">
from __future__ import annotations

from dataclasses import dataclass
from typing import Any


@dataclass
class SpecPlayer:
    player_id: str
    name: str
    team: str
    positions: list[str]
    salary: int
    proj: float
    dk_id: str | None = None
    own_proj: float | None = None


@dataclass
class Spec:
    site: str  # "dk" | "fd"
    roster_slots: list[str]
    salary_cap: int
    min_salary: int | None
    players: list[SpecPlayer]
    team_max: int | None = None
    team_limits: dict[str, int] | None = None
    lock_ids: list[str] = None
    ban_ids: list[str] = None
    lineup_size: int = 8
    N_lineups: int = 1
    unique_players: int = 0
    cp_sat_params: dict[str, Any] = None
    engine: str = "cp_sat"
    ownership_penalty: dict[str, Any] | None = None
</file>

<file path="processes/optimizer/types.py">
from __future__ import annotations

from dataclasses import asdict, dataclass, field
from enum import Enum
from typing import Any, Literal

SiteType = Literal["dk", "fd"]


class ErrorCodes(str, Enum):
    INFEASIBLE = "INFEASIBLE"
    CONFIG_ERROR = "CONFIG_ERROR"
    MISSING_COLUMNS = "MISSING_COLUMNS"
    INVALID_PROJECTIONS = "INVALID_PROJECTIONS"
    SOLVER_TIMEOUT = "SOLVER_TIMEOUT"


class OptimizerError(Exception):
    def __init__(
        self,
        code: ErrorCodes,
        message: str,
        user_message: str | None = None,
        details: dict[str, Any] | None = None,
    ) -> None:
        super().__init__(message)
        self.code = code
        self.message = message
        self.user_message = user_message or message
        self.details = details or {}


@dataclass
class OwnershipPenalty:
    enabled: bool = False
    # mode: "by_points" applies fixed lambda; "by_percent" searches lambda to reach % off-optimal
    mode: str = "by_points"
    weight_lambda: float = 0.0
    # curve settings
    curve_type: str = "sigmoid"  # linear|power|neglog|sigmoid
    power_k: float = 1.5
    pivot_p0: float = 0.20
    curve_alpha: float = 2.0
    clamp_min: float = 0.01
    clamp_max: float = 0.80
    shrink_gamma: float = 1.0
    # by_percent search knobs
    target_offoptimal_pct: float = 0.05
    tol_offoptimal_pct: float = 0.01

    @classmethod
    def from_dict(cls, d: dict[str, Any] | None) -> OwnershipPenalty | None:
        if not d:
            return None
        return cls(**{k: v for k, v in d.items() if k in cls().__dict__})


@dataclass
class Constraints:
    # high-level
    N_lineups: int = 1
    unique_players: int = 0
    # salary
    max_salary: int | None = None
    min_salary: int | None = None
    # teams
    global_team_limit: int | None = None
    team_limits: dict[str, int] = field(default_factory=dict)
    # player include/exclude
    lock_ids: list[str] = field(default_factory=list)
    ban_ids: list[str] = field(default_factory=list)
    # filters
    proj_min: float = 0.0
    # randomness (CBC)
    randomness_pct: float = 0.0
    # solver params (CP-SAT)
    cp_sat_params: dict[str, Any] = field(default_factory=dict)
    # ownership penalty
    ownership_penalty: OwnershipPenalty | None = None
    # DK strictness toggle in legacy code
    require_dk_ids: bool = False

    def to_dict(self) -> dict[str, Any]:
        d = asdict(self)
        if self.ownership_penalty is not None:
            d["ownership_penalty"] = asdict(self.ownership_penalty)
        return d

    @classmethod
    def from_dict(cls, d: dict[str, Any] | None) -> Constraints:
        if not d:
            return cls()
        d2 = dict(d)
        if "ownership_penalty" in d2 and d2["ownership_penalty"] is not None:
            d2["ownership_penalty"] = OwnershipPenalty.from_dict(d2.get("ownership_penalty"))
        return cls(**{k: v for k, v in d2.items() if k in cls().__annotations__})


@dataclass
class Player:
    player_id: str
    name: str
    pos: str
    team: str
    salary: int
    proj: float
    dk_id: str | None = None
    own_proj: float | None = None
    minutes: float | None = None
    stddev: float | None = None


@dataclass
class Lineup:
    lineup_id: int
    total_proj: float
    total_salary: int
    players: list[Player]
</file>

<file path="processes/orchestrator/__init__.py">
"""Orchestrator for chaining pipeline stages end-to-end.

This package provides a small, deterministic driver that coordinates the
ingest → optimizer → variants → field → gpp_sim stages using their adapters
and the run registry for discovery where applicable.

CLI usage is available via `python -m processes.orchestrator`.
"""
</file>

<file path="processes/orchestrator/__main__.py">
from __future__ import annotations

from .adapter import main

if __name__ == "__main__":  # pragma: no cover
    raise SystemExit(main())
</file>

<file path="processes/variants/_legacy/variant_builder.py">
# Variant Builder (auto-generated from scaffold in orchestration task)
from __future__ import annotations
import json, csv, random, os, sys
from pathlib import Path
from collections import defaultdict
from dataclasses import dataclass
from typing import Dict, List, Iterable, Tuple
from src.utils.column_mapper import (
    suggest_auto_mapping,
    INTERNAL_FIELDS,
    validate_mapping,
    normalize_header,
)
import pandas as pd
from typing import Any

from src.config import paths


# ---------- Data models ----------
@dataclass(frozen=True)
class Player:
    id: str
    pos: str  # Primary position (for backward compatibility)
    positions: List[str]  # All eligible positions
    team: str
    salary: int
    proj: float
    ceil: float
    own: float
    archetype: str = ""


@dataclass
class Config:
    variants_per_base: int = 5
    min_uniques: int = 2
    global_min_distance: int = 2
    projection_delta: float = 3.0
    max_total_own: float = 160.0
    salary_buckets: Tuple[Tuple[int, int], ...] = (
        (49500, 50000),
        (49000, 49499),
        (0, 48999),
    )
    salary_mix: Tuple[float, ...] = (0.45, 0.35, 0.20)
    random_seed: int = 23
    # Advanced
    relative_salary_window: int = 700  # lo = max(48000, base_salary - window)
    ceil_toggle_k: int = 3  # use ceiling metric every k-th variant (k>0)


# SLOTS and DK salary constraints
SLOTS = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
POS_TO_SLOTS = {
    "PG": ["PG", "G", "UTIL"],
    "SG": ["SG", "G", "UTIL"],
    "SF": ["SF", "F", "UTIL"],
    "PF": ["PF", "F", "UTIL"],
    "C": ["C", "UTIL"],
}
# DK constraints
DK_SAL_LO = 48000
DK_SAL_HI = 50000
# ORB schema column order
ORB_ORDER = ["player_id", "name", "team", "pos", "salary", "proj", "ceil", "own"]
_rng = random.Random()


# ---- Debug logging ----
def _debug_enabled() -> bool:
    try:
        v = os.getenv("DEBUG_VARIANTS", "").strip().lower()
        return v in {"1", "true", "yes", "on"}
    except Exception:
        return False


from typing import TextIO


def _dprint(
    *args: object,
    sep: str | None = " ",
    end: str | None = "\n",
    file: TextIO | None = None,
    flush: bool = False,
) -> None:
    if _debug_enabled():
        if file is None:
            file = sys.stderr
        print("[VB]", *args, sep=sep, end=end, file=file, flush=flush)


# ---- Numeric coercion helpers (solve Pylance Scalar -> int/float) ----
def _as_int(x: Any) -> int:
    try:
        if isinstance(x, (bytes, bytearray, memoryview)):
            x = x.decode() if isinstance(x, (bytes, bytearray)) else x.tobytes().decode()
        if isinstance(x, str):
            s = x
            # strip currency, commas, etc.
            s = "".join(ch for ch in s if ch.isdigit() or ch in {"-", "."})
            if s in {"", "-", "."}:
                return 0
            return int(float(s))
        return int(float(x))
    except Exception:
        return 0


def _as_float(x: Any) -> float:
    try:
        if isinstance(x, (bytes, bytearray, memoryview)):
            x = x.decode() if isinstance(x, (bytes, bytearray)) else x.tobytes().decode()
        if isinstance(x, str):
            s = x.replace("%", "").replace(",", "").strip()
            if s.lower() in {"", ".", "-", "nan", "none"}:
                return 0.0
            return float(s)
        return float(x)
    except Exception:
        return 0.0


# ---------- IO ----------


# Helper for normalizing pool DataFrame using column_mapper
def _normalize_pool_with_mapper(df: "pd.DataFrame") -> "pd.DataFrame":
    """
    Use column_mapper to normalize any incoming projections/pool DataFrame into
    the canonical columns needed for Player: player_id,name,team,pos,pos2,salary,proj_fp,ceiling,own_proj.
    Returns a DataFrame with columns: player_id,name,team,pos,salary,proj,ceil,own
    """
    # Get auto suggestions from aliases
    mapping = suggest_auto_mapping(df)
    errs = validate_mapping(mapping, INTERNAL_FIELDS)

    # Required fields for robust operation
    req = ["name", "team", "position", "salary", "proj_fp"]
    missing = [f for f in req if mapping.get(f, "—") == "—"]
    if missing:
        raise ValueError(
            f"Column mapping failed: missing required fields {missing}. Found columns={list(df.columns)}; mapping={mapping}"
        )

    # Utility to pull a source column if mapped
    def col(field, default_series=None):
        src = mapping.get(field)
        if src and src in df.columns:
            return df[src]
        return default_series if default_series is not None else pd.Series([None] * len(df))

    norm = pd.DataFrame(
        {
            "player_id": col("player_id", default_series=pd.Series([""] * len(df))).astype(str),
            "name": col("name").astype(str),
            "team": col("team").astype(str),
            "pos": col("position").astype(str),
            "pos2": col("pos2", default_series=pd.Series([""] * len(df))).astype(str),
            "salary": col("salary"),
            "proj": col("proj_fp"),
            "ceil": col("ceiling"),
            "own": col("own_proj"),
        }
    )

    # Normalize salary → int
    norm["salary"] = (
        norm["salary"]
        .astype(str)
        .str.replace(r"[^0-9]", "", regex=True)
        .replace("", "0")
        .astype(int)
    )

    # Proj/ceil → float; ceil fallback to proj
    norm["proj"] = pd.to_numeric(norm["proj"], errors="coerce").fillna(0.0)
    norm["ceil"] = pd.to_numeric(norm["ceil"], errors="coerce")
    norm["ceil"] = norm["ceil"].fillna(norm["proj"])

    # Ownership: accept % or decimal, clamp to 0–100
    own = pd.to_numeric(norm["own"], errors="coerce")
    frac_mask = own.notna() & (own <= 1.0)
    own.loc[frac_mask] = own.loc[frac_mask] * 100.0
    norm["own"] = own.fillna(0.0).clip(0.0, 100.0)

    # Merge positions: pos + pos2 ⇒ "PG/SG" form
    def merge_pos(p1, p2):
        s = (p1 or "").replace("|", "/").replace(",", "/").replace(" ", "")
        if "/" in s or not p2:
            return s or "UTIL"
        s2 = (p2 or "").replace("|", "/").replace(",", "/").replace(" ", "")
        if s2 and s2 not in s:
            return f"{s}/{s2}" if s else s2
        return s or "UTIL"

    norm["pos"] = [merge_pos(a, b) for a, b in zip(norm["pos"], norm["pos2"])]

    return norm[["player_id", "name", "team", "pos", "salary", "proj", "ceil", "own"]]


# New implementation of _read_player_pool
def _read_player_pool(path: str) -> Dict[str, Player]:
    """
    Read player pool from CSV and return {player_id: Player}.
    If the file already matches the ORB schema (player_pool.csv), normalize types and use it.
    Otherwise, use the column_mapper to adapt arbitrary projections CSVs to the canonical schema.
    """
    p = Path(path)
    if p.suffix.lower() == ".parquet":
        df = pd.read_parquet(p)
    else:
        df = pd.read_csv(path, engine="python")

    # Fast path: ORB schema already present
    orb_cols = {"player_id", "name", "team", "pos", "salary", "proj", "ceil", "own"}
    if orb_cols.issubset(set(df.columns)):
        norm = df[ORB_ORDER].copy()
        # Ensure types / normalization
        norm["salary"] = (
            norm["salary"]
            .astype(str)
            .str.replace(r"[^0-9]", "", regex=True)
            .replace("", "0")
            .astype(int)
        )
        norm["proj"] = pd.to_numeric(norm["proj"], errors="coerce").fillna(0.0)
        norm["ceil"] = pd.to_numeric(norm["ceil"], errors="coerce").fillna(norm["proj"])
        own = pd.to_numeric(norm["own"], errors="coerce")
        frac = own.notna() & (own <= 1.0)
        own.loc[frac] = own.loc[frac] * 100.0
        norm["own"] = own.fillna(0.0).clip(0.0, 100.0)
        norm["pos"] = (
            norm["pos"]
            .astype(str)
            .str.replace("|", "/", regex=False)
            .str.replace(",", "/", regex=False)
            .str.replace(" ", "", regex=False)
        )
    else:
        # Use the mapper to normalize unknown schemas
        norm = _normalize_pool_with_mapper(df)

    # Attempt to attach canonical DK IDs (8-digit) from dk_data/player_ids.csv
    try:
        ids_path = Path("dk_data/player_ids.csv")
        if ids_path.exists():
            ids_df = pd.read_csv(ids_path, engine="python")
            # Flexible column resolution
            lower = {c.lower(): c for c in ids_df.columns}
            id_col = lower.get("id") or lower.get("dk_id") or lower.get("player_id")
            name_col = lower.get("name") or lower.get("player") or lower.get("playername")
            team_col = lower.get("teamabbrev") or lower.get("team") or lower.get("tm")
            if id_col and name_col and team_col:
                ids_sub = ids_df[[id_col, name_col, team_col]].copy()
                ids_sub.columns = ["dk_id", "name_ids", "team_ids"]
                ids_sub["__name_norm"] = ids_sub["name_ids"].astype(str).str.strip().str.lower()
                ids_sub["__team_norm"] = ids_sub["team_ids"].astype(str).str.strip().str.upper()

                norm["__name_norm"] = norm["name"].astype(str).str.strip().str.lower()
                norm["__team_norm"] = norm["team"].astype(str).str.strip().str.upper()

                # Standardize common team variants
                for col in ("__team_norm",):
                    norm[col] = norm[col].replace(
                        {
                            "PHO": "PHX",
                            "GS": "GSW",
                            "SA": "SAS",
                            "NO": "NOP",
                            "NY": "NYK",
                        }
                    )
                    ids_sub[col] = ids_sub[col].replace(
                        {
                            "PHO": "PHX",
                            "GS": "GSW",
                            "SA": "SAS",
                            "NO": "NOP",
                            "NY": "NYK",
                        }
                    )

                norm = norm.merge(
                    ids_sub[["__name_norm", "__team_norm", "dk_id"]],
                    on=["__name_norm", "__team_norm"],
                    how="left",
                )
                # Prefer canonical 8-digit dk_id when present
                norm["dk_id"] = norm["dk_id"].astype(str)
            # Clean helpers if merge didn't happen
            norm = norm.drop(columns=["__name_norm", "__team_norm"], errors="ignore")
    except Exception:
        # Best-effort only; continue without external IDs
        pass

    out: Dict[str, Player] = {}
    n_single_pos = 0
    n_multi_pos = 0
    n_sal0 = 0
    n_proj0 = 0
    n_ceil_eq_proj = 0
    n_own_le1 = 0
    for _, row in norm.iterrows():
        pid = str(row.get("player_id", "")).strip()
        # Prefer canonical dk_id if present and shaped correctly (8 digits)
        dkid = str(row.get("dk_id", "")).strip() if "dk_id" in norm.columns else ""
        if dkid.isdigit() and len(dkid) == 8:
            pid = dkid
        # Else fallback to existing 8-digit player_id if valid
        if not (pid.isdigit() and len(pid) == 8):
            # As last resort, derive from name+team+salary (stable)
            try:
                sal_i = int(row["salary"]) if pd.notna(row["salary"]) else 0
            except Exception:
                sal_i = 0
            pid = f"{row['name']}_{row['team']}_{sal_i}"
        positions = [p for p in str(row["pos"]).split("/") if p]
        if not positions:
            positions = ["UTIL"]
        pl = Player(
            id=pid,
            pos=positions[0],
            positions=positions,
            team=str(row["team"]),
            salary=_as_int(row["salary"]),
            proj=_as_float(row["proj"]),
            ceil=(_as_float(row["ceil"]) if pd.notna(row["ceil"]) else _as_float(row["proj"])),
            own=_as_float(row["own"]),
        )
        out[pid] = pl

        # Add robust alias keys for mapping base lineup IDs (prefix and name+team)
        alias_nts = f"{row['name']}_{row['team']}_{int(_as_int(row['salary']))}"
        alias_nt = f"{row['name']}_{row['team']}"
        out.setdefault(alias_nts, pl)
        out.setdefault(alias_nt, pl)

        # Stats for diagnostics
        if len(positions) == 1:
            n_single_pos += 1
        else:
            n_multi_pos += 1
        if _as_int(row["salary"]) == 0:
            n_sal0 += 1
        if _as_float(row["proj"]) == 0.0:
            n_proj0 += 1
        if _as_float(row["ceil"]) == _as_float(row["proj"]):
            n_ceil_eq_proj += 1
        if _as_float(row["own"]) <= 1.0:
            n_own_le1 += 1

    # Debug diagnostics (guarded)
    if _debug_enabled():
        n = len(out)
        denom = max(1, len(norm))
        _dprint(
            "pool stats",
            {
                "players": n,
                "pct_salary0": round(100.0 * n_sal0 / denom, 2),
                "pct_proj0": round(100.0 * n_proj0 / denom, 2),
                "pct_ceil_eq_proj": round(100.0 * n_ceil_eq_proj / denom, 2),
                "pct_own_le1": round(100.0 * n_own_le1 / denom, 2),
                "multi_pos": n_multi_pos,
                "single_pos": n_single_pos,
            },
        )

    return out


def _read_lineups_long(path: str) -> List[List[str]]:
    """Read lineups from either long format or DK optimizer wide format"""
    import re

    p = Path(path)
    if p.suffix.lower() == ".parquet":
        df = pd.read_parquet(p)
        # Expect long format: lineup_id, slot, player_id
        need = {"lineup_id", "player_id"}
        if not need.issubset(df.columns):
            return []
        bucket = defaultdict(list)
        for _, row in df.iterrows():
            bucket[str(row["lineup_id"])].append(str(row["player_id"]))
        return [sorted(pids) for _, pids in sorted(bucket.items())]
    else:
        with open(path, newline="") as f:
            r = csv.DictReader(f)
            first_row = next(r, None)
            if not first_row:
                return []

            # Reset reader
            f.seek(0)
            r = csv.DictReader(f)

            # Check format: if has 'lineup_id' it's long format, otherwise DK wide format
            if "lineup_id" in first_row:
                # Long format
                bucket = defaultdict(list)
                for row in r:
                    bucket[row["lineup_id"]].append(row["player_id"])
                return [sorted(pids) for _, pids in sorted(bucket.items())]
            else:
                # DK wide format: PG,SG,SF,PF,C,G,F,UTIL columns with display strings
                # Stop reusing embedded numeric IDs; parse name/team and emit synthetic keys "Name_TEAM"
                lineups = []
                positions = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]

                def parse_key(cell: str) -> str | None:
                    if not cell:
                        return None
                    s = str(cell).strip()
                    # Handle PRP-26 safe format: "Name (salary) • TEAM • dk_id"
                    if "•" in s:
                        parts = [p.strip() for p in s.split("•")]
                        if len(parts) >= 2:
                            left = parts[0]
                            team = parts[1].split()[0].upper()
                            name = left.split("(")[0].strip()
                            if name and team:
                                return f"{name}_{team}"
                    # Handle legacy "Name (12345 TEAM)" or "Name (TEAM)"
                    m = re.match(r"^(.*?)\((?:\d+\s+)?([A-Z]{2,4})\)$", s)
                    if m:
                        name = m.group(1).strip()
                        team = m.group(2).strip().upper()
                        if name and team:
                            return f"{name}_{team}"
                    # Fallback: just name
                    name_only = s.split("(")[0].strip()
                    return name_only or None

                for row in r:
                    lineup = []
                    for pos in positions:
                        if pos in row and row[pos]:
                            key = parse_key(row[pos])
                            if key:
                                lineup.append(key)
                    if len(lineup) == 8:  # Valid lineup has 8 players
                        lineups.append(sorted(lineup))
                return lineups


def _write_lineups_long(lineups: List[List[str]], path: str, prefix: str = "var"):
    Path(path).parent.mkdir(parents=True, exist_ok=True)
    with open(path, "w", newline="") as f:
        w = csv.writer(f)
        w.writerow(["lineup_id", "player_id"])
        for i, lu in enumerate(lineups, start=1):
            lid = f"{prefix}_{i}"
            for pid in lu:
                w.writerow([lid, pid])


# ---------- Helpers ----------


def _sum(pool: Dict[str, Player], lu: Iterable[str], attr: str) -> float:
    return sum(getattr(pool[p], attr) for p in lu)


def _salary(pool: Dict[str, Player], lu: Iterable[str]) -> int:
    return sum(pool[p].salary for p in lu)


def _hamming(a: List[str], b: List[str]) -> int:
    """Count different players between two 8-man sets as the number of players in `a` not in `b`.
    For equal-sized lineups this equals swaps needed; a single swap returns 1.
    """
    sa, sb = set(a), set(b)
    return len(sa - sb)


def _is_valid_slots(pool: Dict[str, Player], lineup: List[str]) -> bool:
    """True iff players in `lineup` can be assigned to DK slots (PG,SG,SF,PF,C,G,F,UTIL).
    Works for partial lineups by attempting a backtracking assignment over eligible slots.
    """
    if not lineup:
        return True
    # Reject duplicate players outright
    if len(lineup) != len(set(lineup)):
        return False

    # Precompute eligible slots per player (union across all positions)
    def eligible_slots(pid: str) -> List[str]:
        slots: List[str] = []
        for pos in pool[pid].positions:
            slots.extend(POS_TO_SLOTS.get(pos, ["UTIL"]))
        # stable de-duplication preserving first-seen order
        seen: set[str] = set()
        uniq: List[str] = []
        for s in slots:
            if s not in seen:
                seen.add(s)
                uniq.append(s)
        return uniq

    # Prioritize tighter slots to reduce branching
    slot_priority = {
        "C": 0,
        "PF": 1,
        "SF": 1,
        "PG": 2,
        "SG": 2,
        "G": 3,
        "F": 3,
        "UTIL": 4,
    }

    order = list(lineup)
    try:
        order.sort(key=lambda p: (len(eligible_slots(p)), slot_priority.get(pool[p].pos, 5)))
    except KeyError:
        # pid not found in pool ⇒ invalid
        _dprint("_is_valid_slots: unknown pid in pool during sort", {"lineup": lineup})
        return False

    used: set[str] = set()

    def dfs(i: int) -> bool:
        if i == len(order):
            return True
        pid = order[i]
        for s in sorted(eligible_slots(pid), key=lambda x: slot_priority.get(x, 5)):
            if s in used:
                continue
            used.add(s)
            if dfs(i + 1):
                return True
            used.remove(s)
        return False

    ok = dfs(0)
    if not ok:
        if _debug_enabled():
            detail = {pid: eligible_slots(pid) for pid in lineup if pid in pool}
            _dprint("_is_valid_slots failed", {"order": order, "elig": detail})
    return ok


def _assign_slots(pool: Dict[str, Player], lineup: List[str]) -> List[Tuple[str, str]] | None:
    """Return an assignment [(slot, player_id), ...] if lineup can be DK-slot assigned; else None.
    Deterministic backtracking using same ordering heuristic as _is_valid_slots.
    """
    if not lineup:
        return []
    # Reject duplicate players outright
    if len(lineup) != len(set(lineup)):
        return None

    def eligible_slots(pid: str) -> List[str]:
        slots: List[str] = []
        for pos in pool[pid].positions:
            slots.extend(POS_TO_SLOTS.get(pos, ["UTIL"]))
        seen: set[str] = set()
        uniq: List[str] = []
        for s in slots:
            if s not in seen:
                seen.add(s)
                uniq.append(s)
        return uniq

    slot_priority = {
        "C": 0,
        "PF": 1,
        "SF": 1,
        "PG": 2,
        "SG": 2,
        "G": 3,
        "F": 3,
        "UTIL": 4,
    }

    order = list(lineup)
    try:
        order.sort(key=lambda p: (len(eligible_slots(p)), slot_priority.get(pool[p].pos, 5)))
    except KeyError:
        _dprint("_assign_slots: unknown pid in pool during sort", {"lineup": lineup})
        return None

    used: set[str] = set()
    assign: List[Tuple[str, str]] = []  # (slot, pid)

    def dfs(i: int) -> bool:
        if i == len(order):
            return True
        pid = order[i]
        for s in sorted(eligible_slots(pid), key=lambda x: slot_priority.get(x, 5)):
            if s in used:
                continue
            used.add(s)
            assign.append((s, pid))
            if dfs(i + 1):
                return True
            assign.pop()
            used.remove(s)
        return False

    ok = dfs(0)
    if not ok:
        if _debug_enabled():
            detail = {pid: eligible_slots(pid) for pid in lineup if pid in pool}
            _dprint("_assign_slots failed", {"order": order, "elig": detail})
        return None
    # We need to return in DK slot order, not search order
    by_slot = {s: pid for s, pid in assign}
    out = []
    for s in SLOTS:
        if s in by_slot:
            out.append((s, by_slot[s]))
    return out


def _pick_bucket(cfg: Config) -> Tuple[int, int]:
    return _rng.choices(cfg.salary_buckets, weights=cfg.salary_mix, k=1)[0]


def _pick_bucket_for_base(cfg: Config, base_salary: int) -> Tuple[int, int]:
    """Pick a salary bucket relative to the base lineup's salary.
    Always respect the DK lower bound and slightly widen the window for
    very high-salary bases to avoid infeasible searches.
    """
    window = int(getattr(cfg, "relative_salary_window", 700) or 700)
    hi = DK_SAL_HI
    # Default lower bound tied to base salary, but never below DK floor
    lo = max(DK_SAL_LO, base_salary - window)
    # If the base is within $200 of the cap, widen the search a bit
    if base_salary >= DK_SAL_HI - 200:
        lo = max(DK_SAL_LO, base_salary - max(window, 900))
    return (lo, hi)


# ----------- Validator utility -----------
def _validate_lineup(
    pool: Dict[str, Player],
    lineup: List[str],
    lo: int | None = None,
    hi: int | None = None,
) -> tuple[bool, str]:
    """Hard validator: slot-assignable to exactly the 8 DK slots and salary within [lo,hi] if provided.
    Returns (ok, reason_if_not_ok).
    """
    # Reject duplicate players
    if len(lineup) != len(set(lineup)):
        return (False, "duplicate player(s) in lineup")
    # IDs exist
    for pid in lineup:
        if pid not in pool:
            return (False, f"unknown player_id {pid}")
    # Slot feasibility must assign exactly 8 unique DK slots
    assign = _assign_slots(pool, lineup)
    if assign is None:
        return (False, "slot assignment failed")
    if len(assign) != 8:
        return (False, f"assigned {len(assign)} slots (expected 8)")
    used_slots = {s for s, _ in assign}
    if used_slots != set(SLOTS):
        return (False, f"assigned slots mismatch: {sorted(used_slots)}")
    # Salary bounds
    if lo is not None or hi is not None:
        sal = _salary(pool, lineup)
        if lo is not None and sal < lo:
            return (False, f"salary {sal} < lo {lo}")
        if hi is not None and sal > hi:
            return (False, f"salary {sal} > hi {hi}")
    return (True, "")


def _greedy_variant(
    base: List[str],
    pool: Dict[str, Player],
    cfg: Config,
    bucket: Tuple[int, int],
    use_ceil: bool = False,
) -> List[str] | None:
    lo, hi = bucket
    metric = "ceil" if use_ceil else "proj"

    # Replace min_uniques, sometimes +1 for more flexibility
    k = cfg.min_uniques + (1 if _rng.random() < 0.35 else 0)
    k = min(k, 4, len(base))  # soft cap

    # pick “victims”: highest own, then lower proj
    victims = sorted(base, key=lambda p: (pool[p].own, -pool[p].proj), reverse=True)[:k]
    keepers = [p for p in base if p not in victims]
    _dprint(
        "_greedy_variant start",
        {
            "base": base,
            "k": k,
            "victims": victims,
            "keepers": keepers,
            "bucket": (lo, hi),
            "use_ceil": use_ceil,
        },
    )

    # candidate lists for each victim (prefer same-pos; fallback to any)
    candidate_lists: List[List[Player]] = []
    for v in victims:
        vpos = set(pool[v].positions)
        cands = [
            pl
            for pl in pool.values()
            if pl.id != v and pl.id not in keepers and (vpos & set(pl.positions))
        ]
        if not cands:
            cands = [pl for pl in pool.values() if pl.id != v and pl.id not in keepers]

        # rank: projection/ceil, then prefer higher salary (no ownership penalty here)
        cands.sort(key=lambda x: (getattr(x, metric), x.salary), reverse=True)
        candidate_lists.append(cands)

    lineup = keepers[:]
    used = set(lineup)

    # place replacements for victims (ONLY enforce <= upper bound here)
    for cands in candidate_lists:
        placed = False
        for pl in cands:
            if pl.id in used:
                continue
            test = lineup + [pl.id]
            if not _is_valid_slots(pool, test):
                continue
            if _salary(pool, test) <= hi:
                lineup = test
                used.add(pl.id)
                placed = True
                _dprint(
                    "placed victim replacement",
                    {"pid": pl.id, "salary": _salary(pool, lineup)},
                )
                break
        if not placed:
            _dprint("failed to place replacement for a victim")
            return None

    # fill to 8 (still only enforce <= hi)
    while len(lineup) < 8:
        placed = False
        for pl in sorted(
            pool.values(),
            key=lambda x: (getattr(x, metric), x.salary),
            reverse=True,
        ):
            if pl.id in used:
                continue
            test = lineup + [pl.id]
            if _is_valid_slots(pool, test) and _salary(pool, test) <= hi:
                lineup = test
                used.add(pl.id)
                placed = True
                _dprint("filled slot", {"pid": pl.id, "salary": _salary(pool, lineup)})
                break
        if not placed:
            _dprint("failed to fill to 8")
            return None

    # FINAL salary check: must be in [lo, hi]. If below lo, try upgrades.
    sal = _salary(pool, lineup)
    if sal < lo:
        # simple upgrade pass: try to swap one player at a time to raise salary
        for up_iter in range(100):  # larger budget when chasing floor
            made_swap = False
            for idx, pid in enumerate(list(lineup)):
                pl_old = pool[pid]
                # try pricier candidates that still fit slots and don't crush metric
                for pl_new in sorted(pool.values(), key=lambda x: x.salary, reverse=True):
                    if pl_new.id in used or pl_new.id == pid:
                        continue
                    if pl_new.salary <= pl_old.salary:
                        continue
                    # mild guard on quality, allow more drop after 60 iters:
                    allowed_drop = 0.5 if up_iter < 60 else 1.25
                    if (getattr(pl_new, metric) + allowed_drop) < getattr(pl_old, metric):
                        continue
                    test = lineup[:idx] + [pl_new.id] + lineup[idx + 1 :]
                    if not _is_valid_slots(pool, test):
                        continue
                    new_sal = _salary(pool, test)
                    if new_sal <= hi and new_sal > sal:
                        used.remove(pid)
                        used.add(pl_new.id)
                        lineup = sorted(test)
                        sal = new_sal
                        made_swap = True
                        _dprint("upgrade swap", {"out": pid, "in": pl_new.id, "salary": sal})
                        break
                if made_swap:
                    break
            if not made_swap:
                break

    if not (lo <= sal <= hi):
        _dprint(
            "final salary out of range",
            {
                "salary": sal,
                "lo": lo,
                "hi": hi,
                "hint": "consider widening relative_salary_window or check high-salary base",
            },
        )
        return None

    # ownership cap
    if _sum(pool, lineup, "own") > cfg.max_total_own:
        _dprint(
            "ownership cap exceeded",
            {"own_sum": _sum(pool, lineup, "own"), "cap": cfg.max_total_own},
        )
        return None

    ok, _why = _validate_lineup(pool, lineup, lo, hi)
    if not ok:
        _dprint("validator failed at end of _greedy_variant", {"why": _why})
        return None
    _dprint(
        "_greedy_variant ok",
        {
            "salary": sal,
            "own": _sum(pool, lineup, "own"),
            "assign": _assign_slots(pool, lineup),
        },
    )
    return sorted(lineup)


# ---------- Core ----------


def build_variants(
    optimizer_lineups_path: str | None = None,
    player_pool_path: str | None = None,
    out_path: str | None = None,
    cfg_dict: dict | None = None,
) -> dict:
    # Use defaults if not provided
    if optimizer_lineups_path is None:
        optimizer_lineups_path = str(paths.OPTIMIZER_PATH)
    if player_pool_path is None:
        player_pool_path = str(paths.PLAYER_POOL)
    if out_path is None:
        out_path = str(paths.VARIANT_CATALOG)

    # Backward compatibility: ignore deprecated keys such as 'max_exposure'
    _raw_cfg = dict(cfg_dict or {})
    _raw_cfg.pop("max_exposure", None)
    cfg = Config(**_raw_cfg)
    _rng.seed(cfg.random_seed)

    pool = _read_player_pool(str(player_pool_path))
    bases = _read_lineups_long(str(optimizer_lineups_path))

    warnings: List[str] = []
    # Robustly resolve/match base lineup player_ids to pool keys
    import re as _re

    id_re = _re.compile(r"^(.+)_([A-Z]{2,4})_(\d+)(?:_\d+)?$")

    def _resolve_pid_from_pool(pid: str) -> str | None:
        if pid in pool:
            return pid
        m = id_re.match(pid)
        if m:
            name, team, sal = m.group(1), m.group(2), int(m.group(3))
            k_nts = f"{name}_{team}_{sal}"
            if k_nts in pool:
                return k_nts
            k_nt = f"{name}_{team}"
            if k_nt in pool:
                return k_nt
        # As a last resort try raw name
        if pid in pool:
            return pid
        return None

    filtered_bases: List[List[str]] = []
    dropped = 0
    missing_sample: set[str] = set()
    for b in bases:
        mapped: List[str] = []
        ok = True
        for pid in b:
            mp = _resolve_pid_from_pool(str(pid))
            if mp is None or mp not in pool:
                ok = False
                missing_sample.add(str(pid))
                break
            mapped.append(mp)
        if ok and len(mapped) == 8 and len(set(mapped)) == 8:
            filtered_bases.append(sorted(mapped))
        else:
            dropped += 1
    if dropped:
        sample_ids = ", ".join(sorted(list(missing_sample))[:5])
        warnings.append(f"Dropped {dropped} base lineup(s) due to missing IDs: e.g., {sample_ids}")
    bases = filtered_bases

    bank: List[List[str]] = []
    base_proj = {tuple(b): _sum(pool, b, "proj") for b in bases}

    for b in bases:
        bproj = base_proj[tuple(b)]
        bsal = _salary(pool, b)
        accepted_for_base = 0
        for i in range(cfg.variants_per_base):
            # Use relative bucket based on base salary instead of fixed buckets
            bucket = _pick_bucket_for_base(cfg, bsal)
            k = int(getattr(cfg, "ceil_toggle_k", 3) or 0)
            use_ceil = k > 0 and ((i + 1) % k == 0)
            v = _greedy_variant(b, pool, cfg, bucket, use_ceil=use_ceil)
            if not v:
                continue
            if _sum(pool, v, "proj") < bproj - cfg.projection_delta:
                continue
            if _hamming(v, b) < cfg.min_uniques:
                continue
            if any(_hamming(v, x) < cfg.global_min_distance for x in bank):
                continue
            lo, hi = bucket
            ok_v, _w = _validate_lineup(pool, v, lo, hi)
            if ok_v:
                bank.append(v)
            accepted_for_base += 1

        # Prepare a baseline victims/keepers split for failsafe construction
        # Use the same heuristic as _greedy_variant: highest own, then lower proj
        k_fail = min(max(1, cfg.min_uniques), len(b))
        victims_fs = sorted(b, key=lambda p: (pool[p].own, -pool[p].proj), reverse=True)[:k_fail]
        keepers = [p for p in b if p not in victims_fs]

        # Diversity failsafe: if a base produced nothing, try a couple of random victim selections
        if accepted_for_base == 0:
            for _ in range(2):
                metric = "proj"
                # De-duplicate candidates by player_id and skip keepers
                uniq_by_id = {}
                for pl in pool.values():
                    if pl.id in keepers or pl.id in uniq_by_id:
                        continue
                    uniq_by_id[pl.id] = pl
                cands = sorted(
                    uniq_by_id.values(),
                    key=lambda x: (getattr(x, metric), x.salary),
                    reverse=True,
                )
                trial = keepers[:]
                seen_ids = set(trial)
                for pl in cands:
                    if len(trial) >= 8:
                        break
                    if pl.id in seen_ids:
                        continue
                    t2 = trial + [pl.id]
                    if _is_valid_slots(pool, t2):
                        trial = t2
                        seen_ids.add(pl.id)
                if len(trial) == 8:
                    lo, hi = _pick_bucket_for_base(cfg, bsal)
                    if (
                        _sum(pool, trial, "proj") >= bproj - cfg.projection_delta
                        and _sum(pool, trial, "own") <= cfg.max_total_own
                        and _hamming(trial, b) >= cfg.min_uniques
                        and all(_hamming(trial, x) >= cfg.global_min_distance for x in bank)
                    ):
                        ok_t, _w2 = _validate_lineup(pool, trial, lo, hi)
                        if ok_t:
                            bank.append(sorted(trial))
                            break

    # Build variants-only long DataFrame with slot assignment
    rows: List[dict] = []
    for i, lu in enumerate(bank, start=1):
        lid = f"var_{i}"
        ok, why = _validate_lineup(pool, lu, DK_SAL_LO, DK_SAL_HI)
        if not ok:
            # Skip emission of invalid lineups entirely; they failed earlier but double guard here.
            continue
        assignment = _assign_slots(pool, lu)
        for slot, pid in assignment:  # type: ignore[arg-type]
            rows.append({"lineup_id": lid, "slot": slot, "player_id": pid})

    # Persist if an explicit out_path was provided (backward compat), else return only
    if out_path:
        Path(out_path).parent.mkdir(parents=True, exist_ok=True)
        if Path(out_path).suffix.lower() == ".parquet":
            pd.DataFrame(rows, columns=["lineup_id", "slot", "player_id"]).to_parquet(
                out_path, index=False
            )
        else:
            with open(out_path, "w", newline="") as f:
                w = csv.writer(f)
                w.writerow(["lineup_id", "slot", "player_id"])
                for r in rows:
                    w.writerow([r["lineup_id"], r["slot"], r["player_id"]])

    return {
        "ok": True,
        "n_bases": len(bases),
        "n_variants": len(bank),
        "out_path": str(out_path) if out_path else "",
        "variants_df": (
            pd.DataFrame(rows, columns=["lineup_id", "slot", "player_id"])
            if rows
            else pd.DataFrame(columns=["lineup_id", "slot", "player_id"])
        ),
        "warnings": warnings,
    }


def build_and_write(
    optimizer_lineups_path: str,
    player_pool_path: str,
    out_path: str,
    cfg_json: str | dict,
):
    cfg = json.loads(cfg_json) if isinstance(cfg_json, str) else cfg_json
    return build_variants(optimizer_lineups_path, player_pool_path, out_path, cfg)


def build_variants_df_from_dfs(
    pool_df: pd.DataFrame, bases_long_df: pd.DataFrame, cfg_dict: dict | None = None
) -> pd.DataFrame:
    """Generate variants-only long DataFrame from in-memory DataFrames.
    - pool_df should have canonical columns: player_id, name, team, pos, salary, proj, ceil, own
    - bases_long_df must have: lineup_id, player_id (slot optional)

    This function is resilient to missing or non‑matching `player_id`s in `pool_df` by
    synthesizing stable keys from (name, team, salary) and mapping base lineup IDs like
    "Name_Team_5500_12345" to the pool using the "Name_Team_5500" prefix.
    """
    _raw_cfg = dict(cfg_dict or {})
    _raw_cfg.pop("max_exposure", None)
    cfg = Config(**_raw_cfg)
    _rng.seed(cfg.random_seed)

    # Build pool dict with robust ID mapping
    pool: Dict[str, Player] = {}
    pdf = pool_df.copy()
    # Normalize fields/types
    pdf["name"] = pdf["name"].astype(str)
    pdf["team"] = pdf["team"].astype(str)
    pdf["pos"] = (
        pdf["pos"]
        .astype(str)
        .str.replace("|", "/", regex=False)
        .str.replace(",", "/", regex=False)
        .str.replace(" ", "", regex=False)
    )
    pdf["salary"] = pd.to_numeric(pdf["salary"], errors="coerce").fillna(0).astype("int64")
    pdf["proj"] = pd.to_numeric(pdf["proj"], errors="coerce").fillna(0.0).astype("float64")
    pdf["ceil"] = pd.to_numeric(pdf["ceil"], errors="coerce").fillna(pdf["proj"]).astype("float64")
    pdf["own"] = pd.to_numeric(pdf["own"], errors="coerce").fillna(0.0).astype("float64")

    # Synthesize alternate keys for resilient joins
    def _mk_nt(name: Any, team: Any) -> str:
        return f"{str(name)}_{str(team)}".strip()

    def _mk_nts(name: Any, team: Any, salary: Any) -> str:
        return f"{str(name)}_{str(team)}_{int(_as_int(salary))}".strip()

    # Dictionaries to allow lookup by various keys
    by_id: Dict[str, Player] = {}
    by_nts: Dict[str, Player] = {}
    by_nt: Dict[str, Player] = {}

    for r in pdf[["player_id", "name", "team", "pos", "salary", "proj", "ceil", "own"]].itertuples(
        index=False, name="Row"
    ):
        pid_raw = str(r.player_id) if r.player_id is not None else ""
        pid = pid_raw.strip()
        poss = [p for p in str(r.pos).split("/") if p]
        if not poss:
            poss = ["UTIL"]
        pl = Player(
            id=pid if pid else _mk_nts(str(r.name), str(r.team), int(r.salary)),
            pos=poss[0],
            positions=poss,
            team=str(r.team),
            salary=_as_int(r.salary),
            proj=_as_float(r.proj),
            ceil=_as_float(r.ceil) if pd.notna(r.ceil) else _as_float(r.proj),
            own=_as_float(r.own) if pd.notna(r.own) else 0.0,
        )
        # Primary id (if present)
        if pid:
            by_id.setdefault(pid, pl)
            pool[pid] = pl
        # Alternate keys
        k_nts = _mk_nts(r.name, r.team, r.salary)
        k_nt = _mk_nt(r.name, r.team)
        if k_nts not in pool:
            by_nts.setdefault(k_nts, pl)
            pool.setdefault(k_nts, pl)  # allow direct lookup by prefix key
        if k_nt not in pool:
            by_nt.setdefault(k_nt, pl)
            pool.setdefault(k_nt, pl)

    # Resolve base lineup IDs to pool keys. Accept exact match, else
    # try "Name_Team_Salary_XXXX" → "Name_Team_Salary" prefix; else name+team.
    import re

    id_re = re.compile(r"^(.+)_([A-Z]{2,4})_(\d+)(?:_\d+)?$")

    def _resolve_pid(bpid: str) -> str | None:
        bpid = str(bpid).strip()
        if bpid in by_id:
            return bpid
        # Prefix form Name_Team_Salary[_id]
        m = id_re.match(bpid)
        if m:
            name, team, sal = m.group(1), m.group(2), int(m.group(3))
            k_nts = _mk_nts(name, team, sal)
            if k_nts in by_nts:
                return k_nts
            k_nt = _mk_nt(name, team)
            if k_nt in by_nt:
                # If multiple candidates under k_nt, prefer closest salary
                # Collect candidates by scanning pdf once
                cand = pdf[(pdf["name"] == name) & (pdf["team"] == team)]
                if not cand.empty:
                    cand = cand.iloc[(cand["salary"] - sal).abs().argsort()]
                    name_team_best = _mk_nts(name, team, int(cand.iloc[0]["salary"]))
                    if name_team_best in by_nts:
                        return name_team_best
                return k_nt
        # As a last resort, try raw name match ignoring team/salary (rare)
        hits = pdf[pdf["name"] == bpid]
        if len(hits) == 1:
            row = hits.iloc[0]
            return _mk_nts(str(row["name"]), str(row["team"]), int(row["salary"]))
        return None

    # Build bases from resolved IDs, dropping any lineup with unresolved players
    bases: List[List[str]] = []
    for lid, grp in bases_long_df.groupby("lineup_id"):
        raw_pids = [str(p) for p in grp["player_id"].astype(str).tolist()]
        mapped: List[str] = []
        ok = True
        for pid in raw_pids:
            mp = _resolve_pid(pid)
            if mp is None or mp not in pool:
                ok = False
                break
            mapped.append(mp)
        if ok and len(mapped) == 8 and len(set(mapped)) == 8:
            bases.append(sorted(mapped))

    bank: List[List[str]] = []
    base_proj = {tuple(b): _sum(pool, b, "proj") for b in bases}
    for b in bases:
        bproj = base_proj[tuple(b)]
        bsal = _salary(pool, b)
        accepted_for_base = 0
        for i in range(cfg.variants_per_base):
            bucket = _pick_bucket_for_base(cfg, bsal)
            k = int(getattr(cfg, "ceil_toggle_k", 3) or 0)
            use_ceil = k > 0 and ((i + 1) % k == 0)
            v = _greedy_variant(b, pool, cfg, bucket, use_ceil=use_ceil)
            if not v:
                continue
            if _sum(pool, v, "proj") < bproj - cfg.projection_delta:
                continue
            if _hamming(v, b) < cfg.min_uniques:
                continue
            if any(_hamming(v, x) < cfg.global_min_distance for x in bank):
                continue
            lo, hi = bucket
            ok_v, _w = _validate_lineup(pool, v, lo, hi)
            if ok_v:
                bank.append(v)
            accepted_for_base += 1

        # Prepare victims/keepers for failsafe
        k_fail = min(max(1, cfg.min_uniques), len(b))
        victims_fs = sorted(b, key=lambda p: (pool[p].own, -pool[p].proj), reverse=True)[:k_fail]
        keepers = [p for p in b if p not in victims_fs]

        if accepted_for_base == 0:
            for _ in range(2):
                metric = "proj"
                # De-duplicate candidates by player_id and skip keepers
                uniq_by_id = {}
                for pl in pool.values():
                    if pl.id in keepers or pl.id in uniq_by_id:
                        continue
                    uniq_by_id[pl.id] = pl
                cands = sorted(
                    uniq_by_id.values(),
                    key=lambda x: (getattr(x, metric), x.salary),
                    reverse=True,
                )
                trial = keepers[:]
                seen_ids = set(trial)
                for pl in cands:
                    if len(trial) >= 8:
                        break
                    if pl.id in seen_ids:
                        continue
                    t2 = trial + [pl.id]
                    if _is_valid_slots(pool, t2):
                        trial = t2
                        seen_ids.add(pl.id)
                if len(trial) == 8:
                    lo, hi = _pick_bucket_for_base(cfg, bsal)
                    if (
                        _sum(pool, trial, "proj") >= bproj - cfg.projection_delta
                        and _sum(pool, trial, "own") <= cfg.max_total_own
                        and _hamming(trial, b) >= cfg.min_uniques
                        and all(_hamming(trial, x) >= cfg.global_min_distance for x in bank)
                    ):
                        ok_t, _w2 = _validate_lineup(pool, trial, lo, hi)
                        if ok_t:
                            bank.append(sorted(trial))
                            break

    rows: List[dict] = []
    for i, lu in enumerate(bank, start=1):
        lid = f"var_{i}"
        ok, why = _validate_lineup(pool, lu, DK_SAL_LO, DK_SAL_HI)
        if not ok:
            continue
        assignment = _assign_slots(pool, lu)
        for slot, pid in assignment:  # type: ignore[arg-type]
            rows.append({"lineup_id": lid, "slot": slot, "player_id": pid})

    return (
        pd.DataFrame(rows, columns=["lineup_id", "slot", "player_id"])
        if rows
        else pd.DataFrame(columns=["lineup_id", "slot", "player_id"])
    )
</file>

<file path="processes/variants/adapter.py">
from __future__ import annotations

import argparse
import hashlib
import json
import os
import sys
from collections.abc import Callable, Mapping, Sequence
from datetime import UTC, datetime
from pathlib import Path
from typing import Any, cast

import pandas as pd

from pipeline.io.files import ensure_dir, write_parquet
from pipeline.io.validate import load_schema, validate_obj

# Resolve repo root (two levels up from this file) and schemas root
REPO_ROOT = Path(__file__).resolve().parents[2]
SCHEMAS_ROOT = REPO_ROOT / "pipeline" / "schemas"


RunVariantFn = Callable[[pd.DataFrame, dict[str, Any], int], Any]

DK_SLOTS_ORDER = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]


def _utc_now_iso() -> str:
    now = datetime.now(UTC)
    ms = int(now.microsecond / 1000)
    return f"{now.strftime('%Y-%m-%dT%H:%M:%S')}.{ms:03d}Z"


def _as_int(x: Any) -> int:
    try:
        return int(x)
    except Exception:
        return 0


def _as_float(x: Any) -> float:
    try:
        return float(x)
    except Exception:
        return 0.0


def _sha256_of_path(path: Path) -> str:
    h = hashlib.sha256()
    with path.open("rb") as f:
        for chunk in iter(lambda: f.read(8192), b""):
            h.update(chunk)
    return h.hexdigest()


def _coerce_scalar(val: str) -> int | float | bool | str:
    lower = val.lower()
    if lower in ("true", "false"):
        return lower == "true"
    try:
        if "." in val:
            return float(val)
        return int(val)
    except ValueError:
        return val


def _load_variant() -> RunVariantFn:
    """Dynamically load the variant implementation.

    Tests can monkeypatch this function. By default, this loader uses the
    `OPTIMIZER_VARIANT_IMPL=module:function` override if present, otherwise
    raises ImportError.
    """
    override = os.environ.get("OPTIMIZER_VARIANT_IMPL")
    if override:
        mod_name, _, fn_name = override.partition(":")
        mod = __import__(mod_name, fromlist=[fn_name or "run_variants"])
        fn = getattr(mod, fn_name or "run_variants")
        from typing import cast

        return cast(RunVariantFn, fn)

    # No built-in fallback here; adapter is headless
    raise ImportError(
        "No variant implementation available. Provide OPTIMIZER_VARIANT_IMPL or "
        "monkeypatch _load_variant in tests."
    )


def load_config(config_path: Path | None, inline_kv: Sequence[str] | None = None) -> dict[str, Any]:
    cfg: dict[str, Any] = {}
    if config_path:
        text = config_path.read_text(encoding="utf-8")
        if config_path.suffix.lower() in (".yaml", ".yml"):
            import yaml  # lazy

            try:
                cfg = dict(yaml.safe_load(text) or {})
            except Exception as e:  # pragma: no cover - error path exercised in tests
                msg = f"Failed to parse YAML config {config_path}: {e}"
                raise ValueError(msg) from e
        else:
            cfg = dict(json.loads(text))
    if inline_kv:
        for item in inline_kv:
            if "=" not in item:
                continue
            k, v = item.split("=", 1)
            cfg[k.strip()] = _coerce_scalar(v.strip())
    return cfg


def map_config_to_knobs(config: Mapping[str, Any]) -> dict[str, Any]:
    """Translate user config to variant knobs.

    Unknown keys are preserved/pass-through so downstream implementations can
    consume them. This function primarily validates and normalizes known keys.
    """
    c: dict[str, Any] = {}
    for key in (
        "num_variants",
        "swap_window",
        "randomness",
        "exposure_targets",
        "group_rules",
        "uniques",
        "avoid_dups",
        "ownership_guidance",
        "seed",
    ):
        if key in config:
            c[key] = config[key]
    # Preserve extras
    for k, v in config.items():
        if k not in c:
            c.setdefault("extras", {})[k] = v
    return c


def export_csv_row(players: Sequence[str], dk_positions_filled: Sequence[Mapping[str, Any]]) -> str:
    slot_to_player: dict[str, str] = {}
    for idx, slot in enumerate(dk_positions_filled):
        slot_to_player[str(slot.get("slot"))] = str(players[idx])
    cols: list[str] = []
    for slot_label in DK_SLOTS_ORDER:
        pid = slot_to_player.get(slot_label, "")
        cols.append(f"{slot_label} {pid}".strip())
    return ",".join(cols)


def _sanity_check_variant(players: Sequence[Any]) -> None:
    if len(players) != 8:
        raise ValueError(f"Invalid variant: expected 8 players, got {len(players)}")


def _find_input_optimizer_lineups(
    *,
    out_root: Path,
    slate_id: str,
    explicit_input: Path | None = None,
    from_run: str | None = None,
) -> Path:
    if explicit_input is not None:
        return explicit_input
    # If a specific run_id provided, use that run dir
    if from_run:
        candidate = out_root / "runs" / "optimizer" / from_run / "artifacts" / "lineups.parquet"
        if candidate.exists():
            return candidate
        raise FileNotFoundError(f"--from-run provided but lineups not found: {candidate}")
    # Otherwise, consult registry for latest optimizer run for this slate
    registry_path = out_root / "registry" / "runs.parquet"
    if registry_path.exists():
        df = pd.read_parquet(registry_path)
        required_cols = {"run_type", "slate_id", "created_ts"}
        if not required_cols.issubset(set(map(str, df.columns))):
            missing = sorted(required_cols - set(map(str, df.columns)))
            raise ValueError(
                f"Registry missing required columns {missing}. "
                "Re-run optimizer to populate registry."
            )
        filt = df[(df.get("run_type") == "optimizer") & (df.get("slate_id") == slate_id)]
        if not filt.empty:
            # pick latest by created_ts lexicographically (ISO format)
            idx = filt["created_ts"].astype(str).idxmax()
            row = df.loc[idx]
            # Use primary_outputs[0] if available, else construct from run_id
            try:
                primary = row.get("primary_outputs")
                if isinstance(primary, list) and primary:
                    p0 = Path(primary[0])
                    return p0 if p0.is_absolute() else (out_root / primary[0])
            except Exception:
                pass
            run_id = str(row.get("run_id"))
            opt_runs = out_root / "runs" / "optimizer"
            candidate = opt_runs / run_id / "artifacts" / "lineups.parquet"
            if candidate.exists():
                return candidate
    raise FileNotFoundError(
        "No optimizer lineups found for slate_id=" f"{slate_id}. Provide --input or --from-run."
    )


def _schema_version(schemas_root: Path | None, name: str) -> str:
    schema = load_schema((schemas_root or SCHEMAS_ROOT) / f"{name}.schema.yaml")
    return str(schema.get("version", "0.0.0"))


def _build_variant_catalog(
    run_id: str,
    variants: Sequence[Mapping[str, Any]],
    parent_lineups_df: pd.DataFrame,
) -> pd.DataFrame:
    parent_map = {
        str(row["lineup_id"]): {
            "players": list(row["players"]),
            "dk_positions_filled": list(row["dk_positions_filled"]),
            "total_salary": _as_int(row.get("total_salary", 0)),
            "proj_fp": _as_float(row.get("proj_fp", 0.0)),
        }
        for _, row in parent_lineups_df.iterrows()
    }
    rows: list[dict[str, Any]] = []
    for i, v in enumerate(variants, start=1):
        players = list(v.get("players") or [])
        _sanity_check_variant(players)
        # Duplicate player guard
        if len(set(map(str, players))) != 8:
            raise ValueError("Invalid variant: duplicate players detected")
        parent_id = str(v.get("parent_lineup_id") or v.get("parent_id") or "")
        if not parent_id or parent_id not in parent_map:
            raise ValueError(f"Variant missing/unknown parent_lineup_id: {parent_id}")
        parent = parent_map[parent_id]
        dk_pos = cast(Sequence[Mapping[str, Any]], parent["dk_positions_filled"])
        if len(dk_pos) != 8:
            raise ValueError("Parent lineup DK slots invalid (expected 8)")
        row: dict[str, Any] = {
            "run_id": run_id,
            "variant_id": str(v.get("variant_id") or f"V{i}"),
            "parent_lineup_id": parent_id,
            "players": players,
            "variant_params": dict(v.get("variant_params") or {}),
            "export_csv_row": export_csv_row(players, dk_pos),
        }
        # Salary cap check if provided on variant
        if "total_salary" in v:
            try:
                _ts = int(v["total_salary"])  # may raise
            except Exception:
                _ts = None
            if _ts is not None and _ts > 50000:
                raise ValueError("Invalid variant: salary exceeds DK cap 50000")
        # Optional fields if provided or derivable
        if "hamming_vs_parent" in v:
            row["hamming_vs_parent"] = int(v["hamming_vs_parent"])  # pragma: no cover
        else:
            try:
                parent_players = cast(Sequence[Any], parent["players"])
                hamming = sum(
                    1 for a, b in zip(list(players), list(parent_players), strict=False) if a != b
                )
                row["hamming_vs_parent"] = int(hamming)
            except Exception:
                pass
        if "salary_delta" in v:
            row["salary_delta"] = int(v["salary_delta"])  # pragma: no cover
        else:
            row["salary_delta"] = _as_int(v.get("total_salary", 0)) - _as_int(
                parent.get("total_salary", 0)
            )
        # If we can derive a variant total, enforce cap as a second-line check
        var_total = _as_int(parent.get("total_salary", 0)) + _as_int(row.get("salary_delta", 0))
        if var_total is not None and var_total > 50000:
            raise ValueError("Invalid variant: salary exceeds DK cap 50000")
        if "proj_delta" in v:
            row["proj_delta"] = float(v["proj_delta"])  # pragma: no cover
        else:
            row["proj_delta"] = _as_float(v.get("proj_fp", 0.0)) - _as_float(
                parent.get("proj_fp", 0.0)
            )
        rows.append(row)
    return pd.DataFrame(rows)


def _build_variant_metrics(run_id: str, catalog_df: pd.DataFrame) -> pd.DataFrame:
    # Simple aggregates: approximate entropy via unique variant players diversity,
    # chalk index as max per-player inclusion rate.
    player_counts: dict[str, int] = {}
    total_variants = int(len(catalog_df))
    for players in catalog_df["players"]:
        for p in players:
            player_counts[p] = player_counts.get(p, 0) + 1
    if total_variants > 0 and player_counts:
        rates = [c / (total_variants) for c in player_counts.values()]
        chalk_index = float(max(rates))
        # Shannon-like proxy (not true entropy over lineup space):
        import math

        entropy = float(-sum(r * math.log(r + 1e-12) for r in rates if r > 0.0))
        if entropy < 0:
            entropy = 0.0
    else:
        chalk_index = 0.0
        entropy = 0.0
    aggregates = {"chalk_index": chalk_index, "entropy": entropy}
    return pd.DataFrame([{"run_id": run_id, "aggregates": aggregates}])


def run_adapter(
    *,
    slate_id: str,
    config_path: Path | None,
    config_kv: Sequence[str] | None,
    seed: int,
    out_root: Path,
    tag: str | None,
    input_path: Path | None,
    from_run: str | None = None,
    schemas_root: Path | None = None,
    validate: bool = True,
) -> dict[str, Any]:
    created_ts = _utc_now_iso()
    out_root_eff = out_root

    opt_lineups_path = _find_input_optimizer_lineups(
        out_root=out_root_eff,
        slate_id=slate_id,
        explicit_input=input_path,
        from_run=from_run,
    )
    parent_lineups_df = pd.read_parquet(opt_lineups_path)

    cfg = load_config(config_path, config_kv)
    knobs = map_config_to_knobs(cfg)
    # Seed precedence: function arg takes precedence; include in knobs for compatibility
    knobs["seed"] = seed

    # Execute variant builder
    run_variants = _load_variant()
    res = run_variants(parent_lineups_df, knobs, seed)
    if isinstance(res, tuple) and len(res) >= 1:
        variants = list(res[0])
        telemetry = dict(res[1]) if len(res) > 1 and isinstance(res[1], Mapping) else {}
    else:
        variants = list(res)
        telemetry = {}

    # Early sanity: salary cap if present on variant objects
    for _v in variants:
        if isinstance(_v, Mapping) and "total_salary" in _v:
            try:
                _ts = int(_v["total_salary"])  # may raise
            except Exception:
                _ts = None
            if _ts is not None and _ts > 50000:
                raise ValueError("Invalid variant: salary exceeds DK cap 50000")

    schemas_root = schemas_root or SCHEMAS_ROOT
    manifest_schema = load_schema(schemas_root / "manifest.schema.yaml")

    # Build inputs: optimizer lineups + config(s)
    opt_sha = _sha256_of_path(opt_lineups_path)
    inputs_list: list[dict[str, Any]] = [
        {
            "path": str(opt_lineups_path),
            "content_sha256": opt_sha,
            "role": "optimizer_lineups",
        }
    ]
    cfg_json = json.dumps(cfg, sort_keys=True, separators=(",", ":"))
    cfg_sha = hashlib.sha256(cfg_json.encode("utf-8")).hexdigest()
    if config_path is not None and config_path.exists():
        inputs_list.append(
            {
                "path": str(config_path),
                "content_sha256": _sha256_of_path(config_path),
                "role": "config",
            }
        )
    if config_kv:
        kv_parsed: dict[str, Any] = {}
        for item in config_kv:
            if "=" not in item:
                continue
            k, v = item.split("=", 1)
            kv_parsed[k.strip()] = _coerce_scalar(v.strip())
        inputs_list.append(
            {
                "path": "inline:config_kv",
                "content_sha256": hashlib.sha256(
                    json.dumps(kv_parsed, sort_keys=True, separators=(",", ":")).encode("utf-8")
                ).hexdigest(),
                "role": "config",
            }
        )

    # Deterministic run_id
    ts = datetime.now(UTC)
    run_id_core = ts.strftime("%Y%m%d_%H%M%S")
    short_hash = hashlib.sha256(f"{opt_sha}|{cfg_sha}|{seed}".encode()).hexdigest()[:8]
    run_id = f"{run_id_core}_{short_hash}"

    # Build artifacts
    run_dir = out_root_eff / "runs" / "variants" / run_id
    artifacts_dir = run_dir / "artifacts"
    ensure_dir(artifacts_dir)

    catalog_df = _build_variant_catalog(run_id, variants, parent_lineups_df)
    metrics_df = _build_variant_metrics(run_id, catalog_df)

    # Validate rows against schemas (fail fast) unless disabled
    if validate:
        catalog_schema = load_schema(schemas_root / "variant_catalog.schema.yaml")
        metrics_schema = load_schema(schemas_root / "variant_metrics.schema.yaml")
        for row in catalog_df.to_dict(orient="records"):
            validate_obj(catalog_schema, row, schemas_root=schemas_root)
        for row in metrics_df.to_dict(orient="records"):
            validate_obj(metrics_schema, row, schemas_root=schemas_root)

    # Parquet compatibility: ensure variant_params isn't an empty struct which
    # pyarrow can't write (struct with no fields). Replace {} with {"_": None}.
    if "variant_params" in catalog_df.columns:
        catalog_df["variant_params"] = catalog_df["variant_params"].apply(
            lambda x: x if isinstance(x, dict) and len(x) > 0 else {"_": None}
        )

    catalog_path = artifacts_dir / "variant_catalog.parquet"
    metrics_path = artifacts_dir / "metrics.parquet"
    write_parquet(catalog_df, catalog_path)
    write_parquet(metrics_df, metrics_path)

    # Manifest
    manifest = {
        "schema_version": _schema_version(schemas_root, "manifest"),
        "run_id": run_id,
        "run_type": "variants",
        "slate_id": slate_id,
        "created_ts": created_ts,
        "inputs": inputs_list,
        "config": cfg,
        "outputs": [
            {"path": str(catalog_path), "kind": "variant_catalog"},
            {"path": str(metrics_path), "kind": "variant_metrics"},
        ],
        "tags": [tag] if tag else [],
    }
    if validate:
        validate_obj(manifest_schema, manifest, schemas_root=schemas_root)
    (run_dir / "manifest.json").write_text(json.dumps(manifest, indent=2), encoding="utf-8")

    # Registry append
    registry_path = out_root_eff / "registry" / "runs.parquet"
    ensure_dir(registry_path.parent)
    reg_row = {
        "run_id": run_id,
        "run_type": "variants",
        "slate_id": slate_id,
        "status": "success",
        "primary_outputs": [str(catalog_path)],
        "metrics_path": str(metrics_path),
        "created_ts": created_ts,
        "tags": [tag] if tag else [],
    }
    if validate:
        runs_registry_schema = load_schema(schemas_root / "runs_registry.schema.yaml")
        validate_obj(runs_registry_schema, reg_row, schemas_root=schemas_root)
    if registry_path.exists():
        existing = pd.read_parquet(registry_path)
        df = pd.concat([existing, pd.DataFrame([reg_row])], ignore_index=True)
    else:
        df = pd.DataFrame([reg_row])
    write_parquet(df, registry_path)

    return {
        "run_id": run_id,
        "catalog_path": str(catalog_path),
        "metrics_path": str(metrics_path),
        "manifest_path": str(run_dir / "manifest.json"),
        "registry_path": str(registry_path),
        "variant_count": int(len(catalog_df)),
        "optimizer_lineups_path": str(opt_lineups_path),
        "telemetry": telemetry,
    }


def _build_parser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser(prog="python -m processes.variants")
    p.add_argument("--slate-id", required=True)
    p.add_argument("--config", type=Path)
    p.add_argument("--config-kv", nargs="*", help="Inline overrides key=value")
    p.add_argument("--seed", type=int, default=42)
    p.add_argument("--out-root", type=Path, default=Path("data"))
    p.add_argument("--tag", type=str)
    p.add_argument("--input", type=Path, help="Explicit optimizer lineups parquet path")
    p.add_argument(
        "--from-run",
        type=str,
        help="Optimizer run_id to source lineups from (run_type=optimizer)",
    )
    p.add_argument(
        "--schemas-root",
        type=Path,
        help="Override schemas root (defaults to repo-relative pipeline/schemas)",
    )
    p.add_argument("--no-validate", action="store_true")
    p.add_argument("--verbose", action="store_true")
    return p


def main(argv: Sequence[str] | None = None) -> int:
    args = _build_parser().parse_args(argv)
    result = run_adapter(
        slate_id=args.slate_id,
        config_path=args.config,
        config_kv=args.config_kv,
        seed=int(args.seed),
        out_root=args.out_root,
        tag=args.tag,
        input_path=args.input,
        from_run=args.from_run,
        schemas_root=args.schemas_root,
        validate=not args.no_validate,
    )
    if args.verbose:
        known = {
            "num_variants",
            "swap_window",
            "randomness",
            "exposure_targets",
            "group_rules",
            "uniques",
            "avoid_dups",
            "ownership_guidance",
            "seed",
        }
        cfg = load_config(args.config, args.config_kv)
        unknown = sorted(set(cfg.keys()) - known - {"extras"})
        if unknown:
            unk_msg = ", ".join(unknown)
            print(
                "[variants] Warning: unknown config keys ignored/passthrough: " f"{unk_msg}",
                file=sys.stderr,
            )
        print(
            (
                "[variants] input="
                f"{result.get('optimizer_lineups_path')} "
                f"run_id={result.get('run_id')} "
                f"variants={result.get('variant_count')}"
            ),
            file=sys.stderr,
        )
    return 0


if __name__ == "__main__":  # pragma: no cover
    raise SystemExit(main())
</file>

<file path="processes/__init__.py">
"""Process entrypoints for pipeline stages (optimizer, variants, etc.).

This package intentionally contains headless adapters and CLIs. UI code lives elsewhere.
"""
</file>

<file path="src/runs/__init__.py">
"""Public API for run registry helpers."""

from .api import (
    gen_run_id,
    gen_slate_key,
    get_run,
    list_runs,
    prune_runs,
    save_run,
)

__all__ = [
    "save_run",
    "get_run",
    "list_runs",
    "prune_runs",
    "gen_slate_key",
    "gen_run_id",
]
</file>

<file path="src/variant_builder/__init__.py">
from __future__ import annotations

import json
from collections.abc import Iterable, Sequence
from dataclasses import dataclass
from datetime import UTC, datetime, timezone
from pathlib import Path

import pandas as pd

from src.runs.api import _git_branch, gen_run_id
from validators.lineup_rules import DK_SLOTS_ORDER, LineupValidator

__all__ = ["BuildParams", "build_variant_catalog"]


@dataclass
class BuildParams:
    """Parameters for variant catalog construction."""

    optimizer_run: Path
    player_pool: Path
    output_path: Path
    slate_id: str
    site: str = "DK"
    run_id: str | None = None


def _utc_now_iso() -> str:
    now = datetime.now(UTC)
    ms = int(now.microsecond / 1000)
    return f"{now.strftime('%Y-%m-%dT%H:%M:%S')}.{ms:03d}Z"


def _load_optimizer_run(path: Path) -> Iterable[list[tuple[str, str]]]:
    """Yield lineups from optimizer run JSONL.

    Each line is expected to be a JSON object containing either:
    - "slots": list of {"slot": str, "player_id": str}
    - "lineup": list of [slot, player_id]
    - "players": list of player_ids ordered according to DK slots
    """
    with path.open("r", encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if not line:
                continue
            obj = json.loads(line)
            if "slots" in obj:
                yield [(s["slot"], s["player_id"]) for s in obj["slots"]]
            elif "lineup" in obj:
                yield [tuple(pair) for pair in obj["lineup"]]
            elif "players" in obj:
                players = list(obj["players"])
                yield list(zip(DK_SLOTS_ORDER, players, strict=True))
            else:  # pragma: no cover - defensive
                raise ValueError("optimizer run row missing lineup data")


def build_variant_catalog(params: BuildParams) -> Path:
    """Build a variant catalog from an optimizer run.

    Validates each lineup using :class:`LineupValidator` and writes a JSONL file
    containing the minimal contract required for downstream injection.
    """
    run_id = params.run_id or gen_run_id()
    created_at = _utc_now_iso()
    source_branch = _git_branch()

    pool = pd.read_csv(params.player_pool).set_index("player_id")
    pool_df = pool.reset_index()

    validator = LineupValidator()

    params.output_path.parent.mkdir(parents=True, exist_ok=True)
    with params.output_path.open("w", encoding="utf-8") as out:
        for lineup in _load_optimizer_run(params.optimizer_run):
            if not validator.validate(lineup, pool_df):
                raise ValueError("Invalid lineup in optimizer run")
            player_ids = [pid for _, pid in lineup]
            sub = pool.loc[player_ids]
            record = {
                "lineup": player_ids,
                "salary_total": int(sub["salary"].sum()),
                "teams": list(sub["team"].unique()),
                "valid": True,
                "tags": [],
                "run_id": run_id,
                "created_at": created_at,
                "site": params.site,
                "slate_id": params.slate_id,
                "source_branch": source_branch,
            }
            out.write(json.dumps(record) + "\n")
    return params.output_path


def main(argv: Sequence[str] | None = None) -> int:  # pragma: no cover - thin CLI
    import argparse

    p = argparse.ArgumentParser(prog="python -m src.variant_builder")
    p.add_argument("--optimizer-run", type=Path, required=True)
    p.add_argument("--player-pool", type=Path, required=True)
    p.add_argument("--out", type=Path, required=True)
    p.add_argument("--slate-id", required=True)
    p.add_argument("--site", default="DK")
    p.add_argument("--run-id")
    args = p.parse_args(argv)

    build_variant_catalog(
        BuildParams(
            optimizer_run=args.optimizer_run,
            player_pool=args.player_pool,
            output_path=args.out,
            slate_id=args.slate_id,
            site=args.site,
            run_id=args.run_id,
        )
    )
    return 0


if __name__ == "__main__":  # pragma: no cover
    raise SystemExit(main())
</file>

<file path="src/__init__.py">
# Make 'src' a package so runtime imports like 'from src.runs.api import save_run' work.
</file>

<file path="tests/fixtures/stub_field_sampler.py">
from __future__ import annotations

from typing import Any


def run_sampler(catalog_df, config: dict[str, Any], seed: int) -> tuple[Any, dict[str, Any]]:
    """Stub sampler honoring diversity knob.

    - diversity < 0.5  => many duplicates (high duplication_risk)
    - diversity >= 0.5 => spread across unique lineups (lower duplication_risk)
    Returns (entrants_df_like, telemetry). Entrants may be a DataFrame; the adapter
    will coerce it to records.
    """
    import pandas as pd

    K = min(10, len(catalog_df)) if len(catalog_df) else 1
    base = (
        catalog_df.iloc[:K].copy()
        if len(catalog_df)
        else pd.DataFrame(
            [
                {
                    "players": [f"p{i}" for i in range(8)],
                    "export_csv_row": ",".join(
                        [
                            "PG p0",
                            "SG p1",
                            "SF p2",
                            "PF p3",
                            "C p4",
                            "G p5",
                            "F p6",
                            "UTIL p7",
                        ]
                    ),
                }
            ]
        )
    )

    diversity = float(config.get("diversity", 0.0) or 0.0)
    field_size = int(config.get("field_size", 20))

    rows: list[dict[str, Any]] = []
    if diversity < 0.5:
        # low diversity: repeat first lineup
        first = base.iloc[0]
        p = list(first.get("players", [f"p{i}" for i in range(8)]))
        exp = first.get(
            "export_csv_row",
            ",".join(
                [
                    f"PG {p[0]}",
                    f"SG {p[1]}",
                    f"SF {p[2]}",
                    f"PF {p[3]}",
                    f"C {p[4]}",
                    f"G {p[5]}",
                    f"F {p[6]}",
                    f"UTIL {p[7]}",
                ]
            ),
        )
        for i in range(field_size):
            rows.append(
                {
                    "origin": "stub",
                    "players": p,
                    "export_csv_row": exp,
                    "variant_id": first.get("variant_id", None),
                    "lineup_id": f"dup_{i}",
                    "weight": 1.0,
                }
            )
    else:
        # high diversity: cycle unique lineups and perturb a player to ensure distinct sets
        for i in range(field_size):
            r = base.iloc[i % len(base)]
            p = list(r.get("players", [f"p{j}" for j in range(8)]))
            p[-1] = f"x{i}"  # ensure distinct set
            exp = r.get(
                "export_csv_row",
                ",".join(
                    [
                        f"PG {p[0]}",
                        f"SG {p[1]}",
                        f"SF {p[2]}",
                        f"PF {p[3]}",
                        f"C {p[4]}",
                        f"G {p[5]}",
                        f"F {p[6]}",
                        f"UTIL {p[7]}",
                    ]
                ),
            )
            rows.append(
                {
                    "origin": "stub",
                    "players": p,
                    "export_csv_row": exp,
                    "variant_id": r.get("variant_id", None),
                    "lineup_id": f"u_{i}",
                    "weight": 1.0,
                }
            )

    entrants = pd.DataFrame(rows)
    telemetry = {"note": "stub_field_sampler honors diversity knob"}
    return entrants, telemetry
</file>

<file path="tests/fixtures/stub_simulator.py">
from __future__ import annotations

from typing import Any

import pandas as pd


def run_sim(field_df: pd.DataFrame, contest: dict[str, Any], knobs: dict[str, Any], seed: int):
    # Deterministic: single world, entrants ranked by entrant_id ascending
    payout: dict[int, float] = {}
    for p in contest.get("payout_curve", []):
        for r in range(int(p.get("rank_start", 0)), int(p.get("rank_end", 0)) + 1):
            payout[r] = float(p.get("prize", 0.0))
    rows: list[dict[str, Any]] = []
    entrants = list(
        pd.to_numeric(field_df.get("entrant_id"), errors="coerce").fillna(0).astype(int)
    )
    for i, eid in enumerate(sorted(entrants), start=1):
        rows.append(
            {
                "world_id": 0,
                "entrant_id": int(eid),
                "score": float(100 - i),
                "rank": int(i),
                "prize": float(payout.get(i, 0.0)),
                "seed": int(seed),
            }
        )
    aggregates = {
        "ev_mean": float(sum(payout.values()) / max(1, len(entrants))),
        "roi_mean": -0.1,
    }
    telemetry = {"note": "stub"}
    return rows, aggregates, telemetry
</file>

<file path="tests/test_api_endpoints.py">
from __future__ import annotations

import json
from pathlib import Path

import pandas as pd
import pytest
from httpx import AsyncClient

from processes.api import app as api_app


@pytest.mark.anyio
async def test_runs_registry_missing_404(tmp_path: Path) -> None:
    missing = tmp_path / "data" / "registry" / "runs.parquet"
    async with AsyncClient(app=api_app, base_url="http://test") as ac:
        resp = await ac.get("/runs", params={"registry_path": str(missing)})
        assert resp.status_code == 404
        payload = resp.json()
        assert payload["error"] == "not_found"
        assert "registry" in payload.get("detail", "")


@pytest.mark.anyio
async def test_export_dk_csv_variants_bad_export_row_422(tmp_path: Path) -> None:
    # Create a variants run with a catalog missing export_csv_row
    runs_root = tmp_path / "runs"
    run_id = "VAR_BAD"
    run_dir = runs_root / "variants" / run_id
    artifacts = run_dir / "artifacts"
    artifacts.mkdir(parents=True, exist_ok=True)

    # minimal catalog without export_csv_row column
    cat_df = pd.DataFrame(
        [
            {
                "run_id": run_id,
                "variant_id": "V1",
                "parent_lineup_id": "L1",
                "players": [f"p{i}" for i in range(8)],
                "variant_params": {"_": None},
            }
        ]
    )
    catalog_path = artifacts / "variant_catalog.parquet"
    cat_df.to_parquet(catalog_path)

    manifest = {
        "schema_version": "0.2.0",
        "run_id": run_id,
        "run_type": "variants",
        "slate_id": "20250101_NBA",
        "created_ts": "2025-01-01T12:00:00.000Z",
        "inputs": [],
        "outputs": [
            {"path": str(catalog_path), "kind": "variant_catalog"},
        ],
    }
    (run_dir / "manifest.json").write_text(json.dumps(manifest), encoding="utf-8")

    async with AsyncClient(app=api_app, base_url="http://test") as ac:
        resp = await ac.get(f"/export/dk/{run_id}", params={"runs_root": str(runs_root)})
        assert resp.status_code == 422
        payload = resp.json()
        assert payload["error"] == "invalid_export"
        assert "export_csv_row" in payload.get("detail", "")


@pytest.mark.anyio
async def test_logs_fallback_message_no_logs(tmp_path: Path) -> None:
    runs_root = tmp_path / "runs"
    run_id = "RID_NO_LOG"
    run_dir = runs_root / "sim" / run_id
    (run_dir / "artifacts").mkdir(parents=True, exist_ok=True)
    # minimal manifest
    manifest = {
        "schema_version": "0.2.0",
        "run_id": run_id,
        "run_type": "sim",
        "slate_id": "20250101_NBA",
        "created_ts": "2025-01-01T12:00:00.000Z",
        "inputs": [],
        "outputs": [],
    }
    (run_dir / "manifest.json").write_text(json.dumps(manifest), encoding="utf-8")

    async with AsyncClient(app=api_app, base_url="http://test") as ac:
        resp = await ac.get(f"/logs/{run_id}", params={"runs_root": str(runs_root)})
        assert resp.status_code == 200
        payload = resp.json()
        assert payload["run_id"] == run_id
        assert payload.get("message") == "logs not available"
</file>

<file path="tests/test_api_smoke.py">
from __future__ import annotations

from collections.abc import Mapping
from pathlib import Path
from typing import Any

import pandas as pd
import pytest
from httpx import AsyncClient

from processes.api import app as api_app

DK_SLOTS = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]


def _make_players_csv(tmp: Path) -> tuple[Path, Path]:
    players_csv = tmp / "players.csv"
    proj_csv = tmp / "projections.csv"
    rows = [
        {"dk_player_id": f"P{i}", "name": f"Player {i}", "team": "BOS", "pos": "PG"}
        for i in range(1, 9)
    ]
    pd.DataFrame(rows).to_csv(players_csv, index=False)

    proj_rows = [
        {
            "DK_ID": f"P{i}",
            "Name": f"Player {i}",
            "Team": "BOS",
            "Pos": "PG",
            "Salary": 6000 + i * 100,
            "FP": 30.0 + i,
        }
        for i in range(1, 9)
    ]
    pd.DataFrame(proj_rows).to_csv(proj_csv, index=False)
    return players_csv, proj_csv


def _stub_optimizer_impl(
    projections_df: pd.DataFrame,
    constraints: Mapping[str, Any],
    seed: int,
    site: str,
    engine: str,
):
    col = "dk_player_id" if "dk_player_id" in projections_df.columns else "player_id"
    ids = list(map(str, projections_df[col].astype(str).head(8)))

    def _lineup():
        return {
            "players": ids,
            "dk_positions_filled": [{"slot": s, "position": s} for s in DK_SLOTS],
            "total_salary": 50000,
            "proj_fp": 250.0,
        }

    return [_lineup(), _lineup()], {"seed": seed, "engine": engine}


def _stub_variants_impl(parent_lineups_df: pd.DataFrame, knobs: Mapping[str, Any], seed: int):
    variants: list[Mapping[str, Any]] = []
    for _, row in parent_lineups_df.head(1).iterrows():
        variants.append(
            {
                "variant_id": "V1",
                "parent_lineup_id": str(row["lineup_id"]),
                "players": list(row["players"]),
            }
        )
    return variants, {"seed": seed}


def _stub_field_impl(catalog_df: pd.DataFrame, knobs: Mapping[str, Any], seed: int):
    entrants = []
    v = catalog_df.iloc[0]
    entrants.append(
        {
            "origin": "variant",
            "variant_id": str(v["variant_id"]),
            "players": list(v["players"]),
            "weight": 1.0,
        }
    )
    return entrants, {"seed": seed}


def _stub_sim_impl(
    field_df: pd.DataFrame,
    contest: Mapping[str, Any],
    knobs: Mapping[str, Any],
    seed: int,
):
    rows = [
        {
            "world_id": 1,
            "entrant_id": int(field_df.iloc[0]["entrant_id"]),
            "score": 300.0,
            "rank": 1,
            "prize": 500.0,
        },
        {
            "world_id": 1,
            "entrant_id": 999999,
            "score": 100.0,
            "rank": contest.get("field_size", 2),
            "prize": 0.0,
        },
    ]
    aggs = {"ev_mean": 10.0, "roi_mean": 0.1}
    return rows, aggs, {"seed": seed}


@pytest.mark.anyio
async def test_api_run_orchestrator(tmp_path, monkeypatch):
    out_root = tmp_path / "out"
    out_root.mkdir(parents=True, exist_ok=True)
    players_csv, proj_csv = _make_players_csv(tmp_path)

    cfg = {
        "slate_id": "20250101_NBA",
        "seeds": {"optimizer": 1, "variants": 2, "field": 3, "sim": 4},
        "ingest": {
            "source": "manual",
            "projections": str(proj_csv),
            "player_ids": str(players_csv),
            "mapping": str(Path("pipeline/ingest/mappings/example_source.yaml").resolve()),
        },
        "optimizer": {"site": "DK", "engine": "cbc", "config": {"num_lineups": 2}},
        "variants": {"config": {"num_variants": 1}},
        "field": {"config": {"field_size": 2}},
        "sim": {
            "config": {"num_trials": 5},
            "contest": {
                "field_size": 2,
                "payout_curve": [
                    {"rank_start": 1, "rank_end": 1, "prize": 500},
                    {"rank_start": 2, "rank_end": 2, "prize": 0},
                ],
                "entry_fee": 20,
                "rake": 0.15,
                "site": "DK",
            },
        },
    }

    import processes.field_sampler.adapter as fld
    import processes.gpp_sim.adapter as gsim
    import processes.optimizer.adapter as opt
    import processes.variants.adapter as var

    monkeypatch.setattr(opt, "_load_optimizer", lambda: _stub_optimizer_impl)
    monkeypatch.setattr(var, "_load_variant", lambda: _stub_variants_impl)
    monkeypatch.setattr(fld, "_load_sampler", lambda: _stub_field_impl)
    monkeypatch.setattr(gsim, "_load_sim_impl", lambda: _stub_sim_impl)

    payload = {
        "slate_id": "20250101_NBA",
        "config": cfg,
        "out_root": str(out_root),
        "schemas_root": str(Path("pipeline/schemas")),
    }

    async with AsyncClient(app=api_app, base_url="http://test") as ac:
        resp = await ac.post("/run/orchestrator", json=payload)
        assert resp.status_code == 200
        data = resp.json()
        bundle_id = data["bundle_id"]
        sim_run_id = data["stages"]["sim"]

        resp2 = await ac.get(f"/runs/{bundle_id}")
        assert resp2.status_code == 200
        bundle = resp2.json()
        assert bundle["bundle_id"] == bundle_id

        resp3 = await ac.get(f"/metrics/{sim_run_id}")
        assert resp3.status_code == 200
        metrics = resp3.json()
        assert isinstance(metrics, list) and metrics
</file>

<file path="tests/test_dk_entries_writer_roundtrip.py">
from __future__ import annotations

from pathlib import Path

import pandas as pd

from processes.dk_export.writer import (
    DK_SLOTS_ORDER,
    build_export_df,
    update_entries_csv,
)


def _export_row(players: list[str]) -> str:
    return ",".join(f"{slot} {pid}" for slot, pid in zip(DK_SLOTS_ORDER, players, strict=True))


def test_dk_entries_writer_roundtrip(tmp_path: Path) -> None:
    players1 = [f"p{i}" for i in range(8)]
    players2 = [f"q{i}" for i in range(8)]
    field_df = pd.DataFrame(
        [
            {"entrant_id": 1, "export_csv_row": _export_row(players1)},
            {"entrant_id": 2, "export_csv_row": _export_row(players2)},
        ]
    )
    sim_df = pd.DataFrame(
        [
            {"entrant_id": 1, "prize": 10.0},
            {"entrant_id": 2, "prize": 9.0},
        ]
    )
    export_df = build_export_df(sim_df, field_df, top_n=2)
    template = Path(__file__).parent / "fixtures" / "dk_entries_template.csv"
    out = tmp_path / "filled.csv"
    update_entries_csv(template, export_df, out)
    result = pd.read_csv(out)
    for i, slot in enumerate(DK_SLOTS_ORDER):
        assert result.loc[0, slot] == players1[i]
        assert result.loc[1, slot] == players2[i]
</file>

<file path="tests/test_dk_export_dedupe.py">
from __future__ import annotations

import pandas as pd

from processes.dk_export.writer import DK_SLOTS_ORDER, build_export_df


def _export_row(players: list[str]) -> str:
    return ",".join(f"{slot} {pid}" for slot, pid in zip(DK_SLOTS_ORDER, players, strict=True))


def test_dk_export_dedupe() -> None:
    players = [f"p{i}" for i in range(8)]
    field_df = pd.DataFrame(
        [
            {"entrant_id": 1, "export_csv_row": _export_row(players)},
            {"entrant_id": 2, "export_csv_row": _export_row(players)},
        ]
    )
    sim_df = pd.DataFrame(
        [
            {"entrant_id": 1, "prize": 50.0},
            {"entrant_id": 2, "prize": 40.0},
        ]
    )
    df = build_export_df(sim_df, field_df, top_n=2, dedupe=True)
    assert len(df) == 1
    df_no = build_export_df(sim_df, field_df, top_n=2, dedupe=False)
    assert len(df_no) == 2
</file>

<file path="tests/test_dk_export_from_sim_topn.py">
from __future__ import annotations

import pandas as pd

from processes.dk_export.writer import DK_SLOTS_ORDER, build_export_df


def _export_row(players: list[str]) -> str:
    return ",".join(f"{slot} {pid}" for slot, pid in zip(DK_SLOTS_ORDER, players, strict=True))


def test_dk_export_from_sim_topn() -> None:
    entrants = []
    field_rows = []
    for eid in range(1, 11):
        players = [f"p{eid}{i}" for i in range(8)]
        field_rows.append({"entrant_id": eid, "export_csv_row": _export_row(players)})
        entrants.append({"entrant_id": eid, "prize": 100 - eid})
    sim_df = pd.DataFrame(entrants)
    field_df = pd.DataFrame(field_rows)
    df = build_export_df(sim_df, field_df, top_n=5)
    assert len(df) == 5
    # Expect entrants with highest prize values (1..5)
    assert df["entrant_id"].tolist() == list(range(1, 6))
</file>

<file path="tests/test_dk_export_header_order.py">
from __future__ import annotations

import pandas as pd

from processes.dk_export.writer import DK_SLOTS_ORDER, build_export_df


def _export_row(players: list[str]) -> str:
    return ",".join(f"{slot} {pid}" for slot, pid in zip(DK_SLOTS_ORDER, players, strict=True))


def test_dk_export_header_order() -> None:
    players = [f"p{i}" for i in range(8)]
    field_df = pd.DataFrame(
        [
            {
                "entrant_id": 1,
                "export_csv_row": _export_row(players),
            }
        ]
    )
    sim_df = pd.DataFrame([{"entrant_id": 1, "prize": 10.0}])
    df = build_export_df(sim_df, field_df, top_n=1)
    assert list(df.columns) == ["entrant_id", *DK_SLOTS_ORDER]
    assert df.loc[0, "PG"] == "p0"
    assert df.loc[0, "UTIL"] == "p7"
</file>

<file path="tests/test_field_dedup_and_diversity.py">
from __future__ import annotations

from pathlib import Path
from typing import Any

import pandas as pd

from processes.field_sampler import adapter as field


def _stub_diversity(catalog_df: pd.DataFrame, knobs: dict[str, Any], seed: int):
    # Produce 4 entrants; when diversity high or de-dup true, make unique player sets; else all same
    base_players = [f"p{i}" for i in range(8)]

    def row(players: list[str]) -> dict[str, Any]:
        return {
            "origin": "variant",
            "players": players,
            "export_csv_row": ",".join(
                f"{s} {p}"
                for s, p in zip(
                    ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"],
                    players,
                    strict=False,
                )
            ),
        }

    unique = knobs.get("de-dup") or (knobs.get("diversity", 0.0) or 0.0) >= 0.5
    if unique:
        entrants = []
        for i in range(4):
            players = list(base_players)
            players[-1] = f"x{i}"  # ensure distinct set
            entrants.append(row(players))
    else:
        entrants = [row(base_players) for _ in range(4)]
    return entrants


def test_dedup_and_diversity_metric(tmp_path: Path, monkeypatch):
    cat_path = tmp_path / "vc.parquet"
    pd.DataFrame(
        [
            {
                "run_id": "rid",
                "variant_id": "V1",
                "parent_lineup_id": "L1",
                "players": [f"p{i}" for i in range(8)],
                "variant_params": {"_": None},
                "export_csv_row": ",".join(
                    f"{s} p{i}"
                    for i, s in enumerate(["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"], start=0)
                ),
            }
        ]
    ).to_parquet(cat_path)

    monkeypatch.setattr(field, "_load_sampler", lambda: _stub_diversity)

    out_root = tmp_path / "out"
    # Low diversity → higher duplication_risk
    res_low = field.run_adapter(
        slate_id="20251101_NBA",
        config_path=None,
        config_kv=["diversity=0.0"],
        seed=1,
        out_root=out_root,
        tag=None,
        input_path=cat_path,
    )
    low_metrics = pd.read_parquet(Path(res_low["metrics_path"]))
    low_risk = float(low_metrics.iloc[0].get("duplication_risk", 0.0))

    # High diversity → lower duplication_risk
    res_high = field.run_adapter(
        slate_id="20251101_NBA",
        config_path=None,
        config_kv=["diversity=0.9"],
        seed=1,
        out_root=out_root,
        tag=None,
        input_path=cat_path,
    )
    high_metrics = pd.read_parquet(Path(res_high["metrics_path"]))
    high_risk = float(high_metrics.iloc[0].get("duplication_risk", 0.0))

    assert high_risk < low_risk
</file>

<file path="tests/test_field_failfast_no_write.py">
from __future__ import annotations

from pathlib import Path
from typing import Any

import pandas as pd

from processes.field_sampler import adapter as field


def _stub_bad_sampler(catalog_df: pd.DataFrame, knobs: dict[str, Any], seed: int):
    # Return a single entrant with only 7 players to trigger fail-fast
    players = [f"p{i}" for i in range(7)]
    return [
        {
            "origin": "variant",
            "players": players,
            "export_csv_row": ",".join(
                f"{s} p{i}" for i, s in enumerate(["PG", "SG", "SF", "PF", "C", "G", "F"], start=0)
            ),
        }
    ]


def test_failfast_blocks_writes(tmp_path: Path, monkeypatch):
    # Minimal catalog input (not actually used by stub)
    vc = pd.DataFrame(
        [
            {
                "run_id": "rid_var",
                "variant_id": "V1",
                "parent_lineup_id": "L1",
                "players": [f"p{i}" for i in range(8)],
                "variant_params": {"_": None},
                "export_csv_row": ",".join(
                    f"{s} p{i}"
                    for i, s in enumerate(["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"], start=0)
                ),
            }
        ]
    )
    cat_path = tmp_path / "variant_catalog.parquet"
    vc.to_parquet(cat_path)

    monkeypatch.setattr(field, "_load_sampler", lambda: _stub_bad_sampler)

    out_root = tmp_path / "out"
    try:
        field.run_adapter(
            slate_id="20251101_NBA",
            config_path=None,
            config_kv=None,
            seed=1,
            out_root=out_root,
            tag=None,
            input_path=cat_path,
        )
        raise AssertionError("Expected ValueError due to invalid entrant")
    except ValueError:
        pass

    # No run directory should be created
    field_runs = list((out_root / "runs" / "field").glob("*"))
    assert not field_runs
</file>

<file path="tests/test_field_manifest_registry.py">
from __future__ import annotations

import json
from pathlib import Path
from typing import Any

import pandas as pd

from processes.field_sampler import adapter as field


def _stub_ok(catalog_df: pd.DataFrame, knobs: dict[str, Any], seed: int):
    players = [f"p{i}" for i in range(8)]
    return [
        {
            "origin": "variant",
            "players": players,
            "export_csv_row": ",".join(
                f"{s} {p}"
                for s, p in zip(
                    ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"],
                    players,
                    strict=False,
                )
            ),
        }
    ]


def test_manifest_and_registry(tmp_path: Path, monkeypatch):
    # Minimal catalog
    cat_path = tmp_path / "vc.parquet"
    pd.DataFrame(
        [
            {
                "run_id": "rid",
                "variant_id": "V1",
                "parent_lineup_id": "L1",
                "players": [f"p{i}" for i in range(8)],
                "variant_params": {"_": None},
                "export_csv_row": ",".join(
                    f"{s} p{i}"
                    for i, s in enumerate(["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"], start=0)
                ),
            }
        ]
    ).to_parquet(cat_path)

    monkeypatch.setattr(field, "_load_sampler", lambda: _stub_ok)

    out_root = tmp_path / "out"
    res = field.run_adapter(
        slate_id="20251101_NBA",
        config_path=None,
        config_kv=None,
        seed=1,
        out_root=out_root,
        tag="PRP-4",
        input_path=cat_path,
    )
    run_id = res["run_id"]
    run_dir = out_root / "runs" / "field" / run_id
    manifest = json.loads((run_dir / "manifest.json").read_text())
    assert manifest["run_type"] == "field" and manifest["run_id"] == run_id
    assert any(i.get("content_sha256") for i in manifest.get("inputs", []))
    # Registry
    reg = pd.read_parquet(out_root / "registry" / "runs.parquet")
    assert (reg["run_type"] == "field").any()
</file>

<file path="tests/test_field_run_id_determinism.py">
from __future__ import annotations

from datetime import UTC, datetime
from pathlib import Path
from typing import Any

import pandas as pd

from processes.field_sampler import adapter as field


def _stub_ok(catalog_df: pd.DataFrame, knobs: dict[str, Any], seed: int):
    row = catalog_df.iloc[0]
    players = list(row["players"]) if "players" in row else [f"p{i}" for i in range(8)]
    return [
        {
            "origin": "variant",
            "variant_id": str(row.get("variant_id", "V1")),
            "players": players,
            "export_csv_row": ",".join(
                f"{s} {p}"
                for s, p in zip(
                    ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"],
                    players,
                    strict=False,
                )
            ),
        }
    ]


def test_run_id_determinism(tmp_path: Path, monkeypatch):
    class FakeDT:
        @staticmethod
        def now(tz=None):
            return datetime(2025, 11, 1, 18, 0, 0, tzinfo=UTC)

    monkeypatch.setattr(field, "datetime", FakeDT)

    vc = pd.DataFrame(
        [
            {
                "run_id": "rid_var",
                "variant_id": "V1",
                "parent_lineup_id": "L1",
                "players": [f"p{i}" for i in range(8)],
                "variant_params": {"_": None},
                "export_csv_row": ",".join(
                    f"{s} p{i}"
                    for i, s in enumerate(["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"], start=0)
                ),
            }
        ]
    )
    cat_path = tmp_path / "variant_catalog.parquet"
    vc.to_parquet(cat_path)

    monkeypatch.setattr(field, "_load_sampler", lambda: _stub_ok)

    out_root = tmp_path / "out"
    r1 = field.run_adapter(
        slate_id="20251101_NBA",
        config_path=None,
        config_kv=None,
        seed=1,
        out_root=out_root,
        tag=None,
        input_path=cat_path,
    )
    r2 = field.run_adapter(
        slate_id="20251101_NBA",
        config_path=None,
        config_kv=None,
        seed=1,
        out_root=out_root,
        tag=None,
        input_path=cat_path,
    )
    assert r1["run_id"] == r2["run_id"]

    r3 = field.run_adapter(
        slate_id="20251101_NBA",
        config_path=None,
        config_kv=None,
        seed=2,
        out_root=out_root,
        tag=None,
        input_path=cat_path,
    )
    assert r1["run_id"] != r3["run_id"]
</file>

<file path="tests/test_field_sampler_engine.py">
import json
from pathlib import Path
from typing import Any, cast

import pandas as pd
import pytest

from field_sampler.engine import SamplerEngine
from validators.lineup_rules import DK_SLOTS_ORDER, LineupValidator

hypothesis = pytest.importorskip("hypothesis")
from hypothesis import HealthCheck, given, settings  # noqa: E402
from hypothesis import strategies as st  # noqa: E402


def _read_base(path: Path) -> list[dict[str, Any]]:
    return [cast(dict[str, Any], json.loads(line)) for line in path.read_text().splitlines()]


def test_golden_mini_slate(tmp_path: Path) -> None:
    projections = pd.read_csv(Path("tests/fixtures/mini_slate.csv"))
    eng = SamplerEngine(projections, seed=1, out_dir=tmp_path)
    eng.generate(1)
    rows = _read_base(tmp_path / "field_base.jsonl")
    assert rows[0]["players"] == [
        "p1",
        "p10",
        "p7",
        "p4",
        "p8",
        "p6",
        "p11",
        "p12",
    ]
    validator = LineupValidator()
    lineup = list(
        zip(
            DK_SLOTS_ORDER,
            cast(list[str], rows[0]["players"]),
            strict=False,
        )
    )
    assert validator.validate(lineup, projections)


def test_salary_and_team_limits(tmp_path: Path) -> None:
    projections = pd.read_csv(Path("tests/fixtures/mini_slate.csv"))
    eng = SamplerEngine(projections, seed=2, out_dir=tmp_path)
    eng.generate(3)
    rows = _read_base(tmp_path / "field_base.jsonl")
    validator = LineupValidator()
    for row in rows:
        lineup = list(
            zip(
                DK_SLOTS_ORDER,
                cast(list[str], row["players"]),
                strict=False,
            )
        )
        assert validator.validate(lineup, projections)


def test_salary_violation_rejected(tmp_path: Path) -> None:
    projections = pd.read_csv(Path("tests/fixtures/mini_slate.csv"))
    extra = pd.DataFrame([{"player_id": "bad", "team": "Z", "positions": "PG", "salary": 60000}])
    projections = pd.concat([projections, extra], ignore_index=True)
    eng = SamplerEngine(projections, seed=3, out_dir=tmp_path)
    eng.generate(2)
    rows = _read_base(tmp_path / "field_base.jsonl")
    for row in rows:
        assert "bad" not in cast(list[str], row["players"])


@pytest.mark.parametrize("drop", [True, False])  # type: ignore[misc]
def test_uniform_weights_without_ownership(tmp_path: Path, drop: bool) -> None:
    projections = pd.read_csv(Path("tests/fixtures/mini_slate.csv"))
    if drop:
        projections = projections.drop(columns=["ownership"])
    else:
        projections["ownership"] = 0.0
    eng = SamplerEngine(projections, seed=9, out_dir=tmp_path)
    meta = eng.generate(1)
    rows = _read_base(tmp_path / "field_base.jsonl")
    assert meta["field_base_count"] == 1
    assert len(rows) == 1


@settings(max_examples=5, suppress_health_check=[HealthCheck.function_scoped_fixture])  # type: ignore[misc]
@given(st.integers(min_value=12, max_value=18))  # type: ignore[misc]
def test_property_valid_lineups(tmp_path: Path, n_players: int) -> None:
    ids = [f"p{i}" for i in range(n_players)]
    teams = [f"T{i%3}" for i in range(n_players)]
    positions = ["PG", "SG", "SF", "PF", "C", "PG/SG", "SF/PF"]
    rows = []
    for pid, team in zip(ids, teams, strict=False):
        pos = positions[hash(pid) % len(positions)]
        salary = 2000 + (hash(pid) % 8000)
        rows.append(
            {
                "player_id": pid,
                "team": team,
                "positions": pos,
                "salary": salary,
                "ownership": 0.1,
            }
        )
    projections = pd.DataFrame(rows)
    eng = SamplerEngine(projections, seed=0, out_dir=tmp_path)
    meta = eng.generate(5)
    rows = _read_base(tmp_path / "field_base.jsonl")
    validator = LineupValidator()
    valid = 0
    for row in rows:
        lineup = list(
            zip(
                DK_SLOTS_ORDER,
                cast(list[str], row["players"]),
                strict=False,
            )
        )
        if validator.validate(lineup, projections):
            valid += 1
    assert valid == len(rows)
    assert valid / meta["attempts"] >= 0.01
</file>

<file path="tests/test_field_sampler_injection.py">
import json
from pathlib import Path

import pandas as pd
import pytest

from processes.field_sampler import injection_model as fs
from validators.lineup_rules import DK_SLOTS_ORDER, LineupValidator


def test_build_field_creates_artifacts(tmp_path: Path, monkeypatch: pytest.MonkeyPatch) -> None:
    projections = pd.DataFrame(
        [
            {"player_id": "p1", "team": "A", "positions": "PG", "salary": 10000},
            {"player_id": "p2", "team": "A", "positions": "SG", "salary": 8000},
            {"player_id": "p3", "team": "B", "positions": "SF", "salary": 7000},
            {"player_id": "p4", "team": "B", "positions": "PF", "salary": 6000},
            {"player_id": "p5", "team": "C", "positions": "C", "salary": 5000},
            {"player_id": "p6", "team": "C", "positions": "PG/SG", "salary": 4000},
            {"player_id": "p7", "team": "D", "positions": "SF/PF", "salary": 3000},
            {"player_id": "p8", "team": "D", "positions": "C", "salary": 2000},
        ]
    )
    variant_catalog = pd.DataFrame([{"players": [f"p{i}" for i in range(1, 9)]}])

    monkeypatch.chdir(tmp_path)
    metrics = fs.build_field(
        projections,
        field_size=1,
        seed=1,
        slate_id="SLATE",
        variant_catalog=variant_catalog,
    )

    base_path = tmp_path / "artifacts" / "field_base.jsonl"
    merged_path = tmp_path / "artifacts" / "field_merged.jsonl"
    metrics_path = tmp_path / "artifacts" / "metrics.json"

    assert base_path.exists()
    assert merged_path.exists()
    assert metrics_path.exists()

    merged = [json.loads(line) for line in merged_path.read_text().splitlines()]

    assert metrics["field_base_count"] == 1
    assert metrics["field_merged_count"] == 2
    assert merged[1]["source"] == "injected"

    pool = projections
    validator = LineupValidator()
    for row in merged:
        lineup = list(zip(DK_SLOTS_ORDER, row["players"], strict=False))
        assert validator.validate(lineup, pool)
</file>

<file path="tests/test_field_verbose_and_schemas_root.py">
from __future__ import annotations

from pathlib import Path
from typing import Any

import pandas as pd

from processes.field_sampler import adapter as field


def _stub_ok(catalog_df: pd.DataFrame, knobs: dict[str, Any], seed: int):
    players = [f"p{i}" for i in range(8)]
    return [
        {
            "origin": "variant",
            "players": players,
            "export_csv_row": ",".join(
                f"{s} {p}"
                for s, p in zip(
                    ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"],
                    players,
                    strict=False,
                )
            ),
        }
    ]


def test_verbose_prints_inputs(capsys, tmp_path: Path, monkeypatch):
    cat_path = tmp_path / "vc.parquet"
    pd.DataFrame(
        [
            {
                "run_id": "rid",
                "variant_id": "V1",
                "parent_lineup_id": "L1",
                "players": [f"p{i}" for i in range(8)],
                "variant_params": {"_": None},
                "export_csv_row": ",".join(
                    f"{s} p{i}"
                    for i, s in enumerate(["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"], start=0)
                ),
            }
        ]
    ).to_parquet(cat_path)

    monkeypatch.setattr(field, "_load_sampler", lambda: _stub_ok)

    argv = [
        "--slate-id",
        "20251101_NBA",
        "--seed",
        "1",
        "--out-root",
        str(tmp_path / "out"),
        "--input",
        str(cat_path),
        "--verbose",
    ]
    rc = field.main(argv)
    assert rc == 0
    err = capsys.readouterr().err
    assert "[field] input=" in err and "entrants=" in err
    assert str(cat_path) in err


def test_schemas_root_override(tmp_path: Path, monkeypatch):
    cat_path = tmp_path / "vc.parquet"
    pd.DataFrame(
        [
            {
                "run_id": "rid",
                "variant_id": "V1",
                "parent_lineup_id": "L1",
                "players": [f"p{i}" for i in range(8)],
                "variant_params": {"_": None},
                "export_csv_row": ",".join(
                    f"{s} p{i}"
                    for i, s in enumerate(["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"], start=0)
                ),
            }
        ]
    ).to_parquet(cat_path)

    monkeypatch.setattr(field, "_load_sampler", lambda: _stub_ok)

    argv = [
        "--slate-id",
        "20251101_NBA",
        "--seed",
        "1",
        "--out-root",
        str(tmp_path / "out"),
        "--input",
        str(cat_path),
        "--schemas-root",
        str(Path("pipeline/schemas")),
    ]
    rc = field.main(argv)
    assert rc == 0
</file>

<file path="tests/test_metrics_determinism.py">
from __future__ import annotations

from pathlib import Path

import pandas as pd

from processes.gpp_sim import adapter as sim
from processes.metrics import adapter as metrics


def _build_simple_field(tmp_path: Path) -> Path:
    players = [f"p{i}" for i in range(8)]
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    df = pd.DataFrame(
        [
            {
                "run_id": "RID",
                "entrant_id": 1,
                "origin": "variant",
                "players": players,
                "export_csv_row": sim.export_csv_row_preview(players, dk_pos),
            }
        ]
    )
    path = tmp_path / "field.parquet"
    df.to_parquet(path)
    return path


def _contest_path() -> Path:
    return Path(__file__).parent / "fixtures" / "contest_structure.csv"


def test_metrics_run_id_determinism(tmp_path: Path, monkeypatch):
    monkeypatch.setenv("GPP_SIM_IMPL", "tests.fixtures.stub_simulator:run_sim")
    field_path = _build_simple_field(tmp_path)
    out_root = tmp_path / "out"
    res = sim.run_adapter(
        slate_id="20251101_NBA",
        config_path=None,
        config_kv=None,
        seed=7,
        out_root=out_root,
        tag=None,
        field_path=field_path,
        from_field_run=None,
        variants_path=None,
        contest_path=_contest_path(),
        from_contest_dir=None,
    )
    sim_run_id = str(res["run_id"]) if "run_id" in res else ""

    m1 = metrics.run_adapter(from_sim_run=sim_run_id, out_root=out_root, seed=99)
    m2 = metrics.run_adapter(from_sim_run=sim_run_id, out_root=out_root, seed=99)

    assert m1["run_id"].split("_")[-1] == m2["run_id"].split("_")[-1]
</file>

<file path="tests/test_metrics_failfast.py">
from __future__ import annotations

from pathlib import Path

import pytest

from processes.metrics import adapter as metrics


def test_metrics_failfast_missing_sim_results(tmp_path: Path):
    # Simulate a sim run directory without artifacts
    out_root = tmp_path / "out"
    missing_run_id = "20990101_000000_deadbeef"
    run_dir = out_root / "runs" / "sim" / missing_run_id
    (run_dir).mkdir(parents=True, exist_ok=True)
    # No sim_results written
    with pytest.raises(FileNotFoundError):
        metrics.run_adapter(from_sim_run=missing_run_id, out_root=out_root)
</file>

<file path="tests/test_metrics_smoke.py">
from __future__ import annotations

from pathlib import Path

import pandas as pd

from processes.gpp_sim import adapter as sim
from processes.metrics import adapter as metrics


def _build_simple_field(tmp_path: Path) -> Path:
    players = [f"p{i}" for i in range(8)]
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    df = pd.DataFrame(
        [
            {
                "run_id": "RID",
                "entrant_id": 1,
                "origin": "variant",
                "players": players,
                "export_csv_row": sim.export_csv_row_preview(players, dk_pos),
            },
            {
                "run_id": "RID",
                "entrant_id": 2,
                "origin": "variant",
                "players": players,  # deliberate duplicate to exercise dup_risk
                "export_csv_row": sim.export_csv_row_preview(players, dk_pos),
            },
        ]
    )
    path = tmp_path / "field.parquet"
    df.to_parquet(path)
    return path


def _contest_path() -> Path:
    return Path(__file__).parent / "fixtures" / "contest_structure.csv"


def test_metrics_from_sim_smoke(tmp_path: Path, monkeypatch):
    # Build a tiny sim run using stub simulator
    monkeypatch.setenv("GPP_SIM_IMPL", "tests.fixtures.stub_simulator:run_sim")
    field_path = _build_simple_field(tmp_path)
    out_root = tmp_path / "out"
    res = sim.run_adapter(
        slate_id="20251101_NBA",
        config_path=None,
        config_kv=None,
        seed=7,
        out_root=out_root,
        tag=None,
        field_path=field_path,
        from_field_run=None,
        variants_path=None,
        contest_path=_contest_path(),
        from_contest_dir=None,
    )

    sim_run_id = str(res["run_id"]) if "run_id" in res else ""
    assert sim_run_id

    # Run metrics adapter from the sim run
    mres = metrics.run_adapter(from_sim_run=sim_run_id, out_root=out_root, seed=123)
    mpath = (
        Path(mres["metrics_path"])
        if isinstance(mres["metrics_path"], str)
        else mres["metrics_path"]
    )
    assert mpath.exists()

    df = pd.read_parquet(mpath)
    assert len(df) == 1
    aggs = df.iloc[0]["aggregates"]
    # Required keys present
    for k in ("roi_mean", "duplication_risk", "entropy"):
        assert k in aggs

    # Manifest and registry
    manifest = (
        Path(mres["manifest_path"])
        if isinstance(mres["manifest_path"], str)
        else mres["manifest_path"]
    )
    registry = (
        Path(mres["registry_path"])
        if isinstance(mres["registry_path"], str)
        else mres["registry_path"]
    )
    assert manifest.exists() and registry.exists()
</file>

<file path="tests/test_optimizer_adapter_smoke.py">
from __future__ import annotations

from pathlib import Path
from typing import Any

import pandas as pd
import pytest

from processes.optimizer import adapter as opt


def _stub_run_optimizer(
    df: pd.DataFrame, constraints: dict[str, Any], seed: int, site: str, engine: str
):
    # Produce 2 trivial lineups using the first 8 players twice, swapping UTIL
    players = list(df["player_id"].head(8))
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    l1 = {
        "players": players,
        "dk_positions_filled": dk_pos,
        "total_salary": int(df["salary"].head(8).sum()),
        "proj_fp": float(df["proj_fp"].head(8).sum()),
    }
    l2_players = players[-1:] + players[:-1]
    l2 = {
        "players": l2_players,
        "dk_positions_filled": dk_pos,
        "total_salary": int(df["salary"].head(8).sum()),
        "proj_fp": float(df["proj_fp"].head(8).sum()),
    }
    return [l1, l2], {"note": "stub"}


@pytest.mark.smoke
def test_smoke_adapter_end_to_end(tmp_path: Path, monkeypatch):
    # Arrange minimal projections
    slate_id = "20251101_NBA"
    proj_dir = tmp_path / "projections" / "normalized"
    proj_dir.mkdir(parents=True, exist_ok=True)
    proj_path = proj_dir / f"{slate_id}.parquet"
    df = pd.DataFrame(
        {
            "slate_id": [slate_id] * 8,
            "dk_player_id": [f"p{i}" for i in range(8)],
            "pos": ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"],
            "salary": [5000, 5500, 6000, 5800, 6200, 5200, 5100, 5000],
            "proj_fp": [30.0, 32.0, 28.0, 27.0, 35.0, 25.0, 24.5, 22.0],
        }
    )
    df.to_parquet(proj_path)

    # Monkeypatch optimizer loader
    monkeypatch.setattr(opt, "_load_optimizer", lambda: _stub_run_optimizer)

    out_root = tmp_path / "out"
    out_root.mkdir(parents=True, exist_ok=True)

    # Act
    result = opt.run_adapter(
        slate_id=slate_id,
        site="DK",
        config_path=None,
        config_kv=["num_lineups=2"],
        engine="cbc",
        seed=42,
        out_root=out_root,
        tag="PRP-2",
        in_root=tmp_path,
        input_path=None,
    )

    # Assert artifacts
    run_id = result["run_id"]
    run_dir = out_root / "runs" / "optimizer" / run_id
    assert (run_dir / "artifacts" / "lineups.parquet").exists()
    assert (run_dir / "artifacts" / "metrics.parquet").exists()
    assert (run_dir / "manifest.json").exists()
    # Registry appended
    registry = out_root / "registry" / "runs.parquet"
    assert registry.exists()
    reg_df = pd.read_parquet(registry)
    assert (reg_df["run_id"] == run_id).any()
</file>

<file path="tests/test_optimizer_export_dk_csv.py">
from __future__ import annotations

from processes.optimizer.adapter import export_csv_row


def test_export_csv_row_header_order():
    players = [f"p{i}" for i in range(8)]
    dk_positions_filled = [
        {"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
    ]

    row = export_csv_row(players, dk_positions_filled)
    # Expect tokens in header order
    parts = row.split(",")
    assert len(parts) == 8
    assert parts[0].startswith("PG ") and parts[0].endswith("p0")
    assert parts[1].startswith("SG ") and parts[1].endswith("p1")
    assert parts[2].startswith("SF ") and parts[2].endswith("p2")
    assert parts[3].startswith("PF ") and parts[3].endswith("p3")
    assert parts[4].startswith("C ") and parts[4].endswith("p4")
    assert parts[5].startswith("G ") and parts[5].endswith("p5")
    assert parts[6].startswith("F ") and parts[6].endswith("p6")
    assert parts[7].startswith("UTIL ") and parts[7].endswith("p7")
</file>

<file path="tests/test_optimizer_failfast_no_write.py">
from __future__ import annotations

from pathlib import Path
from typing import Any

import pandas as pd
import pytest

from processes.optimizer import adapter as opt


def _stub_bad_lineup(
    df: pd.DataFrame, constraints: dict[str, Any], seed: int, site: str, engine: str
):
    # Return a single lineup with 7 players (invalid)
    players = list(df["player_id"].head(7))
    dk_pos = [
        {"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F"]  # missing UTIL
    ]
    return [
        {
            "players": players,
            "dk_positions_filled": dk_pos,
            "total_salary": int(df["salary"].head(7).sum()),
            "proj_fp": float(df["proj_fp"].head(7).sum()),
        }
    ]


def test_failfast_no_write(tmp_path: Path, monkeypatch):
    slate_id = "20251101_NBA"
    proj_path = tmp_path / "projections" / "normalized" / f"{slate_id}.parquet"
    proj_path.parent.mkdir(parents=True, exist_ok=True)

    df = pd.DataFrame(
        {
            "slate_id": [slate_id] * 8,
            "dk_player_id": [f"p{i}" for i in range(8)],
            "pos": ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"],
            "salary": [5000] * 8,
            "proj_fp": [20.0] * 8,
        }
    )
    df.to_parquet(proj_path)

    monkeypatch.setattr(opt, "_load_optimizer", lambda: _stub_bad_lineup)

    out_root = tmp_path / "out"
    out_root.mkdir(parents=True, exist_ok=True)

    with pytest.raises(ValueError):
        opt.run_adapter(
            slate_id=slate_id,
            site="DK",
            config_path=None,
            config_kv=None,
            engine="cbc",
            seed=1,
            out_root=out_root,
            tag=None,
            in_root=tmp_path,
            input_path=None,
        )

    # Ensure no files were written
    registry = out_root / "registry" / "runs.parquet"
    assert not registry.exists()
    # There may be a runs dir created, but no artifacts should exist
    runs_root = out_root / "runs" / "optimizer"
    if runs_root.exists():
        for run_dir in runs_root.iterdir():
            assert not (run_dir / "manifest.json").exists()
            assert not (run_dir / "artifacts" / "lineups.parquet").exists()
            assert not (run_dir / "artifacts" / "metrics.parquet").exists()
</file>

<file path="tests/test_optimizer_manifest_registry.py">
from __future__ import annotations

import json
from pathlib import Path
from typing import Any

import pandas as pd

from processes.optimizer import adapter as opt


def _stub_run(df: pd.DataFrame, constraints: dict[str, Any], seed: int, site: str, engine: str):
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    lineup = {
        "players": list(df["player_id"].head(8)),
        "dk_positions_filled": dk_pos,
        "total_salary": int(df["salary"].head(8).sum()),
        "proj_fp": float(df["proj_fp"].head(8).sum()),
    }
    return [lineup]


def test_manifest_and_registry_written(monkeypatch, tmp_path: Path):
    slate_id = "20251101_NBA"
    proj_path = tmp_path / "projections" / "normalized" / f"{slate_id}.parquet"
    proj_path.parent.mkdir(parents=True, exist_ok=True)
    df = pd.DataFrame(
        {
            "slate_id": [slate_id] * 8,
            "dk_player_id": [f"p{i}" for i in range(8)],
            "pos": ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"],
            "salary": [5000] * 8,
            "proj_fp": [20.0] * 8,
        }
    )
    df.to_parquet(proj_path)

    monkeypatch.setattr(opt, "_load_optimizer", lambda: _stub_run)

    out_root = tmp_path / "out"
    result = opt.run_adapter(
        slate_id=slate_id,
        site="DK",
        config_path=None,
        config_kv=None,
        engine="cbc",
        seed=1,
        out_root=out_root,
        tag="tag1",
        in_root=tmp_path,
        input_path=None,
    )

    # Load and inspect manifest
    manifest_path = Path(result["manifest_path"])
    assert manifest_path.exists()
    manifest = json.loads(manifest_path.read_text(encoding="utf-8"))
    assert manifest["run_type"] == "optimizer"
    assert manifest["schema_version"]
    assert manifest["created_ts"].endswith("Z")
    assert any(o["kind"] == "optimizer_lineups" for o in manifest.get("outputs", []))

    # Registry row
    reg_df = pd.read_parquet(out_root / "registry" / "runs.parquet")
    assert (reg_df["run_id"] == result["run_id"]).any()
</file>

<file path="tests/test_optimizer_ownership_penalty_flag.py">
from __future__ import annotations

from pathlib import Path
from typing import Any

import pandas as pd

from processes.optimizer import adapter as opt

_CAPTURED: dict[str, Any] = {}


def _stub_capture(df: pd.DataFrame, constraints: dict[str, Any], seed: int, site: str, engine: str):
    # Capture constraints for assertion; return one trivial lineup
    _CAPTURED.clear()
    _CAPTURED.update(constraints)
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    lineup = {
        "players": list(df["player_id"].head(8)),
        "dk_positions_filled": dk_pos,
        "total_salary": int(df["salary"].head(8).sum()),
        "proj_fp": float(df["proj_fp"].head(8).sum()),
    }
    return [lineup]


def test_ownership_penalty_passthrough(monkeypatch, tmp_path: Path):
    # Minimal projections
    slate_id = "20251101_NBA"
    proj_path = tmp_path / "projections" / "normalized" / f"{slate_id}.parquet"
    proj_path.parent.mkdir(parents=True, exist_ok=True)
    df = pd.DataFrame(
        {
            "slate_id": [slate_id] * 8,
            "dk_player_id": [f"p{i}" for i in range(8)],
            "pos": ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"],
            "salary": [5000] * 8,
            "proj_fp": [20.0] * 8,
        }
    )
    df.to_parquet(proj_path)

    monkeypatch.setattr(opt, "_load_optimizer", lambda: _stub_capture)

    config = {
        "num_lineups": 1,
        "ownership_penalty": {"enabled": True, "mode": "sigmoid", "lambda": 1.2},
    }
    config_path = tmp_path / "cfg.json"
    config_path.write_text(json_dumps(config), encoding="utf-8")

    opt.run_adapter(
        slate_id=slate_id,
        site="DK",
        config_path=config_path,
        config_kv=None,
        engine="cbc",
        seed=1,
        out_root=tmp_path / "out",
        tag=None,
        in_root=tmp_path,
        input_path=None,
    )

    assert "ownership_penalty" in _CAPTURED
    assert _CAPTURED["ownership_penalty"]["enabled"] is True


def json_dumps(obj: dict[str, Any]) -> str:
    import json

    return json.dumps(obj)
</file>

<file path="tests/test_optimizer_run_id_determinism.py">
from __future__ import annotations

from datetime import UTC, datetime
from pathlib import Path
from typing import Any

import pandas as pd

from processes.optimizer import adapter as opt


def _stub_ok(df: pd.DataFrame, constraints: dict[str, Any], seed: int, site: str, engine: str):
    slots = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
    lineup = {
        "players": list(df["player_id"].head(8)),
        "dk_positions_filled": [{"slot": s, "position": s} for s in slots],
        "total_salary": int(df["salary"].head(8).sum()),
        "proj_fp": float(df["proj_fp"].head(8).sum()),
    }
    return [lineup]


def test_run_id_determinism(tmp_path: Path, monkeypatch):
    # Freeze time
    class FakeDT:
        @staticmethod
        def now(tz=None):
            return datetime(2025, 11, 1, 18, 0, 0, tzinfo=UTC)

    monkeypatch.setattr(opt, "datetime", FakeDT)

    slate_id = "20251101_NBA"
    proj_path = tmp_path / "projections" / "normalized" / f"{slate_id}.parquet"
    proj_path.parent.mkdir(parents=True, exist_ok=True)
    df = pd.DataFrame(
        {
            "slate_id": [slate_id] * 8,
            "dk_player_id": [f"p{i}" for i in range(8)],
            "pos": ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"],
            "salary": [5000] * 8,
            "proj_fp": [20.0] * 8,
        }
    )
    df.to_parquet(proj_path)

    monkeypatch.setattr(opt, "_load_optimizer", lambda: _stub_ok)

    out_root = tmp_path / "out"
    r1 = opt.run_adapter(
        slate_id=slate_id,
        site="DK",
        config_path=None,
        config_kv=None,
        engine="cbc",
        seed=1,
        out_root=out_root,
        tag=None,
        in_root=tmp_path,
        input_path=None,
    )
    r2 = opt.run_adapter(
        slate_id=slate_id,
        site="DK",
        config_path=None,
        config_kv=None,
        engine="cbc",
        seed=1,
        out_root=out_root,
        tag=None,
        in_root=tmp_path,
        input_path=None,
    )
    assert (
        r1["run_id"] == r2["run_id"]
    ), "Run IDs should be deterministic for same inputs + frozen time"

    r3 = opt.run_adapter(
        slate_id=slate_id,
        site="DK",
        config_path=None,
        config_kv=None,
        engine="cbc",
        seed=2,  # different seed
        out_root=out_root,
        tag=None,
        in_root=tmp_path,
        input_path=None,
    )
    assert r1["run_id"] != r3["run_id"], "Run ID should change when seed changes"
</file>

<file path="tests/test_optimizer_verbose_and_schemas_root.py">
from __future__ import annotations

from pathlib import Path
from typing import Any

import pandas as pd

from processes.optimizer import adapter as opt


def _stub_ok(df: pd.DataFrame, constraints: dict[str, Any], seed: int, site: str, engine: str):
    slots = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
    lineup = {
        "players": list(df["player_id"].head(8)),
        "dk_positions_filled": [{"slot": s, "position": s} for s in slots],
        "total_salary": int(df["salary"].head(8).sum()),
        "proj_fp": float(df["proj_fp"].head(8).sum()),
    }
    return [lineup]


def test_verbose_prints_projections(capsys, tmp_path: Path, monkeypatch):
    slate_id = "20251101_NBA"
    proj_path = tmp_path / "projections" / "normalized" / f"{slate_id}.parquet"
    proj_path.parent.mkdir(parents=True, exist_ok=True)
    df = pd.DataFrame(
        {
            "slate_id": [slate_id] * 8,
            "dk_player_id": [f"p{i}" for i in range(8)],
            "pos": ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"],
            "salary": [5000] * 8,
            "proj_fp": [20.0] * 8,
        }
    )
    df.to_parquet(proj_path)

    monkeypatch.setattr(opt, "_load_optimizer", lambda: _stub_ok)

    # Invoke CLI main with --verbose
    argv = [
        "--slate-id",
        slate_id,
        "--site",
        "DK",
        "--engine",
        "cbc",
        "--seed",
        "1",
        "--out-root",
        str(tmp_path / "out"),
        "--in-root",
        str(tmp_path),
        "--verbose",
    ]
    rc = opt.main(argv)
    assert rc == 0
    captured = capsys.readouterr()
    assert "[optimizer] projections:" in captured.err
    assert str(proj_path) in captured.err


def test_schemas_root_robust_cwd(tmp_path: Path, monkeypatch):
    slate_id = "20251101_NBA"
    proj_path = tmp_path / "projections" / "normalized" / f"{slate_id}.parquet"
    proj_path.parent.mkdir(parents=True, exist_ok=True)
    df = pd.DataFrame(
        {
            "slate_id": [slate_id] * 8,
            "dk_player_id": [f"p{i}" for i in range(8)],
            "pos": ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"],
            "salary": [5000] * 8,
            "proj_fp": [20.0] * 8,
        }
    )
    df.to_parquet(proj_path)

    monkeypatch.setattr(opt, "_load_optimizer", lambda: _stub_ok)

    # Change CWD to a subdir (simulate running from processes/)
    subdir = Path.cwd() / "processes"
    # We don't actually chdir on the real repo; just ensure adapter resolves its own schemas root
    # by passing absolute paths for in/out roots and calling main.
    argv = [
        "--slate-id",
        slate_id,
        "--site",
        "DK",
        "--engine",
        "cbc",
        "--seed",
        "1",
        "--out-root",
        str(tmp_path / "out"),
        "--in-root",
        str(tmp_path),
    ]
    rc = opt.main(argv)
    assert rc == 0
</file>

<file path="tests/test_orchestrator_dry_run.py">
from __future__ import annotations

from pathlib import Path

from processes.orchestrator import adapter as orch


def test_orchestrator_dry_run(tmp_path):
    out_root = tmp_path / "out"
    out_root.mkdir(parents=True, exist_ok=True)
    cfg_path = tmp_path / "orch.json"
    cfg_path.write_text("{}", encoding="utf-8")

    res = orch.run_bundle(
        slate_id="20250101_NBA",
        config_path=cfg_path,
        config_kv=["ingest.source=manual"],
        out_root=out_root,
        schemas_root=Path("pipeline/schemas"),
        validate=True,
        dry_run=True,
        verbose=True,
    )
    assert res["bundle_id"] == "DRY_RUN"
    assert any("ingest:" in step for step in res["plan"])  # type: ignore[index]
</file>

<file path="tests/test_sim_adapter_smoke.py">
from __future__ import annotations

from pathlib import Path

import pandas as pd

from processes.gpp_sim import adapter as sim


def test_smoke_adapter_end_to_end(tmp_path: Path, monkeypatch):
    # Use stub simulator via env var
    monkeypatch.setenv("GPP_SIM_IMPL", "tests.fixtures.stub_simulator:run_sim")

    # Field parquet (3 entrants)
    players = [f"p{i}" for i in range(8)]
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    field_rows = []
    for i in range(1, 4):
        field_rows.append(
            {
                "run_id": "RID",
                "entrant_id": i,
                "origin": "variant",
                "variant_id": f"V{i}",
                "players": players,
                "export_csv_row": sim.export_csv_row_preview(players, dk_pos),
                "weight": 1.0,
                "total_salary": 49800,
            }
        )
    field_df = pd.DataFrame(field_rows)
    field_path = tmp_path / "field.parquet"
    field_df.to_parquet(field_path)

    contest_path = Path(__file__).parent / "fixtures" / "contest_structure.csv"

    out_root = tmp_path / "out"
    out_root.mkdir(parents=True, exist_ok=True)

    result = sim.run_adapter(
        slate_id="20251101_NBA",
        config_path=None,
        config_kv=["num_trials=1"],
        seed=42,
        out_root=out_root,
        tag="PRP-5",
        field_path=field_path,
        from_field_run=None,
        variants_path=None,
        contest_path=contest_path,
        from_contest_dir=None,
    )

    run_id = result["run_id"]
    run_dir = out_root / "runs" / "sim" / run_id
    assert (run_dir / "artifacts" / "sim_results.parquet").exists()
    assert (run_dir / "artifacts" / "metrics.parquet").exists()
    assert (run_dir / "manifest.json").exists()

    # Registry appended
    registry = out_root / "registry" / "runs.parquet"
    assert registry.exists()
    reg_df = pd.read_parquet(registry)
    assert (reg_df["run_type"] == "sim").any()
</file>

<file path="tests/test_sim_manifest_registry.py">
from __future__ import annotations

import json
from pathlib import Path

import pandas as pd

from processes.gpp_sim import adapter as sim


def test_manifest_and_registry(tmp_path: Path, monkeypatch):
    monkeypatch.setenv("GPP_SIM_IMPL", "tests.fixtures.stub_simulator:run_sim")

    players = [f"p{i}" for i in range(8)]
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    field = pd.DataFrame(
        [
            {
                "run_id": "RID",
                "entrant_id": 1,
                "origin": "variant",
                "players": players,
                "export_csv_row": sim.export_csv_row_preview(players, dk_pos),
            }
        ]
    )
    field_path = tmp_path / "field.parquet"
    field.to_parquet(field_path)
    contest_path = Path(__file__).parent / "fixtures" / "contest_structure.csv"

    out_root = tmp_path / "out"
    result = sim.run_adapter(
        slate_id="20251101_NBA",
        config_path=None,
        config_kv=None,
        seed=1,
        out_root=out_root,
        tag="PRP-5",
        field_path=field_path,
        from_field_run=None,
        variants_path=None,
        contest_path=contest_path,
        from_contest_dir=None,
    )
    run_id = result["run_id"]
    manifest_path = out_root / "runs" / "sim" / run_id / "manifest.json"
    manifest = json.loads(manifest_path.read_text(encoding="utf-8"))
    kinds = [o["kind"] for o in manifest.get("outputs", [])]
    assert "sim_results" in kinds and "sim_metrics" in kinds
    # Inputs include expected roles
    roles = set(i.get("role") for i in manifest.get("inputs", []))
    assert {"field", "contest_structure"}.issubset(roles)
    assert "schema_version" in manifest

    registry = out_root / "registry" / "runs.parquet"
    df = pd.read_parquet(registry)
    assert (df["run_type"] == "sim").any()
    assert (df["run_id"] == run_id).any()
</file>

<file path="tests/test_sim_metrics_shapes.py">
from __future__ import annotations

from pathlib import Path

import pandas as pd

from processes.gpp_sim import adapter as sim


def test_metrics_schema_and_keys(tmp_path: Path, monkeypatch):
    monkeypatch.setenv("GPP_SIM_IMPL", "tests.fixtures.stub_simulator:run_sim")

    players = [f"p{i}" for i in range(8)]
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    field = pd.DataFrame(
        [
            {
                "run_id": "RID",
                "entrant_id": 1,
                "origin": "variant",
                "players": players,
                "export_csv_row": sim.export_csv_row_preview(players, dk_pos),
            }
        ]
    )
    field_path = tmp_path / "field.parquet"
    field.to_parquet(field_path)
    contest_path = Path(__file__).parent / "fixtures" / "contest_structure.csv"

    out_root = tmp_path / "out"
    result = sim.run_adapter(
        slate_id="20251101_NBA",
        config_path=None,
        config_kv=None,
        seed=1,
        out_root=out_root,
        tag=None,
        field_path=field_path,
        from_field_run=None,
        variants_path=None,
        contest_path=contest_path,
        from_contest_dir=None,
    )
    metrics_path = (
        Path(result["metrics_path"])
        if isinstance(result["metrics_path"], str)
        else result["metrics_path"]
    )
    df = pd.read_parquet(metrics_path)
    agg = df.iloc[0]["aggregates"]
    assert set(["ev_mean", "roi_mean"]).issubset(set(agg.keys()))
</file>

<file path="tests/test_sim_run_id_determinism.py">
from __future__ import annotations

from datetime import UTC, datetime
from pathlib import Path

import pandas as pd

from processes.gpp_sim import adapter as sim


def test_run_id_determinism(tmp_path: Path, monkeypatch):
    # Fix clock
    class FakeDT:
        @staticmethod
        def now(tz=None):
            return datetime(2025, 11, 1, 18, 0, 0, tzinfo=UTC)

    monkeypatch.setattr(sim, "datetime", FakeDT)
    monkeypatch.setenv("GPP_SIM_IMPL", "tests.fixtures.stub_simulator:run_sim")

    players = [f"p{i}" for i in range(8)]
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    field = pd.DataFrame(
        [
            {
                "run_id": "RID",
                "entrant_id": 1,
                "origin": "variant",
                "players": players,
                "export_csv_row": sim.export_csv_row_preview(players, dk_pos),
            }
        ]
    )
    field_path = tmp_path / "field.parquet"
    field.to_parquet(field_path)
    contest_path = Path(__file__).parent / "fixtures" / "contest_structure.csv"

    out_root = tmp_path / "out"
    r1 = sim.run_adapter(
        slate_id="20251101_NBA",
        config_path=None,
        config_kv=None,
        seed=1,
        out_root=out_root,
        tag=None,
        field_path=field_path,
        from_field_run=None,
        variants_path=None,
        contest_path=contest_path,
        from_contest_dir=None,
    )
    r2 = sim.run_adapter(
        slate_id="20251101_NBA",
        config_path=None,
        config_kv=None,
        seed=1,
        out_root=out_root,
        tag=None,
        field_path=field_path,
        from_field_run=None,
        variants_path=None,
        contest_path=contest_path,
        from_contest_dir=None,
    )
    assert r1["run_id"] == r2["run_id"]

    r3 = sim.run_adapter(
        slate_id="20251101_NBA",
        config_path=None,
        config_kv=None,
        seed=2,
        out_root=out_root,
        tag=None,
        field_path=field_path,
        from_field_run=None,
        variants_path=None,
        contest_path=contest_path,
        from_contest_dir=None,
    )
    assert r1["run_id"] != r3["run_id"]
</file>

<file path="tests/test_sim_verbose_and_schemas_root.py">
from __future__ import annotations

from pathlib import Path

import pandas as pd

from processes.gpp_sim import adapter as sim


def test_verbose_prints_inputs_and_runid(capsys, tmp_path: Path, monkeypatch):
    monkeypatch.setenv("GPP_SIM_IMPL", "tests.fixtures.stub_simulator:run_sim")

    # Field parquet
    players = [f"p{i}" for i in range(8)]
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    field_df = pd.DataFrame(
        [
            {
                "run_id": "RID",
                "entrant_id": 1,
                "origin": "variant",
                "players": players,
                "export_csv_row": sim.export_csv_row_preview(players, dk_pos),
            }
        ]
    )
    field_path = tmp_path / "field.parquet"
    field_df.to_parquet(field_path)

    contest_path = Path(__file__).parent / "fixtures" / "contest_structure.csv"

    argv = [
        "--slate-id",
        "20251101_NBA",
        "--seed",
        "1",
        "--out-root",
        str(tmp_path / "out"),
        "--field",
        str(field_path),
        "--contest",
        str(contest_path),
        "--verbose",
    ]
    rc = sim.main(argv)
    assert rc == 0
    captured = capsys.readouterr()
    assert "[sim] field:" in captured.err
    assert str(field_path) in captured.err
    assert "[sim] contest:" in captured.err
    assert str(contest_path) in captured.err
    assert "[sim] run_id=" in captured.err
    assert "[sim] schemas_root:" in captured.err


def test_schemas_root_robust_cwd(tmp_path: Path, monkeypatch):
    monkeypatch.setenv("GPP_SIM_IMPL", "tests.fixtures.stub_simulator:run_sim")

    # Field parquet
    players = [f"p{i}" for i in range(8)]
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    field_df = pd.DataFrame(
        [
            {
                "run_id": "RID",
                "entrant_id": 1,
                "origin": "variant",
                "players": players,
                "export_csv_row": sim.export_csv_row_preview(players, dk_pos),
            }
        ]
    )
    field_path = tmp_path / "field.parquet"
    field_df.to_parquet(field_path)
    contest_path = Path(__file__).parent / "fixtures" / "contest_structure.csv"

    argv = [
        "--slate-id",
        "20251101_NBA",
        "--seed",
        "1",
        "--out-root",
        str(tmp_path / "out"),
        "--field",
        str(field_path),
        "--contest",
        str(contest_path),
    ]
    rc = sim.main(argv)
    assert rc == 0
</file>

<file path="tests/test_variants_adapter_smoke.py">
from __future__ import annotations

from pathlib import Path
from typing import Any

import pandas as pd

from processes.variants import adapter as var


def _stub_run_variants(parent_df: pd.DataFrame, knobs: dict[str, Any], seed: int):
    # Build two simple variants from the first base lineup
    base = parent_df.iloc[0]
    players = list(base["players"])  # 8 players
    # swap last two players for V2
    v1 = {
        "variant_id": "V1",
        "parent_lineup_id": str(base["lineup_id"]),
        "players": players,
        "variant_params": {"randomness": knobs.get("randomness", 0)},
        "total_salary": int(base.get("total_salary", 0)),
        "proj_fp": float(base.get("proj_fp", 0.0)),
    }
    v2_players = players[:-2] + [players[-1], players[-2]]
    v2 = {
        "variant_id": "V2",
        "parent_lineup_id": str(base["lineup_id"]),
        "players": v2_players,
        "variant_params": {"swap": {"out": players[-2], "in": players[-1]}},
        "total_salary": int(base.get("total_salary", 0)),
        "proj_fp": float(base.get("proj_fp", 0.0)),
    }
    return [v1, v2]


def test_smoke_adapter_end_to_end(tmp_path: Path, monkeypatch):
    slate_id = "20251101_NBA"
    # Prepare optimizer lineups parquet
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    players = [f"p{i}" for i in range(8)]
    base = {
        "run_id": "20251101_180000_deadbee",
        "lineup_id": "L1",
        "players": players,
        "dk_positions_filled": dk_pos,
        "total_salary": 49800,
        "proj_fp": 275.0,
        "export_csv_row": var.export_csv_row(players, dk_pos),
    }
    opt_lineups = pd.DataFrame([base])
    opt_dir = tmp_path / "runs" / "optimizer" / "20251101_180000_deadbee" / "artifacts"
    opt_dir.mkdir(parents=True, exist_ok=True)
    opt_path = opt_dir / "lineups.parquet"
    opt_lineups.to_parquet(opt_path)

    # Monkeypatch variant loader
    monkeypatch.setattr(var, "_load_variant", lambda: _stub_run_variants)

    out_root = tmp_path
    result = var.run_adapter(
        slate_id=slate_id,
        config_path=None,
        config_kv=["randomness=0.1"],
        seed=42,
        out_root=out_root,
        tag="PRP-3",
        input_path=opt_path,
    )

    run_id = result["run_id"]
    run_dir = out_root / "runs" / "variants" / run_id
    assert (run_dir / "artifacts" / "variant_catalog.parquet").exists()
    assert (run_dir / "artifacts" / "metrics.parquet").exists()
    assert (run_dir / "manifest.json").exists()

    # Registry appended
    registry = out_root / "registry" / "runs.parquet"
    assert registry.exists()
    reg_df = pd.read_parquet(registry)
    assert (reg_df["run_type"] == "variants").any()
</file>

<file path="tests/test_variants_bad_yaml_config.py">
from __future__ import annotations

# ruff: noqa: I001

from pathlib import Path

import pytest

from processes.variants import adapter as var


def test_bad_yaml_config_message(tmp_path: Path):
    slate_id = "20251101_NBA"
    # Prepare minimal valid optimizer lineups file
    import pandas as pd

    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    players = [f"p{i}" for i in range(8)]
    base = {
        "run_id": "rid",
        "lineup_id": "L1",
        "players": players,
        "dk_positions_filled": dk_pos,
        "total_salary": 48000,
        "proj_fp": 200.0,
        "export_csv_row": var.export_csv_row(players, dk_pos),
    }
    opt_path = tmp_path / "opt.parquet"
    pd.DataFrame([base]).to_parquet(opt_path)

    # Malformed YAML
    bad = tmp_path / "bad.yaml"
    bad.write_text("exposure_targets: [oops\n", encoding="utf-8")

    with pytest.raises(ValueError) as ei:
        var.run_adapter(
            slate_id=slate_id,
            config_path=bad,
            config_kv=None,
            seed=1,
            out_root=tmp_path / "out",
            tag=None,
            input_path=opt_path,
        )

    msg = str(ei.value)
    assert "bad.yaml" in msg
    assert "Failed to parse YAML" in msg
</file>

<file path="tests/test_variants_exposure_caps.py">
from __future__ import annotations

from pathlib import Path
from typing import Any

import pandas as pd

from processes.variants import adapter as var


def test_exposure_caps_honored_in_knobs(tmp_path: Path, monkeypatch):
    slate_id = "20251101_NBA"
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    players = [f"p{i}" for i in range(8)]
    base = {
        "run_id": "rid",
        "lineup_id": "L1",
        "players": players,
        "dk_positions_filled": dk_pos,
        "total_salary": 48000,
        "proj_fp": 200.0,
        "export_csv_row": var.export_csv_row(players, dk_pos),
    }
    opt_path = tmp_path / "opt.parquet"
    pd.DataFrame([base]).to_parquet(opt_path)

    captured: dict[str, Any] = {}

    def _stub_variant(parent_df: pd.DataFrame, knobs: dict[str, Any], seed: int):
        captured["knobs"] = knobs
        return [
            {
                "variant_id": "V1",
                "parent_lineup_id": "L1",
                "players": players,
                "variant_params": {},
            }
        ]

    monkeypatch.setattr(var, "_load_variant", lambda: _stub_variant)

    out_root = tmp_path / "out"
    cfg_path = tmp_path / "cfg.yaml"
    cfg_path.write_text(
        "exposure_targets:\n  player_caps:\n    p1: 0.25\n",
        encoding="utf-8",
    )

    var.run_adapter(
        slate_id=slate_id,
        config_path=cfg_path,
        config_kv=None,
        seed=1,
        out_root=out_root,
        tag=None,
        input_path=opt_path,
    )

    assert "exposure_targets" in captured["knobs"]
    assert captured["knobs"]["exposure_targets"]["player_caps"]["p1"] == 0.25
</file>

<file path="tests/test_variants_failfast_duplicate_players.py">
from __future__ import annotations

# ruff: noqa: I001

from pathlib import Path
import pandas as pd
import pytest

from processes.variants import adapter as var


def _stub_dup(parent_df: pd.DataFrame, knobs, seed: int):
    base = parent_df.iloc[0]
    players = list(base["players"])[:7] + [base["players"][0]]  # duplicate
    return [
        {
            "variant_id": "Vdup",
            "parent_lineup_id": str(base["lineup_id"]),
            "players": players,
            "variant_params": {},
        }
    ]


def test_failfast_duplicate_players(tmp_path: Path, monkeypatch):
    slate_id = "20251101_NBA"
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    players = [f"p{i}" for i in range(8)]
    base = {
        "run_id": "rid",
        "lineup_id": "L1",
        "players": players,
        "dk_positions_filled": dk_pos,
        "total_salary": 48000,
        "proj_fp": 200.0,
        "export_csv_row": var.export_csv_row(players, dk_pos),
    }
    opt_path = tmp_path / "opt.parquet"
    pd.DataFrame([base]).to_parquet(opt_path)

    monkeypatch.setattr(var, "_load_variant", lambda: _stub_dup)

    out_root = tmp_path / "out"
    out_root.mkdir(parents=True, exist_ok=True)

    with pytest.raises(ValueError):
        var.run_adapter(
            slate_id=slate_id,
            config_path=None,
            config_kv=None,
            seed=1,
            out_root=out_root,
            tag=None,
            input_path=opt_path,
        )

    registry = out_root / "registry" / "runs.parquet"
    assert not registry.exists()
    runs_root = out_root / "runs" / "variants"
    if runs_root.exists():
        for run_dir in runs_root.iterdir():
            assert not (run_dir / "manifest.json").exists()
            assert not (run_dir / "artifacts" / "variant_catalog.parquet").exists()
            assert not (run_dir / "artifacts" / "metrics.parquet").exists()
</file>

<file path="tests/test_variants_failfast_no_write.py">
from __future__ import annotations

# ruff: noqa: I001

from pathlib import Path
import pandas as pd
import pytest

from processes.variants import adapter as var


def _stub_bad_variant(parent_df: pd.DataFrame, knobs, seed: int):
    base = parent_df.iloc[0]
    players = list(base["players"])[:7]  # invalid, only 7
    return [
        {
            "variant_id": "Vbad",
            "parent_lineup_id": str(base["lineup_id"]),
            "players": players,
            "variant_params": {},
        }
    ]


def test_failfast_no_write(tmp_path: Path, monkeypatch):
    slate_id = "20251101_NBA"
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    players = [f"p{i}" for i in range(8)]
    base = {
        "run_id": "20251101_180000_deadbee",
        "lineup_id": "L1",
        "players": players,
        "dk_positions_filled": dk_pos,
        "total_salary": 49800,
        "proj_fp": 275.0,
        "export_csv_row": var.export_csv_row(players, dk_pos),
    }
    opt_path = tmp_path / "opt.parquet"
    pd.DataFrame([base]).to_parquet(opt_path)

    monkeypatch.setattr(var, "_load_variant", lambda: _stub_bad_variant)

    out_root = tmp_path / "out"
    out_root.mkdir(parents=True, exist_ok=True)

    with pytest.raises(ValueError):
        var.run_adapter(
            slate_id=slate_id,
            config_path=None,
            config_kv=None,
            seed=1,
            out_root=out_root,
            tag=None,
            input_path=opt_path,
        )

    # Ensure no files were written
    registry = out_root / "registry" / "runs.parquet"
    assert not registry.exists()
    runs_root = out_root / "runs" / "variants"
    if runs_root.exists():
        for run_dir in runs_root.iterdir():
            assert not (run_dir / "manifest.json").exists()
            assert not (run_dir / "artifacts" / "variant_catalog.parquet").exists()
            assert not (run_dir / "artifacts" / "metrics.parquet").exists()
</file>

<file path="tests/test_variants_failfast_salary_cap.py">
from __future__ import annotations

# ruff: noqa: I001

from pathlib import Path
import pandas as pd
import pytest

from processes.variants import adapter as var


def _stub_overcap(parent_df: pd.DataFrame, knobs, seed: int):
    base = parent_df.iloc[0]
    return [
        {
            "variant_id": "Vcap",
            "parent_lineup_id": str(base["lineup_id"]),
            "players": list(base["players"]),
            "variant_params": {},
            "total_salary": 50001,  # over cap
        }
    ]


def test_failfast_salary_cap(tmp_path: Path, monkeypatch):
    slate_id = "20251101_NBA"
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    players = [f"p{i}" for i in range(8)]
    base = {
        "run_id": "rid",
        "lineup_id": "L1",
        "players": players,
        "dk_positions_filled": dk_pos,
        "total_salary": 48000,
        "proj_fp": 200.0,
        "export_csv_row": var.export_csv_row(players, dk_pos),
    }
    opt_path = tmp_path / "opt.parquet"
    pd.DataFrame([base]).to_parquet(opt_path)

    monkeypatch.setattr(var, "_load_variant", lambda: _stub_overcap)

    out_root = tmp_path / "out"
    out_root.mkdir(parents=True, exist_ok=True)

    with pytest.raises(ValueError):
        var.run_adapter(
            slate_id=slate_id,
            config_path=None,
            config_kv=None,
            seed=1,
            out_root=out_root,
            tag=None,
            input_path=opt_path,
        )

    registry = out_root / "registry" / "runs.parquet"
    assert not registry.exists()
</file>

<file path="tests/test_variants_manifest_registry.py">
from __future__ import annotations

import json
from pathlib import Path
from typing import Any

import pandas as pd

from processes.variants import adapter as var


def _stub_run(parent_df, knobs: dict[str, Any], seed: int):
    base = parent_df.iloc[0]
    return [
        {
            "variant_id": "V1",
            "parent_lineup_id": str(base["lineup_id"]),
            "players": list(base["players"]),
            "variant_params": {},
        }
    ]


def test_manifest_and_registry_written(monkeypatch, tmp_path: Path):
    slate_id = "20251101_NBA"
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    players = [f"p{i}" for i in range(8)]
    base = {
        "run_id": "rid",
        "lineup_id": "L1",
        "players": players,
        "dk_positions_filled": dk_pos,
        "total_salary": 48000,
        "proj_fp": 200.0,
        "export_csv_row": var.export_csv_row(players, dk_pos),
    }
    opt_path = tmp_path / "opt.parquet"
    pd.DataFrame([base]).to_parquet(opt_path)

    monkeypatch.setattr(var, "_load_variant", lambda: _stub_run)

    out_root = tmp_path / "out"
    out_root.mkdir(parents=True, exist_ok=True)
    result = var.run_adapter(
        slate_id=slate_id,
        config_path=None,
        config_kv=None,
        seed=1,
        out_root=out_root,
        tag=None,
        input_path=opt_path,
    )

    manifest_path = Path(result["manifest_path"])
    assert manifest_path.exists()
    manifest = json.loads(manifest_path.read_text(encoding="utf-8"))
    assert manifest["run_type"] == "variants"
    assert any(o["kind"] == "variant_catalog" for o in manifest.get("outputs", []))
    # Input role should reflect optimizer lineups
    assert manifest["inputs"][0]["role"] == "optimizer_lineups"

    reg_df = pd.read_parquet(out_root / "registry" / "runs.parquet")
    row = reg_df.iloc[-1]
    assert row["run_type"] == "variants"
    assert str(result["catalog_path"]) in row["primary_outputs"][0]
</file>

<file path="tests/test_variants_registry_missing_columns.py">
from __future__ import annotations

from pathlib import Path

import pandas as pd
import pytest

from processes.variants import adapter as var


def _stub_ok(parent_df: pd.DataFrame, knobs, seed: int):
    base = parent_df.iloc[0]
    return [
        {
            "variant_id": "V1",
            "parent_lineup_id": str(base["lineup_id"]),
            "players": list(base["players"]),
            "variant_params": {},
        }
    ]


def test_registry_missing_columns_error(tmp_path: Path, monkeypatch):
    slate_id = "20251101_NBA"

    # Prepare optimizer lineups file (to be selected via registry once fixed)
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    players = [f"p{i}" for i in range(8)]
    base = {
        "run_id": "rid",
        "lineup_id": "L1",
        "players": players,
        "dk_positions_filled": dk_pos,
        "total_salary": 48000,
        "proj_fp": 200.0,
        "export_csv_row": var.export_csv_row(players, dk_pos),
    }
    opt_dir = tmp_path / "runs" / "optimizer" / "rid" / "artifacts"
    opt_dir.mkdir(parents=True, exist_ok=True)
    pd.DataFrame([base]).to_parquet(opt_dir / "lineups.parquet")

    # Create malformed registry missing created_ts
    reg = pd.DataFrame(
        [
            {
                "run_id": "rid",
                "run_type": "optimizer",
                "slate_id": slate_id,
                # missing created_ts
                "primary_outputs": [str(opt_dir / "lineups.parquet")],
            }
        ]
    )
    reg_path = tmp_path / "out" / "registry" / "runs.parquet"
    reg_path.parent.mkdir(parents=True, exist_ok=True)
    reg.to_parquet(reg_path)

    monkeypatch.setattr(var, "_load_variant", lambda: _stub_ok)

    with pytest.raises(ValueError):
        var.run_adapter(
            slate_id=slate_id,
            config_path=None,
            config_kv=None,
            seed=1,
            out_root=tmp_path / "out",
            tag=None,
            input_path=None,
            from_run=None,
        )
</file>

<file path="tests/test_variants_run_id_determinism.py">
from __future__ import annotations

from datetime import UTC, datetime
from pathlib import Path
from typing import Any

import pandas as pd

from processes.variants import adapter as var


def _stub_ok(parent_df: pd.DataFrame, knobs: dict[str, Any], seed: int):
    base = parent_df.iloc[0]
    return [
        {
            "variant_id": "V1",
            "parent_lineup_id": str(base["lineup_id"]),
            "players": list(base["players"]),
            "variant_params": {},
        }
    ]


def test_run_id_determinism(tmp_path: Path, monkeypatch):
    class FakeDT:
        @staticmethod
        def now(tz=None):
            return datetime(2025, 11, 1, 18, 0, 0, tzinfo=UTC)

    monkeypatch.setattr(var, "datetime", FakeDT)

    slate_id = "20251101_NBA"
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    players = [f"p{i}" for i in range(8)]
    base = {
        "run_id": "rid",
        "lineup_id": "L1",
        "players": players,
        "dk_positions_filled": dk_pos,
        "total_salary": 48000,
        "proj_fp": 200.0,
        "export_csv_row": var.export_csv_row(players, dk_pos),
    }
    opt_path = tmp_path / "opt.parquet"
    pd.DataFrame([base]).to_parquet(opt_path)

    monkeypatch.setattr(var, "_load_variant", lambda: _stub_ok)

    out_root = tmp_path / "out"
    r1 = var.run_adapter(
        slate_id=slate_id,
        config_path=None,
        config_kv=None,
        seed=1,
        out_root=out_root,
        tag=None,
        input_path=opt_path,
    )
    r2 = var.run_adapter(
        slate_id=slate_id,
        config_path=None,
        config_kv=None,
        seed=1,
        out_root=out_root,
        tag=None,
        input_path=opt_path,
    )
    assert r1["run_id"] == r2["run_id"]

    r3 = var.run_adapter(
        slate_id=slate_id,
        config_path=None,
        config_kv=None,
        seed=2,
        out_root=out_root,
        tag=None,
        input_path=opt_path,
    )
    assert r1["run_id"] != r3["run_id"]
</file>

<file path="tests/test_variants_verbose_and_schemas_root.py">
from __future__ import annotations

from pathlib import Path
from typing import Any

import pandas as pd

from processes.variants import adapter as var


def _stub_ok(parent_df: pd.DataFrame, knobs: dict[str, Any], seed: int):
    base = parent_df.iloc[0]
    return [
        {
            "variant_id": "V1",
            "parent_lineup_id": str(base["lineup_id"]),
            "players": list(base["players"]),
            "variant_params": {},
        }
    ]


def test_verbose_prints_lineups_path(capsys, tmp_path: Path, monkeypatch):
    slate_id = "20251101_NBA"
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    players = [f"p{i}" for i in range(8)]
    base = {
        "run_id": "rid",
        "lineup_id": "L1",
        "players": players,
        "dk_positions_filled": dk_pos,
        "total_salary": 48000,
        "proj_fp": 200.0,
        "export_csv_row": var.export_csv_row(players, dk_pos),
    }
    opt_path = tmp_path / "opt.parquet"
    pd.DataFrame([base]).to_parquet(opt_path)

    monkeypatch.setattr(var, "_load_variant", lambda: _stub_ok)

    argv = [
        "--slate-id",
        slate_id,
        "--seed",
        "1",
        "--out-root",
        str(tmp_path / "out"),
        "--input",
        str(opt_path),
        "--verbose",
    ]
    rc = var.main(argv)
    assert rc == 0
    err = capsys.readouterr().err
    assert "[variants] input=" in err and "variants=" in err
    assert str(opt_path) in err


def test_schemas_root_robust(tmp_path: Path, monkeypatch):
    slate_id = "20251101_NBA"
    dk_pos = [{"slot": s, "position": s} for s in ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]]
    players = [f"p{i}" for i in range(8)]
    base = {
        "run_id": "rid",
        "lineup_id": "L1",
        "players": players,
        "dk_positions_filled": dk_pos,
        "total_salary": 48000,
        "proj_fp": 200.0,
        "export_csv_row": var.export_csv_row(players, dk_pos),
    }
    opt_path = tmp_path / "opt.parquet"
    pd.DataFrame([base]).to_parquet(opt_path)

    monkeypatch.setattr(var, "_load_variant", lambda: _stub_ok)

    argv = [
        "--slate-id",
        slate_id,
        "--seed",
        "1",
        "--out-root",
        str(tmp_path / "out"),
        "--input",
        str(opt_path),
    ]
    rc = var.main(argv)
    assert rc == 0
</file>

<file path=".env.example">
## Environment variables for project-scoped MCP servers
# Copy this file to `.env` and fill in values locally.
# Do NOT commit your `.env` file.

# Runtime toggle for optimizer backend: python|sampler
DFS_SOLVER_MODE=python
# Figma API key for framelink_figma MCP server
# Create at: https://www.figma.com/developers/api#access-tokens
FIGMA_API_KEY=
</file>

<file path="AGENTS.md">
# Purpose & Scope
This document outlines the guidelines and best practices for agents working within the NBA DFS project. It aims to ensure consistency, clarity, and efficiency across all contributions.

# Core Principles
- Maintain high code quality and readability.
- Ensure reproducibility and determinism in data pipelines.
- Prioritize automation and testing.
- Foster clear communication and documentation.

# Repo Layout
- `src/`: Source code and modules.
- `data/`: Raw and processed datasets.
- `tests/`: Unit and integration tests.
- `configs/`: Configuration files and secrets.
- `docs/`: Documentation and process guidelines.

# Tech Stack & Versions
- Python 3.9+
- PostgreSQL 13
- Docker 20.x
- GitHub Actions for CI/CD

# Data Pipeline Contracts
- All data transformations must adhere to defined schemas.
- Version data contracts explicitly in the codebase.
- Migrations require clear documentation and backward compatibility.

# Slate & Keys
- Slates represent game groupings; keys uniquely identify players and games.
- Ensure keys are stable and consistent across datasets.

# Run Registry & Artifacts
- Maintain a registry of all pipeline runs with metadata.
- Store artifacts in versioned directories for auditability.

# Config & Secrets
- Use environment variables for secrets.
- Store configs in `configs/` with example templates.
- Avoid committing secrets to the repository.

# Testing & CI
- Write tests for all new features and bug fixes.
- Use GitHub Actions for automated linting, testing, and deployment.
- Ensure tests pass before merging PRs.

## 10) Branching & PR Rules
- Branches: `main` (protected), `dev` (integration), feature `feat/<slug>`.
- PRs only; no direct commits to `main`.
- PR Discipline: One Task = One PR

**Problem:**  
Agents sometimes open a new PR after review feedback instead of updating the original.  
This fragments history and adds chaos.

**Policy:**  
1. **One task = one branch = one PR** until merged.  
2. If changes are requested, the agent **must push commits to the same branch/PR**.  
3. If scope truly changes → close current PR and open a **new PR with a new PRP ID**, explicitly noting it **supersedes** the old one.  
4. PR titles must include the PRP ID:  
   ```
   <PRP-ID>: <short description>
   ```
   Branch naming:  
   ```
   agent/<agent-name>/<PRP-ID>
   ```

**Agent Instructions (paste as PR comment):**
> You are required to update **this PR only**.  
> Do **not** open a new PR for follow-ups.  
> - Push commits to the **same branch**  
> - Mark resolved threads  
> - Keep total diff under 400 lines  
> - If scope must change, comment first and wait for approval

**Maintainer Checklist:**  
- If requesting changes, add label `needs-changes` and remind agent: *“Update this PR, don’t open another.”*  
- If a duplicate PR appears → comment *“duplicate; continue in #<original>”* and close it.  
- Convert to **Draft** if scope is unclear.  

**Automation:**  
A GitHub Action (`Agent PR Guardian`) can auto-flag duplicate PRs for the same PRP ID and label them `duplicate`.

# Agent Operating Rules
- Agents must follow the branching and PR rules strictly.
- Use descriptive commit messages.
- Communicate blockers promptly.

# Performance & Determinism
- Ensure pipelines run within expected timeframes.
- Validate outputs for determinism with each run.

# Observability & Metrics
- Instrument code with logging and metrics.
- Monitor pipeline health and alert on anomalies.

# Safety Rails
- Implement rollback plans for failed deployments.
- Use feature flags for experimental changes.

# House Processes
- Regularly review and update documentation.
- Conduct periodic code audits and knowledge sharing sessions.

# Open TBDs
- Define standards for new data sources.
- Explore automation for data quality checks.
</file>

<file path="vitest.config.ts">
import { defineConfig } from "vitest/config";
import path from "path";

export default defineConfig({
  test: {
    exclude: [
      "**/node_modules/**",
      "**/dist/**", 
      "**/e2e/**", // Exclude E2E tests (use Playwright instead)
    ],
  },
  resolve: {
    alias: {
      "@": path.resolve(__dirname),
    },
  },
});
</file>

<file path=".github/workflows/ci.yml">
name: ci
on:
  push: { branches: [ main ] }
  pull_request:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/uv-action@v3
      - run: uv python pin 3.11 && uv sync
      - run: uv run ruff check .
      - run: uv run black --check .
      - run: uv run mypy
      - run: uv run pytest -q
</file>

<file path="app/layout.tsx">
import type { ReactNode } from "react";

export const metadata = {
  title: "NBA-DFS",
  description: "UI Shell for NBA-DFS tools",
};

import "../styles/globals.css";
import TopStatusBar from "../components/ui/TopStatusBar";
import TopTabs from "../components/ui/TopTabs";
import MetricsDrawer from "../components/ui/MetricsDrawer";
import { Separator } from "../components/ui/separator";
import { Toaster } from "../components/ui/sonner";
import { ThemeProvider } from "../components/theme/ThemeProvider";

export default function RootLayout({
  children,
}: { children: ReactNode }) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className="min-h-screen bg-background text-foreground">
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <a href="#content" className="skip-link">Skip to main content</a>
          <div className="flex flex-col min-h-screen">
            <TopStatusBar />
            <TopTabs />
            <Separator />
            <main id="content" role="main" className="relative flex-1 focus:outline-none">
              {children}
            </main>
            <MetricsDrawer />
          </div>
          <Toaster position="top-right" richColors />
        </ThemeProvider>
      </body>
    </html>
  );
}
</file>

<file path="components/metrics/RunSummary.tsx">
"use client";

import { useRunStore } from "@/lib/state/run-store";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Card, CardContent, CardHeader } from "@/components/ui/card";

export default function RunSummary() {
  const { summary } = useRunStore();
  if (!summary) return null;

  // Diagnostics payload (backend sidecar)
  const d: any = (summary as any).diagnostics || {};

  // Helper: coerce numeric-like values to numbers (or undefined)
  const toNum = (v: unknown): number | undefined => {
    const n = typeof v === "string" ? Number(v) : (v as number);
    return Number.isFinite(n as number) ? (n as number) : undefined;
  };

  // Pool metrics (emitted by CLI)
  const rawPool = d?.pool as
    | {
        lineups?: number | string;
        avg_overlap_players?: number | string;
        avg_pairwise_jaccard?: number | string;
        unique_player_count?: number | string;
      }
    | undefined;

  const pool = rawPool
    ? {
        lineups: toNum(rawPool.lineups),
        avg_overlap_players: toNum(rawPool.avg_overlap_players),
        avg_pairwise_jaccard: toNum(rawPool.avg_pairwise_jaccard),
        unique_player_count: toNum(rawPool.unique_player_count),
      }
    : undefined;

  // Badges (λ / curve / drop / uniques)
  const lamUsed =
    d?.ownership_penalty?.lambda_used ??
    d?.wiring_check?.objective?.lambda_ui ??
    d?.ownership_penalty?.weight_lambda;

  const curveLabel =
    d?.ownership_penalty?.curve_type ||
    d?.ownership_penalty?.curve ||
    d?.ownership_penalty?.mode ||
    undefined;

  const dropPct =
    d?.constraints?.pruning?.drop_pct ??
    d?.constraints_raw?.pruning?.drop_pct;

  const uniques =
    d?.constraints?.unique_players ??
    d?.constraints_raw?.unique_players ??
    (summary as any)?.optionsUsed?.unique_players;

  // Settings block — normalize / provide fallbacks
  const opts: any = (summary as any).optionsUsed || {};

  const seed =
    opts.seed ?? d?.seed ?? (summary as any).seed ?? undefined;

  const candidates =
    opts.candidates ??
    (typeof summary.tried === "number" ? summary.tried : undefined);

  const teamCap =
    opts.teamCap ??
    d?.constraints?.global_team_limit ??
    d?.constraints_raw?.global_team_limit ??
    d?.constraints_raw?.team_cap ??
    undefined;

  const salaryCap =
    opts.salaryCap ??
    d?.constraints?.max_salary ??
    d?.constraints_raw?.max_salary ??
    undefined;

  const minSalary =
    opts.minSalary ??
    d?.constraints?.min_salary ??
    d?.constraints_raw?.min_salary ??
    undefined;

  const randomnessPctRaw =
    opts.randomnessPct ??
    d?.constraints?.randomness_pct ??
    d?.constraints_raw?.randomness_pct ??
    0;

  // Accept 0–1 or 0–100, render as 0–100
  const randomnessPct =
    typeof randomnessPctRaw === "number"
      ? randomnessPctRaw <= 1
        ? Math.round(randomnessPctRaw * 100)
        : Math.round(randomnessPctRaw)
      : 0;

  // Number formatting utilities
  const formatScore = (n: number | undefined) => 
    n !== undefined ? new Intl.NumberFormat("en-US", { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(n) : "—";
  
  const formatOverlap = (n: number | undefined) => 
    n !== undefined ? new Intl.NumberFormat("en-US", { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(n) : "—";
    
  const formatJaccard = (n: number | undefined) => 
    n !== undefined ? new Intl.NumberFormat("en-US", { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(n) : "—";
    
  const formatMs = (n: number | undefined) => 
    n !== undefined ? new Intl.NumberFormat("en-US").format(n) + " ms" : "—";
    
  const formatInteger = (n: number | undefined) => 
    n !== undefined ? new Intl.NumberFormat("en-US").format(n) : "—";

  const ownershipPenaltyOn =
    typeof opts.ownershipPenalty === "boolean"
      ? opts.ownershipPenalty
      : !!d?.ownership_penalty?.enabled;

  return (
    <TooltipProvider>
      <div className="space-y-4" data-testid="run-summary">
        <div className="flex items-center gap-2 flex-wrap">
          <div className="font-medium">Optimizer Run</div>
          <Separator orientation="vertical" className="h-4" />

          {(summary as any).slateKey && (
            <Badge variant="outline" className="text-[10px]" title="Slate Key">
              {(summary as any).slateKey}
            </Badge>
          )}
          {(summary as any).runId && (
            <Badge variant="outline" className="text-[10px]" title="Run ID">
              {(summary as any).runId}
            </Badge>
          )}

          {summary.engineUsed && (
            <Tooltip>
              <TooltipTrigger>
                <Badge variant="secondary" className="text-[10px]" data-testid="engine-badge">
                  Engine: {summary.engineUsed === "cp_sat" ? "CP-SAT" : "CBC"}
                </Badge>
              </TooltipTrigger>
              <TooltipContent>
                <p>Optimization engine used: {summary.engineUsed === "cp_sat" ? "Google CP-SAT" : "COIN-OR CBC"}</p>
              </TooltipContent>
            </Tooltip>
          )}

          {summary.usingFixtureDate && (
            <Tooltip>
              <TooltipTrigger>
                <Badge variant="outline" className="text-[10px]" data-testid="fixture-badge">
                  Fixture: {summary.usingFixtureDate}
                </Badge>
              </TooltipTrigger>
              <TooltipContent>
                <p>Using fixture data from: {summary.usingFixtureDate}</p>
              </TooltipContent>
            </Tooltip>
          )}

          {typeof lamUsed === "number" && (
            <Tooltip>
              <TooltipTrigger>
                <Badge variant="secondary" className="text-[10px]" data-testid="lambda-badge">
                  λ={lamUsed}
                </Badge>
              </TooltipTrigger>
              <TooltipContent>
                <p>Ownership penalty lambda: {lamUsed}</p>
              </TooltipContent>
            </Tooltip>
          )}

          {curveLabel && (
            <Tooltip>
              <TooltipTrigger>
                <Badge variant="secondary" className="text-[10px]" data-testid="curve-badge">
                  curve={String(curveLabel)}
                </Badge>
              </TooltipTrigger>
              <TooltipContent>
                <p>Penalty curve type: {String(curveLabel)}</p>
              </TooltipContent>
            </Tooltip>
          )}

          {typeof dropPct === "number" && (
            <Tooltip>
              <TooltipTrigger>
                <Badge variant="secondary" className="text-[10px]" data-testid="drop-badge">
                  drop={(dropPct * 100).toFixed(0)}%
                </Badge>
              </TooltipTrigger>
              <TooltipContent>
                <p>Player pruning drop percentage: {(dropPct * 100).toFixed(1)}%</p>
              </TooltipContent>
            </Tooltip>
          )}

          {typeof uniques === "number" && (
            <Tooltip>
              <TooltipTrigger>
                <Badge variant="secondary" className="text-[10px]" data-testid="uniques-badge">
                  uniques={uniques}
                </Badge>
              </TooltipTrigger>
              <TooltipContent>
                <p>Minimum unique players per lineup: {uniques}</p>
              </TooltipContent>
            </Tooltip>
          )}
        </div>

        <Card data-testid="inputs-outputs-card">
          <CardHeader className="pb-2">
            <div className="text-xs font-medium">Inputs / Outputs</div>
          </CardHeader>
          <CardContent className="pt-0">
            <dl className="grid grid-cols-2 gap-x-4 gap-y-2 text-xs">
              <div className="flex justify-between">
                <dt className="opacity-70">Lineups</dt>
                <dd className="font-mono tabular-nums">{formatInteger(pool?.lineups)}</dd>
              </div>
              <div className="flex justify-between">
                <dt className="opacity-70">Unique players</dt>
                <dd className="font-mono tabular-nums">{formatInteger(pool?.unique_player_count)}</dd>
              </div>
              <div className="flex justify-between">
                <dt className="opacity-70">Avg overlap</dt>
                <dd className="font-mono tabular-nums">{formatOverlap(pool?.avg_overlap_players)}</dd>
              </div>
              <div className="flex justify-between">
                <dt className="opacity-70">Avg Jaccard</dt>
                <dd className="font-mono tabular-nums">{formatJaccard(pool?.avg_pairwise_jaccard)}</dd>
              </div>
            </dl>
          </CardContent>
        </Card>

        <Card data-testid="performance-card">
          <CardContent className="pt-4">
            <dl className="grid grid-cols-2 gap-x-4 gap-y-2 text-xs">
              <div className="flex justify-between">
                <dt className="opacity-70">Candidates tried</dt>
                <dd className="font-mono tabular-nums">{formatInteger(summary.tried)}</dd>
              </div>
              <div className="flex justify-between">
                <dt className="opacity-70">Valid lineups</dt>
                <dd className="font-mono tabular-nums">{formatInteger(summary.valid)}</dd>
              </div>
              <div className="flex justify-between">
                <dt className="opacity-70">Best score</dt>
                <dd className="font-mono tabular-nums">{formatScore(summary.bestScore)}</dd>
              </div>
              <div className="flex justify-between">
                <dt className="opacity-70">Elapsed</dt>
                <dd className="font-mono tabular-nums">{formatMs(summary.elapsedMs)}</dd>
              </div>
            </dl>
          </CardContent>
        </Card>

        <Card data-testid="settings-card">
          <CardHeader className="pb-2">
            <div className="text-xs font-medium">Settings</div>
          </CardHeader>
          <CardContent className="pt-0">
            <dl className="grid grid-cols-2 gap-x-4 gap-y-2 text-xs">
              <div className="flex justify-between">
                <dt className="opacity-70">Seed</dt>
                <dd className="font-mono tabular-nums">{seed ?? "—"}</dd>
              </div>
              <div className="flex justify-between">
                <dt className="opacity-70">Candidates</dt>
                <dd className="font-mono tabular-nums">{formatInteger(candidates)}</dd>
              </div>
              <div className="flex justify-between">
                <dt className="opacity-70">Team cap</dt>
                <dd className="font-mono tabular-nums">{teamCap ?? "—"}</dd>
              </div>
              <div className="flex justify-between">
                <dt className="opacity-70">Salary cap</dt>
                <dd className="font-mono tabular-nums">{formatInteger(salaryCap)}</dd>
              </div>
              <div className="flex justify-between">
                <dt className="opacity-70">Min salary</dt>
                <dd className="font-mono tabular-nums">{formatInteger(minSalary) || "0"}</dd>
              </div>
              <div className="flex justify-between">
                <dt className="opacity-70">Randomness %</dt>
                <dd className="font-mono tabular-nums">{randomnessPct}%</dd>
              </div>
              <div className="flex justify-between">
                <dt className="opacity-70">Ownership penalty</dt>
                <dd className="font-mono tabular-nums">{ownershipPenaltyOn ? "on" : "off"}</dd>
              </div>
            </dl>
          </CardContent>
        </Card>

        {summary.invalidReasons && (
          <Card data-testid="invalid-reasons-card">
            <CardHeader className="pb-2">
              <div className="text-xs font-medium">Invalid reasons</div>
            </CardHeader>
            <CardContent className="pt-0">
              <dl className="grid grid-cols-2 gap-x-4 gap-y-2 text-xs">
                <div className="flex justify-between">
                  <dt className="opacity-70">Salary</dt>
                  <dd className="font-mono tabular-nums">{formatInteger(summary.invalidReasons.salary)}</dd>
                </div>
                <div className="flex justify-between">
                  <dt className="opacity-70">Slots</dt>
                  <dd className="font-mono tabular-nums">{formatInteger(summary.invalidReasons.slots)}</dd>
                </div>
                <div className="flex justify-between">
                  <dt className="opacity-70">Team cap</dt>
                  <dd className="font-mono tabular-nums">{formatInteger(summary.invalidReasons.teamcap)}</dd>
                </div>
                <div className="flex justify-between">
                  <dt className="opacity-70">Duplicate</dt>
                  <dd className="font-mono tabular-nums">{formatInteger(summary.invalidReasons.dup)}</dd>
                </div>
              </dl>
            </CardContent>
          </Card>
        )}
      </div>
    </TooltipProvider>
  );
}
</file>

<file path="lib/state/run-store.ts">
"use client";

import { create } from "zustand";
import type { Lineup, OptimizationResult, OptimizerConfig, RunOptions } from "@/lib/opt/types";
import { runInWorker } from "@/lib/opt/run";
import { useIngestStore } from "@/lib/state/ingest-store";
import {
  DEFAULT_CANDIDATES,
  DEFAULT_MAX_PER_TEAM,
  DEFAULT_MIN_SALARY,
  DEFAULT_OWNERSHIP_PENALTY,
  DEFAULT_RANDOMNESS_PCT,
  DEFAULT_SALARY_CAP,
  DEFAULT_SEED,
  DEFAULT_SLOTS,
  USE_FIXTURE_FALLBACK,
} from "@/lib/opt/config";
import { loadFixtureMergedPlayers } from "@/lib/opt/fixtures";

type Status = "idle" | "running" | "done" | "error";

type State = {
  status: Status;
  lineups: Lineup[];
  summary: OptimizationResult["summary"] | null;
  tried: number;
  valid: number;
  error?: string | null;
  options: RunOptions;
  setOptions: (patch: Partial<RunOptions>) => void;
  run: (opts?: { target?: number; config?: Partial<OptimizerConfig> }) => Promise<void>;
  runSolve: (inputs: {
    site: "dk" | "fd";
    projectionsPath: string;
    playerIdsPath?: string;
    nLineups: number;
    minUniques?: number;
    penaltyEnabled: boolean;
    lambdaVal?: number;
    penaltyCurve?: "linear" | "g_curve";
    dropIntensity?: number; // 0.0 - 0.5
    seed?: number;
    sigma?: number; // 0.0 - 0.25
  }) => Promise<void>;
  reset: () => void;
};

const DEFAULT_CONFIG: OptimizerConfig = {
  salaryCap: DEFAULT_SALARY_CAP,
  slots: DEFAULT_SLOTS,
  maxPerTeam: DEFAULT_MAX_PER_TEAM,
};

export const useRunStore = create<State>((set, get) => ({
  status: "idle",
  lineups: [],
  summary: null,
  tried: 0,
  valid: 0,
  error: null,
  options: {
    seed: DEFAULT_SEED,
    candidates: DEFAULT_CANDIDATES,
    teamCap: DEFAULT_MAX_PER_TEAM,
    salaryCap: DEFAULT_SALARY_CAP,
    minSalary: DEFAULT_MIN_SALARY,
    randomnessPct: DEFAULT_RANDOMNESS_PCT,
    ownershipPenalty: DEFAULT_OWNERSHIP_PENALTY,
  },
  setOptions: (patch) => set((s) => ({ options: { ...s.options, ...patch } })),
  reset: () => set({ status: "idle", lineups: [], summary: null, tried: 0, valid: 0, error: null }),

  // Legacy/worker-based run (kept for dev)
  run: async ({ target = 100, config = {} } = {}) => {
    let players = useIngestStore.getState().merged;
    let usingFixtureDate: string | null = null;
    if (!players || players.length === 0) {
      if (USE_FIXTURE_FALLBACK) {
        const { date, players: arr } = loadFixtureMergedPlayers();
        players = arr;
        usingFixtureDate = date;
      } else {
        set({ status: "error", error: "No players loaded. Upload CSVs or enable fixture fallback." });
        return;
      }
    }
    const opts = get().options;
    const cfg: OptimizerConfig = {
      ...DEFAULT_CONFIG,
      ...config,
      salaryCap: opts.salaryCap ?? DEFAULT_CONFIG.salaryCap,
      maxPerTeam: opts.teamCap ?? DEFAULT_CONFIG.maxPerTeam,
      slots: (config.slots as any) ?? DEFAULT_CONFIG.slots,
    };
    set({ status: "running", tried: 0, valid: 0, error: null, lineups: [], summary: null });
    try {
      const { promise } = runInWorker(
        players,
        cfg,
        String(opts.seed),
        target,
        (evt) => {
          if (evt.type === "progress") set({ tried: evt.tried, valid: evt.valid });
        },
        opts
      );
      const res = await promise;
      if (usingFixtureDate) res.summary.usingFixtureDate = usingFixtureDate;
      set({ status: "done", lineups: res.lineups, summary: res.summary });
    } catch (e: any) {
      set({ status: "error", error: e?.message ?? String(e) });
    }
  },

  // New path-first runner that posts to /api/optimize (Python wrapper)
  runSolve: async (inputs) => {
    const {
      site,
      projectionsPath,
      playerIdsPath,
      nLineups,
      minUniques = 1,
      penaltyEnabled,
      lambdaVal = 0,
      penaltyCurve = "linear",
      dropIntensity = 0,
      seed = 42,
      sigma = 0,
    } = inputs || ({} as any);

    set({ status: "running", tried: 0, valid: 0, error: null, lineups: [], summary: null });

    const ownership_penalty = penaltyEnabled
      ? {
          enabled: true,
          // Always use by_points for backend; express curve via curve_type
          mode: "by_points",
          weight_lambda: Number(lambdaVal) || 0,
          curve_type: penaltyCurve === "g_curve" ? "sigmoid" : "linear",
        }
      : { enabled: false } as const;

    // Inline players fallback from ingest store when paths are not provided
    const merged = useIngestStore.getState().merged || [];
    const useInlinePlayers = (!projectionsPath || String(projectionsPath).trim() === "") && merged.length > 0;

    const body: any = {
      site,
      enginePreferred: "cp_sat",
      constraints: {
        N_lineups: Math.max(1, Number(nLineups) || 5),
        unique_players: Math.max(0, Math.min(5, Number(minUniques) || 0)),
        ownership_penalty,
        pruning: { drop_pct: Math.max(0, Math.min(0.5, Number(dropIntensity) || 0)) },
        randomness_pct: Math.round((Number(sigma) || 0) * 100),
      },
      seed: Number(seed) || 42,
      projectionsPath,
      playerIdsPath,
    };
    if (useInlinePlayers) {
      body.players = merged.map((p: any) => ({
        name: p.player_name,
        team: p.team,
        position: [p.pos_primary, p.pos_secondary].filter(Boolean).join("/"),
        salary: p.salary,
        proj_fp: p.proj_fp,
        own_proj: p.ownership ?? null,
        dk_id: p.player_id_dk,
      }));
    }

    try {
      const fmtSlateKey = () => {
        try {
          const fmt = new Intl.DateTimeFormat("en-US", {
            timeZone: "America/New_York",
            year: "2-digit",
            month: "2-digit",
            day: "2-digit",
            hour: "2-digit",
            minute: "2-digit",
            second: "2-digit",
            hour12: false,
          });
          const parts = Object.fromEntries(fmt.formatToParts(new Date()).map((p) => [p.type, p.value]));
          const yy = String(parts.year).slice(-2);
          const mm = String(parts.month).padStart(2, "0");
          const dd = String(parts.day).padStart(2, "0");
          const hh = String(parts.hour).padStart(2, "0");
          const mi = String(parts.minute).padStart(2, "0");
          const ss = String(parts.second).padStart(2, "0");
          return `${yy}-${mm}-${dd}_${hh}${mi}${ss}`;
        } catch {
          const d = new Date();
          const yy = String(d.getFullYear()).slice(-2);
          const mm = String(d.getMonth() + 1).padStart(2, "0");
          const dd = String(d.getDate()).padStart(2, "0");
          const hh = String(d.getHours()).padStart(2, "0");
          const mi = String(d.getMinutes()).padStart(2, "0");
          const ss = String(d.getSeconds()).padStart(2, "0");
          return `${yy}-${mm}-${dd}_${hh}${mi}${ss}`;
        }
      };
      // Use persisted slateKey if present to keep runs grouped
      let slateKey: string | null = null;
      try {
        slateKey = localStorage.getItem("dfs_slate_key");
      } catch {}
      if (!slateKey) {
        slateKey = fmtSlateKey();
        try { localStorage.setItem("dfs_slate_key", slateKey); } catch {}
      }

      const res = await fetch("/api/optimize", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ ...body, slateKey }),
      });
      const data = await res.json();
      if (!res.ok || !data?.ok) {
        throw new Error(data?.error || `Request failed (${res.status})`);
      }

      // Map backend lineups -> UI shape (includes extended metrics from PRP)
      const lineups = (Array.isArray(data.lineups) ? data.lineups : []).map((lu: any) => {
        const lineup = {
          id: String(lu.lineup_id ?? lu.id ?? Math.random().toString(36).slice(2)),
          slots: (Array.isArray(lu.players) ? lu.players : []).map((pl: any) => ({
            slot: pl.pos ?? pl.position ?? "UTIL",
            player_id_dk: pl.dk_id ?? pl.player_id,
            name: pl.name,
            team: pl.team,
            salary: pl.salary,
            own_proj: pl.own_proj,
            pos: pl.pos ?? pl.position,
          })),
          salary: Number(lu.total_salary ?? lu.salary_used ?? 0),
          score: Number(lu.total_proj ?? lu.score ?? 0),
          
          // Extended metrics for table view
          lineup_id: String(lu.lineup_id ?? lu.id ?? Math.random().toString(36).slice(2)),
          salary_used: Number(lu.total_salary ?? lu.salary_used ?? 0),
          salary_left: lu.salary_left !== undefined ? Number(lu.salary_left) : undefined,
          dup_risk: lu.dup_risk !== undefined ? Number(lu.dup_risk) : undefined,
          own_sum: lu.own_sum !== undefined ? Number(lu.own_sum) : undefined,
          own_avg: lu.own_avg !== undefined ? Number(lu.own_avg) : undefined,
          lev_sum: lu.lev_sum !== undefined ? Number(lu.lev_sum) : undefined,
          lev_avg: lu.lev_avg !== undefined ? Number(lu.lev_avg) : undefined,
          num_uniques_in_pool: lu.num_uniques_in_pool !== undefined ? Number(lu.num_uniques_in_pool) : undefined,
          teams_used: lu.teams_used ?? undefined,
          proj_pts_sum: lu.proj_pts_sum !== undefined ? Number(lu.proj_pts_sum) : undefined,
          stack_flags: lu.stack_flags ?? undefined,
        };
        
        // Add player slots as direct properties for table columns
        if (Array.isArray(lu.players)) {
          lu.players.forEach((pl: any) => {
            const position = pl.pos ?? pl.position ?? "UTIL";
            (lineup as any)[position] = pl.dk_id ?? pl.player_id;
          });
        }
        
        return lineup;
      });
      set({
        status: "done",
        lineups,
        summary: {
          ...data.summary,
          runId: data.run_id ?? (data.summary?.runId ?? undefined),
          slateKey: data.slate_key ?? (data.summary?.slateKey ?? undefined),
          valid: lineups.length,
          tried: data.diagnostics?.N ?? data.summary?.tried ?? lineups.length,
          elapsedMs:
            data.summary?.elapsedMs ?? (data.diagnostics?.wall_time_sec ? Math.round(1000 * data.diagnostics.wall_time_sec) : 0),
          bestScore: data.summary?.bestScore ?? (lineups.reduce((m: number, l: any) => Math.max(m, Number(l.score || 0)), 0)),
          engineUsed: data.engineUsed ?? data.diagnostics?.engine,
          diagnostics: data.diagnostics,
          playerMap: data.playerMap ?? data.summary?.playerMap ?? undefined, // Add playerMap for roster mapping
        },
      });

      // Persist slate key from backend (if provided) and toast run_id for discoverability
      try {
        if (data.slate_key) {
          localStorage.setItem("dfs_slate_key", String(data.slate_key));
        }
      } catch {}
      try {
        const { toast } = await import("@/components/ui/sonner");
        const rid = data.run_id ? String(data.run_id) : undefined;
        const sk = data.slate_key ? String(data.slate_key) : undefined;
        if (rid || sk) {
          (toast as any).success?.(`Saved run${rid ? ` ${rid}` : ""}${sk ? ` under ${sk}` : ""}`) ||
            (toast as any).info?.(`Saved run${rid ? ` ${rid}` : ""}${sk ? ` under ${sk}` : ""}`) ||
            toast(`Saved run${rid ? ` ${rid}` : ""}${sk ? ` under ${sk}` : ""}`);
        }
      } catch {}

      // Toast warnings
      try {
        const { toast } = await import("@/components/ui/sonner");
        const matched = data.diagnostics?.matched_players;
        if (typeof matched === "number" && matched < 90) {
          (toast as any).warning?.("Low DK ID match rate; check playerIdsPath") ||
            (toast as any).warn?.("Low DK ID match rate; check playerIdsPath") ||
            toast("Low DK ID match rate; check playerIdsPath");
        }
        const ownMax =
          data.diagnostics?.normalization?.ownership?.max_after ??
          data.diagnostics?.normalization?.ownership?.own_max_after ?? 0;
        if (ownership_penalty.enabled && (ownMax ?? 0) === 0) {
          (toast as any).info?.("Ownerships are all 0; penalty has no effect") ||
            toast("Ownerships are all 0; penalty has no effect");
        }
      } catch {
        // no-op if toast not available
      }
    } catch (e: any) {
      set({ status: "error", error: e?.message ?? String(e) });
      try {
        const { toast } = await import("@/components/ui/sonner");
        (toast as any).error?.(String(e?.message ?? e)) || toast(String(e?.message ?? e));
      } catch {}
    }
  },
}));
</file>

<file path="pipeline/ingest/__main__.py">
from .cli import main

if __name__ == "__main__":
    raise SystemExit(main())
</file>

<file path="pipeline/io/validate.py">
from __future__ import annotations

from pathlib import Path
from typing import Any

import yaml
from jsonschema import RefResolver
from jsonschema.validators import Draft202012Validator as Validator


def load_schema(path: Path) -> dict[str, Any]:
    with path.open("r", encoding="utf-8") as f:
        schema = yaml.safe_load(f)
    Validator.check_schema(schema)
    return schema


def validate_obj(
    schema: dict[str, Any],
    obj: dict[str, Any],
    *,
    schemas_root: Path | None = None,
    schema_path: Path | None = None,
) -> None:
    store: dict[str, Any] = {}
    base_uri = ""
    if schemas_root is not None:
        root = schemas_root.resolve()
        base_uri = root.as_uri() + "/"
        # Preload all schemas in the root into the resolver store by $id and file uri
        for path in root.glob("*.yaml"):
            try:
                with path.open("r", encoding="utf-8") as f:
                    s = yaml.safe_load(f)
                sid = s.get("$id")
                if sid:
                    store[str(sid)] = s
                store[path.resolve().as_uri()] = s
            except Exception:
                continue
    elif schema_path is not None:
        base_uri = schema_path.resolve().parent.as_uri() + "/"
    resolver = RefResolver(base_uri=base_uri, referrer=schema, store=store)
    Validator(schema, resolver=resolver).validate(obj)
</file>

<file path="pipeline/schemas/manifest.schema.yaml">
$schema: "https://json-schema.org/draft/2020-12/schema"
$id: "https://nba-dfs.schemas/manifest.schema.yaml"
title: "Run Manifest"
description: "Per-run manifest capturing inputs, outputs, and metadata."
version: "0.2.1"
type: object
additionalProperties: false
properties:
  schema_version:
    type: string
  run_id:
    $ref: "./common.types.yaml#/definitions/RunId"
  run_type:
    $ref: "./common.types.yaml#/definitions/RunTypeEnum"
  slate_id:
    $ref: "./common.types.yaml#/definitions/SlateId"
  created_ts:
    $ref: "./common.types.yaml#/definitions/UtcTimestamp"
  inputs:
    type: array
    items:
      type: object
      additionalProperties: false
      properties:
        path: { type: string }
        content_sha256: { $ref: "./common.types.yaml#/definitions/SHA256" }
        role:
          type: string
          enum: [projections_normalized, players, optimizer_lineups, variants, field, contest_structure, sim_results, config]
      required: [path, content_sha256, role]
  config:
    type: object
    additionalProperties: true
  outputs:
    type: array
    items:
      type: object
      additionalProperties: false
      properties:
        path: { type: string }
        kind:
          type: string
          description: "Schema kind for the output artifact."
          enum:
            [
              players,
              slates,
              projections_raw,
              projections_normalized,
              optimizer_lineups,
              optimizer_metrics,
              metrics,
              portfolio_metrics,
              variant_catalog,
              variant_metrics,
              field,
              field_metrics,
              contest_structure,
              sim_results,
              sim_metrics,
              runs_registry,
            ]
      required: [path, kind]
  tags:
    type: array
    items: { type: string }
  git_rev:
    type: string
  notes:
    type: string
required: [schema_version, run_id, run_type, slate_id, created_ts, inputs]
examples:
  - schema_version: "0.2.0"
    run_id: "20251101_180000_deadbee"
    run_type: "ingest"
    slate_id: "20251101_NBA"
    created_ts: "2025-11-01T18:00:00.000Z"
    inputs:
      - { path: "data/processed/current/projections.parquet", content_sha256: "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef", role: "projections_normalized" }
    config: { seed: 42, max_lineups: 150 }
    outputs:
      - { path: "runs/25-11-01_180000/optimizer/artifacts/lineups.parquet", kind: "optimizer_lineups" }
    tags: ["main"]
    git_rev: "deadbeef"
  - # invalid: missing content_sha256 in inputs
    schema_version: "0.2.0"
    run_id: "20251101_180000_deadbee"
    run_type: "ingest"
    slate_id: "20251101_NBA"
    created_ts: "2025-11-01T18:00:00.000Z"
    inputs:
      - { path: "data/processed/current/projections.parquet", role: "projections_normalized" }
</file>

<file path="processes/field_sampler/adapter.py">
from __future__ import annotations

import argparse
import hashlib
import json
import os
import sys
from collections.abc import Callable, Mapping, Sequence
from datetime import UTC, datetime
from pathlib import Path
from typing import Any, cast

import pandas as pd

from pipeline.io.files import ensure_dir, write_parquet
from pipeline.io.validate import load_schema, validate_obj

# Resolve repo root (two levels up from this file) and schemas root
REPO_ROOT = Path(__file__).resolve().parents[2]
SCHEMAS_ROOT = REPO_ROOT / "pipeline" / "schemas"


RunFieldSamplerFn = Callable[[pd.DataFrame, dict[str, Any], int], Any]

DK_SLOTS_ORDER = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]


def _utc_now_iso() -> str:
    now = datetime.now(UTC)
    ms = int(now.microsecond / 1000)
    return f"{now.strftime('%Y-%m-%dT%H:%M:%S')}.{ms:03d}Z"


def _sha256_of_path(path: Path) -> str:
    h = hashlib.sha256()
    with path.open("rb") as f:
        for chunk in iter(lambda: f.read(8192), b""):
            h.update(chunk)
    return h.hexdigest()


def _coerce_scalar(val: str) -> int | float | bool | str:
    lower = val.lower()
    if lower in ("true", "false"):
        return lower == "true"
    try:
        if "." in val:
            return float(val)
        return int(val)
    except ValueError:
        return val


def _load_sampler() -> RunFieldSamplerFn:
    """Dynamically load the field sampler implementation.

    Use `FIELD_SAMPLER_IMPL=module:function` to override. Tests may monkeypatch
    this loader. By default, this adapter is headless and will raise unless an
    implementation is provided.
    """
    override = os.environ.get("FIELD_SAMPLER_IMPL")
    if override:
        mod_name, _, fn_name = override.partition(":")
        mod = __import__(mod_name, fromlist=[fn_name or "run_sampler"])
        fn = getattr(mod, fn_name or "run_sampler")
        return cast(RunFieldSamplerFn, fn)

    # No built-in default wired yet; legacy integration may be added later.
    raise ImportError(
        "No field sampler implementation available. Provide FIELD_SAMPLER_IMPL or "
        "monkeypatch _load_sampler in tests."
    )


def load_config(config_path: Path | None, inline_kv: Sequence[str] | None = None) -> dict[str, Any]:
    cfg: dict[str, Any] = {}
    if config_path:
        text = config_path.read_text(encoding="utf-8")
        if config_path.suffix.lower() in (".yaml", ".yml"):
            import yaml  # lazy

            try:
                cfg = dict(yaml.safe_load(text) or {})
            except Exception as e:  # pragma: no cover - error path exercised in tests
                msg = f"Failed to parse YAML config {config_path}: {e}"
                raise ValueError(msg) from e
        else:
            cfg = dict(json.loads(text))
    if inline_kv:
        for item in inline_kv:
            if "=" not in item:
                continue
            k, v = item.split("=", 1)
            cfg[k.strip()] = _coerce_scalar(v.strip())
    return cfg


def map_config_to_knobs(config: Mapping[str, Any]) -> dict[str, Any]:
    """Translate user config to field sampler knobs.

    Unknown keys are preserved under `extras` for downstream consumers.
    """
    c: dict[str, Any] = {}
    for key in (
        "field_size",
        "source_mix",
        "sampling_mode",
        "ownership_curve",
        "diversity",
        "team_limits",
        "de-dup",
        "seed",
    ):
        if key in config:
            c[key] = config[key]
    # Preserve extras
    for k, v in config.items():
        if k not in c:
            c.setdefault("extras", {})[k] = v
    return c


def _find_input_variant_catalog(
    *,
    out_root: Path,
    slate_id: str,
    explicit_input: Path | None = None,
    from_run: str | None = None,
    inputs: Sequence[Path] | None = None,
) -> list[Path]:
    if inputs:
        return list(inputs)
    if explicit_input is not None:
        return [explicit_input]
    if from_run:
        candidate = (
            out_root / "runs" / "variants" / from_run / "artifacts" / "variant_catalog.parquet"
        )
        if candidate.exists():
            return [candidate]
        raise FileNotFoundError(f"--from-run provided but variant_catalog not found: {candidate}")
    registry_path = out_root / "registry" / "runs.parquet"
    if registry_path.exists():
        df = pd.read_parquet(registry_path)
        required = {"run_type", "slate_id", "created_ts"}
        if not required.issubset(set(map(str, df.columns))):
            missing = sorted(required - set(map(str, df.columns)))
            raise ValueError(
                f"Registry missing required columns {missing}. Re-run upstream variants to populate registry."
            )
        filt = df[(df.get("run_type") == "variants") & (df.get("slate_id") == slate_id)]
        if not filt.empty:
            idx = filt["created_ts"].astype(str).idxmax()
            row = df.loc[idx]
            try:
                primary = row.get("primary_outputs")
                if isinstance(primary, list) and primary:
                    p0 = Path(primary[0])
                    return [p0 if p0.is_absolute() else (out_root / p0)]
            except Exception:
                pass
            run_id = str(row.get("run_id"))
            candidate = (
                out_root / "runs" / "variants" / run_id / "artifacts" / "variant_catalog.parquet"
            )
            if candidate.exists():
                return [candidate]
    raise FileNotFoundError(
        "No variant catalog found for slate_id="
        f"{slate_id}. Provide --input/--inputs or --from-run."
    )


def _schema_version(schemas_root: Path | None, name: str) -> str:
    schema = load_schema((schemas_root or SCHEMAS_ROOT) / f"{name}.schema.yaml")
    return str(schema.get("version", "0.0.0"))


def _sanity_check_entrant(entry: Mapping[str, Any]) -> None:
    players = list(entry.get("players") or [])
    if len(players) != 8:
        raise ValueError(f"Invalid field entrant: expected 8 players, got {len(players)}")
    # If export CSV preview present, ensure it covers 8 slots (order-only check)
    row = str(entry.get("export_csv_row") or "")
    if row:
        parts = [p.strip() for p in row.split(",") if p.strip()]
        if len(parts) != 8:
            raise ValueError("Invalid export_csv_row: expected 8 slot tokens")


def _build_field_df(run_id: str, entrants: Sequence[Mapping[str, Any]]) -> pd.DataFrame:
    rows: list[dict[str, Any]] = []
    for i, e in enumerate(entrants, start=1):
        _sanity_check_entrant(e)
        origin = str(e.get("origin") or "variant")
        if origin not in ("variant", "optimizer", "external"):
            origin = "external"
        row: dict[str, Any] = {
            "run_id": run_id,
            "entrant_id": i,
            "origin": origin,
            "players": list(e.get("players") or []),
            "export_csv_row": str(e.get("export_csv_row") or ""),
            "weight": float(e.get("weight", 1.0)),
        }
        if "variant_id" in e:
            row["variant_id"] = str(e["variant_id"])  # optional by schema
        if "lineup_id" in e:
            row["lineup_id"] = str(e["lineup_id"])  # optional by schema
        rows.append(row)
    return pd.DataFrame(rows)


def _build_metrics_df(run_id: str, field_df: pd.DataFrame) -> pd.DataFrame:
    # Per-player exposure rates
    total = int(len(field_df))
    counts: dict[str, int] = {}
    for players in field_df["players"]:
        for p in players:
            counts[str(p)] = counts.get(str(p), 0) + 1
    per_player = (
        [
            {"dk_player_id": pid, "rate": (c / total if total > 0 else 0.0)}
            for pid, c in sorted(counts.items())
        ]
        if counts
        else []
    )
    # Duplication risk: max identical lineup count / total
    from collections import Counter

    lineup_keys = [tuple(sorted(map(str, players))) for players in field_df["players"]]
    dup_counts = Counter(lineup_keys)
    duplication_risk = (max(dup_counts.values()) / total) if total > 0 else 0.0
    row = {
        "run_id": run_id,
        "coverage": {"per_player": per_player},
        "duplication_risk": float(duplication_risk),
    }
    return pd.DataFrame([row])


def run_adapter(
    *,
    slate_id: str,
    config_path: Path | None,
    config_kv: Sequence[str] | None,
    seed: int,
    out_root: Path,
    tag: str | None = None,
    input_path: Path | None = None,
    input_paths: Sequence[Path] | None = None,
    from_run: str | None = None,
    schemas_root: Path | None = None,
    validate: bool = True,
) -> dict[str, Any]:
    created_ts = _utc_now_iso()
    out_root_eff = out_root

    # Resolve inputs
    catalogs = _find_input_variant_catalog(
        out_root=out_root_eff,
        slate_id=slate_id,
        explicit_input=input_path,
        from_run=from_run,
        inputs=input_paths,
    )
    cat_dfs = [pd.read_parquet(p) for p in catalogs]
    catalog_df = pd.concat(cat_dfs, ignore_index=True) if len(cat_dfs) > 1 else cat_dfs[0]

    # Build inputs list for manifest and hashes for run_id
    schemas_root = schemas_root or SCHEMAS_ROOT
    manifest_schema = load_schema(schemas_root / "manifest.schema.yaml")

    inputs_list: list[dict[str, Any]] = []
    cat_shas: list[str] = []
    for p in catalogs:
        sha = _sha256_of_path(p)
        cat_shas.append(sha)
        inputs_list.append({"path": str(p), "content_sha256": sha, "role": "variants"})

    cfg = load_config(config_path, config_kv)
    cfg_knobs = map_config_to_knobs(cfg)
    cfg_sha = hashlib.sha256(
        json.dumps(cfg_knobs, sort_keys=True, separators=(",", ":")).encode("utf-8")
    ).hexdigest()

    if config_path:
        inputs_list.append(
            {
                "path": str(config_path),
                "content_sha256": hashlib.sha256(config_path.read_bytes()).hexdigest(),
                "role": "config",
            }
        )
    if config_kv:
        kv_parsed: dict[str, Any] = {}
        for item in config_kv:
            if "=" not in item:
                continue
            k, v = item.split("=", 1)
            kv_parsed[k.strip()] = _coerce_scalar(v.strip())
        inputs_list.append(
            {
                "path": "inline:config_kv",
                "content_sha256": hashlib.sha256(
                    json.dumps(kv_parsed, sort_keys=True, separators=(",", ":")).encode("utf-8")
                ).hexdigest(),
                "role": "config",
            }
        )

    # Deterministic run_id: timestamp + short hash over inputs + cfg + seed
    ts = datetime.now(UTC)
    run_id_core = ts.strftime("%Y%m%d_%H%M%S")
    short_hash = hashlib.sha256(
        json.dumps({"inputs": cat_shas, "cfg": cfg_sha, "seed": int(seed)}, sort_keys=True).encode(
            "utf-8"
        )
    ).hexdigest()[:8]
    run_id = f"{run_id_core}_{short_hash}"

    # Execute sampler implementation
    sampler = _load_sampler()
    res = sampler(catalog_df, cfg_knobs, int(seed))
    if isinstance(res, tuple) and len(res) >= 1:
        entrants_obj = res[0]
        telemetry = dict(res[1]) if len(res) > 1 and isinstance(res[1], Mapping) else {}
    else:
        entrants_obj = res
        telemetry = {}

    # Normalize entrants into list[dict]
    try:
        import pandas as _pd  # local alias
    except Exception:  # pragma: no cover
        _pd = None
    if _pd is not None and isinstance(entrants_obj, _pd.DataFrame):
        entrants = list(entrants_obj.to_dict(orient="records"))
    elif isinstance(entrants_obj, list):
        entrants = list(entrants_obj)
    else:
        # Attempt to coerce generic iterables of mappings
        entrants = list(entrants_obj)  # type: ignore[arg-type]

    # Build artifacts in-memory and validate (fail-fast) before any writes
    field_df = _build_field_df(run_id, entrants)
    metrics_df = _build_metrics_df(run_id, field_df)
    if validate:
        field_schema = load_schema(schemas_root / "field.schema.yaml")
        metrics_schema = load_schema(schemas_root / "field_metrics.schema.yaml")
        for row in field_df.to_dict(orient="records"):
            validate_obj(field_schema, row, schemas_root=schemas_root)
        for row in metrics_df.to_dict(orient="records"):
            validate_obj(metrics_schema, row, schemas_root=schemas_root)

    # Prepare write locations
    run_dir = out_root_eff / "runs" / "field" / run_id
    artifacts_dir = run_dir / "artifacts"
    ensure_dir(artifacts_dir)
    field_path = artifacts_dir / "field.parquet"
    metrics_path = artifacts_dir / "metrics.parquet"

    # Write artifacts
    write_parquet(field_df, field_path)
    write_parquet(metrics_df, metrics_path)

    # Manifest
    manifest = {
        "schema_version": _schema_version(schemas_root, "manifest"),
        "run_id": run_id,
        "run_type": "field",
        "slate_id": slate_id,
        "created_ts": created_ts,
        "inputs": inputs_list,
        "config": cfg,
        "outputs": [
            {"path": str(field_path), "kind": "field"},
            {"path": str(metrics_path), "kind": "field_metrics"},
        ],
        "tags": [tag] if tag else [],
    }
    if validate:
        validate_obj(manifest_schema, manifest, schemas_root=schemas_root)
    (run_dir / "manifest.json").write_text(json.dumps(manifest, indent=2), encoding="utf-8")

    # Registry append
    registry_path = out_root_eff / "registry" / "runs.parquet"
    ensure_dir(registry_path.parent)
    reg_row = {
        "run_id": run_id,
        "run_type": "field",
        "slate_id": slate_id,
        "status": "success",
        "primary_outputs": [str(field_path)],
        "metrics_path": str(metrics_path),
        "created_ts": created_ts,
        "tags": [tag] if tag else [],
    }
    if validate:
        runs_registry_schema = load_schema(schemas_root / "runs_registry.schema.yaml")
        validate_obj(runs_registry_schema, reg_row, schemas_root=schemas_root)
    if registry_path.exists():
        existing = pd.read_parquet(registry_path)
        df = pd.concat([existing, pd.DataFrame([reg_row])], ignore_index=True)
    else:
        df = pd.DataFrame([reg_row])
    write_parquet(df, registry_path)

    return {
        "run_id": run_id,
        "field_path": str(field_path),
        "metrics_path": str(metrics_path),
        "manifest_path": str(run_dir / "manifest.json"),
        "registry_path": str(registry_path),
        "entrants": int(len(field_df)),
        "variant_catalog_paths": [str(p) for p in catalogs],
        "telemetry": telemetry,
    }


def _build_parser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser(prog="python -m processes.field_sampler")
    p.add_argument("--slate-id", required=True)
    p.add_argument("--config", type=Path)
    p.add_argument("--config-kv", nargs="*", help="Inline overrides key=value")
    p.add_argument("--seed", type=int, default=42)
    p.add_argument("--out-root", type=Path, default=Path("data"))
    p.add_argument("--tag", type=str)
    p.add_argument("--input", type=Path, help="Explicit variant_catalog parquet path")
    p.add_argument("--inputs", nargs="*", type=Path, help="Multiple catalog paths to merge")
    p.add_argument(
        "--from-run",
        type=str,
        help="Variants run_id to source catalog from (run_type=variants)",
    )
    p.add_argument(
        "--schemas-root",
        type=Path,
        help="Override schemas root (defaults to repo-relative pipeline/schemas)",
    )
    p.add_argument("--no-validate", action="store_true")
    p.add_argument("--verbose", action="store_true")
    return p


def main(argv: Sequence[str] | None = None) -> int:
    args = _build_parser().parse_args(argv)
    result = run_adapter(
        slate_id=args.slate_id,
        config_path=args.config,
        config_kv=args.config_kv,
        seed=int(args.seed),
        out_root=args.out_root,
        tag=args.tag,
        input_path=args.input,
        input_paths=args.inputs,
        from_run=args.from_run,
        schemas_root=args.schemas_root,
        validate=not args.no_validate,
    )
    if args.verbose:
        known = {
            "field_size",
            "source_mix",
            "sampling_mode",
            "ownership_curve",
            "diversity",
            "team_limits",
            "de-dup",
            "seed",
        }
        cfg = load_config(args.config, args.config_kv)
        unknown = sorted(set(cfg.keys()) - known - {"extras"})
        if unknown:
            print(
                f"[field] Warning: unknown config keys ignored/passthrough: {', '.join(unknown)}",
                file=sys.stderr,
            )
        inputs_msg = ",".join(result.get("variant_catalog_paths", []))
        print(
            f"[field] input={inputs_msg} run_id={result.get('run_id')} entrants={result.get('entrants')}",
            file=sys.stderr,
        )
    return 0


if __name__ == "__main__":  # pragma: no cover
    raise SystemExit(main())
</file>

<file path="processes/gpp_sim/_legacy/nba_gpp_simulator.py">
import collections
import csv
import datetime
import itertools
import json
import math
import multiprocessing as mp
import os
import re
import time
from collections import Counter

import numpy as np
import pandas as pd
import pulp as plp
from numba import jit
from scipy.stats import multivariate_normal


@jit(nopython=True)
def salary_boost(salary, max_salary):
    return (salary / max_salary) ** 2


class NBA_GPP_Simulator:
    config = None
    player_dict = {}
    field_lineups = {}
    stacks_dict = {}
    gen_lineup_list = []
    roster_construction = []
    id_name_dict = {}
    salary = None
    optimal_score = None
    field_size = None
    team_list = []
    num_iterations = None
    site = None
    payout_structure = {}
    use_contest_data = False
    entry_fee = None
    use_lineup_input = None
    matchups = set()
    projection_minimum = 15
    randomness_amount = 100
    min_lineup_salary = 48000
    max_pct_off_optimal = 0.4
    overlap_limit = 7
    teams_dict = collections.defaultdict(list)  # Initialize teams_dict
    correlation_rules = {}
    game_info = {}
    seen_lineups = {}
    seen_lineups_ix = {}
    position_map = {
        0: ["PG"],
        1: ["SG"],
        2: ["SF"],
        3: ["PF"],
        4: ["C"],
        5: ["PG", "SG"],
        6: ["SF", "PF"],
        7: ["PG", "SG", "SF", "PF", "C"],
    }

    def __init__(
        self,
        site,
        field_size,
        num_iterations,
        use_contest_data,
        use_lineup_input,
    ):
        self.site = site
        self.use_lineup_input = use_lineup_input
        self.load_config()
        self.load_rules()

        projection_path = os.path.join(
            os.path.dirname(__file__),
            "../{}_data/{}".format(site, self.config["projection_path"]),
        )
        self.load_projections(projection_path)

        player_path = os.path.join(
            os.path.dirname(__file__),
            "../{}_data/{}".format(site, self.config["player_path"]),
        )
        self.load_player_ids(player_path)

        if site == "dk":
            self.roster_construction = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
            self.salary = 50000

        elif site == "fd":
            self.roster_construction = [
                "PG",
                "PG",
                "SG",
                "SG",
                "SF",
                "SF",
                "PF",
                "PF",
                "C",
            ]
            self.salary = 60000

        self.use_contest_data = use_contest_data
        if use_contest_data:
            contest_path = os.path.join(
                os.path.dirname(__file__),
                "../{}_data/{}".format(site, self.config["contest_structure_path"]),
            )
            self.load_contest_data(contest_path)
            print("Contest payout structure loaded.")
        else:
            self.field_size = int(field_size)
            self.payout_structure = {0: 0.0}
            self.entry_fee = 0

        # self.adjust_default_stdev()
        self.assertPlayerDict()
        self.num_iterations = int(num_iterations)
        self.get_optimal()
        if self.use_lineup_input:
            self.load_lineups_from_file()
        # if self.match_lineup_input_to_field_size or len(self.field_lineups) == 0:
        # self.generate_field_lineups()
        self.load_correlation_rules()

    # make column lookups on datafiles case insensitive
    def lower_first(self, iterator):
        return itertools.chain([next(iterator).lower()], iterator)

    def load_rules(self):
        self.projection_minimum = int(self.config["projection_minimum"])
        self.randomness_amount = float(self.config["randomness"])
        self.min_lineup_salary = int(self.config["min_lineup_salary"])
        self.max_pct_off_optimal = float(self.config["max_pct_off_optimal"])
        self.default_var = float(self.config["default_var"])
        self.correlation_rules = self.config["custom_correlations"]

    def assertPlayerDict(self):
        for p, s in list(self.player_dict.items()):
            if s["ID"] == 0 or s["ID"] == "" or s["ID"] is None:
                print(
                    s["Name"]
                    + " name mismatch between projections and player ids, excluding from player_dict"
                )
                self.player_dict.pop(p)

    # In order to make reasonable tournament lineups, we want to be close enough to the optimal that
    # a person could realistically land on this lineup. Skeleton here is taken from base `mlb_optimizer.py`
    def get_optimal(self):
        # print(s['Name'],s['ID'])
        # print(self.player_dict)
        problem = plp.LpProblem("NBA", plp.LpMaximize)
        lp_variables = {
            self.player_dict[(player, pos_str, team)]["ID"]: plp.LpVariable(
                str(self.player_dict[(player, pos_str, team)]["UniqueKey"]),
                cat="Binary",
            )
            for (player, pos_str, team) in self.player_dict
        }

        # set the objective - maximize fpts
        problem += (
            plp.lpSum(
                self.player_dict[(player, pos_str, team)]["fieldFpts"]
                * lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                for (player, pos_str, team) in self.player_dict
            ),
            "Objective",
        )

        # Set the salary constraints
        problem += (
            plp.lpSum(
                self.player_dict[(player, pos_str, team)]["Salary"]
                * lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                for (player, pos_str, team) in self.player_dict
            )
            <= self.salary
        )

        if self.site == "dk":
            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "PG" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                >= 1
            )

            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "PG" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                <= 3
            )

            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "SG" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                >= 1
            )

            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "SG" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                <= 3
            )

            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "SF" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                >= 1
            )

            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "SF" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                <= 3
            )

            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "PF" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                >= 1
            )

            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "PF" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                <= 3
            )

            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "C" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                >= 1
            )

            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "C" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                <= 2
            )

            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "PG" in self.player_dict[(player, pos_str, team)]["Position"]
                    or "SG" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                >= 3
            )

            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "SF" in self.player_dict[(player, pos_str, team)]["Position"]
                    or "PF" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                >= 3
            )

            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "PG" in self.player_dict[(player, pos_str, team)]["Position"]
                    or "C" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                <= 4
            )

            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                )
                == 8
            )

            # Max 8 per team in case of weird issues with stacking on short slates
            for team in self.team_list:
                problem += (
                    plp.lpSum(
                        lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                        for (player, pos_str, team) in self.player_dict
                        if self.player_dict[(player, pos_str, team)]["Team"] == team
                    )
                    <= 7
                )

        elif self.site == "fd":
            # Need at least 2 RBs can have up to 3 with FLEX slot
            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "PG" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                >= 2
            )
            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "PG" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                <= 5
            )
            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "SG" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                >= 2
            )
            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "SG" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                <= 5
            )
            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "SF" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                >= 2
            )
            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "SF" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                <= 5
            )
            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "PF" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                >= 2
            )
            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "PF" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                <= 5
            )
            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "C" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                >= 1
            )
            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                    if "C" in self.player_dict[(player, pos_str, team)]["Position"]
                )
                <= 4
            )
            # Can only roster 9 total players
            problem += (
                plp.lpSum(
                    lp_variables[self.player_dict[(player, pos_str, team)]["UniqueKey"]]
                    for (player, pos_str, team) in self.player_dict
                )
                == 9
            )
            # Max 4 per team
            for team in self.team_list:
                problem += (
                    plp.lpSum(
                        lp_variables[self.player_dict[(player, pos_str, team)]["ID"]]
                        for (player, pos_str, team) in self.player_dict
                        if self.player_dict[(player, pos_str, team)]["Team"] == team
                    )
                    <= 4
                )

        try:
            problem.solve(plp.PULP_CBC_CMD(msg=0))
        except plp.PulpSolverError:
            print(
                f"Infeasibility reached - only generated {len(self.num_lineups)} lineups out of {self.num_lineups}. Continuing with export."
            )

        # Get the lineup and add it to our list
        player_unqiue_keys = [
            player for player in lp_variables if lp_variables[player].varValue != 0
        ]
        players = []
        for key, value in self.player_dict.items():
            if value["UniqueKey"] in player_unqiue_keys:
                players.append(key)

        fpts_proj = sum(self.player_dict[player]["fieldFpts"] for player in players)
        # sal_used = sum(self.player_dict[player]["Salary"] for player in players)

        [value.varValue for value in problem.variables() if value.varValue != 0]
        player_unqiue_keys = [
            player for player in lp_variables if lp_variables[player].varValue != 0
        ]

        self.optimal_score = float(fpts_proj)
        # print(self.optimal_score, player_unqiue_keys, var_values)

    @staticmethod
    def extract_matchup_time(game_string):
        # Extract the matchup, date, and time
        match = re.match(
            r"(\w{2,4}@\w{2,4}) (\d{2}/\d{2}/\d{4}) (\d{2}:\d{2}[APM]{2} ET)",
            game_string,
        )

        if match:
            matchup, date, time = match.groups()
            # Convert 12-hour time format to 24-hour format
            time_obj = datetime.datetime.strptime(time, "%I:%M%p ET")
            # Convert the date string to datetime.date
            date_obj = datetime.datetime.strptime(date, "%m/%d/%Y").date()
            # Combine date and time to get a full datetime object
            datetime_obj = datetime.datetime.combine(date_obj, time_obj.time())
            return matchup, datetime_obj
        return None

    def load_player_ids(self, path):
        with open(path, encoding="utf-8-sig") as file:
            reader = csv.DictReader(self.lower_first(file))
            for row in reader:
                name_key = "name" if self.site == "dk" else "nickname"
                player_name = row[name_key].replace("-", "#").lower().strip()
                # some players have 2 positions - will be listed like 'PG/SF' or 'PF/C'
                position = [pos for pos in row["position"].split("/")]
                position.sort()
                if any(pos in ["PG", "SG"] for pos in position):
                    position.append("G")
                if any(pos in ["SF", "PF"] for pos in position):
                    position.append("F")
                position.append("UTIL")
                team_key = "teamabbrev" if self.site == "dk" else "team"
                team = row[team_key]
                game_info = "game info" if self.site == "dk" else "game"
                game_info_str = row["game info"] if self.site == "dk" else row["game"]
                result = self.extract_matchup_time(game_info_str)
                match = re.search(pattern="(\w{2,4}@\w{2,4})", string=row[game_info])
                if match:
                    opp = match.groups()[0].split("@")
                    self.matchups.add((opp[0], opp[1]))
                    for m in opp:
                        if m != team:
                            team_opp = m
                    opp = tuple(opp)
                if result:
                    matchup, game_time = result
                    self.game_info[opp] = game_time
                pos_str = str(position)
                # print(player_name, pos_str, team)
                if (player_name, pos_str, team) in self.player_dict:
                    self.player_dict[(player_name, pos_str, team)]["ID"] = str(row["id"])
                    self.player_dict[(player_name, pos_str, team)]["UniqueKey"] = str(row["id"])
                    self.player_dict[(player_name, pos_str, team)]["Team"] = row[team_key]
                    self.player_dict[(player_name, pos_str, team)]["Opp"] = team_opp
                    self.player_dict[(player_name, pos_str, team)]["Matchup"] = opp
                self.id_name_dict[str(row["id"])] = row[name_key]

    def load_contest_data(self, path):
        with open(path, encoding="utf-8-sig") as file:
            reader = csv.DictReader(self.lower_first(file))
            for row in reader:
                if self.field_size is None:
                    self.field_size = int(row["field size"])
                if self.entry_fee is None:
                    self.entry_fee = float(row["entry fee"])
                # multi-position payouts
                if "-" in row["place"]:
                    indices = row["place"].split("-")
                    # print(indices)
                    # have to add 1 to range to get it to generate value for everything
                    for i in range(int(indices[0]), int(indices[1]) + 1):
                        # print(i)
                        # Where I'm from, we 0 index things. Thus, -1 since Payout starts at 1st place
                        if i >= self.field_size:
                            break
                        self.payout_structure[i - 1] = float(row["payout"].replace(",", ""))
                # single-position payouts
                else:
                    if int(row["place"]) >= self.field_size:
                        break
                    self.payout_structure[int(row["place"]) - 1] = float(
                        row["payout"].replace(",", "")
                    )
        # print(self.payout_structure)

    def load_correlation_rules(self):
        if len(self.correlation_rules.keys()) > 0:
            for primary_player in self.correlation_rules.keys():
                # Convert primary_player to the consistent format
                formatted_primary_player = primary_player.replace("-", "#").lower().strip()
                for (
                    player_name,
                    _pos_str,
                    _team,
                ), player_data in self.player_dict.items():
                    if formatted_primary_player == player_name:
                        for second_entity, correlation_value in self.correlation_rules[
                            primary_player
                        ].items():
                            # Convert second_entity to the consistent format
                            formatted_second_entity = (
                                second_entity.replace("-", "#").lower().strip()
                            )

                            # Check if the formatted_second_entity is a player name
                            found_second_entity = False
                            for (
                                se_name,
                                _se_pos_str,
                                _se_team,
                            ), se_data in self.player_dict.items():
                                if formatted_second_entity == se_name:
                                    player_data["Player Correlations"][
                                        formatted_second_entity
                                    ] = correlation_value
                                    se_data["Player Correlations"][
                                        formatted_primary_player
                                    ] = correlation_value
                                    found_second_entity = True
                                    break

                            # If the second_entity is not found as a player, assume it's a position and update 'Correlations'
                            if not found_second_entity:
                                player_data["Correlations"][second_entity] = correlation_value

    # Load config from file
    def load_config(self):
        with open(
            os.path.join(os.path.dirname(__file__), "../config.json"),
            encoding="utf-8-sig",
        ) as json_file:
            self.config = json.load(json_file)

    # Load projections from file
    def load_projections(self, path):
        # Read projections into a dictionary
        with open(path, encoding="utf-8-sig") as file:
            reader = csv.DictReader(self.lower_first(file))
            for row in reader:
                player_name = row["name"].replace("-", "#").lower().strip()
                try:
                    fpts = float(row["fpts"])
                except Exception:
                    fpts = 0
                    print("unable to load player fpts: " + player_name + ", fpts:" + row["fpts"])
                if "fieldfpts" in row:
                    if row["fieldfpts"] == "":
                        fieldFpts = fpts
                    else:
                        fieldFpts = float(row["fieldfpts"])
                else:
                    fieldFpts = fpts
                position = [pos for pos in row["position"].split("/")]
                position.sort()
                if any(pos in ["PG", "SG"] for pos in position):
                    position.append("G")
                if any(pos in ["SF", "PF"] for pos in position):
                    position.append("F")
                position.append("UTIL")
                pos = position[0]
                if "stddev" in row:
                    if row["stddev"] == "" or float(row["stddev"]) == 0:
                        stddev = fpts * self.default_var
                    else:
                        stddev = float(row["stddev"])
                else:
                    stddev = fpts * self.default_var
                # check if ceiling exists in row columns
                if "ceiling" in row:
                    if row["ceiling"] == "" or float(row["ceiling"]) == 0:
                        ceil = fpts + stddev
                    else:
                        ceil = float(row["ceiling"])
                else:
                    ceil = fpts + stddev
                if row["salary"]:
                    int(row["salary"].replace(",", ""))
                if "minutes" in row:
                    mins = row["minutes"]
                else:
                    mins = 0
                if pos == "PG":
                    corr = {
                        "PG": 1,
                        "SG": -0.066989,
                        "SF": -0.066989,
                        "PF": -0.066989,
                        "C": -0.043954,
                        "Opp PG": 0.020682,
                        "Opp SG": 0.020682,
                        "Opp SF": 0.015477,
                        "Opp PF": 0.015477,
                        "Opp C": 0.000866,
                    }
                elif pos == "SG":
                    corr = {
                        "PG": -0.066989,
                        "SG": 1,
                        "SF": -0.066989,
                        "PF": -0.066989,
                        "C": -0.043954,
                        "Opp PG": 0.020682,
                        "Opp SG": 0.020682,
                        "Opp SF": 0.015477,
                        "Opp PF": 0.015477,
                        "Opp C": 0.000866,
                    }
                elif pos == "SF":
                    corr = {
                        "PG": -0.066989,
                        "SG": -0.066989,
                        "SF": 1,
                        "PF": -0.002143,
                        "C": -0.082331,
                        "Opp PG": 0.015477,
                        "Opp SG": 0.015477,
                        "Opp SF": 0.015477,
                        "Opp PF": 0.015477,
                        "Opp C": -0.012331,
                    }
                elif pos == "PF":
                    corr = {
                        "PG": -0.066989,
                        "SG": -0.066989,
                        "SF": -0.002143,
                        "PF": 1,
                        "C": -0.082331,
                        "Opp PG": 0.015477,
                        "Opp SG": 0.015477,
                        "Opp SF": 0.015477,
                        "Opp PF": 0.015477,
                        "Opp C": -0.012331,
                    }
                elif pos == "C":
                    corr = {
                        "PG": -0.043954,
                        "SG": -0.043954,
                        "SF": -0.082331,
                        "PF": -0.082331,
                        "C": 1,
                        "Opp PG": 0.000866,
                        "Opp SG": 0.000866,
                        "Opp SF": -0.012331,
                        "Opp PF": -0.012331,
                        "Opp C": -0.073081,
                    }
                team = row["team"]
                own = float(row["own%"].replace("%", ""))
                if own == 0:
                    own = 0.1
                pos_str = str(position)
                player_data = {
                    "Fpts": fpts,
                    "fieldFpts": fieldFpts,
                    "Position": position,
                    "Name": player_name,
                    "DK Name": row["name"],
                    "Team": team,
                    "Opp": "",
                    "ID": "",
                    "UniqueKey": "",
                    "Salary": int(row["salary"].replace(",", "")),
                    "StdDev": stddev,
                    "Ceiling": ceil,
                    "Ownership": own,
                    "Correlations": corr,
                    "Player Correlations": {},
                    "In Lineup": False,
                    "Minutes": mins,
                }

                # Check if player is in player_dict and get Opp, ID, Opp Pitcher ID and Opp Pitcher Name
                if (player_name, pos_str, team) in self.player_dict:
                    player_data["Opp"] = self.player_dict[(player_name, pos_str, team)].get(
                        "Opp", ""
                    )
                    player_data["ID"] = self.player_dict[(player_name, pos_str, team)].get("ID", "")

                self.player_dict[(player_name, pos_str, team)] = player_data
                self.teams_dict[team].append(
                    player_data
                )  # Add player data to their respective team

    def extract_id(self, cell_value):
        if "(" in cell_value and ")" in cell_value:
            return cell_value.split("(")[1].replace(")", "")
        elif ":" in cell_value:
            return cell_value.split(":")[0]
        else:
            return cell_value

    def load_lineups_from_file(self):
        print("loading lineups")
        i = 0
        path = os.path.join(
            os.path.dirname(__file__),
            "../{}_data/{}".format(self.site, "tournament_lineups.csv"),
        )
        with open(path) as file:
            reader = pd.read_csv(file)
            lineup = []
            bad_players = []
            j = 0
            for i, row in reader.iterrows():
                if i == self.field_size:
                    break
                lineup = [
                    self.extract_id(str(row[q])) for q in range(len(self.roster_construction))
                ]
                # storing if this lineup was made by an optimizer or with the generation process in this script
                error = False
                for player_id in lineup:
                    ids = [self.player_dict[k]["ID"] for k in self.player_dict]
                    if player_id not in ids:
                        print(f"player id {player_id} in lineup {i} not found in player dict")
                        if player_id in self.id_name_dict:
                            print(self.id_name_dict[player_id])
                        bad_players.append(player_id)
                        error = True
                if len(lineup) < len(self.roster_construction):
                    print(f"lineup {i} doesn't match roster construction size")
                    continue
                # storing if this lineup was made by an optimizer or with the generation process in this script
                error = False
                if not error:
                    lineup_list = sorted(lineup)
                    lineup_set = frozenset(lineup_list)

                    # Keeping track of lineup duplication counts
                    if lineup_set in self.seen_lineups:
                        self.seen_lineups[lineup_set] += 1
                    else:
                        self.field_lineups[j] = {
                            "Lineup": lineup,
                            "Wins": 0,
                            "Top1Percent": 0,
                            "ROI": 0,
                            "Cashes": 0,
                            "Type": "opto",
                            "Count": 1,
                        }

                        # Add to seen_lineups and seen_lineups_ix
                        self.seen_lineups[lineup_set] = 1
                        self.seen_lineups_ix[lineup_set] = j

                        j += 1
        print(f"loaded {j} lineups")
        # print(self.field_lineups)

    @staticmethod
    def generate_lineups(
        lu_num,
        ids,
        in_lineup,
        pos_matrix,
        ownership,
        salary_floor,
        salary_ceiling,
        optimal_score,
        salaries,
        projections,
        max_pct_off_optimal,
        teams,
        opponents,
        overlap_limit,
        matchups,
        num_players_in_roster,
        site,
    ):
        # new random seed for each lineup (without this there is a ton of dupes)
        rng = np.random.Generator(np.random.PCG64())
        lus = {}
        # make sure nobody is already showing up in a lineup
        if sum(in_lineup) != 0:
            in_lineup.fill(0)
        reject = True
        iteration_count = 0
        total_players = num_players_in_roster
        reasonable_projection = optimal_score - (max_pct_off_optimal * optimal_score)
        max_players_per_team = 4 if site == "fd" else None
        while reject:
            iteration_count += 1
            salary = 0
            proj = 0
            if sum(in_lineup) != 0:
                in_lineup.fill(0)
            lineup = []
            player_teams = []
            players_opposing_def = 0
            lineup_matchups = []
            k = 0
            for pos in pos_matrix.T:
                if k < 1:
                    # check for players eligible for the position and make sure they arent in a lineup, returns a list of indices of available player
                    valid_players = np.nonzero((pos > 0) & (in_lineup == 0))[0]
                    # grab names of players eligible
                    plyr_list = ids[valid_players]
                    # create np array of probability of being seelcted based on ownership and who is eligible at the position
                    prob_list = ownership[valid_players]
                    prob_list = prob_list / prob_list.sum()
                    try:
                        choice = rng.choice(plyr_list, p=prob_list)
                    except Exception:
                        print(plyr_list, prob_list)
                        print("find failed on nonstack and first player selection")
                    choice_idx = np.nonzero(ids == choice)[0]
                    lineup.append(str(choice))
                    in_lineup[choice_idx] = 1
                    salary += salaries[choice_idx]
                    proj += projections[choice_idx]
                    lineup_matchups.append(matchups[choice_idx[0]])
                    player_teams.append(teams[choice_idx][0])
                if k >= 1:
                    remaining_salary = salary_ceiling - salary
                    if players_opposing_def < overlap_limit:
                        if k == total_players - 1:
                            valid_players = np.nonzero(
                                (pos > 0)
                                & (in_lineup == 0)
                                & (salaries <= remaining_salary)
                                & (salary + salaries >= salary_floor)
                            )[0]
                        else:
                            valid_players = np.nonzero(
                                (pos > 0) & (in_lineup == 0) & (salaries <= remaining_salary)
                            )[0]
                        # grab names of players eligible
                        plyr_list = ids[valid_players]
                        # create np array of probability of being seelcted based on ownership and who is eligible at the position
                        prob_list = ownership[valid_players]
                        prob_list = prob_list / prob_list.sum()
                        if k == total_players - 1:
                            boosted_salaries = np.array(
                                [salary_boost(s, salary_ceiling) for s in salaries[valid_players]]
                            )
                            boosted_probabilities = prob_list * boosted_salaries
                            boosted_probabilities /= (
                                boosted_probabilities.sum()
                            )  # normalize to ensure it sums to 1
                        try:
                            if k == total_players - 1:
                                choice = rng.choice(plyr_list, p=boosted_probabilities)
                            else:
                                choice = rng.choice(plyr_list, p=prob_list)
                        except Exception:
                            # if remaining_salary <= np.min(salaries):
                            #     reject_counters["salary_too_high"] += 1
                            # else:
                            #     reject_counters["salary_too_low"]
                            salary = 0
                            proj = 0
                            lineup = []
                            player_teams = []
                            players_opposing_def = 0
                            lineup_matchups = []
                            in_lineup.fill(0)  # Reset the in_lineup array
                            k = 0  # Reset the player index
                            continue  # Skip to the next iteration of the while loop
                        choice_idx = np.nonzero(ids == choice)[0]
                        lineup.append(str(choice))
                        in_lineup[choice_idx] = 1
                        salary += salaries[choice_idx]
                        proj += projections[choice_idx]
                        player_teams.append(teams[choice_idx][0])
                        lineup_matchups.append(matchups[choice_idx[0]])
                        if max_players_per_team is not None:
                            team_count = Counter(player_teams)
                            if any(count > max_players_per_team for count in team_count.values()):
                                salary = 0
                                proj = 0
                                lineup = []
                                player_teams = []
                                players_opposing_def = 0
                                lineup_matchups = []
                                in_lineup.fill(0)  # Reset the in_lineup array
                                k = 0  # Reset the player index
                                continue  # Skip to the next iteration of the while loop
                    else:
                        if k == total_players - 1:
                            valid_players = np.nonzero(
                                (pos > 0)
                                & (in_lineup == 0)
                                & (salaries <= remaining_salary)
                                & (salary + salaries >= salary_floor)
                            )[0]
                        else:
                            valid_players = np.nonzero(
                                (pos > 0) & (in_lineup == 0) & (salaries <= remaining_salary)
                            )[0]
                        # grab names of players eligible
                        plyr_list = ids[valid_players]
                        # create np array of probability of being seelcted based on ownership and who is eligible at the position
                        prob_list = ownership[valid_players]
                        prob_list = prob_list / prob_list.sum()
                        if k == total_players - 1:
                            boosted_salaries = np.array(
                                [salary_boost(s, salary_ceiling) for s in salaries[valid_players]]
                            )
                            boosted_probabilities = prob_list * boosted_salaries
                            boosted_probabilities /= (
                                boosted_probabilities.sum()
                            )  # normalize to ensure it sums to 1
                        try:
                            if k == total_players - 1:
                                choice = rng.choice(plyr_list, p=boosted_probabilities)
                            else:
                                choice = rng.choice(plyr_list, p=prob_list)
                        except Exception:
                            salary = 0
                            proj = 0
                            lineup = []
                            player_teams = []
                            players_opposing_def = 0
                            lineup_matchups = []
                            in_lineup.fill(0)  # Reset the in_lineup array
                            k = 0  # Reset the player index
                            continue  # Skip to the next iteration of the while loop
                            # if remaining_salary <= np.min(salaries):
                            #     reject_counters["salary_too_high"] += 1
                            # else:
                            #     reject_counters["salary_too_low"]
                        choice_idx = np.nonzero(ids == choice)[0]
                        lineup.append(str(choice))
                        in_lineup[choice_idx] = 1
                        salary += salaries[choice_idx]
                        proj += projections[choice_idx]
                        player_teams.append(teams[choice_idx][0])
                        lineup_matchups.append(matchups[choice_idx[0]])
                        if max_players_per_team is not None:
                            team_count = Counter(player_teams)
                            if any(count > max_players_per_team for count in team_count.values()):
                                salary = 0
                                proj = 0
                                lineup = []
                                player_teams = []
                                players_opposing_def = 0
                                lineup_matchups = []
                                in_lineup.fill(0)  # Reset the in_lineup array
                                k = 0  # Reset the player index
                                continue  # Skip to the next iteration of the while loop
                k += 1
            # Must have a reasonable salary
            # if salary > salary_ceiling:
            #     reject_counters["salary_too_high"] += 1
            # elif salary < salary_floor:
            #     reject_counters["salary_too_low"] += 1
            if salary >= salary_floor and salary <= salary_ceiling:
                # Must have a reasonable projection (within 60% of optimal) **people make a lot of bad lineups
                if proj >= reasonable_projection:
                    if len(set(lineup_matchups)) > 1:
                        if max_players_per_team is not None:
                            team_count = Counter(player_teams)
                            if all(count <= max_players_per_team for count in team_count.values()):
                                reject = False
                                lus[lu_num] = {
                                    "Lineup": lineup,
                                    "Wins": 0,
                                    "Top1Percent": 0,
                                    "ROI": 0,
                                    "Cashes": 0,
                                    "Type": "generated",
                                    "Count": 0,
                                }
                        else:
                            reject = False
                            lus[lu_num] = {
                                "Lineup": lineup,
                                "Wins": 0,
                                "Top1Percent": 0,
                                "ROI": 0,
                                "Cashes": 0,
                                "Type": "generated",
                                "Count": 0,
                            }
                        # complete = 'completed'
                        # print(str(lu_num) + ' ' + complete)
                #     else:
                #         reject_counters["invalid_matchups"] += 1
                # else:
                #     reject_counters["projection_too_low"] += 1
        return lus

    def generate_field_lineups(self):
        diff = self.field_size - len(self.field_lineups)
        if diff <= 0:
            print(
                "supplied lineups >= contest field size. only retrieving the first "
                + str(self.field_size)
                + " lineups"
            )
        else:
            print("Generating " + str(diff) + " lineups.")
            ids = []
            ownership = []
            salaries = []
            projections = []
            positions = []
            teams = []
            opponents = []
            matchups = []
            # put def first to make it easier to avoid overlap
            for k in self.player_dict.keys():
                if "Team" not in self.player_dict[k].keys():
                    print(
                        self.player_dict[k]["Name"],
                        " name mismatch between projections and player ids!",
                    )
                ids.append(self.player_dict[k]["UniqueKey"])
                ownership.append(self.player_dict[k]["Ownership"])
                salaries.append(self.player_dict[k]["Salary"])
                if self.player_dict[k]["fieldFpts"] >= self.projection_minimum:
                    projections.append(self.player_dict[k]["fieldFpts"])
                else:
                    projections.append(0)
                teams.append(self.player_dict[k]["Team"])
                opponents.append(self.player_dict[k]["Opp"])
                matchups.append(self.player_dict[k]["Matchup"])
                pos_list = []
                for pos in self.roster_construction:
                    if pos in self.player_dict[k]["Position"]:
                        pos_list.append(1)
                    else:
                        pos_list.append(0)
                positions.append(np.array(pos_list))
            in_lineup = np.zeros(shape=len(ids))
            ownership = np.array(ownership)
            salaries = np.array(salaries)
            projections = np.array(projections)
            pos_matrix = np.array(positions)
            ids = np.array(ids)
            optimal_score = self.optimal_score
            salary_floor = self.min_lineup_salary
            salary_ceiling = self.salary
            max_pct_off_optimal = self.max_pct_off_optimal
            teams = np.array(teams)
            opponents = np.array(opponents)
            overlap_limit = self.overlap_limit
            problems = []
            num_players_in_roster = len(self.roster_construction)
            # creating tuples of the above np arrays plus which lineup number we are going to create
            for i in range(diff):
                lu_tuple = (
                    i,
                    ids,
                    in_lineup,
                    pos_matrix,
                    ownership,
                    salary_floor,
                    salary_ceiling,
                    optimal_score,
                    salaries,
                    projections,
                    max_pct_off_optimal,
                    teams,
                    opponents,
                    overlap_limit,
                    matchups,
                    num_players_in_roster,
                    self.site,
                )
                problems.append(lu_tuple)
            # print(problems[0])
            start_time = time.time()
            with mp.Pool() as pool:
                output = pool.starmap(self.generate_lineups, problems)
                print(
                    "number of running processes =",
                    (
                        pool.__dict__["_processes"]
                        if (pool.__dict__["_state"]).upper() == "RUN"
                        else None
                    ),
                )
                pool.close()
                pool.join()
            print("pool closed")
            self.update_field_lineups(output, diff)
            end_time = time.time()
            print("lineups took " + str(end_time - start_time) + " seconds")
            print(str(diff) + " field lineups successfully generated")
            # print("Reject counters:", dict(overall_reject_counters))

            # print(self.field_lineups)

    def get_start_time(self, player_id):
        for _, player in self.player_dict.items():
            if player["ID"] == player_id:
                matchup = player["Matchup"]
                return self.game_info[matchup]
        return None

    def get_player_attribute(self, player_id, attribute):
        for _, player in self.player_dict.items():
            if player["ID"] == player_id:
                return player.get(attribute, None)
        return None

    def is_valid_for_position(self, player, position_idx):
        return any(
            pos in self.position_map[position_idx]
            for pos in self.get_player_attribute(player, "Position")
        )

    def sort_lineup_by_start_time(self, lineup):
        # Iterate over the entire roster construction
        for i, position in enumerate(
            self.roster_construction
        ):  # ['PG','SG','SF','PF','C','G','F','UTIL']
            # Only check G, F, and UTIL positions
            if position in ["G", "F", "UTIL"]:
                current_player = lineup[i]
                current_player_start_time = self.get_start_time(current_player)

                # Look for a swap candidate among primary positions
                for primary_i, _primary_pos in enumerate(
                    self.roster_construction[:5]
                ):  # Only the primary positions (0 to 4)
                    primary_player = lineup[primary_i]
                    primary_player_start_time = self.get_start_time(primary_player)

                    # Check the conditions for the swap
                    if (
                        primary_player_start_time > current_player_start_time
                        and self.is_valid_for_position(primary_player, i)
                        and self.is_valid_for_position(current_player, primary_i)
                    ):
                        # Perform the swap
                        lineup[i], lineup[primary_i] = lineup[primary_i], lineup[i]
                        break  # Break out of the inner loop once a swap is made
        return lineup

    def update_field_lineups(self, output, diff):
        if len(self.field_lineups) == 0:
            new_keys = list(range(0, self.field_size))
        else:
            new_keys = list(
                range(
                    max(self.field_lineups.keys()) + 1,
                    max(self.field_lineups.keys()) + 1 + diff,
                )
            )

        nk = new_keys[0]
        for _i, o in enumerate(output):
            lineup_list = sorted(next(iter(o.values()))["Lineup"])
            lineup_set = frozenset(lineup_list)

            # Keeping track of lineup duplication counts
            if lineup_set in self.seen_lineups:
                self.seen_lineups[lineup_set] += 1

                # Increase the count in field_lineups using the index stored in seen_lineups_ix
                self.field_lineups[self.seen_lineups_ix[lineup_set]]["Count"] += 1
            else:
                self.seen_lineups[lineup_set] = 1

                # Updating the field lineups dictionary
                if nk in self.field_lineups.keys():
                    print("bad lineups dict, please check dk_data files")
                else:
                    if self.site == "dk":
                        sorted_lineup = self.sort_lineup_by_start_time(
                            next(iter(o.values()))["Lineup"]
                        )
                    else:
                        sorted_lineup = next(iter(o.values()))["Lineup"]

                    self.field_lineups[nk] = next(iter(o.values()))
                    self.field_lineups[nk]["Lineup"] = sorted_lineup
                    self.field_lineups[nk]["Count"] += self.seen_lineups[lineup_set]
                    # Store the new nk in seen_lineups_ix for quick access in the future
                    self.seen_lineups_ix[lineup_set] = nk
                    nk += 1

    def calc_gamma(self, mean, sd):
        alpha = (mean / sd) ** 2
        beta = sd**2 / mean
        return alpha, beta

    @staticmethod
    def run_simulation_for_game(
        team1_id,
        team1,
        team2_id,
        team2,
        num_iterations,
        roster_construction,
    ):
        # Define correlations between positions

        def get_corr_value(player1, player2):
            # First, check for specific player-to-player correlations
            if player2["Name"] in player1.get("Player Correlations", {}):
                return player1["Player Correlations"][player2["Name"]]

            # If no specific correlation is found, proceed with the general logic
            position_correlations = {
                "PG": -0.1324,
                "SG": -0.1324,
                "SF": -0.0812,
                "PF": -0.0812,
                "C": -0.1231,
            }

            if (
                player1["Team"] == player2["Team"]
                and player1["Position"][0] == player2["Position"][0]
            ):
                primary_position = player1["Position"][0]
                return position_correlations[primary_position]

            if player1["Team"] != player2["Team"]:
                player_2_pos = "Opp " + str(player2["Position"][0])
            else:
                player_2_pos = player2["Position"][0]

            return player1["Correlations"].get(
                player_2_pos, 0
            )  # Default to 0 if no correlation is found

        def build_covariance_matrix(players):
            N = len(players)
            matrix = [[0 for _ in range(N)] for _ in range(N)]
            corr_matrix = [[0 for _ in range(N)] for _ in range(N)]

            for i in range(N):
                for j in range(N):
                    if i == j:
                        matrix[i][j] = players[i]["StdDev"] ** 2  # Variance on the diagonal
                        corr_matrix[i][j] = 1
                    else:
                        matrix[i][j] = (
                            get_corr_value(players[i], players[j])
                            * players[i]["StdDev"]
                            * players[j]["StdDev"]
                        )
                        corr_matrix[i][j] = get_corr_value(players[i], players[j])
            return matrix, corr_matrix

        def ensure_positive_semidefinite(matrix):
            eigs = np.linalg.eigvals(matrix)
            if np.any(eigs < 0):
                jitter = abs(min(eigs)) + 1e-6  # a small value
                matrix += np.eye(len(matrix)) * jitter
            return matrix

        game = team1 + team2
        covariance_matrix, corr_matrix = build_covariance_matrix(game)
        # print(team1_id, team2_id)
        # print(corr_matrix)
        corr_matrix = np.array(corr_matrix)

        # Given eigenvalues and eigenvectors from previous code
        eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)

        # Set negative eigenvalues to zero
        eigenvalues[eigenvalues < 0] = 0

        # Reconstruct the matrix
        covariance_matrix = eigenvectors.dot(np.diag(eigenvalues)).dot(eigenvectors.T)

        try:
            samples = multivariate_normal.rvs(
                mean=[player["Fpts"] for player in game],
                cov=covariance_matrix,
                size=num_iterations,
            )
        except Exception:
            print(team1_id, team2_id, "bad matrix")

        player_samples = []
        for i, player in enumerate(game):
            if "QB" in player["Position"]:
                sample = samples[:, i]
            else:
                sample = samples[:, i]
            # if player['Team'] in ['LAR','SEA']:
            #     print(player['Name'], player['Fpts'], player['StdDev'], sample, np.mean(sample), np.std(sample))
            player_samples.append(sample)

        temp_fpts_dict = {}
        # print(team1_id, team2_id, len(game), uniform_samples.T.shape, len(player_samples), covariance_matrix.shape )

        for i, player in enumerate(game):
            temp_fpts_dict[player["ID"]] = player_samples[i]

        # fig, (ax1, ax2, ax3,ax4) = plt.subplots(4, figsize=(15, 25))
        # fig.tight_layout(pad=5.0)

        # for i, player in enumerate(game):
        #     sns.kdeplot(player_samples[i], ax=ax1, label=player['Name'])

        # ax1.legend(loc='upper right', fontsize=14)
        # ax1.set_xlabel('Fpts', fontsize=14)
        # ax1.set_ylabel('Density', fontsize=14)
        # ax1.set_title(f'Team {team1_id}{team2_id} Distributions', fontsize=14)
        # ax1.tick_params(axis='both', which='both', labelsize=14)

        # y_min, y_max = ax1.get_ylim()
        # ax1.set_ylim(y_min, y_max*1.1)

        # ax1.set_xlim(-5, 50)

        # # # Sorting players and correlating their data
        # player_names = [f"{player['Name']} ({player['Position']})" if player['Position'] is not None else f"{player['Name']} (P)" for player in game]

        # # # Ensuring the data is correctly structured as a 2D array
        # sorted_samples_array = np.array(player_samples)
        # if sorted_samples_array.shape[0] < sorted_samples_array.shape[1]:
        #     sorted_samples_array = sorted_samples_array.T

        # correlation_matrix = pd.DataFrame(np.corrcoef(sorted_samples_array.T), columns=player_names, index=player_names)

        # sns.heatmap(correlation_matrix, annot=True, ax=ax2, cmap='YlGnBu', cbar_kws={"shrink": .5})
        # ax2.set_title(f'Correlation Matrix for Game {team1_id}{team2_id}', fontsize=14)

        # original_corr_matrix = pd.DataFrame(corr_matrix, columns=player_names, index=player_names)
        # sns.heatmap(original_corr_matrix, annot=True, ax=ax3, cmap='YlGnBu', cbar_kws={"shrink": .5})
        # ax3.set_title(f'Original Correlation Matrix for Game {team1_id}{team2_id}', fontsize=14)

        # mean_values = [np.mean(samples) for samples in player_samples]
        # variance_values = [np.var(samples) for samples in player_samples]
        # min_values = [np.min(samples) for samples in player_samples]
        # max_values = [np.max(samples) for samples in player_samples]

        # # Create a DataFrame for the mean and variance values
        # mean_variance_df = pd.DataFrame({
        #     'Player': player_names,
        #     'Mean': mean_values,
        #     'Variance': variance_values,
        #     'Min' : min_values,
        #     'Max' :max_values
        # }).set_index('Player')

        # # Plot the mean and variance table
        # ax4.axis('tight')
        # ax4.axis('off')
        # ax4.table(cellText=mean_variance_df.values, colLabels=mean_variance_df.columns, rowLabels=mean_variance_df.index, cellLoc='center', loc='center')
        # ax4.set_title(f'Mean and Variance for Game {team1_id}{team2_id}', fontsize=14)

        # plt.savefig(f'output/Team_{team1_id}{team2_id}_Distributions_Correlation.png', bbox_inches='tight')
        # plt.close()

        return temp_fpts_dict

    @staticmethod
    @jit(nopython=True)
    def calculate_payouts(args):
        (
            ranks,
            payout_array,
            entry_fee,
            field_lineup_keys,
            use_contest_data,
            field_lineups_count,
        ) = args
        num_lineups = len(field_lineup_keys)
        combined_result_array = np.zeros(num_lineups)

        payout_cumsum = np.cumsum(payout_array)

        for r in range(ranks.shape[1]):
            ranks_in_sim = ranks[:, r]
            payout_index = 0
            for lineup_index in ranks_in_sim:
                lineup_count = field_lineups_count[lineup_index]
                prize_for_lineup = (
                    (
                        payout_cumsum[payout_index + lineup_count - 1]
                        - payout_cumsum[payout_index - 1]
                    )
                    / lineup_count
                    if payout_index != 0
                    else payout_cumsum[payout_index + lineup_count - 1] / lineup_count
                )
                combined_result_array[lineup_index] += prize_for_lineup
                payout_index += lineup_count
        return combined_result_array

    def run_tournament_simulation(self):
        print(f"Running {self.num_iterations} simulations")
        print(f"Number of unique field lineups: {len(self.field_lineups.keys())}")

        start_time = time.time()
        temp_fpts_dict = {}
        game_simulation_params = []
        for m in self.matchups:
            game_simulation_params.append(
                (
                    m[0],
                    self.teams_dict[m[0]],
                    m[1],
                    self.teams_dict[m[1]],
                    self.num_iterations,
                    self.roster_construction,
                )
            )
        with mp.Pool() as pool:
            results = pool.starmap(self.run_simulation_for_game, game_simulation_params)

        for res in results:
            temp_fpts_dict.update(res)

        # generate arrays for every sim result for each player in the lineup and sum
        fpts_array = np.zeros(shape=(len(self.field_lineups), self.num_iterations))
        # converting payout structure into an np friendly format, could probably just do this in the load contest function
        # print(self.field_lineups)
        # print(temp_fpts_dict)
        # print(payout_array)
        # print(self.player_dict[('patrick mahomes', 'FLEX', 'KC')])
        field_lineups_count = np.array(
            [self.field_lineups[idx]["Count"] for idx in self.field_lineups.keys()]
        )

        for index, values in self.field_lineups.items():
            try:
                fpts_sim = sum([temp_fpts_dict[player] for player in values["Lineup"]])
                # store lineup fpts sum in 2d np array where index (row) corresponds to index of field_lineups and columns are the fpts from each sim
                fpts_array[index] = fpts_sim
            except KeyError:
                for player in values["Lineup"]:
                    if player not in temp_fpts_dict.keys():
                        print(player)
                        # for k,v in self.player_dict.items():
                        # if v['ID'] == player:
                        #        print(k,v)
                # print('cant find player in sim dict', values["Lineup"], temp_fpts_dict.keys())

        fpts_array = fpts_array.astype(np.float16)
        # ranks = np.argsort(fpts_array, axis=0)[::-1].astype(np.uint16)
        ranks = np.argsort(-fpts_array, axis=0).astype(np.uint32)

        # count wins, top 10s vectorized
        wins, win_counts = np.unique(ranks[0, :], return_counts=True)
        cashes, cash_counts = np.unique(
            ranks[0 : len(list(self.payout_structure.values()))], return_counts=True
        )

        top1pct, top1pct_counts = np.unique(
            ranks[0 : math.ceil(0.01 * len(self.field_lineups)), :], return_counts=True
        )

        payout_array = np.array(list(self.payout_structure.values()))
        # subtract entry fee
        payout_array = payout_array - self.entry_fee
        l_array = np.full(shape=self.field_size - len(payout_array), fill_value=-self.entry_fee)
        payout_array = np.concatenate((payout_array, l_array))
        field_lineups_keys_array = np.array(list(self.field_lineups.keys()))

        # Adjusted ROI calculation
        # print(field_lineups_count.shape, payout_array.shape, ranks.shape, fpts_array.shape)

        # Split the simulation indices into chunks
        field_lineups_keys_array = np.array(list(self.field_lineups.keys()))

        chunk_size = self.num_iterations // 16  # Adjust chunk size as needed
        simulation_chunks = [
            (
                ranks[:, i : min(i + chunk_size, self.num_iterations)].copy(),
                payout_array,
                self.entry_fee,
                field_lineups_keys_array,
                self.use_contest_data,
                field_lineups_count,
            )  # Adding field_lineups_count here
            for i in range(0, self.num_iterations, chunk_size)
        ]

        # Use the pool to process the chunks in parallel
        with mp.Pool() as pool:
            results = pool.map(self.calculate_payouts, simulation_chunks)

        combined_result_array = np.sum(results, axis=0)

        total_sum = 0
        index_to_key = list(self.field_lineups.keys())
        for idx, roi in enumerate(combined_result_array):
            lineup_key = index_to_key[idx]
            lineup_count = self.field_lineups[lineup_key][
                "Count"
            ]  # Assuming "Count" holds the count of the lineups
            total_sum += roi * lineup_count
            self.field_lineups[lineup_key]["ROI"] += roi

        for idx in self.field_lineups.keys():
            if idx in wins:
                self.field_lineups[idx]["Wins"] += win_counts[np.where(wins == idx)][0]
            if idx in top1pct:
                self.field_lineups[idx]["Top1Percent"] += top1pct_counts[np.where(top1pct == idx)][
                    0
                ]
            if idx in cashes:
                self.field_lineups[idx]["Cashes"] += cash_counts[np.where(cashes == idx)][0]

        end_time = time.time()
        diff = end_time - start_time
        print(
            str(self.num_iterations)
            + " tournament simulations finished in "
            + str(diff)
            + " seconds. Outputting."
        )

    def output(self):
        unique = {}
        for index, x in self.field_lineups.items():
            if len(x["Lineup"]) < 8:
                print(f"invalid lineup found: {len(x['Lineup'])} players.")
                continue
            # if index == 0:
            #    print(x)
            lu_type = x["Type"]
            salary = 0
            fpts_p = 0
            fieldFpts_p = 0
            ceil_p = 0
            own_p = []
            lu_names = []
            lu_teams = []
            for id in x["Lineup"]:
                for _k, v in self.player_dict.items():
                    if v["ID"] == id:
                        salary += v["Salary"]
                        fpts_p += v["Fpts"]
                        fieldFpts_p += v["fieldFpts"]
                        ceil_p += v["Ceiling"]
                        own_p.append(v["Ownership"] / 100)
                        lu_names.append(v["DK Name"])
                        lu_teams.append(v["Team"])
                        continue
            counter = collections.Counter(lu_teams)
            stacks = counter.most_common()

            # Find the QB team in stacks and set it as primary stack, remove it from stacks and subtract 1 to make sure qb isn't counted
            # print(f"stacks: {stacks}")
            primaryStack = str(stacks[0][0]) + " " + str(stacks[0][1])
            # After removing QB team, the first team in stacks will be the team with most players not in QB stack
            secondaryStack = str(stacks[1][0]) + " " + str(stacks[1][1])
            own_s = np.sum(own_p)
            own_p = np.prod(own_p)
            win_p = round(x["Wins"] / self.num_iterations * 100, 2)
            top10_p = round((x["Top1Percent"] / self.num_iterations) * 100, 2)
            round(x["Cashes"] / self.num_iterations * 100, 2)
            simDupes = x["Count"]
            if self.site == "dk":
                if self.use_contest_data:
                    roi_p = round(x["ROI"] / self.entry_fee / self.num_iterations * 100, 2)
                    roi_round = round(x["ROI"] / self.num_iterations, 2)
                    lineup_str = (
                        f"{lu_names[0].replace('#', '-')}"
                        f" ({x['Lineup'][0]}),"
                        f"{lu_names[1].replace('#', '-')}"
                        f" ({x['Lineup'][1]}),"
                        f"{lu_names[2].replace('#', '-')}"
                        f" ({x['Lineup'][2]}),"
                        f"{lu_names[3].replace('#', '-')}"
                        f" ({x['Lineup'][3]}),"
                        f"{lu_names[4].replace('#', '-')}"
                        f" ({x['Lineup'][4]}),"
                        f"{lu_names[5].replace('#', '-')}"
                        f" ({x['Lineup'][5]}),"
                        f"{lu_names[6].replace('#', '-')}"
                        f" ({x['Lineup'][6]}),"
                        f"{lu_names[7].replace('#', '-')}"
                        f" ({x['Lineup'][7]}),"
                        f"{fpts_p},{fieldFpts_p},{ceil_p},{salary},{win_p}%,{top10_p}%,{roi_p}%,{own_p},{own_s},${roi_round},{primaryStack},{secondaryStack},{lu_type},{simDupes}"
                    )
                else:
                    lineup_str = (
                        f"{lu_names[0].replace('#', '-')}"
                        f" ({x['Lineup'][0]}),"
                        f"{lu_names[1].replace('#', '-')}"
                        f" ({x['Lineup'][1]}),"
                        f"{lu_names[2].replace('#', '-')}"
                        f" ({x['Lineup'][2]}),"
                        f"{lu_names[3].replace('#', '-')}"
                        f" ({x['Lineup'][3]}),"
                        f"{lu_names[4].replace('#', '-')}"
                        f" ({x['Lineup'][4]}),"
                        f"{lu_names[5].replace('#', '-')}"
                        f" ({x['Lineup'][5]}),"
                        f"{lu_names[6].replace('#', '-')}"
                        f" ({x['Lineup'][6]}),"
                        f"{lu_names[7].replace('#', '-')}"
                        f" ({x['Lineup'][7]}),"
                        f"{fpts_p},{fieldFpts_p},{ceil_p},{salary},{win_p}%,{top10_p}%,{own_p},{own_s},{primaryStack},{secondaryStack},{lu_type},{simDupes}"
                    )
            elif self.site == "fd":
                if self.use_contest_data:
                    roi_p = round(x["ROI"] / self.entry_fee / self.num_iterations * 100, 2)
                    roi_round = round(x["ROI"] / self.num_iterations, 2)
                    lineup_str = (
                        f"{x['Lineup'][0]}:{lu_names[0].replace('#', '-')},"
                        f"{x['Lineup'][1]}:{lu_names[1].replace('#', '-')},"
                        f"{x['Lineup'][2]}:{lu_names[2].replace('#', '-')},"
                        f"{x['Lineup'][3]}:{lu_names[3].replace('#', '-')},"
                        f"{x['Lineup'][4]}:{lu_names[4].replace('#', '-')},"
                        f"{x['Lineup'][5]}:{lu_names[5].replace('#', '-')},"
                        f"{x['Lineup'][6]}:{lu_names[6].replace('#', '-')},"
                        f"{x['Lineup'][7]}:{lu_names[7].replace('#', '-')},"
                        f"{x['Lineup'][8]}:{lu_names[8].replace('#', '-')},"
                        f"{fpts_p},{fieldFpts_p},{ceil_p},{salary},{win_p}%,{top10_p}%,{roi_p}%,{own_p},{own_s},${roi_round},{primaryStack},{secondaryStack},{lu_type},{simDupes}"
                    )
                else:
                    lineup_str = (
                        f"{x['Lineup'][0]}:{lu_names[0].replace('#', '-')},"
                        f"{x['Lineup'][1]}:{lu_names[1].replace('#', '-')},"
                        f"{x['Lineup'][2]}:{lu_names[2].replace('#', '-')},"
                        f"{x['Lineup'][3]}:{lu_names[3].replace('#', '-')},"
                        f"{x['Lineup'][4]}:{lu_names[4].replace('#', '-')},"
                        f"{x['Lineup'][5]}:{lu_names[5].replace('#', '-')},"
                        f"{x['Lineup'][6]}:{lu_names[6].replace('#', '-')},"
                        f"{x['Lineup'][7]}:{lu_names[7].replace('#', '-')},"
                        f"{x['Lineup'][8]}:{lu_names[8].replace('#', '-')},"
                        f"{fpts_p},{fieldFpts_p},{ceil_p},{salary},{win_p}%,{top10_p}%,{own_p},{own_s},{primaryStack},{secondaryStack},{lu_type},{simDupes}"
                    )
            unique[index] = lineup_str

        out_path = os.path.join(
            os.path.dirname(__file__),
            f"../output/{self.site}_gpp_sim_lineups_{self.field_size}_{self.num_iterations}.csv",
        )
        with open(out_path, "w") as f:
            if self.site == "dk":
                if self.use_contest_data:
                    f.write(
                        "PG,SG,SF,PF,C,G,F,UTIL,Fpts Proj,Field Fpts Proj,Ceiling,Salary,Win %,Top 1%,ROI%,Proj. Own. Product,Own. Sum,Avg. Return,Stack1 Type,Stack2 Type,Lineup Type,Sim Dupes\n"
                    )
                else:
                    f.write(
                        "PG,SG,SF,PF,C,G,F,UTIL,Fpts Proj,Field Fpts Proj,Ceiling,Salary,Win %,Top 1%, Proj. Own. Product,Own. Sum,Stack1 Type,Stack2 Type,Lineup Type,Sim Dupes\n"
                    )
            elif self.site == "fd":
                if self.use_contest_data:
                    f.write(
                        "PG,PG,SG,SG,SF,SF,PF,PF,C,DST,Fpts Proj,Field Fpts Proj,Ceiling,Salary,Win %,Top 1%,ROI%,Proj. Own. Product,Own. Sum,Avg. Return,Stack1 Type,Stack2 Type,Lineup Type,Sim Dupes\n"
                    )
                else:
                    f.write(
                        "PG,PG,SG,SG,SF,SF,PF,PF,C,Fpts Proj,Field Fpts Proj,Ceiling,Salary,Win %,Top 1%,Proj. Own. Product,Own. Sum,Stack1 Type,Stack2 Type,Lineup Type,Sim Dupes\n"
                    )

            for _fpts, lineup_str in unique.items():
                f.write(f"{lineup_str}\n")

        out_path = os.path.join(
            os.path.dirname(__file__),
            f"../output/{self.site}_gpp_sim_player_exposure_{self.field_size}_{self.num_iterations}.csv",
        )
        with open(out_path, "w") as f:
            f.write("Player,Position,Team,Win%,Top1%,Sim. Own%,Proj. Own%,Avg. Return\n")
            unique_players = {}
            for val in self.field_lineups.values():
                for player in val["Lineup"]:
                    if player not in unique_players:
                        unique_players[player] = {
                            "Wins": val["Wins"],
                            "Top1Percent": val["Top1Percent"],
                            "In": val["Count"],
                            "ROI": val["ROI"],
                        }
                    else:
                        unique_players[player]["Wins"] = (
                            unique_players[player]["Wins"] + val["Wins"]
                        )
                        unique_players[player]["Top1Percent"] = (
                            unique_players[player]["Top1Percent"] + val["Top1Percent"]
                        )
                        unique_players[player]["In"] += val["Count"]
                        unique_players[player]["ROI"] = unique_players[player]["ROI"] + val["ROI"]

            for player, data in unique_players.items():
                field_p = round(data["In"] / self.field_size * 100, 2)
                win_p = round(data["Wins"] / self.num_iterations * 100, 2)
                top10_p = round(data["Top1Percent"] / self.num_iterations, 2)
                roi_p = round(data["ROI"] / data["In"] / self.num_iterations, 2)
                for _k, v in self.player_dict.items():
                    if player == v["ID"]:
                        proj_own = v["Ownership"]
                        p_name = v["Name"]
                        position = "/".join(v.get("Position"))
                        team = v.get("Team")
                        break
                f.write(
                    "{},{},{},{}%,{}%,{}%,{}%,${}\n".format(
                        p_name.replace("#", "-"),
                        position,
                        team,
                        win_p,
                        top10_p,
                        field_p,
                        proj_own,
                        roi_p,
                    )
                )
</file>

<file path="processes/gpp_sim/__main__.py">
from __future__ import annotations

import argparse
import json
from collections.abc import Sequence
from datetime import UTC, datetime
from pathlib import Path

from .engine import run_sim
from .io_schemas import load_contest, load_lineups


def main(argv: Sequence[str] | None = None) -> int:
    p = argparse.ArgumentParser(description="Minimal GPP contest simulator")
    p.add_argument("--lineups", type=Path, required=True)
    p.add_argument("--contest", type=Path, required=True)
    p.add_argument("--outdir", type=Path, default=Path("runs"))
    p.add_argument("--format", choices=["parquet", "csv"], default="parquet")
    ns = p.parse_args(argv)

    lineups = load_lineups(ns.lineups)
    contest = load_contest(ns.contest)
    results, summary = run_sim(lineups, contest)

    ts = datetime.now(UTC).strftime("%Y%m%d_%H%M%S")
    run_dir = ns.outdir / ts
    run_dir.mkdir(parents=True, exist_ok=True)

    if ns.format == "csv":
        results.to_csv(run_dir / "sim_results.csv", index=False)
    else:
        results.to_parquet(run_dir / "sim_results.parquet", index=False)
    summary_path = run_dir / "summary.json"
    summary_path.write_text(json.dumps(summary, indent=2), encoding="utf-8")
    return 0


if __name__ == "__main__":  # pragma: no cover - CLI entry
    raise SystemExit(main())
</file>

<file path="processes/metrics/adapter.py">
from __future__ import annotations

import argparse
import hashlib
import json
import math
from collections.abc import Mapping, Sequence
from datetime import UTC, datetime
from pathlib import Path
from typing import Any

import pandas as pd

from pipeline.io.files import ensure_dir, write_parquet
from pipeline.io.validate import load_schema, validate_obj

# Resolve repo root (two levels up from this file) and schemas root
REPO_ROOT = Path(__file__).resolve().parents[2]
SCHEMAS_ROOT = REPO_ROOT / "pipeline" / "schemas"


def _utc_now_iso() -> str:
    now = datetime.now(UTC)
    ms = int(now.microsecond / 1000)
    return f"{now.strftime('%Y-%m-%dT%H:%M:%S')}.{ms:03d}Z"


def _sha256_of_path(path: Path) -> str:
    h = hashlib.sha256()
    with path.open("rb") as f:
        for chunk in iter(lambda: f.read(8192), b""):
            h.update(chunk)
    return h.hexdigest()


def _safe_hash(path: Path) -> str:
    try:
        return _sha256_of_path(path) if path and path.exists() else ""
    except Exception:
        return ""


def _schema_version(schemas_root: Path | None, name: str) -> str:
    schema = load_schema((schemas_root or SCHEMAS_ROOT) / f"{name}.schema.yaml")
    return str(schema.get("version", "0.0.0"))


def _load_sim_manifest(out_root: Path, sim_run_id: str) -> dict[str, Any]:
    manifest_path = out_root / "runs" / "sim" / sim_run_id / "manifest.json"
    if not manifest_path.exists():
        raise FileNotFoundError(f"Sim manifest not found: {manifest_path}")
    data = json.loads(manifest_path.read_text(encoding="utf-8"))
    # Be lenient: ensure a mapping is returned
    if not isinstance(data, dict):
        raise ValueError(f"Invalid sim manifest format: {manifest_path}")
    # Narrow type for mypy
    return data


def _discover_inputs_from_manifest(m: Mapping[str, Any]) -> dict[str, Path]:
    discovered: dict[str, Path] = {}
    for item in m.get("inputs", []) or []:
        role = str(item.get("role", ""))
        p = Path(str(item.get("path", "")))
        if role in ("field", "variants", "contest_structure"):
            discovered[role] = p
    return discovered


def _contest_entry_fee_from_path(path: Path) -> float:
    # Default aligned with sim adapter's contest parser
    default_fee = 20.0
    if not path.exists():
        return default_fee
    suffix = path.suffix.lower()
    try:
        if suffix == ".json":
            obj = json.loads(path.read_text(encoding="utf-8"))
            fee = obj.get("entry_fee")
            return float(fee) if fee is not None else default_fee
        if suffix == ".parquet":
            df = pd.read_parquet(path)
            if any(str(c).lower() == "entry_fee" for c in df.columns):
                vals = (
                    pd.to_numeric(
                        df[[c for c in df.columns if str(c).lower() == "entry_fee"][0]],
                        errors="coerce",
                    )
                    .dropna()
                    .unique()
                )
                return float(vals[0]) if len(vals) == 1 else default_fee
            return default_fee
        # CSV or others → default (CSV in sim uses default 20)
        return default_fee
    except Exception:
        return default_fee


def _field_lineup_keys(path: Path) -> list[str]:
    if not path.exists():
        return []
    df = pd.read_parquet(path)
    if "export_csv_row" in df.columns:
        vals = [str(v) for v in df["export_csv_row"].tolist()]
        # Filter empties defensively
        return [v for v in vals if v]
    # Fallback: serialize players tuple if available
    if "players" in df.columns:
        lists = df["players"].tolist()
        keys: list[str] = []
        for x in lists:
            try:
                seq = list(x) if x is not None else []
                seq_sorted = sorted(seq)
                keys.append(",".join(str(s) for s in seq_sorted))
            except Exception:
                continue
        return [v for v in keys if v]
    return []


def _duplication_risk_and_entropy(keys: Sequence[str]) -> tuple[float, float]:
    n = len(keys)
    if n == 0:
        return 0.0, 0.0
    counts: dict[str, int] = {}
    for k in keys:
        counts[k] = counts.get(k, 0) + 1
    unique = len(counts)
    dup_risk = 1.0 - (unique / float(n))
    # Shannon entropy (bits)
    entropy = 0.0
    for c in counts.values():
        p = c / float(n)
        if p > 0:
            entropy -= p * math.log2(p)
    return float(dup_risk), float(entropy)


def _aggregate_portfolio_metrics(sim_results: pd.DataFrame, entry_fee: float) -> dict[str, float]:
    # Expect columns: prize; compute return per trial as (prize - fee)/fee
    fee = float(entry_fee) if entry_fee and entry_fee > 0 else 20.0
    prize = pd.to_numeric(sim_results.get("prize"), errors="coerce").fillna(0.0)
    returns = (prize - fee) / fee
    roi_mean = float(returns.mean()) if len(returns) else 0.0
    stdev = float(returns.std(ddof=0)) if len(returns) > 1 else 0.0
    sharpe = float(roi_mean / stdev) if stdev > 0 else 0.0
    neg = returns[returns < 0]
    downside = float(neg.std(ddof=0)) if len(neg) > 1 else 0.0
    sortino = float(roi_mean / downside) if downside > 0 else 0.0
    return {"roi_mean": roi_mean, "sharpe": sharpe, "sortino": sortino}


def run_adapter(
    *,
    from_sim_run: str,
    out_root: Path,
    seed: int = 42,
    tag: str | None = None,
    schemas_root: Path | None = None,
    verbose: bool = False,
    deterministic: bool = False,
    fixed_ts: str | None = None,
    validate: bool = True,
) -> dict[str, Any]:
    """Compute metrics from an existing sim run. Supports deterministic run IDs and optional validation toggle."""
    schemas_root = schemas_root or SCHEMAS_ROOT
    created_ts = _utc_now_iso()

    if fixed_ts:
        created_ts = fixed_ts

    # Discover sim artifacts
    sim_run_dir = out_root / "runs" / "sim" / from_sim_run
    sim_artifacts = sim_run_dir / "artifacts"
    sim_results_path = sim_artifacts / "sim_results.parquet"
    if not sim_results_path.exists():
        raise FileNotFoundError(f"sim_results not found: {sim_results_path}")
    sim_results_df = pd.read_parquet(sim_results_path)
    sim_manifest = _load_sim_manifest(out_root, from_sim_run)
    slate_id = str(sim_manifest.get("slate_id", "UNKNOWN"))
    inputs = _discover_inputs_from_manifest(sim_manifest)

    # Entry fee from contest (default if absent)
    entry_fee = _contest_entry_fee_from_path(inputs.get("contest_structure", Path("")))

    # Duplication and entropy from field or variants
    lineup_keys: list[str] = []
    if "field" in inputs:
        lineup_keys = _field_lineup_keys(inputs["field"])
    elif "variants" in inputs:
        lineup_keys = _field_lineup_keys(inputs["variants"])
    dup_risk, entropy = _duplication_risk_and_entropy(lineup_keys)

    # Portfolio aggregates from sim results
    portfolio_aggs = _aggregate_portfolio_metrics(sim_results_df, entry_fee)
    portfolio_aggs["duplication_risk"] = dup_risk
    portfolio_aggs["entropy"] = entropy

    # Run ID: deterministic option based on content hash, or timestamped default
    results_sha = _sha256_of_path(sim_results_path)
    if deterministic:
        short_hash = hashlib.sha256(f"{results_sha}|{seed}".encode()).hexdigest()[:8]
        run_id = f"metrics_{short_hash}"
    else:
        now_dt = datetime.fromisoformat(created_ts.replace("Z", "+00:00"))
        run_id_core = now_dt.strftime("%Y%m%d_%H%M%S")
        short_hash = hashlib.sha256(f"{from_sim_run}|{results_sha}|{seed}".encode()).hexdigest()[:8]
        run_id = f"{run_id_core}_{short_hash}"

    # Build output directories
    run_dir = out_root / "runs" / "metrics" / run_id
    artifacts_dir = run_dir / "artifacts"
    ensure_dir(artifacts_dir)

    # Prepare metrics dataframe
    metrics_row = {"run_id": run_id, "aggregates": portfolio_aggs}

    # Validate against metrics schema before write
    metrics_schema = load_schema(schemas_root / "metrics.schema.yaml")
    if validate:
        validate_obj(metrics_schema, metrics_row, schemas_root=schemas_root)
    metrics_df = pd.DataFrame([metrics_row])

    metrics_path = artifacts_dir / "metrics.parquet"
    write_parquet(metrics_df, metrics_path)

    # Manifest
    manifest_schema = load_schema(schemas_root / "manifest.schema.yaml")
    inputs_for_manifest: list[dict[str, Any]] = [
        {
            "path": str(sim_results_path),
            "content_sha256": results_sha,
            "role": "sim_results",
        }
    ]
    if "field" in inputs:
        inputs_for_manifest.append(
            {
                "path": str(inputs["field"]),
                "content_sha256": _safe_hash(inputs["field"]),
                "role": "field",
            }
        )
    if "variants" in inputs:
        inputs_for_manifest.append(
            {
                "path": str(inputs["variants"]),
                "content_sha256": _safe_hash(inputs["variants"]),
                "role": "variants",
            }
        )
    if "contest_structure" in inputs:
        inputs_for_manifest.append(
            {
                "path": str(inputs["contest_structure"]),
                "content_sha256": _safe_hash(inputs["contest_structure"]),
                "role": "contest_structure",
            }
        )

    manifest = {
        "schema_version": _schema_version(schemas_root, "manifest"),
        "run_id": run_id,
        "run_type": "metrics",
        "slate_id": slate_id,
        "created_ts": created_ts,
        "inputs": inputs_for_manifest,
        "config": {"seed": int(seed), "from_sim_run": str(from_sim_run)},
        "outputs": [
            {"path": str(metrics_path), "kind": "metrics"},
        ],
        "tags": [tag] if tag else [],
    }
    if validate:
        validate_obj(manifest_schema, manifest, schemas_root=schemas_root)
    (run_dir / "manifest.json").write_text(json.dumps(manifest, indent=2), encoding="utf-8")

    # Registry append
    registry_path = out_root / "registry" / "runs.parquet"
    ensure_dir(registry_path.parent)
    reg_row = {
        "run_id": run_id,
        "run_type": "metrics",
        "slate_id": slate_id,
        "status": "success",
        "primary_outputs": [str(metrics_path)],
        "metrics_path": str(metrics_path),
        "created_ts": created_ts,
        "tags": [tag] if tag else [],
    }
    runs_registry_schema = load_schema(schemas_root / "runs_registry.schema.yaml")
    if validate:
        validate_obj(runs_registry_schema, reg_row, schemas_root=schemas_root)
    if registry_path.exists():
        existing = pd.read_parquet(registry_path)
        reg_df = pd.concat([existing, pd.DataFrame([reg_row])], ignore_index=True)
    else:
        reg_df = pd.DataFrame([reg_row])
    write_parquet(reg_df, registry_path)

    if verbose:
        print(f"[metrics] run_id: {run_id}")
        print(f"[metrics] sim_results: {sim_results_path}")
        print(f"[metrics] entry_fee: {entry_fee}")
        print(f"[metrics] dup_risk: {dup_risk:.4f}, entropy(bits): {entropy:.4f}")
        print(f"[metrics] roi_mean: {portfolio_aggs['roi_mean']:.6f}")
        print(f"[metrics] sharpe: {portfolio_aggs['sharpe']:.6f}")
        print(f"[metrics] sortino: {portfolio_aggs['sortino']:.6f}")

    return {
        "run_id": run_id,
        "metrics_path": str(metrics_path),
        "manifest_path": str(run_dir / "manifest.json"),
        "registry_path": str(registry_path),
        "entry_fee": float(entry_fee),
        "duplication_risk": float(dup_risk),
        "entropy_bits": float(entropy),
    }


def _build_parser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser(prog="python -m processes.metrics")
    p.add_argument("--from-sim", required=True, dest="from_sim_run")
    p.add_argument("--out-root", type=Path, default=Path("data"))
    p.add_argument("--seed", type=int, default=42)
    p.add_argument("--tag", type=str)
    p.add_argument("--schemas-root", type=Path)
    p.add_argument("--verbose", action="store_true")
    p.add_argument("--deterministic", action="store_true")
    p.add_argument(
        "--fixed-ts",
        type=str,
        help="Override created_ts (ISO8601, e.g., 2025-09-06T12:34:56.789Z)",
    )
    p.add_argument("--no-validate", dest="validate", action="store_false")
    return p


def main(argv: Sequence[str] | None = None) -> int:
    ns = _build_parser().parse_args(argv)
    run_adapter(
        from_sim_run=str(ns.from_sim_run),
        out_root=ns.out_root,
        seed=int(ns.seed),
        tag=ns.tag,
        schemas_root=ns.schemas_root,
        verbose=bool(ns.verbose),
        deterministic=bool(ns.deterministic),
        fixed_ts=str(ns.fixed_ts) if ns.fixed_ts else None,
        validate=bool(ns.validate),
    )
    return 0


if __name__ == "__main__":  # pragma: no cover
    raise SystemExit(main())
</file>

<file path="processes/orchestrator/adapter.py">
from __future__ import annotations

import argparse
import hashlib
import json
import sys
from collections.abc import Mapping, Sequence
from dataclasses import dataclass
from datetime import UTC, datetime
from pathlib import Path
from typing import Any, cast

import pandas as pd

# Stage adapters
from pipeline.ingest import cli as ingest_cli
from processes.field_sampler import adapter as fld
from processes.gpp_sim import adapter as sim
from processes.optimizer import adapter as opt
from processes.variants import adapter as var

REPO_ROOT = Path(__file__).resolve().parents[2]
SCHEMAS_ROOT_DEFAULT = REPO_ROOT / "pipeline" / "schemas"


def _utc_now_iso() -> str:
    now = datetime.now(UTC)
    ms = int(now.microsecond / 1000)
    return f"{now.strftime('%Y-%m-%dT%H:%M:%S')}.{ms:03d}Z"


def _coerce_scalar(val: str) -> int | float | bool | str:
    lower = val.lower()
    if lower in ("true", "false"):
        return lower == "true"
    try:
        return int(val)
    except ValueError:
        try:
            return float(val)
        except ValueError:
            return val


def _set_dotted(d: dict[str, Any], dotted: str, value: Any) -> None:
    keys = [k.strip() for k in dotted.split(".") if k.strip()]
    cur: dict[str, Any] = d
    for k in keys[:-1]:
        val = cur.get(k)
        if not isinstance(val, dict):
            val = {}
            cur[k] = val
        # mypy: val is a dict after the isinstance guard above
        cur = cast(dict[str, Any], val)

    cur[keys[-1]] = value


def _load_config(path: Path | None, kv: Sequence[str] | None) -> dict[str, Any]:
    cfg: dict[str, Any] = {}
    if path is not None:
        text = path.read_text(encoding="utf-8")
        if path.suffix.lower() in (".yaml", ".yml"):
            import yaml  # lazy

            cfg = dict(yaml.safe_load(text) or {})
        else:
            cfg = dict(json.loads(text))
    if kv:
        for item in kv:
            if "=" not in item:
                continue
            k, v = item.split("=", 1)
            _set_dotted(cfg, k.strip(), _coerce_scalar(v.strip()))
    return cfg


def _mint_bundle_id(seed_material: str) -> str:
    ts = datetime.now(UTC).strftime("%Y%m%d_%H%M%S")
    short = hashlib.sha256(seed_material.encode("utf-8")).hexdigest()[:8]
    return f"{ts}_{short}"


def _ensure_dir(path: Path) -> None:
    path.mkdir(parents=True, exist_ok=True)


@dataclass
class StageResult:
    name: str
    run_id: str
    manifest_path: Path
    primary_output: str | None


def _write_stage_config(temp_dir: Path, stage: str, cfg: Mapping[str, Any]) -> Path:
    path = temp_dir / f"{stage}.config.json"
    path.write_text(json.dumps(cfg, indent=2), encoding="utf-8")
    return path


def run_bundle(
    *,
    slate_id: str,
    config_path: Path,
    config_kv: Sequence[str] | None,
    out_root: Path,
    schemas_root: Path | None,
    validate: bool,
    dry_run: bool,
    verbose: bool,
) -> dict[str, Any]:
    cfg = _load_config(config_path, config_kv)
    seeds = {
        "optimizer": int(cfg.get("seeds", {}).get("optimizer", 42)),
        "variants": int(cfg.get("seeds", {}).get("variants", 42)),
        "field": int(cfg.get("seeds", {}).get("field", 42)),
        "sim": int(cfg.get("seeds", {}).get("sim", 42)),
    }
    stages_cfg: dict[str, Mapping[str, Any]] = {
        "ingest": dict(cfg.get("ingest", {})),
        "optimizer": dict(cfg.get("optimizer", {})),
        "variants": dict(cfg.get("variants", {})),
        "field": dict(cfg.get("field", {})),
        "sim": dict(cfg.get("sim", {})),
    }

    plan = [
        f"ingest: source={stages_cfg['ingest'].get('source','?')} projections={stages_cfg['ingest'].get('projections','?')}",
        "optimizer: from=ingest normalized",
        "variants: from=optimizer lineups",
        "field: from=variants catalog",
        "sim: from=field (or variants)",
    ]
    if verbose or dry_run:
        print("[orchestrator] plan:", file=sys.stderr)
        for step in plan:
            print(f"  - {step}", file=sys.stderr)

    if dry_run:
        return {"bundle_id": "DRY_RUN", "plan": plan}

    out_root = out_root.resolve()
    schemas_root = (schemas_root or SCHEMAS_ROOT_DEFAULT).resolve()

    # Prepare orchestrator run dir
    bundle_seed_material = json.dumps(
        {
            "slate_id": slate_id,
            "seeds": seeds,
            "optimizer_cfg": stages_cfg.get("optimizer"),
            "variants_cfg": stages_cfg.get("variants"),
            "field_cfg": stages_cfg.get("field"),
            "sim_cfg": stages_cfg.get("sim"),
        },
        sort_keys=True,
        separators=(",", ":"),
    )
    bundle_id = _mint_bundle_id(bundle_seed_material)
    bundle_dir = out_root / "runs" / "orchestrator" / bundle_id
    _ensure_dir(bundle_dir)

    stage_results: list[StageResult] = []

    # 1) Ingest
    ing = stages_cfg["ingest"]
    required_keys = ("projections", "player_ids", "mapping")
    missing = [k for k in required_keys if not ing.get(k)]
    if missing:
        raise ValueError(f"ingest stage missing required keys: {', '.join(missing)}")

    ingest_args = [
        "--slate-id",
        str(slate_id),
        "--source",
        str(ing.get("source", "manual")),
        "--projections",
        str(ing["projections"]),
        "--player-ids",
        str(ing["player_ids"]),
        "--mapping",
        str(ing["mapping"]),
        "--out-root",
        str(out_root),
        "--schemas-root",
        str(schemas_root),
    ]
    if not validate:
        ingest_args.append("--no-validate")
    rc = ingest_cli.main(ingest_args)
    if rc != 0:
        raise RuntimeError(f"ingest stage failed (exit={rc})")
    # Discover ingest run in registry
    registry_path = out_root / "registry" / "runs.parquet"
    if not registry_path.exists():
        raise FileNotFoundError("Registry not found after ingest stage")
    reg = pd.read_parquet(registry_path)
    mask = (reg.get("run_type") == "ingest") & (reg.get("slate_id") == slate_id)
    recs = reg.loc[mask]
    if recs.empty:
        raise RuntimeError("No ingest run discovered in registry")
    idx = pd.to_datetime(recs["created_ts"]).idxmax()
    ingest_run = str(reg.loc[idx, "run_id"])
    ingest_manifest = out_root / "runs" / "ingest" / ingest_run / "manifest.json"
    prim_output: str | None = None
    po = reg.loc[idx, "primary_outputs"]
    if isinstance(po, list | tuple) and po:
        prim_output = str(po[0])
    stage_results.append(
        StageResult(
            name="ingest",
            run_id=ingest_run,
            manifest_path=ingest_manifest,
            primary_output=prim_output,
        )
    )
    if verbose:
        print(f"[orchestrator] ingest run_id={ingest_run}", file=sys.stderr)

    # 2) Optimizer
    opt_cfg = dict(stages_cfg["optimizer"])
    site = str(opt_cfg.pop("site", "DK"))
    engine = str(opt_cfg.pop("engine", "cbc"))
    opt_cfg_path = _write_stage_config(bundle_dir, "optimizer", opt_cfg)
    opt_res = opt.run_adapter(
        slate_id=slate_id,
        site=site,
        config_path=opt_cfg_path,
        config_kv=None,
        engine=engine,
        seed=int(seeds["optimizer"]),
        out_root=out_root,
        tag=f"bundle:{bundle_id}",
        in_root=out_root,
        input_path=None,
        schemas_root=schemas_root,
    )
    stage_results.append(
        StageResult(
            name="optimizer",
            run_id=str(opt_res.get("run_id")),
            manifest_path=Path(str(opt_res.get("manifest_path"))),
            primary_output=str(opt_res.get("lineups_path")),
        )
    )
    if verbose:
        print(f"[orchestrator] optimizer run_id={opt_res.get('run_id')}", file=sys.stderr)

    # 3) Variants
    var_cfg = dict(stages_cfg["variants"])
    var_cfg_path = _write_stage_config(bundle_dir, "variants", var_cfg)
    var_res = var.run_adapter(
        slate_id=slate_id,
        config_path=var_cfg_path,
        config_kv=None,
        seed=int(seeds["variants"]),
        out_root=out_root,
        tag=f"bundle:{bundle_id}",
        input_path=None,
        from_run=str(opt_res.get("run_id")),
        schemas_root=schemas_root,
        validate=validate,
    )
    stage_results.append(
        StageResult(
            name="variants",
            run_id=str(var_res.get("run_id")),
            manifest_path=Path(str(var_res.get("manifest_path"))),
            primary_output=str(var_res.get("catalog_path")),
        )
    )
    if verbose:
        print(f"[orchestrator] variants run_id={var_res.get('run_id')}", file=sys.stderr)

    # 4) Field Sampler
    fld_cfg = dict(stages_cfg["field"])
    fld_cfg_path = _write_stage_config(bundle_dir, "field", fld_cfg)
    fld_res = fld.run_adapter(
        slate_id=slate_id,
        config_path=fld_cfg_path,
        config_kv=None,
        seed=int(seeds["field"]),
        out_root=out_root,
        tag=f"bundle:{bundle_id}",
        input_path=None,
        input_paths=None,
        from_run=str(var_res.get("run_id")),
        schemas_root=schemas_root,
        validate=validate,
    )
    stage_results.append(
        StageResult(
            name="field",
            run_id=str(fld_res.get("run_id")),
            manifest_path=Path(str(fld_res.get("manifest_path"))),
            primary_output=str(fld_res.get("field_path")),
        )
    )
    if verbose:
        print(f"[orchestrator] field run_id={fld_res.get('run_id')}", file=sys.stderr)

    # 5) GPP Sim
    sim_cfg = dict(stages_cfg["sim"])
    contest_obj = sim_cfg.pop("contest", None)
    contest_path = sim_cfg.pop("contest_path", None)
    if contest_obj is not None and contest_path is None:
        # Ensure required fields present for schema validation
        if "contest_id" not in contest_obj:
            contest_obj["contest_id"] = f"TEST_{bundle_id}"
        if "name" not in contest_obj:
            contest_obj["name"] = "Test Contest"
        contest_path = bundle_dir / "contest.json"
        # Persist authored contest block so downstream discovery
        # (and users) can find it later
        Path(contest_path).write_text(json.dumps(contest_obj, indent=2), encoding="utf-8")
    sim_cfg_path = _write_stage_config(bundle_dir, "sim", sim_cfg)
    sim_res = sim.run_adapter(
        slate_id=slate_id,
        config_path=sim_cfg_path,
        config_kv=None,
        seed=int(seeds["sim"]),
        out_root=out_root,
        tag=f"bundle:{bundle_id}",
        field_path=None,
        from_field_run=str(fld_res.get("run_id")),
        variants_path=None,
        contest_path=Path(contest_path) if contest_path else None,
        from_contest_dir=None,
        schemas_root=schemas_root,
        validate=validate,
        verbose=verbose,
        export_dk_csv=None,
    )
    stage_results.append(
        StageResult(
            name="sim",
            run_id=str(sim_res.get("run_id")),
            manifest_path=Path(str(sim_res.get("manifest_path"))),
            primary_output=str(sim_res.get("sim_results_path")),
        )
    )
    if verbose:
        print(f"[orchestrator] sim run_id={sim_res.get('run_id')}", file=sys.stderr)

    # Build bundle manifest
    bundle = {
        "schema_version": "0.1.0",
        "bundle_id": bundle_id,
        "slate_id": slate_id,
        "created_ts": _utc_now_iso(),
        "stages": [
            {
                "name": s.name,
                "run_id": s.run_id,
                "manifest": str(s.manifest_path),
                "primary_output": s.primary_output,
            }
            for s in stage_results
        ],
        "config": cfg,
    }
    bundle_path = bundle_dir / "bundle.json"
    bundle_path.write_text(json.dumps(bundle, indent=2), encoding="utf-8")

    if verbose:
        print(
            f"[orchestrator] bundle={bundle_id} stages="
            f"{','.join(s.name for s in stage_results)}",
            file=sys.stderr,
        )

    return {
        "bundle_id": bundle_id,
        "bundle_path": str(bundle_path),
        "stages": [s.name for s in stage_results],
    }


def _build_parser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser(
        prog="python -m processes.orchestrator",
        description="Chain ingest→optimizer→variants→field→sim and create bundle.json",
    )
    p.add_argument("--slate-id", required=True)
    p.add_argument("--config", type=Path, required=True)
    p.add_argument("--config-kv", nargs="*")
    p.add_argument("--out-root", type=Path, default=Path("data"))
    p.add_argument("--schemas-root", type=Path)
    p.add_argument(
        "--validate",
        dest="validate",
        action=argparse.BooleanOptionalAction,
        default=True,
    )
    p.add_argument("--dry-run", action="store_true")
    p.add_argument("--verbose", action="store_true")
    return p


def main(argv: Sequence[str] | None = None) -> int:
    args = _build_parser().parse_args(argv)
    try:
        run_bundle(
            slate_id=str(args.slate_id),
            config_path=args.config,
            config_kv=args.config_kv,
            out_root=args.out_root,
            schemas_root=args.schemas_root,
            validate=bool(args.validate),
            dry_run=bool(args.dry_run),
            verbose=bool(args.verbose),
        )
    except Exception as e:  # pragma: no cover - error path
        print(f"[orchestrator] error: {e}", file=sys.stderr)
        return 1
    return 0
</file>

<file path="scripts/pyopt/optimize_cli.py">
#!/usr/bin/env python
"""
CLI shim: reads OptimizationRequest JSON on stdin, writes results JSON on stdout.
Bridges frontend contract -> legacy optimizer functional API.

Contract (stdin):
{
  site: "dk"|"fd",
  enginePreferred: "cp_sat"|"cbc",
  constraints: {...},          # optional; see processes/optimizer/types.py
  players: [ { name, team, position, salary, proj_fp, own_proj?, dk_id? } ],
  seed: int
}
"""
from __future__ import annotations

import json
import os
import sys
import time
from collections import Counter
from itertools import combinations
from typing import Any

import pandas as pd

# Ensure repo root is on sys.path so `processes.*` is importable when running from scripts/
_HERE = os.path.dirname(__file__)
_ROOT = os.path.abspath(os.path.join(_HERE, os.pardir, os.pardir))
if _ROOT not in sys.path:
    sys.path.insert(0, _ROOT)
# Ensure downstream helpers resolve paths relative to repo root
os.environ.setdefault("PROJECT_ROOT", _ROOT)


def _stderr(msg: str) -> None:
    print(msg, file=sys.stderr, flush=True)


def _normalize_own(x):
    try:
        if x is None:
            return None
        v = float(x)
        return v / 100.0 if v > 1.5 else v
    except Exception:
        return None


def _detect_engine(preferred: str) -> str:
    if preferred == "cp_sat":
        try:
            import ortools  # noqa: F401

            return "cp_sat"
        except Exception:
            return "cbc"
    return "cbc"


def main() -> int:
    t0 = time.time()
    try:
        raw = sys.stdin.read()
        req = json.loads(raw)
    except Exception as e:
        out = {"ok": False, "error": f"Invalid JSON input: {e}"}
        sys.stdout.write(json.dumps(out))
        return 0

    site = str(req.get("site", "dk")).lower()
    engine_pref = str(req.get("enginePreferred", "cp_sat"))
    engine = _detect_engine(engine_pref)
    seed = int(req.get("seed", 42))

    # Build projections DataFrame from either inline `players` OR a file path
    players: list[dict[str, Any]] = req.get("players") or []
    projections_path = req.get("projectionsPath")

    def _norm_cols(df_in: pd.DataFrame) -> pd.DataFrame:
        df_in.columns = (
            df_in.columns.str.strip()
            .str.lower()
            .str.replace("%", "", regex=False)
            .str.replace(" ", "_", regex=False)
        )
        return df_in

    def _pick(colset, *cands):
        for c in cands:
            if c in colset:
                return c
        return None

    if players:
        rows: list[dict[str, Any]] = []
        for p in players:
            pos = p.get("position") or ""
            if isinstance(pos, list):
                pos = "/".join([str(s).upper() for s in pos])
            name = p.get("name") or p.get("player_name") or ""
            dk_id = p.get("dk_id") or p.get("player_id_dk") or p.get("player_id")
            # accept Own%/own/ownership keys too if present
            own_raw = p.get("own_proj", p.get("ownership", p.get("own", p.get("ownp"))))
            rows.append(
                {
                    "name": name,
                    "team": (p.get("team") or "").upper(),
                    "position": pos,
                    "salary": int(p.get("salary", 0) or 0),
                    "proj_fp": float(p.get("proj_fp", p.get("proj", 0.0)) or 0.0),
                    "own_proj": _normalize_own(own_raw),
                    "dk_id": None if dk_id is None else str(dk_id),
                }
            )
        df = pd.DataFrame(rows)

    elif projections_path:
        p = str(projections_path)
        # resolve relative to repo root
        if not os.path.isabs(p):
            p = os.path.join(_ROOT, p)
        ext = os.path.splitext(p)[1].lower()
        try:
            if ext in (".csv", ".txt"):
                df_raw = pd.read_csv(p)
            elif ext in (".json",):
                df_raw = pd.read_json(p, orient="records")
            elif ext in (".parquet", ".pq"):
                df_raw = pd.read_parquet(p)
            else:
                raise ValueError(f"Unsupported projections file type: {ext}")
        except Exception as e:
            out = {"ok": False, "error": f"Failed to read projectionsPath '{p}': {e}"}
            sys.stdout.write(json.dumps(out))
            return 0

        df_raw = _norm_cols(df_raw)
        cols = set(df_raw.columns)

        # alias resolution
        c_name = _pick(cols, "name", "player", "player_name")
        c_team = _pick(cols, "team", "teamabbrev")
        c_pos = _pick(cols, "position", "pos", "positions")
        c_sal = _pick(cols, "salary", "sal")
        c_proj = _pick(cols, "proj_fp", "fpts", "fieldfpts", "proj", "projection")
        c_own = _pick(cols, "own_proj", "own", "ownership", "ownp", "own_percent")
        c_dkid = _pick(cols, "dk_id", "player_id_dk", "player_id", "id")

        if not all([c_name, c_team, c_pos, c_sal, c_proj]):
            missing = [
                x
                for x, c in [
                    ("name", c_name),
                    ("team", c_team),
                    ("position", c_pos),
                    ("salary", c_sal),
                    ("proj_fp", c_proj),
                ]
                if c is None
            ]
            out = {
                "ok": False,
                "error": f"Missing required columns after normalization: {missing}",
            }
            sys.stdout.write(json.dumps(out))
            return 0

        # build normalized dataframe
        def _pos_to_str(v):
            if isinstance(v, list):
                return "/".join([str(s).upper() for s in v])
            return str(v)

        df = pd.DataFrame(
            {
                "name": df_raw[c_name],
                "team": df_raw[c_team].astype(str).str.upper(),
                "position": df_raw[c_pos].apply(_pos_to_str),
                "salary": pd.to_numeric(df_raw[c_sal], errors="coerce").fillna(0).astype(int),
                "proj_fp": pd.to_numeric(df_raw[c_proj], errors="coerce").fillna(0.0).astype(float),
                "own_proj": (
                    pd.to_numeric(df_raw[c_own], errors="coerce").map(_normalize_own)
                    if c_own
                    else None
                ),
                "dk_id": df_raw[c_dkid].astype(str) if c_dkid else None,
            }
        )

        # if no ownership column found, fill with None (later becomes 0.0 if penalty off)
        if "own_proj" not in df or df["own_proj"] is None:
            df["own_proj"] = None

    else:
        out = {
            "ok": False,
            "error": "No players provided and no projectionsPath specified.",
        }
        sys.stdout.write(json.dumps(out))
        return 0

    # --- DK ID wiring: drop empty dk_id, optionally merge playerIdsPath ---
    # If dk_id exists but is entirely empty, drop it so the matcher/merge will run
    if "dk_id" in locals() and isinstance(df, pd.DataFrame) and "dk_id" in df.columns:
        if df["dk_id"].notna().sum() == 0:
            df = df.drop(columns=["dk_id"])

    # Prepare optional player_ids_df for backend; also best-effort merge into df
    player_ids_df = None
    player_ids_path = req.get("playerIdsPath")
    if player_ids_path:
        pid_path = str(player_ids_path)
        if not os.path.isabs(pid_path):
            pid_path = os.path.join(_ROOT, pid_path)
        pid_ext = os.path.splitext(pid_path)[1].lower()
        try:
            if pid_ext in (".csv", ".txt"):
                _pid = pd.read_csv(pid_path)
            elif pid_ext in (".json",):
                _pid = pd.read_json(pid_path, orient="records")
            elif pid_ext in (".parquet", ".pq"):
                _pid = pd.read_parquet(pid_path)
            else:
                raise ValueError(f"Unsupported playerIds file type: {pid_ext}")
        except Exception as e:
            _stderr(f"[playerIds] Failed to read '{pid_path}': {e}")
            _pid = None

        if _pid is not None:
            _pid = _norm_cols(_pid)
            cols_pid = set(_pid.columns)
            c_name = _pick(cols_pid, "name", "player", "player_name")
            c_team = _pick(cols_pid, "team", "teamabbrev")
            c_pos = _pick(cols_pid, "position", "pos")
            c_dkid = _pick(cols_pid, "dk_id", "player_id_dk", "player_id", "id")
            if not c_dkid:
                _stderr(
                    "[playerIds] No DK ID column found (expected one of: dk_id, player_id_dk, player_id, id)"
                )
            else:
                # Normalize slim IDs table
                pid_cols = {"dk_id": _pid[c_dkid].astype(str)}
                if c_name:
                    pid_cols["name"] = _pid[c_name].astype(str)
                if c_team:
                    # teamabbrev -> TEAM
                    tseries = _pid[c_team].astype(str).str.upper()
                    pid_cols["team"] = tseries
                if c_pos:
                    pid_cols["position"] = _pid[c_pos].astype(str)
                player_ids_df = pd.DataFrame(pid_cols)

                # Best-effort merge into df on (name, team)
                if "df" in locals() and isinstance(df, pd.DataFrame):
                    # ensure df team uppercase for the join
                    if "team" in df.columns:
                        df["team"] = df["team"].astype(str).str.upper()
                    join_keys = [
                        k
                        for k in ["name", "team"]
                        if k in df.columns and k in player_ids_df.columns
                    ]
                    if join_keys:
                        pid_slim = player_ids_df.drop_duplicates(
                            subset=(
                                ["dk_id"] + join_keys
                                if "dk_id" in player_ids_df.columns
                                else join_keys
                            )
                        )
                        df = df.merge(pid_slim, on=join_keys, how="left", suffixes=("", "_pid"))
                        # If we already had a dk_id col, prefer non-null union; else adopt merged dk_id
                        if "dk_id" in df.columns and "dk_id_pid" in df.columns:
                            df["dk_id"] = df["dk_id"].where(df["dk_id"].notna(), df["dk_id_pid"])
                            df = df.drop(
                                columns=[c for c in df.columns if c.endswith("_pid")],
                                errors="ignore",
                            )
                        elif "dk_id_pid" in df.columns:
                            df = df.rename(columns={"dk_id_pid": "dk_id"})

    # Import functional API and Constraints shim
    try:
        from processes.optimizer._legacy.nba_optimizer_functional import (
            optimize_with_diagnostics,
        )
        from processes.optimizer.types import Constraints
    except Exception as e:  # pragma: no cover - surface clean error
        out = {
            "ok": False,
            "error": f"Optimizer backend import failed: {e}",
        }
        sys.stdout.write(json.dumps(out))
        return 0

    # Build constraints (allow passthrough dict from caller)
    cons_in: dict[str, Any] = req.get("constraints") or {}
    # Map common caller knobs if present
    max_salary = cons_in.get("max_salary") or cons_in.get("salary_cap") or None
    min_salary = cons_in.get("min_salary")
    team_cap = (
        cons_in.get("global_team_limit") or cons_in.get("team_cap") or cons_in.get("maxPerTeam")
    )
    N_lineups = int(cons_in.get("N_lineups") or cons_in.get("n_lineups") or 1)
    unique_players = int(cons_in.get("unique_players") or cons_in.get("uniques") or 0)
    randomness_pct = float(cons_in.get("randomness_pct") or cons_in.get("randomnessPct") or 0.0)
    ownership_penalty = cons_in.get("ownership_penalty")
    cp_sat_params = cons_in.get("cp_sat_params") or {}

    cons = Constraints.from_dict(
        {
            "N_lineups": N_lineups,
            "unique_players": unique_players,
            "max_salary": max_salary,
            "min_salary": min_salary,
            "global_team_limit": team_cap,
            "team_limits": cons_in.get("team_limits") or {},
            "lock_ids": cons_in.get("lock_ids") or [],
            "ban_ids": cons_in.get("ban_ids") or [],
            "proj_min": float(cons_in.get("proj_min") or 0.0),
            "randomness_pct": randomness_pct,
            "cp_sat_params": cp_sat_params,
            "ownership_penalty": ownership_penalty,
        }
    )

    try:
        from contextlib import redirect_stdout

        # Redirect noisy prints from legacy backend to stderr so stdout stays JSON-only
        with redirect_stdout(sys.stderr):
            lineups, diagnostics = optimize_with_diagnostics(
                df, cons, int(seed), site, player_ids_df=player_ids_df, engine=engine
            )
        elapsed_ms = int(round((time.time() - t0) * 1000))

        # Convert to JSON-able structure
        def pl2json(pl) -> dict[str, Any]:
            return {
                "player_id": pl.player_id,
                "name": pl.name,
                "pos": pl.pos,
                "team": pl.team,
                "salary": pl.salary,
                "proj": pl.proj,
                "dk_id": pl.dk_id,
                "own_proj": pl.own_proj,
            }

        out_lineups = [
            {
                "lineup_id": lu.lineup_id,
                "total_proj": lu.total_proj,
                "total_salary": lu.total_salary,
                "players": [pl2json(pl) for pl in lu.players],
            }
            for lu in (lineups or [])
        ]

        # --- Pool metrics for diagnostics -------------------------------------------------
        def _pool_metrics(out_lineups_json):
            """Compute quick diversity metrics & exposures for the returned lineups."""
            try:
                lineups_list = out_lineups_json or []
                # Prefer dk_id, fallback to player_id
                lid_lists = [
                    [(p.get("dk_id") or p.get("player_id")) for p in lu.get("players", [])]
                    for lu in lineups_list
                ]
                # Filter out Nones defensively
                lid_lists = [[x for x in lst if x is not None] for lst in lid_lists]
                sets = [set(lst) for lst in lid_lists if lst]
                # Pairwise overlap / Jaccard
                pairs = list(combinations(sets, 2))
                overlaps = [(len(a & b)) for a, b in pairs] if pairs else []
                jaccards = [(len(a & b) / max(1, len(a | b))) for a, b in pairs] if pairs else []
                # Exposures by player id
                counts = Counter([pid for lst in lid_lists for pid in lst])
                n_lineups = len(lid_lists) or 1
                exposures = {pid: c / n_lineups for pid, c in counts.items()}
                return {
                    "lineups": len(lid_lists),
                    "avg_overlap_players": ((sum(overlaps) / len(overlaps)) if overlaps else 0.0),
                    "avg_pairwise_jaccard": ((sum(jaccards) / len(jaccards)) if jaccards else 0.0),
                    "unique_player_count": len(set().union(*sets)) if sets else 0,
                    "exposures": exposures,
                }
            except Exception:
                return {
                    "lineups": 0,
                    "avg_overlap_players": 0.0,
                    "avg_pairwise_jaccard": 0.0,
                    "unique_player_count": 0,
                    "exposures": {},
                }

        pool_diag = _pool_metrics(out_lineups)

        # Helper: scrub JSON for non-finite numbers (Infinity/NaN) so JS JSON.parse succeeds
        import math

        def _clean_nans(obj):
            if isinstance(obj, float):
                return obj if math.isfinite(obj) else None
            if isinstance(obj, dict):
                return {k: _clean_nans(v) for k, v in obj.items()}
            if isinstance(obj, list):
                return [_clean_nans(v) for v in obj]
            return obj

        # Ensure diagnostics are JSON-serializable (handle numpy types)
        try:
            diag_safe = json.loads(json.dumps(diagnostics, default=lambda o: str(o)))
        except Exception:
            diag_safe = diagnostics

        # Augment diagnostics with constraint echo for UI tags
        constraints_echo = None
        try:
            constraints_echo = cons.to_dict()  # type: ignore[attr-defined]
        except Exception:
            constraints_echo = None
        # Include raw constraints as well (to carry nested pruning if present)
        try:
            diag_safe = diag_safe or {}
            if isinstance(diag_safe, dict):
                diag_safe["constraints"] = constraints_echo
                diag_safe["constraints_raw"] = cons_in
                # Ensure penalty snapshot includes curve_type and weight if available
                pen = (
                    (constraints_echo or {}).get("ownership_penalty")
                    if isinstance(constraints_echo, dict)
                    else None
                )
                if pen:
                    oe = diag_safe.setdefault("ownership_penalty", {})
                    if "curve_type" not in oe and "curve_type" in pen:
                        oe["curve_type"] = pen.get("curve_type")
                    if "weight_lambda" not in oe and "weight_lambda" in pen:
                        oe["weight_lambda"] = pen.get("weight_lambda")
        except Exception:
            pass

        # Attach pool diagnostics
        try:
            diag_safe = diag_safe or {}
            if isinstance(diag_safe, dict):
                diag_safe["pool"] = pool_diag
        except Exception:
            pass

        out = {
            "ok": True,
            "engineUsed": engine,
            "lineups": out_lineups,
            "summary": {
                "tried": diagnostics.get("N", len(out_lineups)),
                "valid": len(out_lineups),
                "bestScore": max((lu["total_proj"] for lu in out_lineups), default=0.0),
                "elapsedMs": elapsed_ms,
                "invalidReasons": {"salary": 0, "slots": 0, "teamcap": 0, "dup": 0},
                # Keep original constraints echo for UI convenience
                "optionsUsed": cons_in,
            },
            "diagnostics": diag_safe,
        }

        # Auto-save run under runs/<SLATE_KEY>/optimizer (rolling keep=10)
        try:
            slate_key = str(req.get("slateKey") or "").strip()
            if not slate_key:
                try:
                    from src.runs.api import gen_slate_key  # type: ignore

                    slate_key = gen_slate_key()
                except Exception:
                    slate_key = time.strftime("%y-%m-%d_%H%M%S", time.gmtime())

            meta = {
                "schema_version": 1,
                "module": "optimizer",
                "slate_key": slate_key,
                "engine": {"solver": engine, "seed": seed},
                "params": {
                    "uniques": int(cons_in.get("unique_players", 0)),
                    "ownership_penalty": {
                        "enabled": bool(
                            (constraints_echo or {})
                            .get("ownership_penalty", {})
                            .get("enabled", False)
                        ),
                        "lambda": float(
                            (constraints_echo or {})
                            .get("ownership_penalty", {})
                            .get("weight_lambda", 0.0)
                        ),
                        "curve": str(
                            (constraints_echo or {})
                            .get("ownership_penalty", {})
                            .get("curve_type", "linear")
                        ),
                    },
                },
                "diagnostics": {"pool": pool_diag},
            }

            artifacts = {
                "lineups_json": out_lineups,
                "diagnostics_json": diag_safe,
                "summary_json": out["summary"],
            }

            from src.runs.api import save_run  # type: ignore

            saved = save_run(
                slate_key=slate_key,
                module="optimizer",
                meta=meta,
                artifacts=artifacts,
                keep_last=10,
            )
            out["run_id"] = saved.run_id
            out["slate_key"] = saved.slate_key
            out["run_path"] = str(saved.run_dir)
        except Exception as e:
            _stderr(f"[runs/save] Warning: failed to save run: {e}")

        out = _clean_nans(out)
        sys.stdout.write(json.dumps(out))
        return 0
    except Exception as e:
        out = {
            "ok": False,
            "error": f"Optimization failed: {e}",
        }
        sys.stdout.write(json.dumps(out))
        return 0


if __name__ == "__main__":
    raise SystemExit(main())
</file>

<file path="src/runs/api.py">
from __future__ import annotations

import json
import os
import re
import shutil
import subprocess
from dataclasses import dataclass
from datetime import UTC, datetime
from pathlib import Path
from typing import Any, cast

try:
    # Python 3.9+ zoneinfo
    from zoneinfo import ZoneInfo
except Exception:  # pragma: no cover
    ZoneInfo = None  # type: ignore[misc, assignment]


NY_TZ = ZoneInfo("America/New_York") if ZoneInfo is not None else None


def gen_slate_key(dt: datetime | None = None) -> str:
    """Generate a slate key in YY-MM-DD_HHMMSS using America/New_York local time."""
    if dt is None:
        now = datetime.now(UTC)
    else:
        now = dt if dt.tzinfo else dt.replace(tzinfo=UTC)
    if NY_TZ:
        now = now.astimezone(NY_TZ)
    # YY-MM-DD_HHMMSS
    return now.strftime("%y-%m-%d_%H%M%S")


def _git_branch() -> str:
    try:
        out = subprocess.check_output(
            ["git", "rev-parse", "--abbrev-ref", "HEAD"], stderr=subprocess.DEVNULL
        )
        b = out.decode("utf-8").strip()
        b = re.sub(r"[^A-Za-z0-9_.-]", "-", b)
        return b or "local"
    except Exception:
        return "local"


def gen_run_id(dt: datetime | None = None, branch: str | None = None) -> str:
    ts = gen_slate_key(dt)
    slug = (branch or _git_branch())[:24]
    return f"{ts}__{slug}"


def _safe_write(path: Path, data: Any) -> None:
    path.parent.mkdir(parents=True, exist_ok=True)
    tmp = path.with_suffix(path.suffix + ".tmp")
    if isinstance(data, dict | list):
        tmp.write_text(json.dumps(data, indent=2, ensure_ascii=False))
    elif isinstance(data, str):
        tmp.write_text(data)
    else:
        raise TypeError("Unsupported data type for _safe_write")
    tmp.replace(path)


@dataclass
class SaveResult:
    slate_key: str
    module: str
    run_id: str
    run_dir: Path


def save_run(
    slate_key: str,
    module: str,
    meta: dict[str, Any],
    artifacts: dict[str, Any] | None = None,
    inputs_hash: dict[str, Any] | None = None,
    validation_metrics: dict[str, Any] | None = None,
    keep_last: int = 10,
) -> SaveResult:
    """
    Persist a run under `/runs/<SLATE>/<module>/<RUN_ID>/` with atomic semantics.
    - Writes `run_meta.json` and optional `inputs_hash.json` and
      `validation_metrics.json`.
    - Optional artifacts (lineups.json, diagnostics.json, summary.json)
    - Evicts oldest directories to keep at most `keep_last` runs
    """
    # Respect explicit project root if provided to ensure consistent location when
    # invoked from various working directories
    project_root = os.environ.get("PROJECT_ROOT")
    base_runs = Path(project_root) / "runs" if project_root else Path("runs")
    root = base_runs / slate_key / module
    run_id = str(meta.get("run_id") or gen_run_id())

    tmp_dir = root / f"__tmp__{run_id}"
    final_dir = root / run_id
    artifacts_dir = tmp_dir / "artifacts"
    # write contents to tmp then rename to final
    artifacts_dir.mkdir(parents=True, exist_ok=True)

    # normalize meta
    meta = {**meta}
    meta.setdefault("schema_version", 1)
    meta.setdefault("module", module)
    meta.setdefault("run_id", run_id)
    meta.setdefault("slate_key", slate_key)
    meta.setdefault("created_at", datetime.now(UTC).isoformat().replace("+00:00", "Z"))
    # reference artifact paths if we are writing them
    if artifacts and isinstance(artifacts, dict):
        art_ref = meta.setdefault("artifacts", {})
        for k, v in list(artifacts.items()):
            if k.endswith("_json") and isinstance(v, dict | list):
                _safe_write(artifacts_dir / k, v)
                art_ref[k] = f"artifacts/{k}"

    if inputs_hash is not None:
        _safe_write(tmp_dir / "inputs_hash.json", inputs_hash)
    if validation_metrics is not None:
        _safe_write(tmp_dir / "validation_metrics.json", validation_metrics)

    _safe_write(tmp_dir / "run_meta.json", meta)

    # finalize
    tmp_dir.replace(final_dir)

    # evict oldest beyond keep_last
    try:
        _evict_oldest(root, keep_last)
    except Exception:
        # best-effort; do not fail the save on eviction issues
        pass

    return SaveResult(slate_key=slate_key, module=module, run_id=run_id, run_dir=final_dir)


def _evict_oldest(root: Path, keep_last: int) -> None:
    if keep_last <= 0:
        return
    if not root.exists():
        return
    run_dirs = [p for p in root.iterdir() if p.is_dir() and not p.name.startswith("__tmp__")]

    # sort by created_at in meta if present, else mtime
    def _key(p: Path) -> tuple[float, str]:
        meta_p = p / "run_meta.json"
        ts = p.stat().st_mtime
        try:
            meta = json.loads(meta_p.read_text())
            ca = meta.get("created_at")
            if isinstance(ca, str):
                dt = datetime.fromisoformat(ca.replace("Z", "+00:00"))
                ts = dt.timestamp()
        except Exception:
            pass
        return (ts, p.name)

    run_dirs.sort(key=_key, reverse=True)
    for p in run_dirs[keep_last:]:
        try:
            shutil.rmtree(p, ignore_errors=True)
        except Exception:
            pass


def get_run(slate_key: str, module: str, run_id: str) -> dict[str, Any]:
    base = Path("runs") / slate_key / module / run_id
    meta_p = base / "run_meta.json"
    if not meta_p.exists():
        raise FileNotFoundError(str(meta_p))
    return cast(dict[str, Any], json.loads(meta_p.read_text()))


def list_runs(slate_key: str, module: str, limit: int = 10) -> list[dict[str, Any]]:
    base = Path("runs") / slate_key / module
    if not base.exists():
        return []
    rows: list[dict[str, Any]] = []
    for p in base.iterdir():
        if not p.is_dir() or p.name.startswith("__tmp__"):
            continue
        meta_p = p / "run_meta.json"
        meta: dict[str, Any]
        try:
            meta = json.loads(meta_p.read_text()) if meta_p.exists() else {}
        except Exception:
            meta = {}
        created_ts = p.stat().st_mtime
        if meta and isinstance(meta.get("created_at"), str):
            try:
                dt = datetime.fromisoformat(meta["created_at"].replace("Z", "+00:00"))
                created_ts = dt.timestamp()
            except Exception:
                pass
        rows.append(
            {
                "run_id": p.name,
                "slate_key": slate_key,
                "module": module,
                "created_at": meta.get("created_at"),
                "path": str(p),
                "meta": meta or None,
                "_ts": created_ts,
            }
        )
    rows.sort(key=lambda r: (r.get("_ts", 0.0), r.get("run_id", "")), reverse=True)
    for r in rows:
        r.pop("_ts", None)
    if limit and limit > 0:
        return rows[:limit]
    return rows


def prune_runs(slate_key: str, module: str, retention_days: int = 14) -> int:
    """Remove non-tagged runs older than retention_days. Returns number removed."""
    base = Path("runs") / slate_key / module
    if not base.exists():
        return 0
    cutoff = datetime.now(UTC).timestamp() - retention_days * 86400.0
    removed = 0
    for p in base.iterdir():
        if not p.is_dir() or p.name.startswith("__tmp__"):
            continue
        if (p / "tag.txt").exists():
            continue
        meta_p = p / "run_meta.json"
        try:
            meta = json.loads(meta_p.read_text()) if meta_p.exists() else {}
        except Exception:
            meta = {}
        ts = p.stat().st_mtime
        if isinstance(meta.get("created_at"), str):
            try:
                dt = datetime.fromisoformat(meta["created_at"].replace("Z", "+00:00"))
                ts = dt.timestamp()
            except Exception:
                pass
        if ts < cutoff and not meta.get("tag"):
            try:
                shutil.rmtree(p, ignore_errors=True)
                removed += 1
            except Exception:
                pass
    return removed
</file>

<file path="styles/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 100% 50%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 63% 31%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 48%;

    --radius: 0.5rem;
  }

  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Skip link utility */
.skip-link {
  position: absolute;
  top: -40px;
  left: 0.5rem;
  background: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
  padding: 8px 12px;
  border-radius: 0 0 6px 0;
  z-index: 9999;
}
.skip-link:focus, .skip-link:focus-visible {
  top: 0;
  outline: 2px solid hsl(var(--ring));
}

/* Reduced motion adjustments */
@media (prefers-reduced-motion: reduce) {
  *, *::before, *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* Custom scrollbars */
.custom-scrollbar {
  /* Firefox */
  scrollbar-width: auto;
  scrollbar-color: hsl(var(--muted-foreground)) hsl(var(--muted));
}

.custom-scrollbar::-webkit-scrollbar {
  width: 12px;
  height: 12px;
}

.custom-scrollbar::-webkit-scrollbar-track {
  background: hsl(var(--muted));
  border-radius: 6px;
}

.custom-scrollbar::-webkit-scrollbar-thumb {
  background-color: hsl(var(--muted-foreground));
  border-radius: 6px;
  border: 2px solid hsl(var(--muted));
}

.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background-color: hsl(var(--foreground) / 0.6);
}

.custom-scrollbar::-webkit-scrollbar-corner {
  background: hsl(var(--muted));
}
</file>

<file path="tests/test_field_adapter_smoke.py">
from __future__ import annotations

from pathlib import Path
from typing import Any

import pandas as pd

from processes.field_sampler import adapter as field


def _export_row(players: list[str]) -> str:
    slots = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]
    return ",".join(f"{s} {p}" for s, p in zip(slots, players, strict=False))


def _stub_run_sampler(catalog_df: pd.DataFrame, knobs: dict[str, Any], seed: int):
    # Use first two catalog rows to build 2 entrants
    e: list[dict[str, Any]] = []
    for _, row in catalog_df.head(2).iterrows():
        players = list(row["players"])  # 8 DK IDs
        e.append(
            {
                "origin": "variant",
                "variant_id": str(row.get("variant_id", "V")),
                "players": players,
                "export_csv_row": str(row.get("export_csv_row") or _export_row(players)),
                "weight": 1.0,
            }
        )
    return e, {"note": "stub"}


def test_smoke_end_to_end(tmp_path: Path, monkeypatch):
    slate_id = "20251101_NBA"
    # Prepare a tiny variant catalog parquet
    players1 = [f"p{i}" for i in range(8)]
    players2 = [f"p{i}" for i in [0, 2, 3, 4, 5, 6, 7, 1]]
    vc = pd.DataFrame(
        [
            {
                "run_id": "rid_var",
                "variant_id": "V1",
                "parent_lineup_id": "L1",
                "players": players1,
                "variant_params": {"_": None},
                "export_csv_row": _export_row(players1),
            },
            {
                "run_id": "rid_var",
                "variant_id": "V2",
                "parent_lineup_id": "L1",
                "players": players2,
                "variant_params": {"_": None},
                "export_csv_row": _export_row(players2),
            },
        ]
    )
    cat_path = tmp_path / "variant_catalog.parquet"
    vc.to_parquet(cat_path)

    # Monkeypatch sampler loader
    monkeypatch.setattr(field, "_load_sampler", lambda: _stub_run_sampler)

    out_root = tmp_path / "out"
    out_root.mkdir(parents=True, exist_ok=True)

    # Act
    result = field.run_adapter(
        slate_id=slate_id,
        config_path=None,
        config_kv=["field_size=2"],
        seed=42,
        out_root=out_root,
        tag="PRP-4",
        input_path=cat_path,
    )

    # Assert artifacts
    run_id = result["run_id"]
    run_dir = out_root / "runs" / "field" / run_id
    assert (run_dir / "artifacts" / "field.parquet").exists()
    assert (run_dir / "artifacts" / "metrics.parquet").exists()
    assert (run_dir / "manifest.json").exists()
    # Registry appended
    registry = out_root / "registry" / "runs.parquet"
    assert registry.exists()
    reg_df = pd.read_parquet(registry)
    assert (reg_df["run_type"] == "field").any()
</file>

<file path="tests/test_ingest_normalize_smoke.py">
from __future__ import annotations

import json
from pathlib import Path

import pandas as pd


def test_ingest_cli_smoke(tmp_path: Path) -> None:
    out_root = tmp_path / "out"
    projections = Path("tests/fixtures/projections_sourceA.csv")
    players = Path("tests/fixtures/player_ids.csv")
    mapping = Path("pipeline/ingest/mappings/example_source.yaml")

    # run CLI
    from pipeline.ingest.cli import main  # import here to avoid package issues

    rc = main(
        [
            "--slate-id",
            "20251101_NBA",
            "--source",
            "primary",
            "--projections",
            str(projections),
            "--player-ids",
            str(players),
            "--mapping",
            str(mapping),
            "--out-root",
            str(out_root),
            "--tag",
            "PRP-1",
        ]
    )
    assert rc == 0

    # Check artifacts exist
    players_out = out_root / "reference/players.parquet"
    raw_dir = out_root / "projections/raw"
    norm_dir = out_root / "projections/normalized"
    registry = out_root / "registry/runs.parquet"
    assert players_out.exists()
    assert list(raw_dir.glob("*.parquet")), "raw parquet not written"
    norm_files = list(norm_dir.glob("*.parquet"))
    assert norm_files, "normalized parquet not written"
    assert registry.exists()

    # Validate normalized columns
    df_norm = pd.read_parquet(norm_files[0])
    expected_cols = {
        "slate_id",
        "source",
        "dk_player_id",
        "name",
        "team",
        "pos",
        "salary",
        "minutes",
        "proj_fp",
        "updated_ts",
        "lineage",
    }
    assert expected_cols.issubset(set(df_norm.columns))

    # Manifest JSON exists
    run_dirs = list((out_root / "runs/ingest").glob("*"))
    assert run_dirs, "run directory not created"
    manifest_path = run_dirs[0] / "manifest.json"
    assert manifest_path.exists()
    manifest = json.loads(manifest_path.read_text())
    assert manifest["run_id"] and manifest["schema_version"] == "0.2.1"
</file>

<file path="tests/test_orchestrator_smoke.py">
from __future__ import annotations

import json
from collections.abc import Mapping
from pathlib import Path
from typing import Any

import pandas as pd

from processes.orchestrator import adapter as orch

DK_SLOTS = ["PG", "SG", "SF", "PF", "C", "G", "F", "UTIL"]


def _make_players_csv(tmp: Path) -> tuple[Path, Path]:
    players_csv = tmp / "players.csv"
    proj_csv = tmp / "projections.csv"
    # 8 simple players
    rows = [
        {"dk_player_id": f"P{i}", "name": f"Player {i}", "team": "BOS", "pos": "PG"}
        for i in range(1, 9)
    ]
    pd.DataFrame(rows).to_csv(players_csv, index=False)

    # projections use mapping headers (raw headers): DK_ID, Name, Team, Pos, Salary, FP
    proj_rows = [
        {
            "DK_ID": f"P{i}",
            "Name": f"Player {i}",
            "Team": "BOS",
            "Pos": "PG",
            "Salary": 6000 + i * 100,
            "FP": 30.0 + i,
        }
        for i in range(1, 9)
    ]
    pd.DataFrame(proj_rows).to_csv(proj_csv, index=False)
    return players_csv, proj_csv


def _stub_optimizer_impl(
    projections_df: pd.DataFrame,
    constraints: Mapping[str, Any],
    seed: int,
    site: str,
    engine: str,
):
    # Build 2 trivial lineups from first 8 player ids
    col = "dk_player_id" if "dk_player_id" in projections_df.columns else "player_id"
    ids = list(map(str, projections_df[col].astype(str).head(8)))

    def _lineup():
        return {
            "players": ids,
            "dk_positions_filled": [{"slot": s, "position": s} for s in DK_SLOTS],
            "total_salary": 50000,
            "proj_fp": 250.0,
        }

    return [
        _lineup(),
        _lineup(),
    ], {"seed": seed, "engine": engine}


def _stub_variants_impl(parent_lineups_df: pd.DataFrame, knobs: Mapping[str, Any], seed: int):
    variants: list[Mapping[str, Any]] = []
    for _, row in parent_lineups_df.head(1).iterrows():
        variants.append(
            {
                "variant_id": "V1",
                "parent_lineup_id": str(row["lineup_id"]),
                "players": list(row["players"]),
                # proj_fp/total_salary optional; adapter computes deltas
            }
        )
    return variants, {"seed": seed}


def _stub_field_impl(catalog_df: pd.DataFrame, knobs: Mapping[str, Any], seed: int):
    entrants = []
    # Take first variant
    v = catalog_df.iloc[0]
    entrants.append(
        {
            "origin": "variant",
            "variant_id": str(v["variant_id"]),
            "players": list(v["players"]),
            "weight": 1.0,
        }
    )
    return entrants, {"seed": seed}


def _stub_sim_impl(
    field_df: pd.DataFrame,
    contest: Mapping[str, Any],
    knobs: Mapping[str, Any],
    seed: int,
):
    rows = [
        {
            "world_id": 1,
            "entrant_id": int(field_df.iloc[0]["entrant_id"]),
            "score": 300.0,
            "rank": 1,
            "prize": 500.0,
        },
        {
            "world_id": 1,
            "entrant_id": 999999,
            "score": 100.0,
            "rank": contest.get("field_size", 2),
            "prize": 0.0,
        },
    ]
    aggs = {"ev_mean": 10.0, "roi_mean": 0.1}
    return rows, aggs, {"seed": seed}


def test_orchestrator_smoke(tmp_path, monkeypatch):
    # Prepare inputs
    out_root = tmp_path / "out"
    out_root.mkdir(parents=True, exist_ok=True)
    players_csv, proj_csv = _make_players_csv(tmp_path)

    # Write orchestrator config
    cfg = {
        "slate_id": "20250101_NBA",
        "seeds": {"optimizer": 1, "variants": 2, "field": 3, "sim": 4},
        "ingest": {
            "source": "manual",
            "projections": str(proj_csv),
            "player_ids": str(players_csv),
            "mapping": str(Path("pipeline/ingest/mappings/example_source.yaml").resolve()),
        },
        "optimizer": {"site": "DK", "engine": "cbc", "config": {"num_lineups": 2}},
        "variants": {"config": {"num_variants": 1}},
        "field": {"config": {"field_size": 2}},
        "sim": {
            "config": {"num_trials": 5},
            "contest": {
                "field_size": 2,
                "payout_curve": [
                    {"rank_start": 1, "rank_end": 1, "prize": 500},
                    {"rank_start": 2, "rank_end": 2, "prize": 0},
                ],
                "entry_fee": 20,
                "rake": 0.15,
                "site": "DK",
            },
        },
    }
    cfg_path = tmp_path / "orch.yaml"
    cfg_path.write_text(json.dumps(cfg), encoding="utf-8")

    # Monkeypatch stage implementations
    import processes.field_sampler.adapter as fld
    import processes.gpp_sim.adapter as gsim
    import processes.optimizer.adapter as opt
    import processes.variants.adapter as var

    monkeypatch.setattr(opt, "_load_optimizer", lambda: _stub_optimizer_impl)
    monkeypatch.setattr(var, "_load_variant", lambda: _stub_variants_impl)
    monkeypatch.setattr(fld, "_load_sampler", lambda: _stub_field_impl)
    monkeypatch.setattr(gsim, "_load_sim_impl", lambda: _stub_sim_impl)

    # Execute orchestrator
    res = orch.run_bundle(
        slate_id="20250101_NBA",
        config_path=cfg_path,
        config_kv=None,
        out_root=out_root,
        schemas_root=Path("pipeline/schemas"),
        validate=True,
        dry_run=False,
        verbose=True,
    )

    bundle_path = Path(res["bundle_path"])  # type: ignore[index]
    assert bundle_path.exists(), "bundle.json should be created"
    bundle = json.loads(bundle_path.read_text(encoding="utf-8"))
    assert bundle.get("bundle_id")
    assert [s["name"] for s in bundle.get("stages", [])] == [
        "ingest",
        "optimizer",
        "variants",
        "field",
        "sim",
    ]

    # Validate that each stage manifest exists
    for s in bundle["stages"]:
        mpath = Path(s["manifest"]).resolve()
        assert mpath.exists(), f"manifest should exist for stage {s['name']}"
</file>

<file path="tests/test_priority_latest_wins.py">
from __future__ import annotations

import pandas as pd

from pipeline.ingest.cli import (
    MappingSpec,
    apply_latest_wins_priority,
    normalize_projections,
)


def test_latest_wins_tiebreaker() -> None:
    # two rows for same player with different updated_ts and source
    data = pd.DataFrame(
        {
            "DK_ID": ["1001", "1001"],
            "Name": ["Player A", "Player A"],
            "Team": ["BOS", "BOS"],
            "Pos": ["SF/PF", "SF/PF"],
            "Salary": [9800, 9900],
            "Minutes": [36, 35],
            "FP": [48.2, 47.0],
        }
    )
    mapping = MappingSpec(
        name="ex",
        header_map={
            "DK_ID": "dk_player_id",
            "Name": "name",
            "Team": "team",
            "Pos": "pos",
            "Salary": "salary",
            "Minutes": "minutes",
            "FP": "proj_fp",
        },
        source_fields=["DK_ID", "Name", "Team", "Pos", "Salary", "Minutes", "FP"],
    )

    df1 = normalize_projections(
        data.iloc[[0]],
        mapping,
        "20251101_NBA",
        "other",
        updated_ts="2025-11-01T16:00:00.000Z",
        content_sha256="a" * 64,
    )
    df2 = normalize_projections(
        data.iloc[[1]],
        mapping,
        "20251101_NBA",
        "manual",
        updated_ts="2025-11-01T15:59:00.000Z",
        content_sha256="b" * 64,
    )
    combined = pd.concat([df1, df2], ignore_index=True)

    # Although manual has earlier timestamp, precedence should beat others on tie-break when timestamps equal; but here latest timestamp wins.
    deduped = apply_latest_wins_priority(combined)
    assert len(deduped) == 1
    # latest by updated_ts wins: df1 (other, 16:00) vs df2 (manual, 15:59)
    assert deduped.iloc[0]["salary"] == 9800

    # Now force same timestamp to test precedence
    df1_same = df1.copy()
    df1_same.loc[:, "updated_ts"] = "2025-11-01T16:00:00.000Z"
    df2_same = df2.copy()
    df2_same.loc[:, "updated_ts"] = "2025-11-01T16:00:00.000Z"
    deduped2 = apply_latest_wins_priority(pd.concat([df1_same, df2_same], ignore_index=True))
    assert len(deduped2) == 1
    # manual should beat other on tie
    assert deduped2.iloc[0]["source"] == "manual"
</file>

<file path="tests/test_runtime_validation.py">
from __future__ import annotations

import shutil
from pathlib import Path

import yaml


def test_runtime_validation_blocks_on_schema_mismatch(tmp_path: Path) -> None:
    # Prepare a schemas_root copy that rejects 'ingest' run_type
    # by removing it from the RunTypeEnum list
    schemas_src = Path("pipeline/schemas")
    schemas_dst = tmp_path / "schemas_bad"
    shutil.copytree(schemas_src, schemas_dst)

    # Overwrite common.types.yaml to drop 'ingest' from RunTypeEnum
    # using a robust YAML edit instead of string replacement
    common_path = schemas_dst / "common.types.yaml"
    common_schema = yaml.safe_load(common_path.read_text())
    enum_path = ["definitions", "RunTypeEnum", "enum"]
    cursor = common_schema
    for key in enum_path[:-1]:
        cursor = cursor[key]
    enum_list = list(cursor.get(enum_path[-1], []))
    if "ingest" in enum_list:
        enum_list.remove("ingest")
        cursor[enum_path[-1]] = enum_list
        common_path.write_text(yaml.safe_dump(common_schema, sort_keys=False))

    out_root = tmp_path / "out"
    projections = Path("tests/fixtures/projections_sourceA.csv")
    players = Path("tests/fixtures/player_ids.csv")
    mapping = Path("pipeline/ingest/mappings/example_source.yaml")

    from pipeline.ingest.cli import main

    rc = main(
        [
            "--slate-id",
            "20251101_NBA",
            "--source",
            "primary",
            "--projections",
            str(projections),
            "--player-ids",
            str(players),
            "--mapping",
            str(mapping),
            "--out-root",
            str(out_root),
            "--schemas-root",
            str(schemas_dst),
        ]
    )
    assert rc != 0, "Expected non-zero exit on validation failure"

    # Ensure nothing was written (no manifest, no parquet outputs)
    assert not (out_root / "runs").exists()
    assert not (out_root / "registry").exists()
    assert not (out_root / "projections").exists()
    assert not (out_root / "reference").exists()
</file>

<file path="CLAUDE.md">
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Development Commands

### Environment Setup
- **Python package management**: Use `uv sync` (includes dev dependencies with `--extra dev`)
- **Development dependencies**: `uv sync --extra dev`
- **Node.js dependencies**: `npm install`

### Code Quality & Testing

**Python**:
- **Format code**: `black .`
- **Lint code**: `ruff check .` (fix with `ruff check . --fix`)
- **Type checking**: `mypy .`
- **Run tests**: `pytest -q` (configured in pyproject.toml)
- **Test coverage**: `pytest --cov`

**Frontend (Next.js)**:
- **Development server**: `npm run dev` (runs on port 3000)
- **Build**: `npm run build`
- **Start production**: `npm run start` (runs on port 3000)
- **Run tests**: `npm run test` (Vitest)

### CI Pipeline (must pass before commit)
```bash
uv sync --extra dev
ruff check .
black --check .
mypy .
pytest -q
```

### Schema Validation
- **Validate YAML schemas**: `yamllint pipeline/schemas/`
- **JSON Schema validation**: Use `jsonschema` package with Draft 2020-12

## Architecture Overview

This is a **monorepo** for NBA Daily Fantasy Sports data pipeline and analysis tools with strict deterministic processing requirements. It combines a Python backend for data processing with a Next.js frontend for visualization and interaction.

### Core Structure
- **`pipeline/`**: Data ingestion, normalization, schemas, and I/O adapters
- **`processes/`**: Core analysis modules (optimizer, variant builder, field sampler, simulator)
- **`app/`**: Unified dashboard (future)
- **`data/`**: Parquet data store (gitignored)
- **`docs/`**: Design documentation and PRPs (Phased Requirement Plans)

### Key Components

**Pipeline Module**:
- `pipeline/ingest/`: CLI for data ingestion with YAML source mappings
- `pipeline/schemas/`: Strict JSON Schema definitions (Draft 2020-12) for all data contracts
- `pipeline/io/`: File operations and validation utilities
- `pipeline/registry/`: Run registry management

**Processes Module**:
- `processes/optimizer/`: DFS lineup optimization using CP-SAT (OR-Tools) or CBC fallback
- `processes/variants/`: Lineup variant generation
- `processes/field_sampler/`: Contest field sampling
- `processes/gpp_sim/`: Tournament simulation
- `processes/api/`: FastAPI endpoints for process orchestration

**Frontend/Integration**:
- `app/`: Next.js dashboard with React components
- `lib/`: Shared TypeScript utilities (domain logic, state management, UI)
- `components/`: Reusable UI components (Shadcn/ui, Aceternity)

## Data Architecture

### Schema System
- **All data uses strict JSON Schema validation** (additionalProperties: false)
- **Versioned schemas** using semantic versioning (major.minor.patch)
- **Primary storage**: Parquet with 1:1 JSON/CSV export capability
- **Schema files**: `pipeline/schemas/*.schema.yaml`

### Core Data Contracts

**Players** (`players.schema.yaml`):
- `player_id_dk`: DraftKings player ID (carries through entire pipeline)
- Position enums: {PG, SG, SF, PF, C, G, F, UTIL}
- Team codes: 3-letter format

**Projections** (`projections_normalized.schema.yaml`):
- Normalized from raw CSV inputs
- Includes salary, projected fantasy points, minutes, ownership
- Must maintain `lineage` object with source tracking

**Run Registry** (`runs_registry.schema.yaml`):
- Every run gets unique ID: `YYYYMMDD_HHMMSS_<shorthash>`
- Immutable run artifacts with metadata and input hashes

### Data Flow
1. **Ingest**: Raw CSV → normalized Parquet (with schema validation)
2. **Optimizer**: Projections → optimal lineups
3. **Variants**: Base lineups → multiple lineup variants  
4. **Field**: Lineups → contest field simulation
5. **Simulator**: Contest field → tournament results

## Development Principles

### Determinism & Reproducibility
- **All stochastic operations require explicit `seed` parameter**
- **Run artifacts include `run_meta.json`** with seed, config, and timestamps
- **Idempotent operations**: Same inputs + seed = same outputs
- **Slate keys**: Format `YY-MM-DD_HHMMSS` (America/New_York timezone)

### Data Integrity
- **Player ID persistence**: `player_id_dk` must flow through entire pipeline
- **Schema validation**: All I/O operations validate against schemas
- **Content hashing**: Input files tracked by SHA256 for change detection
- **Immutable runs**: Run registry is read-only after creation

### Code Quality
- **Python version**: Use current local runtime (avoid 3.13-only features)
- **Typing**: Strict mode enabled for new modules (`mypy --strict`)
- **Import organization**: First-party modules: `["pipeline", "processes", "app"]`
- **Conventional commits**: Use `feat:`, `fix:`, `refactor:`, `docs:` prefixes

## File System Conventions

### Protected Areas (READ-ONLY for agents)
- `data/raw/`: User uploads - never modify
- `runs/`: Run registry - immutable after creation

### Editable Areas
- `pipeline/`, `processes/`, `app/`: Source code
- `tests/`: Test files  
- `configs/`: Configuration files
- `docs/`: Documentation

### Configuration
- **Tracked defaults**: `configs/defaults.yaml`
- **Local overrides**: `configs/local.yaml` (gitignored)
- **Environment**: `.env.example` (tracked), `.env` (gitignored)

## Agent Operating Rules

### Change Management
- **Small changes**: <30 LOC, single module - allowed directly
- **Large changes**: >30 LOC or multi-module - requires PRP documentation
- **Schema changes**: Always require tests and PRP documentation
- **No force-push** to main branch

### Safety Rails
- Never write to `data/raw/` or `runs/` without slate key validation
- Never embed secrets in code or commits
- All new dependencies must update `uv.lock`
- Maintain existing code style and patterns

### Development Workflow
1. Use `uv sync --extra dev` for complete environment setup
2. Run full CI pipeline before committing changes
3. Validate schemas when modifying data contracts
4. Include tests for new modules in `tests/`
5. Follow conventional commit format for all commits

## Testing Strategy

**Python Tests**:
- **Location**: `tests/` directory with fixtures in `tests/fixtures/`
- **Framework**: pytest with coverage support
- **Run specific test**: `pytest tests/test_specific.py -v`
- **Fixtures**: Use `tests/fixtures/` for test data (CSV samples, YAML mappings)

**Frontend Tests**:
- **Framework**: Vitest with React Testing Library patterns
- **Config**: Vitest config in `vitest.config.ts` with path alias `@` for root
- **Component tests**: Located alongside components or in dedicated test directories
</file>

<file path="README.md">
# NBA-DFS Pipeline

A comprehensive data pipeline and optimization system for NBA Daily Fantasy Sports, combining advanced mathematical optimization with an intuitive web interface for lineup generation, variant analysis, field sampling, and tournament simulation.

## Overview

NBA-DFS is a **monorepo** that provides end-to-end DFS workflow management with strict deterministic processing requirements. It combines a robust Python backend for data processing and optimization with a modern Next.js frontend for visualization and interaction.

### Key Features

- **📊 Data Pipeline**: Automated ingestion, normalization, and validation of projection data
- **🔬 Mathematical Optimization**: CP-SAT and CBC solvers for optimal lineup generation
- **🎯 Variant Analysis**: Generate diverse lineup variants from base optimizations
- **👥 Field Sampling**: Create representative contest field compositions
- **🏆 Tournament Simulation**: Monte Carlo simulation with expected value calculations
- **🎨 Web Interface**: Unified dashboard for all pipeline operations
- **🔄 Deterministic Processing**: Reproducible results with explicit seed management
- **📈 Analytics**: Comprehensive metrics and performance tracking

## Architecture

```mermaid
graph TB
    subgraph "Data Layer"
        CSV[Raw CSV Data] --> INGEST[Pipeline/Ingest]
        INGEST --> PARQUET[Normalized Parquet]
    end
    
    subgraph "Processing Layer"
        PARQUET --> OPT[Optimizer]
        OPT --> VAR[Variants]
        VAR --> FIELD[Field Sampler]
        FIELD --> SIM[GPP Simulator]
    end
    
    subgraph "Interface Layer"
        WEB[Next.js Dashboard] --> API[API Routes]
        API --> OPT
        API --> VAR
        API --> FIELD
        API --> SIM
    end
    
    subgraph "Storage Layer"
        REGISTRY[(Run Registry)]
        ARTIFACTS[(Parquet Artifacts)]
        OPT --> REGISTRY
        VAR --> REGISTRY
        FIELD --> REGISTRY
        SIM --> REGISTRY
    end
```

### Core Workflow

1. **📥 Ingest**: Raw CSV projections → Normalized parquet with schema validation
2. **⚡ Optimize**: Projections → Optimal lineups using CP-SAT/CBC solvers  
3. **🔀 Generate Variants**: Base lineups → Diversified lineup variants
4. **👥 Sample Field**: Variants → Representative contest field composition
5. **🎲 Simulate**: Contest field → Tournament results with EV metrics

## Project Structure

```
nba-dfs/
├── pipeline/           # Data ingestion, normalization & schemas
├── processes/          # Core analysis modules (optimizer, variants, etc.)
├── app/               # Next.js web application
├── lib/               # Shared TypeScript utilities
├── components/        # React UI components
├── configs/           # YAML configuration files
├── docs/              # Documentation and design specs
├── tests/             # Comprehensive test suite
├── scripts/           # Development and utility scripts
├── data/              # Parquet data store (gitignored)
└── runs/              # Run artifacts and registry
```

## Quick Start

### Prerequisites

- **Python 3.11+** with `uv` package manager
- **Node.js 18+** with npm
- **Git** for version control

### Installation

```bash
# Clone the repository
git clone <repository-url>
cd nba-dfs

# Install Python dependencies
uv sync --extra dev

# Install Node.js dependencies  
npm install

# Verify installation
uv run python --version
node --version
```

### Development Setup

```bash
# Start the web development server
npm run dev

# The application will be available at http://localhost:3000
```

### Example: Complete DFS Workflow

```bash
# 1. Ingest raw projections data
python -m pipeline.ingest \
  --slate-id 20251101_NBA \
  --source primary \
  --projections data/raw/projections.csv \
  --player-ids data/raw/player_ids.csv \
  --mapping pipeline/ingest/mappings/dk_source.yaml

# 2. Run optimizer to generate base lineups
python -m processes.optimizer \
  --slate-id 20251101_NBA \
  --site DK \
  --config configs/optimizer.yaml \
  --seed 42

# 3. Generate lineup variants
python -m processes.variants \
  --slate-id 20251101_NBA \
  --config configs/variants.yaml \
  --seed 42 \
  --from-run optimizer_run_id

# 4. Sample contest field
python -m processes.field_sampler \
  --slate-id 20251101_NBA \
  --config configs/field.yaml \
  --seed 42 \
  --from-run variants_run_id

# 5. Run GPP simulation
python -m processes.gpp_sim \
  --slate-id 20251101_NBA \
  --config configs/sim.yaml \
  --seed 42 \
  --from-run field_run_id
```

## Module Documentation

### Core Modules

| Module | Purpose | Documentation |
|--------|---------|---------------|
| **[pipeline/](pipeline/README.md)** | Data ingestion, normalization & schemas | [→ Pipeline README](pipeline/README.md) |
| **[processes/](processes/README.md)** | Optimization, variants, field sampling & simulation | [→ Processes README](processes/README.md) |
| **[app/](app/README.md)** | Next.js web application & API routes | [→ App README](app/README.md) |
| **[lib/](lib/README.md)** | Shared TypeScript utilities & state management | [→ Lib README](lib/README.md) |
| **[components/](components/README.md)** | React UI components & design system | [→ Components README](components/README.md) |

### Supporting Directories

| Directory | Purpose | Documentation |
|-----------|---------|---------------|
| **[configs/](configs/README.md)** | YAML configuration files | [→ Configs README](configs/README.md) |
| **[docs/](docs/README.md)** | Design documentation & PRPs | [→ Docs README](docs/README.md) |
| **[tests/](tests/README.md)** | Comprehensive test suite | [→ Tests README](tests/README.md) |
| **[scripts/](scripts/README.md)** | Utility scripts & automation | [→ Scripts README](scripts/README.md) |

## Technology Stack

### Backend (Python)
- **Optimization**: OR-Tools (CP-SAT), PuLP (CBC)
- **Data Processing**: pandas, pyarrow, duckdb
- **Validation**: pydantic, jsonschema
- **API**: FastAPI (future)
- **Testing**: pytest, coverage

### Frontend (Next.js)
- **Framework**: Next.js 14, React 18
- **UI Components**: Shadcn/ui, Radix UI
- **Styling**: Tailwind CSS
- **State Management**: Zustand
- **Data Tables**: TanStack Table
- **Testing**: Vitest, Playwright

### Data Storage
- **Primary**: Parquet files (via pyarrow)
- **Schemas**: JSON Schema Draft 2020-12
- **Registry**: Append-only run tracking
- **Export**: 1:1 CSV/JSON capability

## Development Workflow

### Code Quality Pipeline

```bash
# Python code quality (required before commit)
uv sync --extra dev
ruff check .
black --check .
mypy .
pytest -q

# Frontend development
npm run dev          # Development server
npm run build        # Production build
npm run test         # Unit tests
npm run test:e2e     # End-to-end tests
```

### Environment Configuration

```bash
# .env.example (copy to .env)
NEXT_PUBLIC_API_BASE_URL=http://localhost:3000
PYTHON_ENV_PATH=./.venv/bin/python
DFS_SOLVER_MODE=python  # or 'sampler' for fallback
DATA_ROOT=./data
```

## Key Principles

### Determinism & Reproducibility
- **Seeded Operations**: All stochastic operations require explicit `seed` parameter
- **Immutable Artifacts**: Run artifacts include metadata with seed, config, and timestamps  
- **Content Hashing**: Input files tracked by SHA-256 for change detection
- **Idempotent**: Same inputs + seed = same outputs

### Data Integrity
- **Schema Validation**: All I/O operations validate against strict JSON schemas
- **Player ID Persistence**: `player_id_dk` flows through entire pipeline
- **Lineage Tracking**: Complete audit trail from raw data to final results
- **Protected Areas**: `data/raw/` and `runs/` are read-only for safety

### Code Quality Standards
- **Typing**: Strict TypeScript and Python type checking
- **Testing**: >80% code coverage target
- **Linting**: Automated code formatting and style enforcement
- **Documentation**: Comprehensive READMEs and inline documentation

## Performance Characteristics

### Optimization Performance
- **Small Contests** (≤100 lineups): ~2-10 seconds
- **Large Contests** (1000+ lineups): ~30-120 seconds  
- **Solver**: CP-SAT preferred, CBC fallback available
- **Memory**: ~1-4GB for typical workloads

### Data Processing
- **Ingestion**: ~1-5 seconds for typical CSV files
- **Validation**: Real-time schema validation during upload
- **Storage**: Parquet provides ~10x compression vs CSV
- **Export**: Sub-second DraftKings CSV generation

## Troubleshooting

### Common Issues

**Python Environment**:
```bash
# Reinstall dependencies
uv sync --extra dev

# Check Python version
python --version  # Should be 3.11+
```

**Solver Issues**:
```bash
# Test CP-SAT availability
python -c "from ortools.sat.python import cp_model; print('CP-SAT available')"

# Fallback to CBC
export DFS_SOLVER_MODE=sampler
```

**Frontend Issues**:
```bash
# Clear Next.js cache
rm -rf .next

# Reinstall dependencies
rm -rf node_modules package-lock.json
npm install
```

### Getting Help

1. **Check Documentation**: Module-specific README files
2. **Review Issues**: Check existing GitHub issues
3. **Run Tests**: `pytest -xvs` for detailed error output
4. **Check Logs**: Process logs in `runs/{run_id}/manifest.json`

## Contributing

### Development Guidelines

1. **Small Changes** (<30 LOC): Direct implementation allowed
2. **Large Changes** (>30 LOC): Create PRP document first
3. **Schema Changes**: Always require tests and documentation
4. **Code Style**: Follow existing patterns and conventions

### Pull Request Process

1. Create feature branch from `main`
2. Implement changes with tests
3. Run full CI pipeline locally
4. Submit PR with clear description
5. Address review feedback
6. Merge after approval

### Code Style

```bash
# Python formatting
black .
ruff check . --fix

# TypeScript/React formatting  
npm run lint
npm run type-check
```

## Deployment

### Production Build

```bash
# Build frontend
npm run build

# Prepare Python environment
uv sync --no-dev

# Set production environment
export NODE_ENV=production
export DFS_SOLVER_MODE=python
```

### Environment Variables

**Required**:
- `NODE_ENV` - Environment (development/production)
- `DATA_ROOT` - Data storage directory path

**Optional**:
- `DFS_SOLVER_MODE` - Solver preference (python/sampler)
- `NEXT_PUBLIC_API_BASE_URL` - API base URL for frontend

## Roadmap

### Near Term (Q1 2025)
- [ ] Enhanced web interface with real-time updates
- [ ] Advanced stacking and correlation models
- [ ] Multi-site support (FanDuel, SuperDraft)
- [ ] Performance optimizations and caching

### Medium Term (Q2-Q3 2025)  
- [ ] Machine learning projection enhancements
- [ ] Real-time contest monitoring
- [ ] Advanced analytics and reporting
- [ ] Mobile-responsive interface improvements

### Long Term (Q4 2025+)
- [ ] Multi-sport support (NFL, MLB, etc.)
- [ ] Collaborative lineup building
- [ ] Integration with external data sources
- [ ] Advanced risk management tools

## License

This project is proprietary software. All rights reserved.

## Support

For technical support, feature requests, or bug reports:

1. **Documentation**: Check module-specific README files
2. **Issues**: Create GitHub issue with detailed description
3. **Development**: Follow contribution guidelines above

---

**Last Updated**: 2025-09-08  
**Version**: 0.1.0  
**Maintainer**: NBA-DFS Development Team
</file>

<file path="app/(studio)/optimizer/page.tsx">
"use client";

import { useState } from "react";
import PageContainer from "../../../components/ui/PageContainer";
import LineupGridPlaceholder, { type GridMode } from "../../../components/ui/LineupGridPlaceholder";
import { LineupViews } from "@/components/lineups/LineupViews";
import { SKELETON_MS } from "../../../lib/ui/constants";
import { prefersReducedMotion } from "../../../lib/ui/a11y";

export default function OptimizerPage() {
  const [mode, setMode] = useState<GridMode>("empty");
  const reduced = prefersReducedMotion();
  function onGridModeChange(m: GridMode) {
    setMode(m);
    if (m === "loading") {
      setTimeout(() => setMode("loaded"), reduced ? 150 : SKELETON_MS);
    }
  }
  return (
    <PageContainer title="Optimizer" gridMode={mode} onGridModeChange={onGridModeChange}>
      {mode === "loaded" ? (
        <LineupViews />
      ) : (
        <LineupGridPlaceholder label="Optimizer Grid" mode={mode} />
      )}
    </PageContainer>
  );
}
</file>

<file path="components/ui/MetricsDrawer.tsx">
"use client";

import { useRef, useState } from "react";
import {
  Sheet,
  SheetContent,
  SheetTrigger,
  SheetHeader,
  SheetTitle,
} from "./sheet";
import { Button } from "./button";
import { Skeleton } from "./skeleton";
import { DRAWER_SKELETON_MS } from "@/lib/ui/constants";
import { prefersReducedMotion } from "@/lib/ui/a11y";
import IngestSummary from "../metrics/IngestSummary";
import RunSummary from "../metrics/RunSummary";

export default function MetricsDrawer() {
  const [loading, setLoading] = useState(false);
  const titleRef = useRef<HTMLHeadingElement>(null);

  return (
    <Sheet>
      <SheetTrigger asChild>
        <Button
          variant="outline"
          className="fixed right-2 bottom-[110px] z-40"
          aria-label="Open metrics drawer"
          aria-controls="metrics-panel"
        >
          Metrics
        </Button>
      </SheetTrigger>
      <SheetContent
        side="right"
        className="w-[450px] sm:max-w-[450px]"
        id="metrics-panel"
        onOpenAutoFocus={(e) => {
          // prevent default auto-focus and move focus to title instead
          e.preventDefault();
          setTimeout(() => titleRef.current?.focus(), 0);
          const reduced = prefersReducedMotion();
          setLoading(true);
          const ms = reduced ? 150 : DRAWER_SKELETON_MS;
          const t = setTimeout(() => setLoading(false), ms);
          // store timer id on element dataset for cleanup
          (e.currentTarget as any)._timerId = t;
        }}
        onCloseAutoFocus={(e) => {
          // cleanup timer and reset loading state
          const anyTarget = e.currentTarget as any;
          if (anyTarget._timerId) clearTimeout(anyTarget._timerId);
          setLoading(false);
        }}
      >
        <SheetHeader>
          <SheetTitle ref={titleRef as any} tabIndex={-1}>Metrics</SheetTitle>
        </SheetHeader>
        <div className="mt-4 h-[calc(100%-3rem)] rounded-md border border-border bg-card/40 p-4">
          {loading ? (
            <div className="space-y-3" role="status" aria-busy>
              <Skeleton className="h-4 w-2/3 motion-reduce:animate-none" />
              <Skeleton className="h-4 w-1/2 motion-reduce:animate-none" />
              <Skeleton className="h-4 w-5/6 motion-reduce:animate-none" />
            </div>
          ) : (
            <div className="space-y-4">
              <IngestSummary />
              <RunSummary />
            </div>
          )}
        </div>
      </SheetContent>
      {/* Spacer for bottom controls */}
      <div className="h-[96px]" />
    </Sheet>
  );
}
</file>

<file path="components/ui/PageContainer.tsx">
"use client";

import ControlsBar from "./ControlsBar";
import type { GridMode } from "./LineupGridPlaceholder";

export default function PageContainer({
  title,
  children,
  gridMode,
  onGridModeChange,
}: {
  title: string;
  children: React.ReactNode;
  gridMode?: GridMode;
  onGridModeChange?: (m: GridMode) => void;
}) {
  return (
    <div className="relative flex flex-col h-full">
      <div className="p-4">
        <div className="mb-4 flex items-center justify-between gap-4">
          <ControlsBar gridMode={gridMode} onGridModeChange={onGridModeChange} />
          <h1 className="text-base font-semibold opacity-80">{title}</h1>
        </div>
        <div className="min-h-[calc(100vh-40px-60px-96px-48px)]">
          {children}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="pipeline/ingest/cli.py">
from __future__ import annotations

import argparse
import hashlib
import json
import sys
from collections.abc import Iterable
from dataclasses import dataclass
from datetime import UTC, datetime
from pathlib import Path
from typing import Any

import pandas as pd
import yaml

from pipeline.io.files import ensure_dir, write_parquet
from pipeline.io.validate import load_schema, validate_obj

RunTypeForSchema = "ingest"  # constrained by RunTypeEnum in schemas


@dataclass(frozen=True)
class MappingSpec:
    name: str
    header_map: dict[str, str]
    # set of headers in source to preserve order in lineage
    source_fields: list[str]


def _utc_now_iso() -> str:
    return datetime.now(UTC).strftime("%Y-%m-%dT%H:%M:%S.000Z")


def _sha256_of_file(path: Path) -> str:
    h = hashlib.sha256()
    with path.open("rb") as f:
        for chunk in iter(lambda: f.read(8192), b""):
            h.update(chunk)
    return h.hexdigest()


def _mint_run_id(now: datetime | None = None, seed_material: str = "") -> str:
    ts = (now or datetime.now(UTC)).strftime("%Y%m%d_%H%M%S")
    short = hashlib.sha1(seed_material.encode("utf-8")).hexdigest()[:8]  # nosec: B303
    return f"{ts}_{short}"


def _load_mapping(path: Path) -> MappingSpec:
    with path.open("r", encoding="utf-8") as f:
        data = yaml.safe_load(f) or {}
    header_map: dict[str, str] = data.get("map", {}) or data.get("mapping", {}) or {}
    if not isinstance(header_map, dict) or not header_map:
        raise ValueError(f"Mapping file {path} missing 'map' or 'mapping' dict")
    name = data.get("name") or path.stem
    return MappingSpec(
        name=name,
        header_map=header_map,
        source_fields=list(header_map.keys()),
    )


def _coerce_numeric(val: Any) -> float | None:
    if val is None or (isinstance(val, float) and pd.isna(val)):
        return None
    if isinstance(val, (int | float)):
        return float(val)
    s = str(val).strip().replace(",", "")
    if s.startswith("$"):
        s = s[1:]
    try:
        return float(s)
    except ValueError:
        return None


def _coerce_int(val: Any) -> int | None:
    f = _coerce_numeric(val)
    return int(f) if f is not None else None


def _normalize_positions(pos: Any) -> str:
    if pos is None:
        return ""
    s = str(pos).upper().replace(" ", "")
    parts = [p for p in s.split("/") if p]
    return "/".join(parts)


def normalize_projections(
    df: pd.DataFrame,
    mapping: MappingSpec,
    slate_id: str,
    source: str,
    updated_ts: str | None,
    content_sha256: str,
) -> pd.DataFrame:
    # Invert mapping: canonical_field -> source_header
    inv = {v: k for k, v in mapping.header_map.items()}
    # Build a working DF with canonical columns
    w: dict[str, Any] = {}
    # Required canonical columns
    w["dk_player_id"] = df[inv.get("dk_player_id", "dk_player_id")]
    w["name"] = df[inv.get("name", "name")]
    w["team"] = df[inv.get("team", "team")].astype(str).str.upper()
    w["pos"] = df[inv.get("pos", "pos")].map(_normalize_positions)
    w["salary"] = df[inv.get("salary", "salary")].map(_coerce_int)
    w["minutes"] = df.get(inv.get("minutes", "minutes"))
    if w["minutes"] is not None:
        w["minutes"] = w["minutes"].map(_coerce_numeric)
    w["proj_fp"] = df[inv.get("proj_fp", "proj_fp")].map(_coerce_numeric)
    # Optional numeric fields
    if inv.get("ceil_fp") in df.columns:
        w["ceil_fp"] = df[inv["ceil_fp"]].map(_coerce_numeric)
    if inv.get("floor_fp") in df.columns:
        w["floor_fp"] = df[inv["floor_fp"]].map(_coerce_numeric)
    if inv.get("own_proj") in df.columns:
        w["own_proj"] = df[inv["own_proj"]].map(_coerce_numeric)

    out = pd.DataFrame(w)
    out.insert(0, "slate_id", slate_id)
    out.insert(1, "source", source)
    out["updated_ts"] = updated_ts or _utc_now_iso()
    out["lineage"] = [
        {
            "mapping": mapping.header_map,
            "source_fields": mapping.source_fields,
            "content_sha256": content_sha256,
        }
        for _ in range(len(out))
    ]
    return out


def apply_latest_wins_priority(
    df: pd.DataFrame,
    source_precedence: tuple[str, ...] = ("manual", "primary", "other"),
) -> pd.DataFrame:
    # Sort by updated_ts, then by precedence index
    prec_map = {s: i for i, s in enumerate(source_precedence)}
    work = df.copy()
    work["_prec"] = work["source"].map(lambda s: prec_map.get(str(s), len(prec_map)))
    work.sort_values(
        ["dk_player_id", "updated_ts", "_prec"],
        ascending=[True, True, False],
        inplace=True,
    )
    # Keep the last occurrence per dk_player_id (latest/lowest precedence index wins)
    deduped = (
        work.groupby("dk_player_id", as_index=False)
        .tail(1)
        .drop(columns=["_prec"])  # type: ignore[no-any-return]
    )
    return deduped.reset_index(drop=True)


def normalize_players(players_csv: Path, now_iso: str | None = None) -> pd.DataFrame:
    df = pd.read_csv(players_csv)
    now = now_iso or _utc_now_iso()
    # Expect columns: dk_player_id, name, team, pos (e.g., "SF/PF")
    if "pos_eligible" in df.columns:
        pos_lists = df["pos_eligible"].apply(lambda s: [p for p in str(s).split("/") if p])
    else:
        pos_lists = df.get("pos")
        if pos_lists is None:
            pos_lists = pd.Series(["" for _ in range(len(df))])
        pos_lists = pos_lists.apply(
            lambda s: [p for p in str(s).upper().replace(" ", "").split("/") if p]
        )
    out = pd.DataFrame(
        {
            "dk_player_id": df["dk_player_id"].astype(str),
            "name": df["name"].astype(str),
            "team": df["team"].astype(str).str.upper(),
            "pos_eligible": pos_lists,
            "first_seen_ts": now,
            "last_seen_ts": now,
        }
    )
    return out


def build_manifest(
    *,
    run_id: str,
    slate_id: str,
    inputs: list[dict[str, Any]],
    outputs: list[dict[str, Any]],
    tags: list[str],
    config: dict[str, Any],
) -> dict[str, Any]:
    return {
        "schema_version": "0.2.1",
        "run_id": run_id,
        "run_type": RunTypeForSchema,
        "slate_id": slate_id,
        "created_ts": _utc_now_iso(),
        "inputs": inputs,
        "config": config,
        "outputs": outputs,
        "tags": tags,
    }


def main(argv: Iterable[str] | None = None) -> int:
    p = argparse.ArgumentParser(
        prog="pipeline.ingest",
        description="Normalize projections + register run (PRP-1)",
    )
    p.add_argument("--slate-id", required=True)
    p.add_argument(
        "--source",
        required=True,
        help="projection source tag: manual|primary|other|<name>",
    )
    p.add_argument("--projections", required=True, type=Path)
    p.add_argument("--player-ids", required=True, type=Path)
    p.add_argument("--mapping", required=True, type=Path)
    p.add_argument(
        "--out-root",
        default=Path("data"),
        type=Path,
        help="root folder for outputs (tests may override)",
    )
    p.add_argument("--tag", action="append", default=[])
    p.add_argument("--validate", dest="validate", action="store_true", default=True)
    p.add_argument("--no-validate", dest="validate", action="store_false")
    p.add_argument("--schemas-root", type=Path, default=Path("pipeline/schemas"))
    args = p.parse_args(list(argv) if argv is not None else None)

    slate_id: str = args.slate_id
    source: str = args.source
    projections_csv: Path = args.projections
    players_csv: Path = args.player_ids
    mapping_path: Path = args.mapping
    out_root: Path = args.out_root
    tags: list[str] = list(args.tag)
    do_validate: bool = bool(args.validate)
    schemas_root: Path = args.schemas_root

    # Safety rail: do not write to workspace data/runs unless explicit out_root provided
    out_root = out_root.resolve()

    # Load mapping and read inputs
    mapping = _load_mapping(mapping_path)
    proj_sha = _sha256_of_file(projections_csv)
    players_sha = _sha256_of_file(players_csv)

    df_raw = pd.read_csv(projections_csv)
    df_norm = normalize_projections(
        df_raw,
        mapping,
        slate_id=slate_id,
        source=source,
        updated_ts=None,
        content_sha256=proj_sha,
    )
    df_norm = apply_latest_wins_priority(df_norm)

    df_players = normalize_players(players_csv)

    # Mint run_id
    run_id = _mint_run_id(seed_material=f"{slate_id}|{source}|{proj_sha[:12]}")

    # Prepare output paths
    ref_dir = out_root / "reference"
    raw_dir = out_root / "projections" / "raw"
    norm_dir = out_root / "projections" / "normalized"
    registry_dir = out_root / "registry"
    runs_dir = out_root / "runs" / "ingest" / run_id
    manifest_path = runs_dir / "manifest.json"

    # Filenames include slate and source and timestamp
    uploaded_ts = _utc_now_iso()
    raw_out = raw_dir / f"{slate_id}__{source}__{uploaded_ts}.parquet"
    norm_out = norm_dir / f"{slate_id}__{source}__{uploaded_ts}.parquet"
    players_out = ref_dir / "players.parquet"
    runs_registry_out = registry_dir / "runs.parquet"

    # Build manifest
    inputs = [
        {"path": str(players_csv), "content_sha256": players_sha, "role": "players"},
        {
            "path": str(projections_csv),
            "content_sha256": proj_sha,
            "role": "config",
        },
        {
            "path": str(mapping_path),
            "content_sha256": _sha256_of_file(mapping_path),
            "role": "config",
        },
    ]
    outputs = [
        {"path": str(players_out), "kind": "players"},
        {"path": str(raw_out), "kind": "projections_raw"},
        {"path": str(norm_out), "kind": "projections_normalized"},
        {"path": str(runs_registry_out), "kind": "runs_registry"},
    ]
    manifest = build_manifest(
        run_id=run_id,
        slate_id=slate_id,
        inputs=inputs,
        outputs=outputs,
        tags=tags,
        config={"source": source, "mapping_name": mapping.name},
    )

    # Validate manifest and a single registry row before any writes
    if do_validate:
        try:
            schema_manifest_path = schemas_root / "manifest.schema.yaml"
            schema_manifest = load_schema(schema_manifest_path)
            validate_obj(
                schema_manifest,
                manifest,
                schemas_root=schemas_root,
                schema_path=schema_manifest_path,
            )
            reg_row_obj = {
                "run_id": run_id,
                "run_type": RunTypeForSchema,
                "slate_id": slate_id,
                "status": "success",
                "primary_outputs": [str(norm_out)],
                "metrics_path": str(runs_dir / "artifacts" / "metrics.json"),
                "created_ts": _utc_now_iso(),
                "tags": tags,
            }
            schema_registry_path = schemas_root / "runs_registry.schema.yaml"
            schema_registry = load_schema(schema_registry_path)
            validate_obj(
                schema_registry,
                reg_row_obj,
                schemas_root=schemas_root,
                schema_path=schema_registry_path,
            )
        except Exception as e:  # validation error
            print(f"Validation error: {e}", file=sys.stderr)
            return 1

    # Create dirs only after validation succeeds
    ensure_dir(ref_dir)
    ensure_dir(raw_dir)
    ensure_dir(norm_dir)
    ensure_dir(registry_dir)
    ensure_dir(runs_dir)

    # Write artifacts
    write_parquet(df_players, players_out)
    write_parquet(df_raw, raw_out)
    write_parquet(df_norm, norm_out)

    with manifest_path.open("w", encoding="utf-8") as f:
        json.dump(manifest, f, indent=2)

    # Append registry (very thin: one row per run)
    reg_row = pd.DataFrame(
        [
            {
                "run_id": run_id,
                "run_type": RunTypeForSchema,
                "slate_id": slate_id,
                "status": "success",
                "primary_outputs": [str(norm_out)],
                "metrics_path": str(runs_dir / "artifacts" / "metrics.json"),
                "created_ts": _utc_now_iso(),
                "tags": tags,
            }
        ]
    )
    # Create or append
    if runs_registry_out.exists():
        existing = pd.read_parquet(runs_registry_out)
        write_parquet(
            pd.concat([existing, reg_row], ignore_index=True),
            runs_registry_out,
        )
    else:
        write_parquet(reg_row, runs_registry_out)

    # Preview
    preview_cols = [
        "slate_id",
        "source",
        "dk_player_id",
        "name",
        "team",
        "pos",
        "salary",
        "minutes",
        "proj_fp",
        "updated_ts",
    ]
    print(df_norm[preview_cols].head().to_string(index=False))
    print("\nArtifacts:")
    for pth in [players_out, raw_out, norm_out, manifest_path, runs_registry_out]:
        print(f" - {pth}")

    return 0
</file>

<file path="processes/api/app.py">
from __future__ import annotations

import json
import logging
import tempfile
import time
from datetime import UTC, datetime
from pathlib import Path
from typing import Any, cast

import pandas as pd
from fastapi import FastAPI, Response
from fastapi.responses import JSONResponse

from processes.api.models import (
    BundleManifest,
    ErrorResponse,
    OrchestratorRunRequest,
    OrchestratorRunResponse,
    RunRegistryRow,
    RunsListResponse,
)
from processes.dk_export import writer as dk_writer
from processes.orchestrator import adapter as orch

app = FastAPI()

logger = logging.getLogger("processes.api")

_RUNS: dict[str, dict[str, Any]] = {}
_METRICS: dict[str, str] = {}


@app.get("/health")  # type: ignore[misc]
def health() -> dict[str, Any]:
    t0 = time.time()
    logger.info(json.dumps({"event": "api_enter", "endpoint": "/health"}))
    out = {
        "ok": True,
        "version": "0.1.0",
        "time": datetime.now(UTC).isoformat(),
    }
    dt = time.time() - t0
    logger.info(json.dumps({"event": "api_exit", "endpoint": "/health", "dt_s": round(dt, 6)}))
    return out


@app.post(
    "/run/orchestrator",
    response_model=OrchestratorRunResponse | ErrorResponse,
)  # type: ignore[misc]
def run_orchestrator(
    req: OrchestratorRunRequest, response: Response
) -> OrchestratorRunResponse | ErrorResponse:
    t0 = time.time()
    logger.info(
        json.dumps(
            {
                "event": "api_enter",
                "endpoint": "/run/orchestrator",
                "slate_id": req.slate_id,
            }
        )
    )
    out_root = Path(req.out_root)
    schemas_root = Path(req.schemas_root)

    with tempfile.TemporaryDirectory() as td:
        cfg_path = Path(td) / "config.json"
        cfg_path.write_text(
            json.dumps(req.config.model_dump(mode="json", exclude_none=True)),
            encoding="utf-8",
        )
        res = orch.run_bundle(
            slate_id=req.slate_id,
            config_path=cfg_path,
            config_kv=None,
            out_root=out_root,
            schemas_root=schemas_root,
            validate=req.validate,
            dry_run=req.dry_run,
            verbose=req.verbose,
        )

    bundle_id = str(res.get("bundle_id"))
    bundle_path = Path(str(res.get("bundle_path", "")))
    stages_map: dict[str, str] = {}
    if bundle_path.exists():
        bundle = json.loads(bundle_path.read_text(encoding="utf-8"))
        for s in bundle.get("stages", []):
            name = str(s.get("name"))
            run_id = str(s.get("run_id"))
            stages_map[name] = run_id
            if name == "sim" and s.get("primary_output"):
                metrics_path = Path(str(s["primary_output"])).with_name("metrics.parquet")
                _METRICS[run_id] = str(metrics_path)
        _RUNS[bundle_id] = {"bundle_path": str(bundle_path)}

    out = OrchestratorRunResponse(
        bundle_id=bundle_id,
        bundle_path=str(bundle_path),
        stages=stages_map,
        run_registry_path=None,
    )
    dt = time.time() - t0
    logger.info(
        json.dumps(
            {
                "event": "api_exit",
                "endpoint": "/run/orchestrator",
                "dt_s": round(dt, 6),
                "bundle_id": bundle_id,
            }
        )
    )
    return out


@app.get(
    "/runs/{run_id}",
    response_model=BundleManifest | ErrorResponse,
)  # type: ignore[misc]
def get_run(run_id: str, response: Response) -> BundleManifest | ErrorResponse:
    t0 = time.time()
    logger.info(
        json.dumps(
            {
                "event": "api_enter",
                "endpoint": "/runs/{run_id}",
                "run_id": run_id,
            }
        )
    )
    info = _RUNS.get(run_id)
    if not info:
        response.status_code = 404
        return ErrorResponse(error="not_found", detail="run not found")
    bundle_path = Path(info["bundle_path"])
    if not bundle_path.exists():
        response.status_code = 404
        return ErrorResponse(error="not_found", detail="bundle manifest not found")
    bundle = json.loads(bundle_path.read_text(encoding="utf-8"))
    out = cast(BundleManifest, BundleManifest.model_validate(bundle))
    dt = time.time() - t0
    logger.info(
        json.dumps(
            {
                "event": "api_exit",
                "endpoint": "/runs/{run_id}",
                "dt_s": round(dt, 6),
            }
        )
    )
    return out


@app.get(
    "/metrics/{run_id}",
    response_model=list[dict[str, Any]] | ErrorResponse,
)  # type: ignore[misc]
def get_metrics(run_id: str, response: Response) -> list[dict[str, Any]] | ErrorResponse:
    t0 = time.time()
    logger.info(
        json.dumps(
            {
                "event": "api_enter",
                "endpoint": "/metrics/{run_id}",
                "run_id": run_id,
            }
        )
    )
    path_str = _METRICS.get(run_id)
    if not path_str:
        response.status_code = 404
        return ErrorResponse(error="not_found", detail="metrics not found")
    path = Path(path_str)
    if not path.exists():
        response.status_code = 404
        return ErrorResponse(error="not_found", detail="metrics not found")
    df = pd.read_parquet(path)
    out = cast(list[dict[str, Any]], df.to_dict(orient="records"))
    dt = time.time() - t0
    logger.info(
        json.dumps(
            {
                "event": "api_exit",
                "endpoint": "/metrics/{run_id}",
                "dt_s": round(dt, 6),
            }
        )
    )
    return out


@app.get(
    "/runs",
    response_model=RunsListResponse | ErrorResponse,
)  # type: ignore[misc]
def list_runs(
    response: Response, registry_path: str | None = None
) -> RunsListResponse | ErrorResponse:
    """List runs discovered in the registry parquet.

    Returns 404 if the registry is missing.
    """
    t0 = time.time()
    # Response provided by FastAPI injection
    logger.info(
        json.dumps(
            {
                "event": "api_enter",
                "endpoint": "/runs",
                "registry_path": registry_path,
            }
        )
    )
    reg_path = Path(registry_path or Path("data") / "registry" / "runs.parquet")
    if not reg_path.exists():
        response.status_code = 404
        return ErrorResponse(error="not_found", detail="registry not found")
    try:
        df = pd.read_parquet(reg_path)
    except Exception as e:  # pragma: no cover
        response.status_code = 500
        return ErrorResponse(error="internal_error", detail=f"failed to read registry: {e}")
    rows = cast(list[dict[str, Any]], df.to_dict(orient="records"))
    models = [RunRegistryRow.model_validate(r) for r in rows]
    out = RunsListResponse(runs=models)
    dt = time.time() - t0
    logger.info(
        json.dumps(
            {
                "event": "api_exit",
                "endpoint": "/runs",
                "dt_s": round(dt, 6),
                "count": len(models),
            }
        )
    )
    return out


def _find_manifest_for_run(run_id: str, runs_root: Path) -> tuple[str, Path]:
    """Return (run_type, manifest_path) for the first matching run dir.

    Searches known run types under `runs_root`.
    """
    for rt in ("sim", "variants", "field", "optimizer", "ingest", "metrics"):
        m = runs_root / rt / run_id / "manifest.json"
        if m.exists():
            return rt, m
    raise FileNotFoundError("manifest not found for run_id")


@app.get(
    "/export/dk/{run_id}",
    responses={
        404: {"model": ErrorResponse},
        422: {"model": ErrorResponse},
        400: {"model": ErrorResponse},
    },
)  # type: ignore[misc]
def export_dk_csv(
    run_id: str,
    response: Response,
    runs_root: str | None = None,
    top_n: int = 20,
    dedupe: bool = True,
) -> Response:
    """Generate a DK-uploadable CSV from a run (sim or variants).

    - For sim runs: ranks entrants by EV (mean prize) from sim_results.
    - For variants runs: uses variant_catalog order (first N) and `export_csv_row`.

    On error, returns JSON matching ErrorResponse model.
    """
    t0 = time.time()
    logger.info(
        json.dumps(
            {
                "event": "api_enter",
                "endpoint": "/export/dk/{run_id}",
                "run_id": run_id,
                "top_n": top_n,
                "dedupe": bool(dedupe),
            }
        )
    )
    # Response provided by FastAPI injection
    root = Path(runs_root or "runs")
    try:
        run_type, manifest_path = _find_manifest_for_run(run_id, root)
    except FileNotFoundError:
        return JSONResponse(
            status_code=404,
            content={"error": "not_found", "detail": "run manifest not found"},
        )

    if run_type == "sim":
        try:
            sim_path, field_path = dk_writer.discover_from_sim_run(run_id, root)
            sim_df = pd.read_parquet(sim_path)
            field_df = pd.read_parquet(field_path)
            export_df = dk_writer.build_export_df(
                sim_df, field_df, top_n=int(top_n), dedupe=bool(dedupe)
            )
        except Exception as e:
            return JSONResponse(
                status_code=422,
                content={"error": "invalid_export", "detail": str(e)},
            )
    elif run_type == "variants":
        # Discover variant_catalog and derive export rows from export_csv_row
        data = json.loads(manifest_path.read_text(encoding="utf-8"))
        catalog_path: Path | None = None
        for obj in data.get("outputs", []):
            if obj.get("kind") == "variant_catalog":
                catalog_path = Path(str(obj["path"]))
                break
        if catalog_path is None or not catalog_path.exists():
            return JSONResponse(
                status_code=404,
                content={
                    "error": "not_found",
                    "detail": "variant catalog not found",
                },
            )
        cat_df = pd.read_parquet(catalog_path)
        if "export_csv_row" not in cat_df.columns:
            return JSONResponse(
                status_code=422,
                content={"error": "invalid_export", "detail": "export_csv_row missing"},
            )
        # Build DataFrame with DK columns from export_csv_row
        rows: list[dict[str, Any]] = []
        for _, row in cat_df.head(int(top_n)).iterrows():
            tokens = dk_writer._parse_export_row(str(row.get("export_csv_row", "")))
            players = [tokens.get(slot, "") for slot in dk_writer.DK_SLOTS_ORDER]
            if "" in players:
                return JSONResponse(
                    status_code=422,
                    content={
                        "error": "invalid_export",
                        "detail": "invalid export_csv_row in catalog",
                    },
                )
            rows.append(dict(zip(dk_writer.DK_SLOTS_ORDER, players, strict=True)))
        export_df = pd.DataFrame(rows)
    else:
        return JSONResponse(
            status_code=400,
            content={"error": "unsupported_run_type", "detail": f"{run_type}"},
        )

    # Serialize CSV with DK header order only
    csv_text = export_df.to_csv(columns=dk_writer.DK_SLOTS_ORDER, index=False)
    dt = time.time() - t0
    logger.info(
        json.dumps(
            {
                "event": "api_exit",
                "endpoint": "/export/dk/{run_id}",
                "dt_s": round(dt, 6),
                "rows": int(len(export_df)),
            }
        )
    )
    return Response(content=csv_text, media_type="text/csv")


@app.get("/logs/{run_id}", response_model=dict[str, Any])  # type: ignore[misc]
def get_logs(run_id: str, runs_root: str | None = None) -> dict[str, Any]:
    """Return placeholder logs/debug info for a run.

    If a `logs.txt` exists under the run dir, return its content; otherwise a stub.
    """
    t0 = time.time()
    logger.info(
        json.dumps(
            {
                "event": "api_enter",
                "endpoint": "/logs/{run_id}",
                "run_id": run_id,
            }
        )
    )
    root = Path(runs_root or "runs")
    try:
        run_type, manifest_path = _find_manifest_for_run(run_id, root)
    except FileNotFoundError:
        return {"error": "not_found", "detail": "run manifest not found"}
    run_dir = manifest_path.parent
    logs_path = run_dir / "logs.txt"
    if logs_path.exists():
        content = logs_path.read_text(encoding="utf-8")
        out = {"run_id": run_id, "run_type": run_type, "logs": content}
    else:
        out = {"run_id": run_id, "run_type": run_type, "message": "logs not available"}
    dt = time.time() - t0
    logger.info(
        json.dumps(
            {
                "event": "api_exit",
                "endpoint": "/logs/{run_id}",
                "dt_s": round(dt, 6),
            }
        )
    )
    return out
</file>

<file path="tests/conftest.py">
from __future__ import annotations

import os
import sys
from pathlib import Path

import pytest

# Ensure project root is on sys.path for package imports like `pipeline.*`
ROOT = Path(__file__).resolve().parents[1]
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))

# Default to stub sampler for tests unless overridden by env
os.environ.setdefault("FIELD_SAMPLER_IMPL", "tests.fixtures.stub_field_sampler:run_sampler")


def pytest_collection_modifyitems(config, items):
    skip = pytest.mark.skip(reason="Temporarily skipped during stabilization (FS-07)")
    for item in items:
        if "smoke" not in item.keywords:
            item.add_marker(skip)
</file>

<file path="package.json">
{
  "private": true,
  "scripts": {
    "dev": "next dev -p 3000",
    "build": "next build",
    "start": "next start -p 3000",
    "test": "vitest run",
    "test:e2e": "playwright test",
    "test:e2e:ui": "playwright test --ui",
    "test:e2e:headed": "playwright test --headed"
  },
  "devDependencies": {
    "@playwright/test": "^1.55.0",
    "@types/node": "24.3.1",
    "@types/react": "19.1.12",
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.47",
    "shadcn": "^3.2.1",
    "tailwindcss": "^3.4.10",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "5.9.2",
    "vitest": "^3.2.4"
  },
  "dependencies": {
    "@radix-ui/react-collapsible": "^1.1.12",
    "@radix-ui/react-dialog": "^1.1.15",
    "@radix-ui/react-dropdown-menu": "^2.1.16",
    "@radix-ui/react-scroll-area": "^1.2.10",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slider": "^1.3.6",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tabs": "^1.1.13",
    "@radix-ui/react-toggle": "^1.1.10",
    "@radix-ui/react-tooltip": "^1.2.8",
    "@tanstack/react-table": "^8.21.3",
    "@tanstack/react-virtual": "^3.13.12",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "lucide-react": "^0.452.0",
    "next": "^14.2.10",
    "next-themes": "^0.4.6",
    "papaparse": "^5.5.3",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-dropzone": "^14.3.8",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.2",
    "zod": "^3.25.76",
    "zustand": "^5.0.8"
  }
}
</file>

<file path="components/ui/ControlsBar.tsx">
"use client";

import { useEffect, useState } from "react";
import { Button } from "./button";
import { useRunStore } from "@/lib/state/run-store";
import type { GridMode } from "./LineupGridPlaceholder";
import { Input } from "./input";
import { Slider } from "./slider";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "./tooltip";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "./collapsible";
import { Card } from "./card";
import { Badge } from "./badge";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuTrigger,
} from "./dropdown-menu";
import { ChevronDown, Settings2, Zap, Target, FolderOpen } from "lucide-react";
import LoadRunModal from "@/components/runs/LoadRunModal";

export default function ControlsBar({
  gridMode,
  onGridModeChange,
}: {
  gridMode?: GridMode;
  onGridModeChange?: (m: GridMode) => void;
}) {
  const { status, reset, options, setOptions, runSolve } = useRunStore();
  const showDev = process.env.NEXT_PUBLIC_DEV_UI === "true" && onGridModeChange;

  // New UX controls state
  const [nLineups, setNLineups] = useState<number>(5);
  const [penaltyEnabled, setPenaltyEnabled] = useState<boolean>(false);
  const [lambdaVal, setLambdaVal] = useState<number>(8);
  const [penaltyCurve, setPenaltyCurve] = useState<"linear" | "g_curve">("linear");
  const [dropIntensity, setDropIntensity] = useState<number>(0.2);
  const [seed, setSeed] = useState<number>(Number(options.seed) || 42);
  const [sigma, setSigma] = useState<number>(0.07);
  const [minUniques, setMinUniques] = useState<number>(1);
  const [projectionsPath, setProjectionsPath] = useState<string>("");
  const [playerIdsPath, setPlayerIdsPath] = useState<string>("");
  const [showLoad, setShowLoad] = useState<boolean>(false);

  // Persist file paths
  useEffect(() => {
    try {
      const last = JSON.parse(localStorage.getItem("dfs_paths") ?? "{}");
      setProjectionsPath(last.projectionsPath ?? "tests/fixtures/dk/2024-01-15/projections.csv");
      setPlayerIdsPath(last.playerIdsPath ?? "tests/fixtures/dk/2024-01-15/player_ids.csv");
    } catch {}
  }, []);
  useEffect(() => {
    try {
      localStorage.setItem("dfs_paths", JSON.stringify({ projectionsPath, playerIdsPath }));
    } catch {}
  }, [projectionsPath, playerIdsPath]);

  const onRunClick = () =>
    runSolve({
      site: "dk",
      projectionsPath,
      playerIdsPath,
      nLineups,
      minUniques,
      penaltyEnabled,
      lambdaVal,
      penaltyCurve,
      dropIntensity,
      seed,
      sigma,
    });

  // Sync grid placeholder mode with run status so results view appears
  useEffect(() => {
    if (!onGridModeChange) return;
    if (status === "running") onGridModeChange("loading");
    else if (status === "done" || status === "error") onGridModeChange("loaded");
    else if (status === "idle") onGridModeChange("empty");
  }, [status, onGridModeChange]);

  return (
    <TooltipProvider>
      <Card className="w-96 bg-card/50 backdrop-blur-sm">
        <div className="p-3">
          {/* Compact Header with Run Button */}
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center gap-2">
              <Settings2 className="h-4 w-4 text-muted-foreground" />
              <span className="text-sm font-medium">Settings</span>
            </div>
            <Button onClick={onRunClick} disabled={status === "running"} size="sm" className="h-8">
              {status === "running" ? (
                <span className="inline-flex items-center gap-1">
                  <svg
                    className="animate-spin h-3 w-3"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                    aria-hidden
                  >
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z" />
                  </svg>
                  Running…
                </span>
              ) : (
                <span className="inline-flex items-center gap-1">
                  <Zap className="h-3 w-3" />
                  Run
                </span>
              )}
            </Button>
          </div>

          {/* Compact Core Settings Row */}
          <div className="flex items-center gap-3 mb-3">
            <div className="flex items-center gap-1">
              <label className="text-xs text-muted-foreground">Lineups:</label>
              <Input
                className="w-14 h-7 text-xs"
                type="number"
                value={nLineups}
                onChange={(e) => setNLineups(Math.max(1, Math.min(150, Number(e.target.value || 1))))}
                min={1}
                max={150}
              />
            </div>
            <div className="flex items-center gap-1">
              <label className="text-xs text-muted-foreground">Seed:</label>
              <Input
                className="w-12 h-7 text-xs"
                value={String(seed)}
                onChange={(e) => setSeed(Number(e.target.value || 0))}
              />
            </div>
            <div className="flex items-center gap-1">
              <label className="text-xs text-muted-foreground">Uniques:</label>
              <Input
                className="w-12 h-7 text-xs"
                type="number"
                value={minUniques}
                onChange={(e) => setMinUniques(Math.max(0, Math.min(5, Number(e.target.value || 0))))}
                min={0}
                max={5}
              />
            </div>
          </div>

          {/* Ownership Penalty - Always Visible Compact Row */}
          <div className="rounded border bg-muted/30 p-2 mb-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <input
                  id="ownershipPenalty"
                  type="checkbox"
                  className="h-3 w-3 rounded"
                  checked={Boolean(penaltyEnabled)}
                  onChange={(e) => setPenaltyEnabled(e.target.checked)}
                />
                <label htmlFor="ownershipPenalty" className="text-xs font-medium select-none flex items-center gap-1">
                  <Target className="h-3 w-3" />
                  Ownership Penalty
                </label>
                {penaltyEnabled && (
                  <Badge variant="secondary" className="text-xs px-1 py-0 h-4">
                    Active
                  </Badge>
                )}
              </div>
              
              {penaltyEnabled && (
                <div className="flex items-center gap-2">
                  <div className="flex items-center gap-1">
                    <label className="text-xs text-muted-foreground">λ:</label>
                    <Input
                      className="w-12 h-6 text-xs"
                      type="number"
                      value={lambdaVal}
                      onChange={(e) => setLambdaVal(Math.max(0, Math.min(50, Number(e.target.value || 0))))}
                      min={0}
                      max={50}
                    />
                  </div>
                  <select
                    className="h-6 bg-background border border-input rounded px-1 text-xs"
                    value={penaltyCurve}
                    onChange={(e) => setPenaltyCurve((e.target.value as any) === "g_curve" ? "g_curve" : "linear")}
                  >
                    <option value="linear">Linear</option>
                    <option value="g_curve">G-curve</option>
                  </select>
                </div>
              )}
            </div>
          </div>

          {/* Advanced Settings & Actions Row */}
          <div className="flex items-center justify-between relative">
            {/* Advanced Dropdown Menu */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="h-6 px-2 text-xs">
                  <ChevronDown className="h-3 w-3 mr-1" />
                  Advanced
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start" side="right" className="w-80 p-3">
                <div className="space-y-3">
                  {/* Variance Controls */}
                  <div className="grid grid-cols-2 gap-3">
                    <div>
                      <div className="flex items-center justify-between mb-1">
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <label className="text-xs font-medium text-muted-foreground cursor-help">Sigma</label>
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>Randomness applied to projections. 0 = deterministic; 0.25 = high variance.</p>
                          </TooltipContent>
                        </Tooltip>
                        <span className="text-xs text-muted-foreground">{sigma.toFixed(3)}</span>
                      </div>
                      <Slider
                        value={[Math.max(0, Math.min(0.25, sigma))]}
                        min={0}
                        max={0.25}
                        step={0.005}
                        onValueChange={(v) => setSigma(v?.[0] ?? 0)}
                        className="mt-1"
                        data-testid="sigma-slider"
                        aria-label="Sigma"
                      />
                    </div>
                    
                    <div>
                      <div className="flex items-center justify-between mb-1">
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <label className="text-xs font-medium text-muted-foreground cursor-help">Drop</label>
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>Prunes low-projection players to speed up search. 0 = keep all; 0.5 = aggressive pruning.</p>
                          </TooltipContent>
                        </Tooltip>
                        <span className="text-xs text-muted-foreground">{dropIntensity.toFixed(3)}</span>
                      </div>
                      <Slider
                        value={[Math.max(0, Math.min(0.5, dropIntensity))]}
                        min={0}
                        max={0.5}
                        step={0.01}
                        onValueChange={(v) => setDropIntensity(v?.[0] ?? 0)}
                        className="mt-1"
                        data-testid="drop-slider"
                        aria-label="Drop intensity"
                      />
                    </div>
                  </div>

                  {/* Additional Settings */}
                  <div className="grid grid-cols-4 gap-2">
                    <div>
                      <label className="block text-xs text-muted-foreground mb-1">Candidates</label>
                      <Input
                        className="h-6 text-xs"
                        type="number"
                        value={Number(options.candidates ?? 0)}
                        onChange={(e) => setOptions({ candidates: Math.max(0, Number(e.target.value || 0)) })}
                        min={0}
                      />
                    </div>
                    <div>
                      <label className="block text-xs text-muted-foreground mb-1">Team Cap</label>
                      <Input
                        className="h-6 text-xs"
                        type="number"
                        value={Number(options.teamCap ?? 0)}
                        onChange={(e) => setOptions({ teamCap: Math.max(0, Number(e.target.value || 0)) })}
                        min={0}
                      />
                    </div>
                    <div>
                      <label className="block text-xs text-muted-foreground mb-1">Salary Cap</label>
                      <Input
                        className="h-6 text-xs"
                        type="number"
                        value={Number(options.salaryCap ?? 0)}
                        onChange={(e) => setOptions({ salaryCap: Math.max(0, Number(e.target.value || 0)) })}
                        min={0}
                      />
                    </div>
                    <div>
                      <label className="block text-xs text-muted-foreground mb-1">Min Salary</label>
                      <Input
                        className="h-6 text-xs"
                        type="number"
                        value={Number(options.minSalary ?? 0)}
                        onChange={(e) => setOptions({ minSalary: Math.max(0, Number(e.target.value || 0)) })}
                        min={0}
                      />
                    </div>
                  </div>
                </div>
              </DropdownMenuContent>
            </DropdownMenu>
            
            <div className="flex gap-1">
              <Button variant="outline" onClick={() => setShowLoad(true)} disabled={status === "running"} size="sm" className="h-6 px-2 text-xs">
                <FolderOpen className="h-3 w-3 mr-1" /> Load
              </Button>
              <Button variant="outline" onClick={() => reset()} disabled={status === "running"} size="sm" className="h-6 px-2 text-xs">
                Reset
              </Button>
              {showDev && (
                <div className="flex gap-1" aria-label="Dev grid state toggles">
                  <Button
                    variant={gridMode === "empty" ? "default" : "outline"}
                    size="sm"
                    onClick={() => onGridModeChange?.("empty")}
                    className="text-xs px-1 h-6 w-6"
                  >
                    E
                  </Button>
                  <Button
                    variant={gridMode === "loading" ? "default" : "outline"}
                    size="sm"
                    onClick={() => onGridModeChange?.("loading")}
                    className="text-xs px-1 h-6 w-6"
                  >
                    L
                  </Button>
                  <Button
                    variant={gridMode === "loaded" ? "default" : "outline"}
                    size="sm"
                    onClick={() => onGridModeChange?.("loaded")}
                    className="text-xs px-1 h-6 w-6"
                  >
                    D
                  </Button>
                </div>
              )}
            </div>
          </div>
        </div>
        <LoadRunModal open={showLoad} onClose={() => setShowLoad(false)} />
      </Card>
    </TooltipProvider>
  );
}
</file>

<file path="components/ui/UploadDropzone.tsx">
"use client";

import { useEffect, useState } from "react";
import { CheckCircle, FileText, Upload, Loader2, AlertCircle } from "lucide-react";
import { Dropzone, DropzoneContent, DropzoneEmptyState } from "./dropzone";
import { Button } from "./button";
import { Card } from "./card";
import { Badge } from "./badge";
import { toast } from "./sonner";
import { UPLOAD_MIN_MS } from "@/lib/ui/constants";
import { prefersReducedMotion } from "@/lib/ui/a11y";
import { useIngestStore } from "@/lib/state/ingest-store";
import { cn } from "@/lib/utils";

type Props = { spotlight?: boolean };
type UploadState = "idle" | "loading" | "success" | "error";

export default function UploadDropzone({ spotlight = false }: Props) {
  const [state, setState] = useState<UploadState>("idle");
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);
  const reduced = prefersReducedMotion();

  async function handleFiles(files: File[]) {
    if (files.length === 0) return;
    
    const bad = files.find((f) => !f.name.toLowerCase().endsWith(".csv"));
    if (bad) {
      setState("error");
      toast.error("Only .csv files are supported");
      setTimeout(() => setState("idle"), 2000);
      return;
    }

    setState("loading");
    const delay = reduced ? 200 : UPLOAD_MIN_MS;
    
    try {
      const ingest = useIngestStore.getState().ingestCsv;
      for (const f of files) {
        await ingest(f);
      }
      
      setTimeout(() => {
        setState("success");
        setUploadedFiles(files);
        toast.success("CSV files ingested successfully");
      }, delay);
    } catch (e: any) {
      setState("error");
      toast.error(e?.message ?? "Failed to ingest CSV");
      setTimeout(() => setState("idle"), 2000);
    }
  }

  const handleReplace = () => {
    setState("idle");
    setUploadedFiles([]);
  };

  return (
    <Card className="w-[240px] bg-card/50 backdrop-blur-sm">
      <Dropzone
        accept={{ "text/csv": [".csv"] }}
        maxFiles={10}
        onDrop={handleFiles}
        onError={(error) => {
          setState("error");
          toast.error(error.message);
          setTimeout(() => setState("idle"), 2000);
        }}
        disabled={state === "loading"}
        src={uploadedFiles.length > 0 ? uploadedFiles : undefined}
        className={cn(
          "h-[52px] w-full px-3 py-2 flex-col items-start justify-center gap-1 text-sm border-dashed transition-all rounded-md",
          spotlight && "shadow-[inset_0_0_0_1px_rgba(255,255,255,0.08)]",
          state === "success" && "border-green-500/50 bg-green-500/10",
          state === "error" && "border-red-500/50 bg-red-500/10", 
          state === "loading" && "border-blue-500/50 bg-blue-500/10",
          state === "idle" && "border-border/50 hover:border-border/80 hover:bg-accent/20"
        )}
      >
        {state === "idle" && uploadedFiles.length === 0 && (
          <DropzoneEmptyState className="flex-col items-center justify-center gap-1 w-full h-full">
            <Upload className="h-4 w-4 text-muted-foreground" />
            <span className="text-xs text-muted-foreground text-center leading-tight">
              Drag & drop projections.csv / player_ids.csv
            </span>
          </DropzoneEmptyState>
        )}

        {state === "loading" && (
          <div className="flex flex-col items-center gap-1 w-full h-full justify-center">
            <Badge variant="secondary" className="bg-blue-500/20 text-blue-600 border-blue-500/30">
              <Loader2 className="h-3 w-3 mr-1 animate-spin" />
              Uploading
            </Badge>
            <span className="text-xs text-blue-500/80">Processing files...</span>
          </div>
        )}

        {state === "success" && uploadedFiles.length > 0 && (
          <div className="flex flex-col items-center justify-center gap-1 w-full h-full">
            <Badge variant="secondary" className="bg-green-500/20 text-green-600 border-green-500/30">
              <CheckCircle className="h-3 w-3 mr-1" />
              Files loaded
            </Badge>
            <Button
              variant="ghost"
              size="sm"
              onClick={handleReplace}
              className="h-5 px-2 text-xs hover:bg-accent/50 hover:text-foreground"
              data-testid="replace-upload-button"
            >
              Replace
            </Button>
          </div>
        )}

        {state === "error" && (
          <div className="flex flex-col items-center gap-1 w-full h-full justify-center">
            <Badge variant="destructive" className="bg-red-500/20 text-red-600 border-red-500/30">
              <AlertCircle className="h-3 w-3 mr-1" />
              CSV only
            </Badge>
            <span className="text-xs text-red-500/80 text-center">Only .csv files supported</span>
          </div>
        )}

        {uploadedFiles.length > 0 && state !== "success" && state !== "error" && (
          <DropzoneContent className="flex-row items-center justify-between w-full">
            <div className="flex items-center gap-2">
              <FileText className="h-4 w-4 text-muted-foreground" />
              <span className="text-sm font-medium truncate max-w-[200px]">
                {uploadedFiles.map(f => f.name).join(", ")}
              </span>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={handleReplace}
              className="h-6 px-2 text-xs hover:bg-transparent hover:text-primary"
            >
              Replace
            </Button>
          </DropzoneContent>
        )}
      </Dropzone>
    </Card>
  );
}
</file>

<file path="pyproject.toml">
[project]
name = "nba-dfs"
version = "0.1.0"
requires-python = ">=3.11,<3.12"
description = "NBA DFS pipeline"
authors = [{ name="Daniel Schrengost" }]
dependencies = [
  "pandas",
  "duckdb",
  "pyarrow",
  "pydantic",
  "streamlit",
  "fastapi",
  "numpy",
  "pulp",
  "ortools",
]

# Development dependencies managed by uv dependency groups
[dependency-groups]
dev = [
  "ruff>=0.6.9",
  "black>=24.8.0",
  "mypy>=1.11.2",
  "pytest>=8.3.2",
  "pytest-cov>=5.0.0",
  "trio>=0.25.0",
  # Lint/validate schemas used by PRP-0 (optional but recommended)
  "yamllint>=1.35.1",
  "jsonschema>=4.23.0",
  "pyyaml>=6.0.2",
  "types-pyyaml>=6.0.12.20240917",
  "httpx>=0.27,<0.28",
  "types-requests>=2.32.4.20250809",
  "pydantic>=2.11.7",
]

[tool.uv]
default-groups = ["dev"]

# Mirror dev tools as an extra for compatibility with `uv sync --extra dev`
[project.optional-dependencies]
dev = [
  "ruff>=0.6.9",
  "black>=24.8.0",
  "mypy>=1.11.2",
  "pytest>=8.3.2",
  "pytest-cov>=5.0.0",
  "trio>=0.25.0",
  "yamllint>=1.35.1",
  "jsonschema>=4.23.0",
  "pyyaml>=6.0.2",
  "types-PyYAML>=6.0.12.20240917",
  "httpx>=0.27,<0.28",
]


[tool.black]
line-length = 100
target-version = ["py311"]
extend-exclude = '''
(
  processes/optimizer/_legacy/
  | frontend/
  | app/streamlit/
)
'''

[tool.ruff]
line-length = 100
target-version = "py311"
extend-exclude = ["processes/optimizer/_legacy", "frontend", "app/streamlit", "processes/variants/_legacy", "processes/field_sampler/_legacy"]

[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "F",   # pyflakes
  "I",   # isort (import sorting)
  "B",   # flake8-bugbear
  "UP",  # pyupgrade
]
ignore = ["E501"]  # Black owns wrapping

[tool.ruff.lint.isort]
known-first-party = ["pipeline", "processes", "app"]


[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["F401"]
"tests/**" = ["F401", "F841", "B008", "B018", "E402"]


[tool.mypy]
python_version = "3.11"
plugins = ["pydantic.mypy"]
strict = true
pretty = true
show_error_codes = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
disallow_subclassing_any = true
disallow_any_generics = true
no_implicit_optional = true
# Keep this for other 3rd-party libs, but don't let it affect pydantic:
ignore_missing_imports = true
follow_imports = "skip"
# Let mypy check all our process modules by default (include API):
files = ["processes/**/*.py"]
exclude = "(?x)(^processes/optimizer/_legacy/|^frontend/|^app/streamlit/)"

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = false
warn_unused_ignores = false
warn_return_any = false

[[tool.mypy.overrides]]
module = [
  "processes.optimizer._legacy",
  "processes.optimizer._legacy.*",
]
ignore_errors = true

# IMPORTANT: ensure pydantic isn't ignored

[[tool.mypy.overrides]]
module = ["pydantic", "pydantic.*"]
ignore_missing_imports = false

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[[tool.mypy.overrides]]
module = [
  "processes.api.models",
]
disallow_subclassing_any = false

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-q"
markers = ["smoke: minimal tests that should always run"]
</file>

<file path=".gitignore">
# ---- Python caches ----
__pycache__/
*.py[cod]
*.pyo
.pytest_cache/
.coverage
.mypy_cache/
.ruff_cache/

# ---- Node / Next.js ----
node_modules/
.next/
*.tsbuildinfo
npm-debug.log*
pnpm-debug.log*
yarn-debug.log*
yarn-error.log*

# ---- Local env (do NOT commit) ----
# Keep .env out of Git, but don't accidentally delete it when cleaning:
.env

# ---- Docs you don't want in repo (adjust as needed) ----


# Playwright artifacts
playwright-report/
test-results/
</file>

</files>
