
# PRP-SIM-01 — Minimal Sim Metrics
**Date:** 2025-09-10  
**Owner:** Daniel S.  
**Status:** Proposed

---

## GitHub Actions (Start)
- **Branch:** `git switch -c feat/sim-01-min-metrics`
- **Draft PR:** `gh pr create -B main -t "PRP-SIM-01: minimal sim metrics" -b "Emit schema-valid sim metrics (ROI, finish, dup bins) + tests." -d`

---

## Summary
Implement baseline **simulation metrics** aligned with `pipeline/schemas/sim_metrics.schema.yaml`.  
Outputs written to `runs/{slate_id}/{run_id}/sim/metrics.json` and surfaced in `manifest.json.metrics_head`.

### Goals
- Compute & save **ROI distribution** (mean, stdev, percentiles).
- Compute **finish placement distributions** (top 1%, 10%, cash line).
- Compute **duplication bins** (counts/fractions of duplicate lineups).
- Emit schema-valid `metrics.json` and propagate compact `metrics_head`.
- Deterministic when seed provided.

### Non-Goals
- Advanced bankroll curves or Sortino/Sharpe (future PRP-SIM-02).
- Visualizations (defer to UI PRPs).

---

## Allowed Paths
```
processes/gpp_sim/**
pipeline/schemas/**
docs/PRPs/PRP-SIM-01-*.md
tests/sim/**
```

---

## Artifact Layout
```
runs/{slate_id}/{run_id}/sim/
  results.parquet         # per-lineup results, already produced
  metrics.json            # new, schema-valid sim metrics
```

`metrics.json` (aligned to `sim_metrics.schema.yaml`):
```json
{
  "roi": {
    "mean": 0.012,
    "stdev": 0.35,
    "p50": -0.02,
    "p95": 1.15
  },
  "finish_pctiles": {
    "p1": 0.01,
    "p10": 0.12,
    "cash": 0.45
  },
  "duplication": {
    "unique_fraction": 0.67,
    "dup_fraction": 0.33,
    "dup_bins": [ [2, 0.20], [3, 0.10], [5, 0.03] ]
  }
}
```

---

## Implementation Notes
- Use existing sim results (payouts + placements) to compute ROI and finish metrics.
- Dup bins: group by lineup hash → compute frequency distribution.
- Persist as JSON via `pipeline/io` helpers (no raw `open()`).
- Update orchestrator to copy `roi_mean`, `roi_p50`, `dup_p95` into `manifest.json.metrics_head`.

---

## Tests
Location: `tests/sim/`
- **test_metrics_schema.py** — validates `metrics.json` against schema.
- **test_determinism.py** — same seed → stable metrics.
- **test_invariants.py** — ROI mean ~0 across full field; dup fractions sum ≤ 1.0.
- **test_head_propagation.py** — orchestrator manifest includes `metrics_head`.

---

## Acceptance Criteria
- [ ] `sim/metrics.json` always produced and schema-valid.
- [ ] ROI distribution, finish distributions, and dup bins included.
- [ ] Deterministic with seed (tolerance on float metrics).
- [ ] Orchestrator updates manifest with compact `metrics_head`.
- [ ] All new tests pass locally and in CI.

---

## GitHub Actions (End)
- **Push branch:** `git push -u origin HEAD`
- **Ready PR:** `gh pr ready`
- **Rebase:** `git fetch origin && git rebase origin/main`
- **Merge:** `gh pr merge --squash --delete-branch`

---

## Appendix — Metrics Head Example
```json
{
  "roi_mean": 0.012,
  "roi_p50": -0.02,
  "dup_p95": 0.05
}
```
